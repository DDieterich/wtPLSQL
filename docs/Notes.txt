
Basic Features:
---------------
-) Test anything in the Oracle database:
   -) PL/SQL Packages, Procedures, Functions
   -) Table Constraints and Triggers
   -) Types and Type Bodies
-) Testing of Private Procedure/Function within a Packages
-) Automatic Code Coverage
-) Automatic Test Execution
-) Test Result Capture
-) Test Result Reporting
   -) Database Query
   -) DBMS_OUTPUT
   -) Application Express
-) Historical Test Result Storage
-) Minimal Database Footprint

The fundamental element of testing is an assertion.  It is a simple comparison of an expected result with an actual result.  A test can be one or more assertions.  Where there are no assertions, there is no testing.

"xUnit" defines a Test Suite as a group of tests that use the same Test Fixture.  This is not easily identified during the initial stages of test development.  It is much easier to start with a series of assertion tests and build from there.

There are no Test Suites in wtPLSQL.  Test Runner Packages are used instead of Test Suites.  The Test Runner Package is developed into a set of tests.  A Test Runner Package can call other packages.  The Test Runner Package can be in the same package that is being tested.

When the WTPSQL.run_all procedure scans the packages in a schema and finds a procedure with no parameters called "WTPLSQL_RUN", the package is recorded as a Test Runner Package.  The WTPSQL.run_all procedure then runs all Test Runner Packages within the schema in conanical order.  An exception handler is used in the WTPLSQL package to catch any exceptions raised from a Test Runner Package.  Results from assertions are stored in a Nested Table in the WTPLSQL package.  The results from the last 20 schema_runs (configurable) are saved for each schema.

The Datbase Object Under Test, or DBOUT, is a database object that is the target of a set of tests.  An annotation is used to identify the DBOUT in a Test Runner Package.  If the DBOUT annotation is missing from a Test Runner Package, no code coverage data is collected.  If more than one annotation occurs in a Test Runner Package, the first occurance is used.

RegExp:
   "--%wtplsql_set_dbout[(][[:alnum:]_$#]+[)]%--"

Example Annotation:
   --%wtplsql_set_dbout(SAMPLE_DB_OBJECT)%--

If there are source lines in a DBOUT that should not be included in the Code Coverage Calculation, annotations are used to identify them.  The lines between the "begin_ignore_lines" and "end_ignore_lines" annotations are ignored (inclusive of the lines with the annotations).  All lines after a "begin_ignore_lines" annotation are ignored if the "end_ignore_lines" annotation is missing.  A single line is ignored if both annotations occur on the same line.

RegExp:
   "--%wtplsql_(begin|end)_ignore_lines%--"

Example Annotation:
   --%wtplsql_begin_ignore_lines%--

When control is returned to the WTPLSQL package from the Test Runner, 1) the test results are copied from the nested table to the database, 2) the Test Runner name is cleared, 3) If a DBOUT is defined, the code coverage data is copied to the database, 4) and (if a DBOUT is defined) the DBOUT name is cleared.  No reporting is done at the end of the WTPLSQL package.  If an assertion is run without a Test Runner defined, the assettion results are reported to DBMS_OUTPUT (not stored).  Only 1 DBOUT can be defined in a Test Runner.  Subsequent DBOUT definitions will be ignored.

Data Structures:
----------------
DBOUTS: id, owner, type, name
TEST_RUNNERS: id, dbout_id, owner, name
SCHEMA_RUNS: id, owner, start_dtm, duration_msecs, error_message
TEST_RUNS: id, schema_run_id, test_runner_id, start_dtm, duration_msecs, profiler_runid, lines, hits, error_message
RESULTS: id, test_run_id, result_seq, testcase, message, executed_dtm, elapsed_msecs, assertion, result, expected_value, actual_value, error_message
EXCLUDED_LINES: id, test_run_id, line#, reason

Best practices:
---------------
-) Embed unit tests at the end of DBOUT packages.
   -) Allows test and package to remain together.
   -) Allows testing of internal/private functions/procedures.
   -) Use "PLSQL_CCFLAGS" "WTPLSQL:FALSE" conditional compilation select directive to remove tests from production executable.
-) Use the word "setup" in the names of procedures that peform setup operations.
-) Use the word "teardown" in the names of procedures that peform teardown operations.
-) Use individual procedures to run test cases.  Wrap those procedures with an exception handler to continue with the next test case.
-) Identify test suites at the beginning of each "wtplsql_run" procedure.

Definitions:
------------
Loosely based on Wikipedia Xunit (https://en.wikipedia.org/wiki/XUnit)
-) Test Runner - An executable program that runs test cases.
-) Test Case - A logical grouping of assertions to run happy path, decision tree, boundary condition, and/or fault insertion tests.
-) Assertions - A function that performs a single test and records/reports the result.
-) Test Peconditions - State needed to run a test (also known as a test context or test fixture).
-) DBOUT (Database Object Under Test) - The database object that is the target of testing.  White-box testing is oriented toward a specific DBOUT.  Code coverage is also oriented toward a specific DBOUT.
-) Test Result Formatter - Creates one or more output formats of the test results.
