
Basic Features:
---------------
-) Test anything in the Oracle database:
   -) PL/SQL Packages, Procedures, Functions
   -) Table Constraints and Triggers
   -) Types and Type Bodies
-) Testing of Private Procedure/Function within a Packages
-) Automatic Code Coverage
-) Automatic Test Execution
-) Test Result Capture
-) Test Result Reporting
   -) Database Query
   -) DBMS_OUTPUT
   -) Application Express
-) Historical Test Result Storage
-) Minimal Database Footprint

The fundamental element of testing is an assertion.  It is a simple comparison of an expected result with an actual result.  A test can be one or more assertions.  Where there are no assertions, there is no testing.

"xUnit" defines a Test Suite as a group of tests that use the same Test Fixture.  This is not easily identified during the initial stages of test development.  It is much easier to start with a series of assertion tests and build from there.

There are no Test Suites in WT_PLSQL.  Test Runner Packages are used instead of Test Suites.  The Test Runner Package is developed into a set of tests.  A Test Runner Package can call other packages.  The Test Runner Package can be in the same package that is being tested.

When the WT_PLSQL.RUN_ALL procedure scans the packages in a schema and finds a procedure with no parameters called "WT_PLSQL_RUN", the package is recorded as a Test Runner Package.  The WT_PLSQL.RUN_ALL procedure then runs all Test Runner Packages within the schema in conanical order.  An exception handler is used in the WT_PLSQL package to catch any exceptions raised from a Test Runner Package.  Results from assertions are stored in a Nested Table in the WT_PLSQL package.  The results from the last 20 schema_runs (configurable) are saved for each schema.

The Datbase Object Under Test, or DBOUT, is a database object that is the target of a set of tests.  An annotation is used to identify the DBOUT in a Test Runner Package.  If the DBOUT annotation is missing from a Test Runner Package, no code coverage data is collected.  If more than one annotation occurs in a Test Runner Package, the first occurance is used.

RegExp:
   "--%WT_PLSQL_set_dbout[(][[:alnum:]_$#]+[)]%--"

Example Annotation:
   --%WT_PLSQL_set_dbout(SAMPLE_DB_OBJECT)%--

If there are source lines in a DBOUT that should not be included in the Code Coverage Calculation, annotations are used to identify them.  The lines between the "begin_ignore_lines" and "end_ignore_lines" annotations are ignored (inclusive of the lines with the annotations).  All lines after a "begin_ignore_lines" annotation are ignored if the "end_ignore_lines" annotation is missing.  A single line is ignored if both annotations occur on the same line.

RegExp:
   "--%WT_PLSQL_(begin|end)_ignore_lines%--"

Example Annotation:
   --%WT_PLSQL_begin_ignore_lines%--

Run All:
 -) Load Test Runners into array
 -) Create SCHEMA_RUNS record
 -) Loop through Test Runners
    -) Create TEST_RUNS record
    -) Results Initialize
    -) Profiler Initialize (return profiler_runid)
    -) Call Test Runner
    -) Profiler Finalize (If profiler_runid set)
    -) Results Finalize
    -) Update TEST_RUNS record
 -) Update SCHEMA_RUNS record

Results Initialize:
 -) Clear Results Array

Results Finalize:
 -) Copy Results Array to database tables.

Profiler Initialize:
 -) Find DBOUT Annotations
 -) If DBOUT is not found, return null profiler_run_id
 -) Find Ignore Annotations
 -) Start DBMS_PROFILER
 -) Return profiler_runid

Profiler Finalize:
 -) If a DBOUT is not defined, Return
 -) Stop DBMS_PROFILER
 -) DBMS_PROFILER.stop_profiler also copies data to database tables.
 -) Remove non-DBOUT Lines from database tables
 -) Capture and remove Excluded Lines from database tables.

If an assertion is run without a Test Runner defined, the assertion results are reported to DBMS_OUTPUT, but not stored.

Data Structures:
----------------

TEST_RUNS:
  id - NN, PK
  start_dtm - NN, NK1
  test_runner_name - NN, NK1
  test_runner_owner - NN, NK1
  end_dtm - NN
  schema_run_id - NN, FK1
  dbout_owner
  dbout_name
  dbout_type
  error_message

RESULTS:
  test_run_id - NN, PK, FK
  result_seq - NN, PK
  executed_dtm - NN
  elapsed_msecs - NN
  assertion - NN
  result - NN
  expected_value - NN
  actual_value - NN
  testcase
  message
  error_message

DBOUT_PROFILE:
  test_run_id - NN, PK, FK
  line# - NN, PK
  text - NN
  total_occur - NN
  total_time - NN
  min_time - NN
  max_time - NN

NOT_EXECUTABLE:
  text - NN, PK
  note - NN

EXCLUDED_LINES:
  test_run_id - NN, PK, FK
  line# - NN, PK
  text - NN
  reason

Best practices:
---------------
-) Embed unit tests at the end of DBOUT packages.
   -) Allows test and package to remain together.
   -) Allows testing of internal/private functions/procedures.
   -) Use "PLSQL_CCFLAGS" "WT_PLSQL:FALSE" conditional compilation select directive to remove tests from production executable.
-) Use the word "setup" in the names of procedures that peform setup operations.
-) Use the word "teardown" in the names of procedures that peform teardown operations.
-) Use individual procedures to run test cases.  Wrap those procedures with an exception handler to continue with the next test case.
-) Identify test suites at the beginning of each "WT_PLSQL_RUN" procedure.

Definitions:
------------
Loosely based on Wikipedia Xunit (https://en.wikipedia.org/wiki/XUnit)
-) Test Runner - An executable program that runs test cases.
-) Test Case - A logical grouping of assertions to run happy path, decision tree, boundary condition, and/or fault insertion tests.
-) Assertions - A function that performs a single test and records/reports the result.
-) Test Peconditions - State needed to run a test (also known as a test context or test fixture).
-) DBOUT (Database Object Under Test) - The database object that is the target of testing.  White-box testing is oriented toward a specific DBOUT.  Code coverage is also oriented toward a specific DBOUT.
-) Test Result Formatter - Creates one or more output formats of the test results.
