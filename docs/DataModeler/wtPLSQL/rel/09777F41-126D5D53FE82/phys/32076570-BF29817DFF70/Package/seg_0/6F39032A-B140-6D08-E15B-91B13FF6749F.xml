<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="WT_PROFILER" directorySegmentName="seg_0" id="6F39032A-B140-6D08-E15B-91B13FF6749F">
<sourceConnName>wtp@XE</sourceConnName>
<sourceObjSchema>WTP</sourceObjSchema>
<sourceObjName>WT_PROFILER</sourceObjName>
<createdBy>Duane</createdBy>
<createdTime>2018-01-21 14:30:36 UTC</createdTime>
<ownerDesignName>wtPLSQL</ownerDesignName>
<owner>8BAEC76D-10C0-D6CD-F400-EACE584ED648</owner>
<source>CREATE OR REPLACE package WTP.WT_PROFILER authid current_user&lt;br/&gt;as&lt;br/&gt;&lt;br/&gt;   procedure initialize&lt;br/&gt;      (in_test_run_id      in  number,&lt;br/&gt;       in_runner_name      in  varchar2,&lt;br/&gt;       out_dbout_owner     out varchar2,&lt;br/&gt;       out_dbout_name      out varchar2,&lt;br/&gt;       out_dbout_type      out varchar2,&lt;br/&gt;       out_trigger_offset  out number,&lt;br/&gt;       out_profiler_runid  out number);&lt;br/&gt;&lt;br/&gt;   procedure finalize;&lt;br/&gt;&lt;br/&gt;   procedure pause;&lt;br/&gt;&lt;br/&gt;   procedure resume;&lt;br/&gt;&lt;br/&gt;   function trigger_offset&lt;br/&gt;      (dbout_owner_in  in  varchar2&lt;br/&gt;      ,dbout_name_in   in  varchar2&lt;br/&gt;      ,dbout_type_in   in  varchar2)&lt;br/&gt;   return number;&lt;br/&gt;&lt;br/&gt;   function calc_pct_coverage&lt;br/&gt;      (in_test_run_id  in  number)&lt;br/&gt;   return number;&lt;br/&gt;&lt;br/&gt;   procedure delete_records&lt;br/&gt;      (in_test_run_id  in number);&lt;br/&gt;&lt;br/&gt;end wt_profiler;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="WT_PROFILER" id="6F39032A-B140-6D08-E15B-91B13FF6749F">
<sourceConnName>wtp@XE</sourceConnName>
<sourceObjSchema>WTP</sourceObjSchema>
<sourceObjName>WT_PROFILER</sourceObjName>
<createdBy>Duane</createdBy>
<createdTime>2018-01-21 14:30:36 UTC</createdTime>
<ownerDesignName>wtPLSQL</ownerDesignName>
<owner>8BAEC76D-10C0-D6CD-F400-EACE584ED648</owner>
<source>CREATE OR REPLACE package body WTP.WT_PROFILER&lt;br/&gt;as&lt;br/&gt;&lt;br/&gt;   TYPE rec_type is record&lt;br/&gt;      (test_run_id     wt_test_runs.id%TYPE&lt;br/&gt;      ,dbout_owner     wt_test_runs.dbout_owner%TYPE&lt;br/&gt;      ,dbout_name      wt_test_runs.dbout_name%TYPE&lt;br/&gt;      ,dbout_type      wt_test_runs.dbout_type%TYPE&lt;br/&gt;      ,prof_runid      binary_integer&lt;br/&gt;      ,trigger_offset  binary_integer&lt;br/&gt;      ,error_message   varchar2(4000));&lt;br/&gt;   g_rec  rec_type;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;----------------------&lt;br/&gt;--  Private Procedures&lt;br/&gt;----------------------&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;-- Return DBMS_PROFILER specific error messages&lt;br/&gt;function get_error_msg&lt;br/&gt;      (retnum_in  in  binary_integer)&lt;br/&gt;   return varchar2&lt;br/&gt;is&lt;br/&gt;   l_msg_prefix  varchar2(50) := &apos;DBMS_PROFILER Error: &apos;;&lt;br/&gt;begin&lt;br/&gt;   case retnum_in&lt;br/&gt;   when dbms_profiler.error_param then return l_msg_prefix ||&lt;br/&gt;       &apos;A subprogram was called with an incorrect parameter.&apos;;&lt;br/&gt;   when dbms_profiler.error_io then return l_msg_prefix ||&lt;br/&gt;       &apos;Data flush operation failed.&apos; ||&lt;br/&gt;       &apos; Check whether the profiler tables have been created,&apos; ||&lt;br/&gt;       &apos; are accessible, and that there is adequate space.&apos;;&lt;br/&gt;   when dbms_profiler.error_version then return l_msg_prefix ||&lt;br/&gt;       &apos;There is a mismatch between package and database implementation.&apos; ||&lt;br/&gt;       &apos; Oracle returns this error if an incorrect version of the&apos; ||&lt;br/&gt;       &apos; DBMS_PROFILER package is installed, and if the version of the&apos; ||&lt;br/&gt;       &apos; profiler package cannot work with this database version.&apos;;&lt;br/&gt;   else return l_msg_prefix ||&lt;br/&gt;       &apos;Unknown error number &apos; || retnum_in;&lt;br/&gt;   end case;&lt;br/&gt;end get_error_msg;&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;procedure delete_plsql_profiler_recs&lt;br/&gt;      (in_runid  in number default null)&lt;br/&gt;is&lt;br/&gt;   PRAGMA AUTONOMOUS_TRANSACTION;&lt;br/&gt;begin&lt;br/&gt;   -- Remove Profiler data older than 7 days if RUNID is NULL&lt;br/&gt;   --  Should not find any records because they are deleted with each run&lt;br/&gt;   for buff in (select runid from plsql_profiler_runs&lt;br/&gt;                 where (    in_runid is null&lt;br/&gt;                        and run_date &lt; trunc(sysdate) - 7 )&lt;br/&gt;                   or  (    in_runid is not null&lt;br/&gt;                        and in_runid = runid)&lt;br/&gt;           order by run_date, runid)&lt;br/&gt;   loop&lt;br/&gt;      delete from plsql_profiler_data&lt;br/&gt;       where runid = buff.runid;&lt;br/&gt;      delete from plsql_profiler_units&lt;br/&gt;       where runid = buff.runid;&lt;br/&gt;      delete from plsql_profiler_runs&lt;br/&gt;       where runid = buff.runid;&lt;br/&gt;   end loop;&lt;br/&gt;   COMMIT;&lt;br/&gt;end delete_plsql_profiler_recs;&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;procedure reset_g_rec&lt;br/&gt;is&lt;br/&gt;   l_rec_NULL  rec_type;&lt;br/&gt;begin&lt;br/&gt;   g_rec := l_rec_NULL;&lt;br/&gt;end reset_g_rec;&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;procedure find_dbout&lt;br/&gt;      (in_pkg_name  in  varchar2)&lt;br/&gt;is&lt;br/&gt;&lt;br/&gt;   C_HEAD_RE CONSTANT varchar2(30) := &apos;--% WTPLSQL SET DBOUT &quot;&apos;;&lt;br/&gt;   C_MAIN_RE CONSTANT varchar2(30) := &apos;[[:alnum:]._$#]+&apos;;&lt;br/&gt;   C_TAIL_RE CONSTANT varchar2(30) := &apos;&quot; %--&apos;;&lt;br/&gt;   --&lt;br/&gt;   -- Head Regular Expression is&lt;br/&gt;   --   &apos;--% WTPLSQL SET DBOUT &quot;&apos; - literal string&lt;br/&gt;   -- Main Regular Expression is&lt;br/&gt;   --   &apos;[[:alnum:]._$#]&apos;         - Any alpha, numeric, &quot;.&quot;, &quot;_&quot;, &quot;$&quot;, or &quot;#&quot; character&lt;br/&gt;   --   +                         - One or more of the previous characters&lt;br/&gt;   -- Tail Regular Expression is&lt;br/&gt;   --   &apos;&quot; %--&apos;                   - literal string&lt;br/&gt;   --&lt;br/&gt;   -- Note: Packages, Procedure, Functions, and Types are in the same namespace&lt;br/&gt;   --       and cannot have the same names.  However, Triggers can have the same&lt;br/&gt;   --       name as any of the other objects.  Results are unknown if a Trigger&lt;br/&gt;   --       name is the same as a Package, Procedure, Function or Type name.&lt;br/&gt;   --&lt;br/&gt;   cursor c_annotation is&lt;br/&gt;      select regexp_substr(src.text, C_HEAD_RE||C_MAIN_RE||C_TAIL_RE)  TEXT&lt;br/&gt;       from  user_source  src&lt;br/&gt;       where src.name = in_pkg_name&lt;br/&gt;        and  src.type = &apos;PACKAGE BODY&apos;&lt;br/&gt;        and  regexp_like(src.text, C_HEAD_RE||C_MAIN_RE||C_TAIL_RE)&lt;br/&gt;       order by src.line;&lt;br/&gt;   l_target   varchar2(32000);&lt;br/&gt;   l_pos      number;&lt;br/&gt;&lt;br/&gt;begin&lt;br/&gt;&lt;br/&gt;   open c_annotation;&lt;br/&gt;   fetch c_annotation into l_target;&lt;br/&gt;   if c_annotation%NOTFOUND&lt;br/&gt;   then&lt;br/&gt;      close c_annotation;&lt;br/&gt;      return;&lt;br/&gt;   end if;&lt;br/&gt;   close c_annotation;&lt;br/&gt;&lt;br/&gt;   -- Strip the Head Sub-String&lt;br/&gt;   l_target := regexp_replace(SRCSTR      =&gt; l_target&lt;br/&gt;                             ,PATTERN     =&gt; &apos;^&apos; || C_HEAD_RE&lt;br/&gt;                             ,REPLACESTR  =&gt; &apos;&apos;&lt;br/&gt;                             ,POSITION    =&gt; 1&lt;br/&gt;                             ,OCCURRENCE  =&gt; 1);&lt;br/&gt;   -- Strip the Tail Sub-String&lt;br/&gt;   l_target := regexp_replace(SRCSTR      =&gt; l_target&lt;br/&gt;                             ,PATTERN     =&gt; C_TAIL_RE || &apos;$&apos;&lt;br/&gt;                             ,REPLACESTR  =&gt; &apos;&apos;&lt;br/&gt;                             ,POSITION    =&gt; 1&lt;br/&gt;                             ,OCCURRENCE  =&gt; 1);&lt;br/&gt;&lt;br/&gt;   -- Locate the Owner/Name separator&lt;br/&gt;   l_pos := instr(l_target,&apos;.&apos;);&lt;br/&gt;   begin&lt;br/&gt;      select obj.owner&lt;br/&gt;            ,obj.object_name&lt;br/&gt;            ,obj.object_type&lt;br/&gt;        into g_rec.dbout_owner&lt;br/&gt;            ,g_rec.dbout_name&lt;br/&gt;            ,g_rec.dbout_type&lt;br/&gt;       from  all_objects  obj&lt;br/&gt;       where obj.object_type in (&apos;FUNCTION&apos;, &apos;PROCEDURE&apos;, &apos;PACKAGE BODY&apos;,&lt;br/&gt;                                 &apos;TYPE BODY&apos;, &apos;TRIGGER&apos;)&lt;br/&gt;        and  (   (    l_pos = 0&lt;br/&gt;                  and obj.owner       = USER&lt;br/&gt;                  and obj.object_name = l_target  )&lt;br/&gt;              OR (    l_pos = 1&lt;br/&gt;                  and obj.owner       = USER&lt;br/&gt;                  and obj.object_name = substr(l_target,2,512) )&lt;br/&gt;              OR (    l_pos &gt; 1&lt;br/&gt;                  and obj.owner       = substr(l_target,1,l_pos-1)&lt;br/&gt;                  and obj.object_name = substr(l_target,l_pos+1,512) ) )&lt;br/&gt;        and  exists (&lt;br/&gt;             select &apos;x&apos; from all_source src&lt;br/&gt;              where src.owner  = obj.owner&lt;br/&gt;               and  src.name   = obj.object_name&lt;br/&gt;               and  src.type   = obj.object_type );&lt;br/&gt;   exception when NO_DATA_FOUND&lt;br/&gt;   then&lt;br/&gt;      g_rec.error_message := &apos;Unable to find Database Object &quot;&apos; ||&lt;br/&gt;                              l_target || &apos;&quot;. &apos;;&lt;br/&gt;   end;&lt;br/&gt;&lt;br/&gt;end find_dbout;&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;procedure insert_dbout_profile&lt;br/&gt;is&lt;br/&gt;   PRAGMA AUTONOMOUS_TRANSACTION;&lt;br/&gt;begin&lt;br/&gt;&lt;br/&gt;   insert into wt_dbout_profiles&lt;br/&gt;      with q1 as (&lt;br/&gt;      select src.line&lt;br/&gt;            ,case&lt;br/&gt;             when ne.text is not null           then &apos;EXCL&apos;&lt;br/&gt;             when     ppd.total_occur = 0&lt;br/&gt;                  and ppd.total_time  = 0       then &apos;NOTX&apos;&lt;br/&gt;             when    (    ppd.total_occur  = 0&lt;br/&gt;                      and ppd.total_time != 0 )&lt;br/&gt;                  or (    ppd.total_occur != 0&lt;br/&gt;                      and ppd.total_time  = 0 ) then &apos;UNKN&apos;&lt;br/&gt;                                                else &apos;EXEC&apos;&lt;br/&gt;             end                STATUS&lt;br/&gt;            ,ppd.total_occur&lt;br/&gt;            ,ppd.total_time&lt;br/&gt;            ,ppd.min_time&lt;br/&gt;            ,ppd.max_time&lt;br/&gt;            ,src.text&lt;br/&gt;       from  plsql_profiler_units ppu&lt;br/&gt;             join plsql_profiler_data  ppd&lt;br/&gt;                  on  ppd.unit_number = ppu.unit_number&lt;br/&gt;                  and ppd.runid       = g_rec.prof_runid&lt;br/&gt;             join all_source  src&lt;br/&gt;                  on  src.line  = ppd.line# + g_rec.trigger_offset&lt;br/&gt;                  and src.owner = g_rec.dbout_owner&lt;br/&gt;                  and src.name  = g_rec.dbout_name&lt;br/&gt;                  and src.type  = g_rec.dbout_type&lt;br/&gt;        left join wt_not_executable ne&lt;br/&gt;                  on  ne.text = src.text&lt;br/&gt;       where ppu.unit_owner = g_rec.dbout_owner&lt;br/&gt;        and  ppu.unit_name  = g_rec.dbout_name&lt;br/&gt;        and  ppu.unit_type  = g_rec.dbout_type&lt;br/&gt;        and  ppu.runid      = g_rec.prof_runid&lt;br/&gt;      )&lt;br/&gt;      select g_rec.test_run_id&lt;br/&gt;            ,line&lt;br/&gt;            ,status&lt;br/&gt;            ,sum(total_occur)   TOTAL_OCCUR&lt;br/&gt;            ,sum(total_time)    TOTAL_TIME&lt;br/&gt;            ,min(min_time)      MIN_TIME&lt;br/&gt;            ,max(max_time)      MAX_TIME&lt;br/&gt;            ,text&lt;br/&gt;       from q1&lt;br/&gt;       group by line&lt;br/&gt;            ,status&lt;br/&gt;            ,text;&lt;br/&gt;   COMMIT;&lt;br/&gt;&lt;br/&gt;   -- Delete PLSQL Profiler has it&apos;s own&lt;br/&gt;   --   PRAGMA AUTONOMOUS_TRANSACTION and COMMIT;&lt;br/&gt;   delete_plsql_profiler_recs(g_rec.prof_runid);&lt;br/&gt;&lt;br/&gt;end insert_dbout_profile;&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;procedure update_anno_status&lt;br/&gt;is&lt;br/&gt;&lt;br/&gt;   PRAGMA AUTONOMOUS_TRANSACTION;&lt;br/&gt;&lt;br/&gt;   cursor c_find_begin is&lt;br/&gt;      select line&lt;br/&gt;            ,instr(text,&apos;--%WTPLSQL_begin_ignore_lines%--&apos;) col&lt;br/&gt;       from  all_source&lt;br/&gt;       where owner = g_rec.dbout_owner&lt;br/&gt;        and  name  = g_rec.dbout_name&lt;br/&gt;        and  type  = g_rec.dbout_type&lt;br/&gt;        and  text like &apos;%--\%WTPLSQL_begin_ignore_lines\%--%&apos; escape &apos;\&apos;&lt;br/&gt;       order by line;&lt;br/&gt;   buff_find_begin  c_find_begin%ROWTYPE;&lt;br/&gt;&lt;br/&gt;   cursor c_find_end (in_line in number, in_col in number) is&lt;br/&gt;      with q1 as (&lt;br/&gt;      select line&lt;br/&gt;            ,instr(text,&apos;--%WTPLSQL_end_ignore_lines%--&apos;) col&lt;br/&gt;       from  all_source&lt;br/&gt;       where owner = g_rec.dbout_owner&lt;br/&gt;        and  name  = g_rec.dbout_name&lt;br/&gt;        and  type  = g_rec.dbout_type&lt;br/&gt;        and  line &gt;= in_line&lt;br/&gt;        and  text like &apos;%--\%WTPLSQL_end_ignore_lines\%--%&apos; escape &apos;\&apos;&lt;br/&gt;      )&lt;br/&gt;      select line&lt;br/&gt;            ,col&lt;br/&gt;       from  q1&lt;br/&gt;       where line &gt; in_line&lt;br/&gt;          or (    line = in_line&lt;br/&gt;              and col  &gt; in_col)&lt;br/&gt;       order by line&lt;br/&gt;            ,col;&lt;br/&gt;   buff_find_end  c_find_end%ROWTYPE;&lt;br/&gt;&lt;br/&gt;begin&lt;br/&gt;&lt;br/&gt;   open c_find_begin;&lt;br/&gt;   loop&lt;br/&gt;      fetch c_find_begin into buff_find_begin;&lt;br/&gt;&lt;br/&gt;      exit when c_find_begin%NOTFOUND;&lt;br/&gt;&lt;br/&gt;      open c_find_end (buff_find_begin.line, buff_find_begin.col);&lt;br/&gt;      fetch c_find_end into buff_find_end;&lt;br/&gt;      if c_find_end%NOTFOUND&lt;br/&gt;      then&lt;br/&gt;         buff_find_end.line := NULL;&lt;br/&gt;      end if;&lt;br/&gt;      close c_find_end;&lt;br/&gt;&lt;br/&gt;      update wt_dbout_profiles&lt;br/&gt;        set  status = &apos;ANNO&apos;&lt;br/&gt;       where test_run_id = g_rec.test_run_id&lt;br/&gt;        and  line &gt;= buff_find_begin.line + g_rec.trigger_offset&lt;br/&gt;        and  (   buff_find_end.line is NULL&lt;br/&gt;              OR line &lt;= buff_find_end.line + g_rec.trigger_offset );&lt;br/&gt;&lt;br/&gt;      exit when buff_find_end.line is NULL;&lt;br/&gt;&lt;br/&gt;   end loop;&lt;br/&gt;   close c_find_begin;&lt;br/&gt;&lt;br/&gt;   COMMIT;&lt;br/&gt;   &lt;br/&gt;end update_anno_status;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;---------------------&lt;br/&gt;--  Public Procedures&lt;br/&gt;---------------------&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;procedure initialize&lt;br/&gt;      (in_test_run_id      in  number,&lt;br/&gt;       in_runner_name      in  varchar2,&lt;br/&gt;       out_dbout_owner     out varchar2,&lt;br/&gt;       out_dbout_name      out varchar2,&lt;br/&gt;       out_dbout_type      out varchar2,&lt;br/&gt;       out_trigger_offset  out number,&lt;br/&gt;       out_profiler_runid  out number)&lt;br/&gt;is&lt;br/&gt;&lt;br/&gt;   l_retnum       binary_integer;&lt;br/&gt;&lt;br/&gt;begin&lt;br/&gt;&lt;br/&gt;   out_dbout_owner := NULL;&lt;br/&gt;   out_dbout_name  := NULL;&lt;br/&gt;   out_dbout_type  := NULL;&lt;br/&gt;&lt;br/&gt;   if in_test_run_id is null&lt;br/&gt;   then&lt;br/&gt;      raise_application_error  (-20000, &apos;i_test_run_id is null&apos;);&lt;br/&gt;   end if;&lt;br/&gt;&lt;br/&gt;   reset_g_rec;&lt;br/&gt;   g_rec.test_run_id := in_test_run_id;&lt;br/&gt;&lt;br/&gt;   find_dbout(in_pkg_name =&gt; in_runner_name);&lt;br/&gt;   if g_rec.dbout_name is null&lt;br/&gt;   then&lt;br/&gt;      return;&lt;br/&gt;   end if;&lt;br/&gt;   out_dbout_owner    := g_rec.dbout_owner;&lt;br/&gt;   out_dbout_name     := g_rec.dbout_name;&lt;br/&gt;   out_dbout_type     := g_rec.dbout_type;&lt;br/&gt; &lt;br/&gt;   g_rec.trigger_offset := wt_profiler.trigger_offset&lt;br/&gt;                              (dbout_owner_in =&gt; g_rec.dbout_owner&lt;br/&gt;                              ,dbout_name_in  =&gt; g_rec.dbout_name&lt;br/&gt;                              ,dbout_type_in  =&gt; g_rec.dbout_type );&lt;br/&gt;   out_trigger_offset := g_rec.trigger_offset;&lt;br/&gt;&lt;br/&gt;   -- Cleanup stray DBMS_PROFILER data&lt;br/&gt;   delete_plsql_profiler_recs;&lt;br/&gt;   &lt;br/&gt;   l_retnum := dbms_profiler.INTERNAL_VERSION_CHECK;&lt;br/&gt;   if l_retnum &lt;&gt; 0 then&lt;br/&gt;      --dbms_profiler.get_version(major_version, minor_version);&lt;br/&gt;      raise_application_error(-20000,&lt;br/&gt;         &apos;dbms_profiler.INTERNAL_VERSION_CHECK returned: &apos; || get_error_msg(l_retnum));&lt;br/&gt;   end if;&lt;br/&gt;   -- This starts the PROFILER Running!!!&lt;br/&gt;   l_retnum := dbms_profiler.START_PROFILER(run_number =&gt; g_rec.prof_runid);&lt;br/&gt;   if l_retnum &lt;&gt; 0 then&lt;br/&gt;      raise_application_error(-20000,&lt;br/&gt;         &apos;dbms_profiler.START_PROFILER returned: &apos; || get_error_msg(l_retnum));&lt;br/&gt;   end if;&lt;br/&gt;   out_profiler_runid := g_rec.prof_runid;&lt;br/&gt;&lt;br/&gt;end initialize;&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;-- Because this procedure is called to cleanup after erorrs,&lt;br/&gt;--  it must be able to run multiple times without causing damage.&lt;br/&gt;procedure finalize&lt;br/&gt;is&lt;br/&gt;begin&lt;br/&gt;&lt;br/&gt;   if g_rec.dbout_name is null&lt;br/&gt;   then&lt;br/&gt;      return;&lt;br/&gt;   end if;&lt;br/&gt;   if g_rec.test_run_id is null&lt;br/&gt;   then&lt;br/&gt;      raise_application_error  (-20000, &apos;g_rec.test_run_id is null&apos;);&lt;br/&gt;   end if;&lt;br/&gt;&lt;br/&gt;   -- DBMS_PROFILER.FLUSH_DATA is included with DBMS_PROFILER.STOP_PROFILER&lt;br/&gt;   dbms_profiler.STOP_PROFILER;&lt;br/&gt;&lt;br/&gt;   insert_dbout_profile;&lt;br/&gt;&lt;br/&gt;   update_anno_status;&lt;br/&gt;&lt;br/&gt;   reset_g_rec;&lt;br/&gt;&lt;br/&gt;end finalize;&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;procedure pause&lt;br/&gt;is&lt;br/&gt;begin&lt;br/&gt;   if g_rec.dbout_name is null&lt;br/&gt;   then&lt;br/&gt;      return;&lt;br/&gt;   end if;&lt;br/&gt;   dbms_profiler.pause_profiler;&lt;br/&gt;end pause;&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;procedure resume&lt;br/&gt;is&lt;br/&gt;begin&lt;br/&gt;   if g_rec.dbout_name is null&lt;br/&gt;   then&lt;br/&gt;      return;&lt;br/&gt;   end if;&lt;br/&gt;   dbms_profiler.resume_profiler;&lt;br/&gt;end resume;&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;-- Find begining of PL/SQL Block in a Trigger&lt;br/&gt;function trigger_offset&lt;br/&gt;      (dbout_owner_in  in  varchar2&lt;br/&gt;      ,dbout_name_in   in  varchar2&lt;br/&gt;      ,dbout_type_in   in  varchar2)&lt;br/&gt;   return number&lt;br/&gt;is&lt;br/&gt;begin&lt;br/&gt;   if dbout_type_in != &apos;TRIGGER&apos;&lt;br/&gt;   then&lt;br/&gt;      return 0;&lt;br/&gt;   end if;&lt;br/&gt;   for buff in (&lt;br/&gt;      select line, text from all_source&lt;br/&gt;       where owner = dbout_owner_in&lt;br/&gt;        and  name  = dbout_name_in&lt;br/&gt;        and  type  = &apos;TRIGGER&apos;&lt;br/&gt;      order by line )&lt;br/&gt;   loop&lt;br/&gt;      if regexp_instr(buff.text,&lt;br/&gt;                      &apos;(^declare$&apos; ||&lt;br/&gt;                      &apos;|^declare[[:space:]]&apos; ||&lt;br/&gt;                      &apos;|[[:space:]]declare$&apos; ||&lt;br/&gt;                      &apos;|[[:space:]]declare[[:space:]])&apos;, 1, 1, 0, &apos;i&apos;) &lt;&gt; 0&lt;br/&gt;         OR&lt;br/&gt;         regexp_instr(buff.text,&lt;br/&gt;                      &apos;(^begin$&apos; ||&lt;br/&gt;                      &apos;|^begin[[:space:]]&apos; ||&lt;br/&gt;                      &apos;|[[:space:]]begin$&apos; ||&lt;br/&gt;                      &apos;|[[:space:]]begin[[:space:]])&apos;, 1, 1, 0, &apos;i&apos;) &lt;&gt; 0 &lt;br/&gt;      then&lt;br/&gt;         return buff.line - 1;&lt;br/&gt;      end if;&lt;br/&gt;   end loop;&lt;br/&gt;   return 0;&lt;br/&gt;end trigger_offset;&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;function calc_pct_coverage&lt;br/&gt;      (in_test_run_id  in  number)&lt;br/&gt;   return number&lt;br/&gt;IS&lt;br/&gt;BEGIN&lt;br/&gt;   for buff in (&lt;br/&gt;      select sum(case status when &apos;EXEC&apos; then 1 else 0 end)    HITS&lt;br/&gt;            ,sum(case status when &apos;NOTX&apos; then 1 else 0 end)    MISSES&lt;br/&gt;       from  wt_dbout_profiles  p&lt;br/&gt;       where test_run_id = in_test_run_id  )&lt;br/&gt;   loop&lt;br/&gt;      if buff.hits + buff.misses = 0&lt;br/&gt;      then&lt;br/&gt;         return -1;&lt;br/&gt;      else&lt;br/&gt;         return round(100 * buff.hits / (buff.hits + buff.misses),2);&lt;br/&gt;      end if;&lt;br/&gt;   end loop;&lt;br/&gt;   return null;&lt;br/&gt;END calc_pct_coverage;&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;procedure delete_records&lt;br/&gt;      (in_test_run_id  in number)&lt;br/&gt;is&lt;br/&gt;   l_profiler_runid  number;&lt;br/&gt;begin&lt;br/&gt;   select profiler_runid into l_profiler_runid&lt;br/&gt;    from wt_test_runs where id = in_test_run_id;&lt;br/&gt;   delete_plsql_profiler_recs(l_profiler_runid);&lt;br/&gt;   delete from wt_dbout_profiles&lt;br/&gt;    where test_run_id = in_test_run_id;&lt;br/&gt;exception&lt;br/&gt;   when NO_DATA_FOUND&lt;br/&gt;   then&lt;br/&gt;      return;&lt;br/&gt;end delete_records;&lt;br/&gt;&lt;br/&gt;end wt_profiler;</source>
</body>
<synonyms>
<Synonym class="oracle.dbtools.crest.model.design.storage.oracle.v10g.SynonymOraclev10g" name="WT_PROFILER" directorySegmentName="seg_0" id="AB6198B0-E428-354F-E497-7115CA4A616F">
<sourceConnName>wtp@XE</sourceConnName>
<sourceObjSchema>PUBLIC</sourceObjSchema>
<sourceObjName>WT_PROFILER</sourceObjName>
<createdBy>Duane</createdBy>
<createdTime>2018-01-21 14:30:36 UTC</createdTime>
<ownerDesignName>wtPLSQL</ownerDesignName>
<object>WT_PROFILER</object>
<objectUser>8BAEC76D-10C0-D6CD-F400-EACE584ED648</objectUser>
<public>YES</public>
<user>PUBLIC</user>
<referredObjectID>6F39032A-B140-6D08-E15B-91B13FF6749F</referredObjectID>
</Synonym>
</synonyms>
</PackageOracle>