<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="WT_TEXT_REPORT" directorySegmentName="seg_0" id="B38D46FB-A77C-C9E0-AE27-E961F2A7668B">
<sourceConnName>wtp@XE</sourceConnName>
<sourceObjSchema>WTP</sourceObjSchema>
<sourceObjName>WT_TEXT_REPORT</sourceObjName>
<createdBy>Duane</createdBy>
<createdTime>2018-01-21 14:30:36 UTC</createdTime>
<ownerDesignName>wtPLSQL</ownerDesignName>
<owner>8BAEC76D-10C0-D6CD-F400-EACE584ED648</owner>
<source>CREATE OR REPLACE package WTP.WT_TEXT_REPORT authid current_user&lt;br/&gt;as&lt;br/&gt;&lt;br/&gt;   function format_test_result&lt;br/&gt;      (in_assertion      in wt_results.assertion%TYPE&lt;br/&gt;      ,in_status         in wt_results.status%TYPE&lt;br/&gt;      ,in_details        in wt_results.details%TYPE&lt;br/&gt;      ,in_testcase       in wt_results.testcase%TYPE&lt;br/&gt;      ,in_message        in wt_results.message%TYPE)&lt;br/&gt;   return varchar2;&lt;br/&gt;&lt;br/&gt;   procedure ad_hoc_result&lt;br/&gt;      (in_assertion      in wt_results.assertion%TYPE&lt;br/&gt;      ,in_status         in wt_results.status%TYPE&lt;br/&gt;      ,in_details        in wt_results.details%TYPE&lt;br/&gt;      ,in_testcase       in wt_results.testcase%TYPE&lt;br/&gt;      ,in_message        in wt_results.message%TYPE);&lt;br/&gt;&lt;br/&gt;   procedure dbms_out&lt;br/&gt;      (in_runner_name    in  wt_test_runs.runner_name%TYPE&lt;br/&gt;      ,in_hide_details   in  boolean default FALSE&lt;br/&gt;      ,in_summary_first  in  boolean default FALSE&lt;br/&gt;      ,in_show_pass      in  boolean default FALSE&lt;br/&gt;      ,in_show_anno      in  boolean default FALSE);&lt;br/&gt;&lt;br/&gt;end wt_text_report;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="WT_TEXT_REPORT" id="B38D46FB-A77C-C9E0-AE27-E961F2A7668B">
<sourceConnName>wtp@XE</sourceConnName>
<sourceObjSchema>WTP</sourceObjSchema>
<sourceObjName>WT_TEXT_REPORT</sourceObjName>
<createdBy>Duane</createdBy>
<createdTime>2018-01-21 14:30:36 UTC</createdTime>
<ownerDesignName>wtPLSQL</ownerDesignName>
<owner>8BAEC76D-10C0-D6CD-F400-EACE584ED648</owner>
<source>CREATE OR REPLACE package body WTP.WT_TEXT_REPORT&lt;br/&gt;as&lt;br/&gt;&lt;br/&gt;   g_test_runs_rec  wt_test_runs%ROWTYPE;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;----------------------&lt;br/&gt;--  Private Procedures&lt;br/&gt;----------------------&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;procedure p&lt;br/&gt;      (in_text  in  varchar2)&lt;br/&gt;is&lt;br/&gt;begin&lt;br/&gt;   dbms_output.put_line(in_text);&lt;br/&gt;end p;&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;procedure result_summary&lt;br/&gt;is&lt;br/&gt;   l_yield_txt  varchar2(50);&lt;br/&gt;begin&lt;br/&gt;   for buff in (&lt;br/&gt;      select count(*)                        TOT_CNT&lt;br/&gt;            ,sum(decode(status,&apos;FAIL&apos;,1,0))  FAIL_CNT&lt;br/&gt;            ,sum(decode(status,&apos;ERR&apos;,1,0))   ERR_CNT&lt;br/&gt;            ,count(distinct testcase)        TCASE_CNT&lt;br/&gt;            ,min(elapsed_msecs)              MIN_MSEC&lt;br/&gt;            ,round(avg(elapsed_msecs),3)     AVG_MSEC&lt;br/&gt;            ,max(elapsed_msecs)              MAX_MSEC&lt;br/&gt;       from  wt_results&lt;br/&gt;       where test_run_id = g_test_runs_rec.id )&lt;br/&gt;   loop&lt;br/&gt;      if buff.tot_cnt = 0&lt;br/&gt;      then&lt;br/&gt;         l_yield_txt := &apos;(Divide by Zero)&apos;;&lt;br/&gt;      else&lt;br/&gt;         l_yield_txt := to_char(round( ( 1 - (buff.fail_cnt+buff.err_cnt)&lt;br/&gt;                                                 / buff.tot_cnt&lt;br/&gt;                                       ) * 100&lt;br/&gt;                                     ,2)&lt;br/&gt;                               ,&apos;9990.99&apos;) || &apos;%&apos;;&lt;br/&gt;      end if;&lt;br/&gt;      p(&apos;       Total Testcases: &apos; || to_char(buff.tcase_cnt,&apos;9999999&apos;) ||&lt;br/&gt;        &apos;      Total Assertions: &apos; || to_char(buff.tot_cnt  ,&apos;9999999&apos;) );&lt;br/&gt;      p(&apos;  Minimum Elapsed msec: &apos; || to_char(buff.min_msec ,&apos;9999999&apos;) ||&lt;br/&gt;        &apos;     Failed Assertions: &apos; || to_char(buff.fail_cnt ,&apos;9999999&apos;) );&lt;br/&gt;      p(&apos;  Average Elapsed msec: &apos; || to_char(buff.avg_msec ,&apos;9999999&apos;) ||&lt;br/&gt;        &apos;      Error Assertions: &apos; || to_char(buff.err_cnt  ,&apos;9999999&apos;) );&lt;br/&gt;      p(&apos;  Maximum Elapsed msec: &apos; || to_char(buff.max_msec ,&apos;9999999&apos;) ||&lt;br/&gt;        &apos;            Test Yield: &apos; || l_yield_txt                      );&lt;br/&gt;   end loop;&lt;br/&gt;end result_summary;&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;procedure profile_summary&lt;br/&gt;is&lt;br/&gt;   l_code_coverage  varchar2(100);&lt;br/&gt;begin&lt;br/&gt;   for buff in (&lt;br/&gt;      select count(*)                        TOT_LINES&lt;br/&gt;            ,sum(decode(status,&apos;EXEC&apos;,1,0))  EXEC_LINES&lt;br/&gt;            ,sum(decode(status,&apos;ANNO&apos;,1,0))  ANNO_LINES&lt;br/&gt;            ,sum(decode(status,&apos;EXCL&apos;,1,0))  EXCL_LINES&lt;br/&gt;            ,sum(decode(status,&apos;NOTX&apos;,1,0))  NOTX_LINES&lt;br/&gt;            ,sum(decode(status,&apos;UNKN&apos;,1,0))  UNKN_LINES&lt;br/&gt;            ,min(min_time)/1000              MIN_USEC&lt;br/&gt;            ,sum(total_time)/1000/count(*)   AVG_USEC&lt;br/&gt;            ,max(max_time)/1000              MAX_USEC&lt;br/&gt;       from  wt_dbout_profiles&lt;br/&gt;       where test_run_id = g_test_runs_rec.id )&lt;br/&gt;   loop&lt;br/&gt;      p(&apos;    Total Source Lines: &apos; || to_char(buff.tot_lines ,&apos;9999999&apos;) ||&lt;br/&gt;        &apos;          Missed Lines: &apos; || to_char(buff.notx_lines,&apos;9999999&apos;) );&lt;br/&gt;      p(&apos;  Minimum Elapsed usec: &apos; || to_char(buff.min_usec  ,&apos;9999999&apos;) ||&lt;br/&gt;        &apos;       Annotated Lines: &apos; || to_char(buff.anno_lines,&apos;9999999&apos;) );&lt;br/&gt;      p(&apos;  Average Elapsed usec: &apos; || to_char(buff.avg_usec  ,&apos;9999999&apos;) ||&lt;br/&gt;        &apos;        Excluded Lines: &apos; || to_char(buff.excl_lines,&apos;9999999&apos;) );&lt;br/&gt;      p(&apos;  Maximum Elapsed usec: &apos; || to_char(buff.max_usec  ,&apos;9999999&apos;) ||&lt;br/&gt;        &apos;         Unknown Lines: &apos; || to_char(buff.unkn_lines,&apos;9999999&apos;) );&lt;br/&gt;      if (buff.exec_lines + buff.notx_lines) = 0&lt;br/&gt;      then&lt;br/&gt;         l_code_coverage := &apos;(Divide by Zero)&apos;;&lt;br/&gt;      else&lt;br/&gt;         l_code_coverage := to_char(      100 * buff.exec_lines /&lt;br/&gt;                                    (buff.exec_lines + buff.notx_lines)&lt;br/&gt;                                   ,&apos;9990.99&apos;) || &apos;%&apos;;&lt;br/&gt;      end if;&lt;br/&gt;      p(&apos; Trigger Source Offset: &apos; || to_char(g_test_runs_rec.trigger_offset,&apos;9999999&apos;) ||&lt;br/&gt;        &apos;         Code Coverage: &apos; || l_code_coverage);&lt;br/&gt;   end loop;&lt;br/&gt;end profile_summary;&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;procedure summary_out&lt;br/&gt;is&lt;br/&gt;begin&lt;br/&gt;   p(&apos;&apos;);&lt;br/&gt;   p(&apos;Summary Results for Test Runner &apos; || g_test_runs_rec.runner_owner ||&lt;br/&gt;                                    &apos;.&apos; || g_test_runs_rec.runner_name  ||&lt;br/&gt;                       &apos; (Test Run ID &apos; || g_test_runs_rec.id           ||&lt;br/&gt;                                    &apos;)&apos; );&lt;br/&gt;   result_summary;&lt;br/&gt;   p(&apos;  Total Run Time (sec): &apos; ||&lt;br/&gt;      to_char(extract(day from (g_test_runs_rec.end_dtm -&lt;br/&gt;                                g_test_runs_rec.start_dtm) * 86400 * 100) / 100&lt;br/&gt;             ,&apos;99990.9&apos;) );&lt;br/&gt;   if g_test_runs_rec.error_message is not null&lt;br/&gt;   then&lt;br/&gt;      p(&apos;&apos;);&lt;br/&gt;      p(&apos;  *** Test Runner Error ***&apos;);&lt;br/&gt;      p(g_test_runs_rec.error_message);&lt;br/&gt;   end if;&lt;br/&gt;   ----------------------------------------&lt;br/&gt;   if g_test_runs_rec.dbout_name is null&lt;br/&gt;   then&lt;br/&gt;      return;&lt;br/&gt;   end if;&lt;br/&gt;   p(&apos;&apos;);&lt;br/&gt;   p(&apos;Summary Results for DBOUT: &apos; || g_test_runs_rec.dbout_owner ||&lt;br/&gt;                               &apos;.&apos; || g_test_runs_rec.dbout_name  ||&lt;br/&gt;                               &apos;(&apos; || g_test_runs_rec.dbout_type  || &apos;)&apos; );&lt;br/&gt;   profile_summary;&lt;br/&gt;end summary_out;&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;procedure results_out&lt;br/&gt;      (in_show_pass  in boolean)&lt;br/&gt;is&lt;br/&gt;   l_last_testcase  wt_results.testcase%TYPE;&lt;br/&gt;   l_show_pass_txt  varchar2(1);&lt;br/&gt;begin&lt;br/&gt;   if in_show_pass&lt;br/&gt;   then&lt;br/&gt;      l_show_pass_txt := &apos;Y&apos;;&lt;br/&gt;   else&lt;br/&gt;      l_show_pass_txt := &apos;N&apos;;&lt;br/&gt;   end if;&lt;br/&gt;   p(&apos;&apos;);&lt;br/&gt;   p(&apos;Detailed Results for Test Runner &apos; || g_test_runs_rec.runner_owner ||&lt;br/&gt;                                     &apos;.&apos; || g_test_runs_rec.runner_name  ||&lt;br/&gt;                        &apos; (Test Run ID &apos; || g_test_runs_rec.id           ||&lt;br/&gt;                                     &apos;)&apos; );&lt;br/&gt;   for buff in (&lt;br/&gt;      select status&lt;br/&gt;            ,elapsed_msecs&lt;br/&gt;            ,testcase&lt;br/&gt;            ,assertion&lt;br/&gt;            ,details&lt;br/&gt;            ,message&lt;br/&gt;       from  wt_results&lt;br/&gt;       where test_run_id = g_test_runs_rec.id&lt;br/&gt;       and  (   l_show_pass_txt = &apos;Y&apos;&lt;br/&gt;             or status         != &apos;PASS&apos;)&lt;br/&gt;       order by testcase, result_seq )&lt;br/&gt;   loop&lt;br/&gt;      if    buff.testcase = l_last_testcase&lt;br/&gt;         OR (      buff.testcase is null&lt;br/&gt;             AND l_last_testcase is null )&lt;br/&gt;      then&lt;br/&gt;         p(format_test_result&lt;br/&gt;                        (in_assertion      =&gt; buff.assertion&lt;br/&gt;                        ,in_status         =&gt; buff.status&lt;br/&gt;                        ,in_details        =&gt; buff.details&lt;br/&gt;                        ,in_testcase       =&gt; NULL&lt;br/&gt;                        ,in_message        =&gt; buff.message) );&lt;br/&gt;      else&lt;br/&gt;         p(format_test_result&lt;br/&gt;                        (in_assertion      =&gt; buff.assertion&lt;br/&gt;                        ,in_status         =&gt; buff.status&lt;br/&gt;                        ,in_details        =&gt; buff.details&lt;br/&gt;                        ,in_testcase       =&gt; buff.testcase&lt;br/&gt;                        ,in_message        =&gt; buff.message) );&lt;br/&gt;         l_last_testcase := buff.testcase;&lt;br/&gt;      end if;&lt;br/&gt;   end loop;&lt;br/&gt;end results_out;&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;procedure profile_out&lt;br/&gt;      (in_show_anno  in boolean)&lt;br/&gt;is&lt;br/&gt;   l_header_txt  CONSTANT varchar2(2000) := chr(10) ||&lt;br/&gt;     &apos;Source               TotTime MinTime   MaxTime     &apos; || chr(10) ||&lt;br/&gt;     &apos;  Line Stat Occurs    (usec)  (usec)    (usec) Text&apos; || chr(10) ||&lt;br/&gt;     &apos;------ ---- ------ --------- ------- --------- ------------&apos;;&lt;br/&gt;   l_show_anno_txt  varchar2(1);&lt;br/&gt;begin&lt;br/&gt;   if g_test_runs_rec.dbout_name is null&lt;br/&gt;   then&lt;br/&gt;      return;&lt;br/&gt;   end if;&lt;br/&gt;   if in_show_anno&lt;br/&gt;   then&lt;br/&gt;      l_show_anno_txt := &apos;Y&apos;;&lt;br/&gt;   else&lt;br/&gt;      l_show_anno_txt := &apos;N&apos;;&lt;br/&gt;   end if;&lt;br/&gt;   p(&apos;&apos;);&lt;br/&gt;   p(&apos;Detailed Profile for DBOUT &apos; || g_test_runs_rec.dbout_owner ||&lt;br/&gt;                               &apos;.&apos; || g_test_runs_rec.dbout_name  ||&lt;br/&gt;                              &apos; (&apos; || g_test_runs_rec.dbout_type  ||&lt;br/&gt;                               &apos;)&apos; );&lt;br/&gt;   p(&apos;   from Test Runner &apos; || g_test_runs_rec.runner_owner ||&lt;br/&gt;                        &apos;.&apos; || g_test_runs_rec.runner_name  ||&lt;br/&gt;           &apos; (Test Run ID &apos; || g_test_runs_rec.id           ||&lt;br/&gt;                        &apos;)&apos; );&lt;br/&gt;   p(l_header_txt);&lt;br/&gt;   for buff in (&lt;br/&gt;      select line&lt;br/&gt;            ,status&lt;br/&gt;            ,total_occur&lt;br/&gt;            ,total_time&lt;br/&gt;            ,min_time&lt;br/&gt;            ,max_time&lt;br/&gt;            ,text&lt;br/&gt;            ,rownum&lt;br/&gt;       from  wt_dbout_profiles&lt;br/&gt;       where test_run_id = g_test_runs_rec.id&lt;br/&gt;       and  (   l_show_anno_txt = &apos;Y&apos;&lt;br/&gt;             or status         != &apos;ANNO&apos;)&lt;br/&gt;       order by line  )&lt;br/&gt;   loop&lt;br/&gt;      p(to_char(buff.line,&apos;99999&apos;)               || &apos; &apos; ||&lt;br/&gt;           rpad(buff.status,4)                   || &apos; &apos; ||&lt;br/&gt;        to_char(buff.total_occur,&apos;99999&apos;)        || &apos; &apos; ||&lt;br/&gt;        to_char(buff.total_time/1000,&apos;99999999&apos;) || &apos; &apos; ||&lt;br/&gt;        to_char(buff.min_time/1000,&apos;999999&apos;)     || &apos; &apos; ||&lt;br/&gt;        to_char(buff.max_time/1000,&apos;99999999&apos;)   || &apos; &apos; ||&lt;br/&gt;        replace(buff.text,CHR(10),&apos;&apos;)            );&lt;br/&gt;      if mod(buff.rownum,25) = 0&lt;br/&gt;      then&lt;br/&gt;         p(l_header_txt);&lt;br/&gt;      end if;&lt;br/&gt;   end loop;&lt;br/&gt;end profile_out;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;---------------------&lt;br/&gt;--  Public Procedures&lt;br/&gt;---------------------&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;function format_test_result&lt;br/&gt;      (in_assertion      in wt_results.assertion%TYPE&lt;br/&gt;      ,in_status         in wt_results.status%TYPE&lt;br/&gt;      ,in_details        in wt_results.details%TYPE&lt;br/&gt;      ,in_testcase       in wt_results.testcase%TYPE&lt;br/&gt;      ,in_message        in wt_results.message%TYPE)&lt;br/&gt;   return varchar2&lt;br/&gt;is&lt;br/&gt;&lt;br/&gt;   l_out_str  varchar2(32000) := &apos;&apos;;&lt;br/&gt;&lt;br/&gt;begin&lt;br/&gt;&lt;br/&gt;   if in_testcase is not null&lt;br/&gt;   then&lt;br/&gt;      l_out_str := &apos;   --  Test Case: &apos; || in_testcase || &apos;  --&apos; || CHR(10);&lt;br/&gt;   end if;&lt;br/&gt;&lt;br/&gt;   if in_status = wt_result.C_PASS&lt;br/&gt;   then&lt;br/&gt;      l_out_str := l_out_str || &apos; &apos; || rpad(in_status,4) || &apos; &apos;;&lt;br/&gt;   else&lt;br/&gt;      l_out_str := l_out_str || &apos;#&apos; || rpad(in_status,4) || &apos;#&apos;;&lt;br/&gt;   end if;&lt;br/&gt;&lt;br/&gt;   if in_message is not null&lt;br/&gt;   then&lt;br/&gt;      l_out_str := l_out_str || in_message  || &apos;. &apos;;&lt;br/&gt;   end if;&lt;br/&gt;&lt;br/&gt;   l_out_str := l_out_str || in_assertion || &apos; - &apos;;&lt;br/&gt;   l_out_str := l_out_str || in_details;&lt;br/&gt;&lt;br/&gt;   return l_out_str;&lt;br/&gt;   &lt;br/&gt;end format_test_result;&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;procedure ad_hoc_result&lt;br/&gt;      (in_assertion      in wt_results.assertion%TYPE&lt;br/&gt;      ,in_status         in wt_results.status%TYPE&lt;br/&gt;      ,in_details        in wt_results.details%TYPE&lt;br/&gt;      ,in_testcase       in wt_results.testcase%TYPE&lt;br/&gt;      ,in_message        in wt_results.message%TYPE)&lt;br/&gt;is&lt;br/&gt;begin&lt;br/&gt;   p(format_test_result&lt;br/&gt;        (in_assertion  =&gt; in_assertion&lt;br/&gt;        ,in_status     =&gt; in_status&lt;br/&gt;        ,in_details    =&gt; in_details&lt;br/&gt;        ,in_testcase   =&gt; in_testcase&lt;br/&gt;        ,in_message    =&gt; in_message));&lt;br/&gt;end ad_hoc_result;&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;procedure dbms_out&lt;br/&gt;      (in_runner_name    in  wt_test_runs.runner_name%TYPE&lt;br/&gt;      ,in_hide_details   in  boolean default FALSE&lt;br/&gt;      ,in_summary_first  in  boolean default FALSE&lt;br/&gt;      ,in_show_pass      in  boolean default FALSE&lt;br/&gt;      ,in_show_anno      in  boolean default FALSE)&lt;br/&gt;is&lt;br/&gt;begin&lt;br/&gt;&lt;br/&gt;   for buff in (&lt;br/&gt;      select * from wt_test_runs&lt;br/&gt;       where (runner_name, start_dtm) in (&lt;br/&gt;             select runner_name&lt;br/&gt;                    ,max(start_dtm)        MAX_START_DTM&lt;br/&gt;              from  wt_test_runs&lt;br/&gt;              where (   (    in_runner_name is not null&lt;br/&gt;                        and in_runner_name = runner_name)&lt;br/&gt;                     OR in_runner_name is null  )&lt;br/&gt;               and  runner_owner = USER&lt;br/&gt;              group by runner_name  )  )&lt;br/&gt;   loop&lt;br/&gt;&lt;br/&gt;      --  Load Test Run Record&lt;br/&gt;      g_test_runs_rec := buff;&lt;br/&gt;&lt;br/&gt;      --  Setup Display Order&lt;br/&gt;      if in_summary_first&lt;br/&gt;      then&lt;br/&gt;         summary_out;&lt;br/&gt;         if NOT in_hide_details&lt;br/&gt;         then&lt;br/&gt;            results_out(in_show_pass);&lt;br/&gt;            profile_out(in_show_anno);&lt;br/&gt;         end if;&lt;br/&gt;      else&lt;br/&gt;        if NOT in_hide_details&lt;br/&gt;         then&lt;br/&gt;            profile_out(in_show_anno);&lt;br/&gt;            results_out(in_show_pass);&lt;br/&gt;         end if;&lt;br/&gt;         summary_out;&lt;br/&gt;      end if;&lt;br/&gt;&lt;br/&gt;   end loop;&lt;br/&gt;&lt;br/&gt;end dbms_out;&lt;br/&gt;&lt;br/&gt;end wt_text_report;</source>
</body>
<synonyms>
<Synonym class="oracle.dbtools.crest.model.design.storage.oracle.v10g.SynonymOraclev10g" name="WT_TEXT_REPORT" directorySegmentName="seg_0" id="BC239EA3-4D47-5F13-4462-BFA06225D384">
<sourceConnName>wtp@XE</sourceConnName>
<sourceObjSchema>PUBLIC</sourceObjSchema>
<sourceObjName>WT_TEXT_REPORT</sourceObjName>
<createdBy>Duane</createdBy>
<createdTime>2018-01-21 14:30:36 UTC</createdTime>
<ownerDesignName>wtPLSQL</ownerDesignName>
<object>WT_TEXT_REPORT</object>
<objectUser>8BAEC76D-10C0-D6CD-F400-EACE584ED648</objectUser>
<public>YES</public>
<user>PUBLIC</user>
<referredObjectID>B38D46FB-A77C-C9E0-AE27-E961F2A7668B</referredObjectID>
</Synonym>
</synonyms>
</PackageOracle>