<p><a href="README.htm">Demos and Examples</a></p>
<h1 id="test-a-plsql-package">Test a PL/SQL Package</h1>
<hr />
<p>A majority of wtPLSQL testing is done with the test runner packages. In this example, a test runner package will be created to test the DBMS_OUTPUT package. For brevity, only PUT_LINE and GET_LINE will be tested.</p>
<h2 id="test-runner-package-specification">Test Runner Package Specification</h2>
<p>The specification for a test runner package is brutally simple. It only needs one procedure.</p>
<p>Run this:</p>
<pre><code>create or replace package test_dbms_output authid definer
as
   procedure wtplsql_run;
end test_dbms_output;
/
</code></pre>
<h2 id="test-runner-package-body">Test Runner Package Body</h2>
<p>Create a package body with the needed procedure. Add a call to enable DBMS_OUTPUT for testing. Setup and teardown will be handled later.</p>
<pre><code>create or replace package body test_dbms_output
as
   procedure wtplsql_run
   as
   begin
      dbms_output.enable(128000);
   end wtplsql_run;
end test_dbms_output;
/
</code></pre>
<p>Procedures will be added to this package body. These procedures will run the assertions that will test the DBMS_OUTPUT package.</p>
<h2 id="testing-put-line-and-get-line">Testing Put Line and Get Line</h2>
<p>The new TEST_PUT_GET_LINE procedure will test the PUT_LINE and GET_LINE procedures together. Also, the TEST_PUT_GET_LINE procedure call is added to the WTPLSQL_RUN procedure.</p>
<p>Run this:</p>
<pre><code>create or replace package body test_dbms_output
as
   procedure test_put_get_line
   is
      c_test1   constant varchar2(100) := &#39;Test 1&#39;;
      l_buffer  varchar2(4000) := &#39;&#39;;
      l_status  number := null;
   begin
      dbms_output.put_line(c_test1);
      dbms_output.get_line(l_buffer,l_status);
      wt_assert.eq(&#39;Test 1&#39;,l_buffer,c_test1);
   end test_put_get_line;
   procedure wtplsql_run
   as
   begin
      dbms_output.enable(128000);
      test_put_get_line;
   end wtplsql_run;
end test_dbms_output;
/
</code></pre>
<p>Run this:</p>
<pre><code>begin
   wtplsql.test_run(&#39;TEST_DBMS_OUTPUT&#39;);
   wt_text_report.dbms_out(USER,&#39;TEST_DBMS_OUTPUT&#39;,30);
end;
/
</code></pre>
<p>And get this:</p>
<img src="images/Testing Put Line and Get Line.PNG" alt="Testing Put Line and Get Line Result">

<p>A successful test. Notice that the value of the C_TEST1 constant is displayed in the test result details.</p>
<h2 id="leaving-something-behind">Leaving Something Behind</h2>
<p>In the previous example, everything worked correctly. If a problem occurs during testing, things can be left behind. Here is an example of GET_LINE not working, leaving the value of C_TEST1 in the DBMS_OUTPUT buffer. For testing purposes, an exception will be thrown between the PUT_LINE and GET_LINE call.</p>
<p>Run this:</p>
<pre><code>create or replace package body test_dbms_output
as
   procedure test_put_get_line
   is
      c_test1   constant varchar2(100) := &#39;Test 1&#39;;
      l_buffer  varchar2(4000) := &#39;&#39;;
      l_status  number := null;
   begin
      dbms_output.put_line(c_test1);
      raise_application_error(-20000, &#39;Fault insertion exception&#39;);
      dbms_output.get_line(l_buffer,l_status);
      wt_assert.eq(&#39;Test 1&#39;,l_buffer,c_test1);
   end test_put_get_line;
   procedure wtplsql_run
   as
   begin
      dbms_output.enable(128000);
      test_put_get_line;
   end wtplsql_run;
end test_dbms_output;
/
</code></pre>
<p>Then, run this:</p>
<pre><code>begin
   wtplsql.test_run(&#39;TEST_DBMS_OUTPUT&#39;);
end;
/
</code></pre>
<p>And get this:</p>
<pre><code>Test 1
</code></pre>
<p>Notice there was no exception raised. wtPLSQL captured the exception and logged it. Also, the value of C_TEST1 shows in the output. It was left behind in the DBMS_OUTPUT buffer.</p>
<p>Run this:</p>
<pre><code>begin
   wt_text_report.dbms_out(USER,&#39;TEST_DBMS_OUTPUT&#39;,30);
end;
/
</code></pre>
<p>And get this:</p>
<img src="images/Leaving Something Behind.PNG" alt="Leaving Something Behind Result">

<p>No assertions were run because of the exception. The exception that was captured appears below the test results summary.</p>
<h2 id="setup-and-teardown">Setup and Teardown</h2>
<p>Setup and Teardown procedures are used to prepare for and cleanup from tests. For DBMS_OUTPUT testing, the buffer needs to be preserved before testing starts. After testing is complete, the original buffer contents need to be returned to the buffer.</p>
<p>Run this:</p>
<pre><code>create or replace package body test_dbms_output
as
   -- Global variables to capture buffer contents
   g_buffer_contents_va  DBMSOUTPUT_LINESARRAY;
   g_num_lines           number;
   --
   procedure setup
   is
   begin
      -- Capture buffer contents
      dbms_output.get_lines(g_buffer_contents_va, g_num_lines);
   end setup;
   --
   procedure test_put_get_line
   is
      c_test1   constant varchar2(100) := &#39;Test 1&#39;;
      l_buffer  varchar2(4000) := &#39;&#39;;
      l_status  number := null;
   begin
      dbms_output.put_line(c_test1);
      raise_application_error(-20000, &#39;Fault insertion exception&#39;);
      dbms_output.get_line(l_buffer,l_status);
      wt_assert.eq(&#39;Test 1&#39;,l_buffer,c_test1);
   end test_put_get_line;
   --
   procedure teardown
   is
      l_junk_va  DBMSOUTPUT_LINESARRAY;
      l_num      number;
   begin
      -- Clear buffer contents
      dbms_output.get_lines(l_junk_va, l_num);
      -- Restore the buffer
      for i in 1 .. g_num_lines
      loop
         dbms_output.put_line(g_buffer_contents_va(i));
      end loop;
   end teardown;
   --
   procedure wtplsql_run
   is
      l_error_message  varchar2(4000);
   begin
      dbms_output.enable(128000);
      dbms_output.put_line(&#39;This should be preserved.&#39;);
      setup;
      test_put_get_line;
      teardown;
   exception when others then
      l_error_message := substr(dbms_utility.format_error_stack ||
                                dbms_utility.format_error_backtrace,1,4000);
      teardown;
      raise_application_error(-20000, l_error_message);
   end wtplsql_run;
   --
end test_dbms_output;
/
</code></pre>
<p>The test runner package is quite large now. To review, the test runner will</p>
<ul>
<li>Capture the current DBMS_OUPUT buffer.</li>
<li>Run a procedure that adds to the DBMS_OUPUT buffer.</li>
<li>Catch an exception raised by the procedure.</li>
<li>Capture the error stack.</li>
<li>Clear the current DBMS_OUPUT buffer.</li>
<li>Restore the original DBMS_OUPUT buffer.</li>
</ul>
<p>In order to ensure it is restoring the original DBMS_OUPUT buffer, the message &quot;This should be preserved.&quot; is added to the buffer. That message should be available after the test runner completes.</p>
<p>Run this:</p>
<pre><code>begin
   wtplsql.test_run(&#39;TEST_DBMS_OUTPUT&#39;);
end;
/
</code></pre>
<p>And get this:</p>
<pre><code>This should be preserved.
</code></pre>
<p>Excellent! The original DBMS_OUPUT buffer was preserved and the errant C_TEST1 value was removed.</p>
<p>Run this:</p>
<pre><code>begin
   wt_text_report.dbms_out(USER,&#39;TEST_DBMS_OUTPUT&#39;,30);
end;
/
</code></pre>
<p>And get this:</p>
<img src="images/Setup and Teardown.PNG" alt="Setup and Teardown Result">

<p>The exception handler preserved the error stack before calling teardown. Also, there is an extra &quot;ORA-20000:&quot; at the front of the error stack displayed, but all the error information is preserved.</p>
<p>These are all the basic tools needed to successfully create and run test runner packages in wtPLSQL.</p>
<hr />
<p><a href="README.htm">Demos and Examples</a></p>
