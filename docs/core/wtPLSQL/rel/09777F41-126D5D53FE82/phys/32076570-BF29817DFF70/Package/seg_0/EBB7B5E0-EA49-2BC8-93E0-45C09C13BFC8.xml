<?xml version = '1.0' encoding = 'UTF-8'?>
<PackageOracle class="oracle.dbtools.crest.model.design.storage.oracle.PackageOracle" name="WTPLSQL" directorySegmentName="seg_0" id="EBB7B5E0-EA49-2BC8-93E0-45C09C13BFC8">
<sourceConnName>wtp@XE</sourceConnName>
<sourceObjSchema>WTP</sourceObjSchema>
<sourceObjName>WTPLSQL</sourceObjName>
<createdBy>Duane</createdBy>
<createdTime>2018-01-21 14:30:36 UTC</createdTime>
<ownerDesignName>wtPLSQL</ownerDesignName>
<owner>8BAEC76D-10C0-D6CD-F400-EACE584ED648</owner>
<source>CREATE OR REPLACE package WTP.WTPLSQL authid current_user&lt;br/&gt;as&lt;br/&gt;&lt;br/&gt;   procedure test_run&lt;br/&gt;      (in_package_name  in  varchar2);&lt;br/&gt;&lt;br/&gt;   procedure test_all;&lt;br/&gt;&lt;br/&gt;   procedure delete_records&lt;br/&gt;      (in_test_run_id  in number default NULL);&lt;br/&gt;&lt;br/&gt;   --   WtPLSQL Self Test Procedures&lt;br/&gt;   --&lt;br/&gt;   -- alter system set PLSQL_CCFLAGS = &lt;br/&gt;   --    &apos;WTPLSQL_ENABLE:TRUE, WTPLSQL_SELFTEST:TRUE&apos;&lt;br/&gt;   --    scope=BOTH;&lt;br/&gt;   --&lt;br/&gt;   $IF $$WTPLSQL_SELFTEST&lt;br/&gt;   $THEN&lt;br/&gt;      procedure WTPLSQL_RUN;&lt;br/&gt;   $END&lt;br/&gt;&lt;br/&gt;end wtplsql;</source>
<body class="oracle.dbtools.crest.model.design.storage.oracle.PackageBodyOracle" name="WTPLSQL" id="EBB7B5E0-EA49-2BC8-93E0-45C09C13BFC8">
<sourceConnName>wtp@XE</sourceConnName>
<sourceObjSchema>WTP</sourceObjSchema>
<sourceObjName>WTPLSQL</sourceObjName>
<createdBy>Duane</createdBy>
<createdTime>2018-01-21 14:30:36 UTC</createdTime>
<ownerDesignName>wtPLSQL</ownerDesignName>
<owner>8BAEC76D-10C0-D6CD-F400-EACE584ED648</owner>
<source>CREATE OR REPLACE package body WTP.WTPLSQL&lt;br/&gt;as&lt;br/&gt;&lt;br/&gt;   TYPE runners_nt_type is table of varchar2(128);&lt;br/&gt;   g_runners_nt      runners_nt_type;&lt;br/&gt;   g_test_runs_rec   wt_test_runs%ROWTYPE;&lt;br/&gt;&lt;br/&gt;----------------------&lt;br/&gt;--  Private Procedures&lt;br/&gt;----------------------&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;-- This procedure is separated for internal WTPLSQL testing&lt;br/&gt;procedure check_runner&lt;br/&gt;is&lt;br/&gt;   l_package_check        number;&lt;br/&gt;begin&lt;br/&gt;   -- These RAISEs can be captured because the Test Runs Record is set.&lt;br/&gt;   --  Check for NULL Runner Name&lt;br/&gt;   if g_test_runs_rec.runner_name is null&lt;br/&gt;   then&lt;br/&gt;      raise_application_error (-20001, &apos;RUNNER_NAME is null&apos;);&lt;br/&gt;   end if;&lt;br/&gt;   --  Check for Valid Runner Name&lt;br/&gt;   select count(*) into l_package_check&lt;br/&gt;    from  user_arguments&lt;br/&gt;    where object_name   = &apos;WTPLSQL_RUN&apos;&lt;br/&gt;     and  package_name  = g_test_runs_rec.runner_name&lt;br/&gt;     and  argument_name is null&lt;br/&gt;     and  position      = 1&lt;br/&gt;     and  sequence      = 0;&lt;br/&gt;   if l_package_check != 1&lt;br/&gt;   then&lt;br/&gt;      raise_application_error (-20002, &apos;RUNNER_NAME is not valid&apos;);&lt;br/&gt;   end if;&lt;br/&gt;end check_runner;&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;procedure init_test_run&lt;br/&gt;is&lt;br/&gt;   l_test_runs_rec_NULL   wt_test_runs%ROWTYPE;&lt;br/&gt;begin&lt;br/&gt;   -- Reset the Test Runs Record before checking anything&lt;br/&gt;   g_test_runs_rec              := l_test_runs_rec_NULL;&lt;br/&gt;   g_test_runs_rec.id           := wt_test_runs_seq.nextval;&lt;br/&gt;   g_test_runs_rec.start_dtm    := systimestamp;&lt;br/&gt;   g_test_runs_rec.runner_owner := USER;&lt;br/&gt;end init_test_run;&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;procedure insert_test_run&lt;br/&gt;is&lt;br/&gt;   PRAGMA AUTONOMOUS_TRANSACTION;&lt;br/&gt;   l_wt_test_runs_recNULL  wt_test_runs%ROWTYPE;&lt;br/&gt;begin&lt;br/&gt;   if g_test_runs_rec.id is null&lt;br/&gt;   then&lt;br/&gt;      return;&lt;br/&gt;   end if;&lt;br/&gt;   g_test_runs_rec.end_dtm := systimestamp;&lt;br/&gt;   insert into wt_test_runs values g_test_runs_rec;&lt;br/&gt;   g_test_runs_rec := l_wt_test_runs_recNULL;&lt;br/&gt;   COMMIT;&lt;br/&gt;end insert_test_run;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;---------------------&lt;br/&gt;--  Public Procedures&lt;br/&gt;---------------------&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;procedure test_run&lt;br/&gt;      (in_package_name  in  varchar2)&lt;br/&gt;is&lt;br/&gt;begin&lt;br/&gt;&lt;br/&gt;   -- Initialize&lt;br/&gt;   init_test_run;&lt;br/&gt;   g_test_runs_rec.runner_name := in_package_name;&lt;br/&gt;   check_runner;&lt;br/&gt;   delete_records;       -- Autonomous Transaction COMMIT&lt;br/&gt;   wt_result.initialize(g_test_runs_rec.id);&lt;br/&gt;   wt_profiler.initialize(in_test_run_id      =&gt; g_test_runs_rec.id,&lt;br/&gt;                          in_runner_name      =&gt; g_test_runs_rec.runner_name,&lt;br/&gt;                          out_dbout_owner     =&gt; g_test_runs_rec.dbout_owner,&lt;br/&gt;                          out_dbout_name      =&gt; g_test_runs_rec.dbout_name,&lt;br/&gt;                          out_dbout_type      =&gt; g_test_runs_rec.dbout_type,&lt;br/&gt;                          out_trigger_offset  =&gt; g_test_runs_rec.trigger_offset,&lt;br/&gt;                          out_profiler_runid  =&gt; g_test_runs_rec.profiler_runid);&lt;br/&gt;&lt;br/&gt;   -- Call the Test Runner&lt;br/&gt;   begin&lt;br/&gt;      execute immediate &apos;BEGIN &apos; || in_package_name || &apos;.WTPLSQL_RUN; END;&apos;;&lt;br/&gt;   exception&lt;br/&gt;      when OTHERS&lt;br/&gt;      then&lt;br/&gt;         g_test_runs_rec.error_message := substr(dbms_utility.format_error_stack  ||&lt;br/&gt;                                                 dbms_utility.format_error_backtrace&lt;br/&gt;                                                ,1,4000);&lt;br/&gt;   end;&lt;br/&gt;&lt;br/&gt;   -- Finalize&lt;br/&gt;   wt_profiler.pause;&lt;br/&gt;   insert_test_run;       -- Autonomous Transaction COMMIT&lt;br/&gt;   wt_profiler.finalize;  -- Autonomous Transaction COMMIT&lt;br/&gt;   wt_result.finalize;    -- Autonomous Transaction COMMIT&lt;br/&gt;&lt;br/&gt;exception&lt;br/&gt;   when OTHERS&lt;br/&gt;   then&lt;br/&gt;      g_test_runs_rec.error_message := substr(dbms_utility.format_error_stack  ||&lt;br/&gt;                                              dbms_utility.format_error_backtrace ||&lt;br/&gt;                                              CHR(10) || g_test_runs_rec.error_message&lt;br/&gt;                                             ,1,4000);&lt;br/&gt;      wt_profiler.pause;&lt;br/&gt;      insert_test_run;       -- Autonomous Transaction COMMIT&lt;br/&gt;      wt_profiler.finalize;  -- Autonomous Transaction COMMIT&lt;br/&gt;      wt_result.finalize;    -- Autonomous Transaction COMMIT&lt;br/&gt;&lt;br/&gt;end test_run;&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;procedure test_all&lt;br/&gt;is&lt;br/&gt;begin&lt;br/&gt;   select package_name&lt;br/&gt;     bulk collect into g_runners_nt&lt;br/&gt;    from  user_arguments  t1&lt;br/&gt;    where object_name   = &apos;WTPLSQL_RUN&apos;&lt;br/&gt;     and  position      = 1&lt;br/&gt;     and  sequence      = 0&lt;br/&gt;     and  data_type     is null&lt;br/&gt;     and  not exists (&lt;br/&gt;          select &apos;x&apos; from user_arguments  t2&lt;br/&gt;           where t2.object_name = t1.object_name&lt;br/&gt;            and  (   t2.overload is null&lt;br/&gt;                  OR t2.overload = t1.overload)&lt;br/&gt;            and  t2.position    &gt; t1.position&lt;br/&gt;            and  t2.sequence    &gt; t1.sequence&lt;br/&gt;          );&lt;br/&gt;   for i in 1 .. g_runners_nt.COUNT&lt;br/&gt;   loop&lt;br/&gt;      test_run(g_runners_nt(i));&lt;br/&gt;   end loop;&lt;br/&gt;end test_all;&lt;br/&gt;&lt;br/&gt;------------------------------------------------------------&lt;br/&gt;procedure delete_records&lt;br/&gt;      (in_test_run_id  in number default NULL)&lt;br/&gt;is&lt;br/&gt;   PRAGMA AUTONOMOUS_TRANSACTION;&lt;br/&gt;   procedure del_rec (in_id in number) is begin&lt;br/&gt;      -- Profiler delete must be first because it contains a&lt;br/&gt;      --    PRAGMA AUTONOMOUS_TRANSACTION&lt;br/&gt;      wt_profiler.delete_records(in_id);&lt;br/&gt;      wt_result.delete_records(in_id);&lt;br/&gt;      delete from wt_test_runs&lt;br/&gt;       where id = in_id;&lt;br/&gt;      COMMIT;&lt;br/&gt;   end del_rec;&lt;br/&gt;begin&lt;br/&gt;   if in_test_run_id is not null&lt;br/&gt;   then&lt;br/&gt;      del_rec(in_test_run_id);&lt;br/&gt;   else&lt;br/&gt;      for buff in (select rownum, id from wt_test_runs&lt;br/&gt;                    where runner_owner = USER&lt;br/&gt;                     and  runner_name  = g_test_runs_rec.runner_name&lt;br/&gt;                    order by start_dtm desc, id desc)&lt;br/&gt;      loop&lt;br/&gt;         -- Keep the last 20 rest runs for this USER&lt;br/&gt;         if buff.rownum &gt; 20&lt;br/&gt;         then&lt;br/&gt;            del_rec(buff.id);&lt;br/&gt;         end if;&lt;br/&gt;      end loop;&lt;br/&gt;   end if;&lt;br/&gt;end delete_records;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;--===============--%WTPLSQL_begin_ignore_lines%--===============--&lt;br/&gt;--  Embedded Test Procedures&lt;br/&gt;&lt;br/&gt;$IF $$WTPLSQL_SELFTEST&lt;br/&gt;$THEN&lt;br/&gt;&lt;br/&gt;  -- Profiler Annotation: --% WTPLSQL SET DBOUT &quot;WTPLSQL&quot; %-- Extra Stuff&lt;br/&gt;&lt;br/&gt;----------------------------------------&lt;br/&gt;procedure tc_test_runs_rec_and_table&lt;br/&gt;is&lt;br/&gt;begin&lt;br/&gt;   wt_assert.g_testcase := &apos;TEST_RUNS_REC_AND_TABLE&apos;;&lt;br/&gt;   -- This Test Case runs in the EXECUTE IMMEDAITE in the TEST_RUN&lt;br/&gt;   --   procedure in this package.&lt;br/&gt;   wt_assert.isnotnull&lt;br/&gt;            (msg_in        =&gt; &apos;g_test_runs_rec.id&apos;&lt;br/&gt;            ,check_this_in =&gt; g_test_runs_rec.id);&lt;br/&gt;   wt_assert.isnotnull&lt;br/&gt;            (msg_in        =&gt; &apos;g_test_runs_rec.start_dtm&apos;&lt;br/&gt;            ,check_this_in =&gt; g_test_runs_rec.start_dtm);&lt;br/&gt;   wt_assert.isnotnull&lt;br/&gt;            (msg_in        =&gt; &apos;g_test_runs_rec.runner_owner&apos;&lt;br/&gt;            ,check_this_in =&gt; g_test_runs_rec.runner_owner);&lt;br/&gt;   wt_assert.eq&lt;br/&gt;            (msg_in          =&gt; &apos;g_test_runs_rec.runner_name&apos;&lt;br/&gt;            ,check_this_in   =&gt; g_test_runs_rec.runner_name&lt;br/&gt;            ,against_this_in =&gt; &apos;WTPLSQL&apos;);&lt;br/&gt;   wt_assert.isnotnull&lt;br/&gt;            (msg_in        =&gt; &apos;g_test_runs_rec.dbout_owner&apos;&lt;br/&gt;            ,check_this_in =&gt; g_test_runs_rec.dbout_owner);&lt;br/&gt;   wt_assert.eq&lt;br/&gt;            (msg_in          =&gt; &apos;g_test_runs_rec.dbout_name&apos;&lt;br/&gt;            ,check_this_in   =&gt; g_test_runs_rec.dbout_name&lt;br/&gt;            ,against_this_in =&gt; &apos;WTPLSQL&apos;);&lt;br/&gt;   wt_assert.eq&lt;br/&gt;            (msg_in          =&gt; &apos;g_test_runs_rec.dbout_type&apos;&lt;br/&gt;            ,check_this_in   =&gt; g_test_runs_rec.dbout_type&lt;br/&gt;            ,against_this_in =&gt; &apos;PACKAGE BODY&apos;);&lt;br/&gt;   wt_assert.isnotnull&lt;br/&gt;            (msg_in        =&gt; &apos;g_test_runs_rec.profiler_runid&apos;&lt;br/&gt;            ,check_this_in =&gt; g_test_runs_rec.profiler_runid);&lt;br/&gt;   wt_assert.isnull&lt;br/&gt;            (msg_in        =&gt; &apos;g_test_runs_rec.end_dtm&apos;&lt;br/&gt;            ,check_this_in =&gt; g_test_runs_rec.end_dtm);&lt;br/&gt;   wt_assert.isnull&lt;br/&gt;            (msg_in        =&gt; &apos;g_test_runs_rec.error_message&apos;&lt;br/&gt;            ,check_this_in =&gt; g_test_runs_rec.error_message);&lt;br/&gt;   wt_assert.eqqueryvalue&lt;br/&gt;            (msg_in             =&gt; &apos;TEST_RUNS Record for this TEST_RUN&apos;&lt;br/&gt;            ,check_query_in     =&gt; &apos;select count(*) from WT_TEST_RUNS&apos; ||&lt;br/&gt;                                   &apos; where id = &apos;&apos;&apos; || g_test_runs_rec.id || &apos;&apos;&apos;&apos;&lt;br/&gt;            ,against_value_in   =&gt; 0);&lt;br/&gt;end tc_test_runs_rec_and_table;&lt;br/&gt;&lt;br/&gt;----------------------------------------&lt;br/&gt;procedure tc_check_runner&lt;br/&gt;is&lt;br/&gt;   l_save_test_runs_rec   wt_test_runs%ROWTYPE := g_test_runs_rec;&lt;br/&gt;   l_msg_in   varchar2(4000);&lt;br/&gt;   l_err_in   varchar2(4000);&lt;br/&gt;   procedure test_sqlerrm is begin&lt;br/&gt;      -- Restore the G_TEST_RUNS_REC&lt;br/&gt;      g_test_runs_rec := l_save_test_runs_rec;&lt;br/&gt;      wt_assert.eq&lt;br/&gt;               (msg_in          =&gt; l_msg_in&lt;br/&gt;               ,check_this_in   =&gt; SQLERRM&lt;br/&gt;               ,against_this_in =&gt; l_err_in);&lt;br/&gt;   end test_sqlerrm;&lt;br/&gt;begin&lt;br/&gt;   wt_assert.g_testcase := &apos;CHECK_RUNNER&apos;;&lt;br/&gt;   -- This Test Case runs in the EXECUTE IMMEDAITE in the TEST_RUN&lt;br/&gt;   --   procedure in this package.&lt;br/&gt;   begin&lt;br/&gt;      g_test_runs_rec.runner_name := &apos;&apos;;&lt;br/&gt;      l_msg_in := &apos;Null RUNNER_NAME&apos;;&lt;br/&gt;      l_err_in := &apos;ORA-20001: RUNNER_NAME is null&apos;;&lt;br/&gt;      check_runner;&lt;br/&gt;      test_sqlerrm;&lt;br/&gt;   exception when others then&lt;br/&gt;      test_sqlerrm;&lt;br/&gt;   end;&lt;br/&gt;   begin&lt;br/&gt;      g_test_runs_rec.runner_name := &apos;BOGUS&apos;;&lt;br/&gt;      l_msg_in := &apos;Invalid RUNNER_NAME&apos;;&lt;br/&gt;      l_err_in := &apos;ORA-20002: RUNNER_NAME is not valid&apos;;&lt;br/&gt;      check_runner;&lt;br/&gt;      test_sqlerrm;&lt;br/&gt;   exception when others then&lt;br/&gt;      test_sqlerrm;&lt;br/&gt;   end;&lt;br/&gt;end tc_check_runner;&lt;br/&gt;&lt;br/&gt;----------------------------------------&lt;br/&gt;procedure WTPLSQL_RUN&lt;br/&gt;is&lt;br/&gt;begin&lt;br/&gt;   -- This runs like a self-contained &quot;in-circuit&quot; test.&lt;br/&gt;   tc_check_runner;&lt;br/&gt;   tc_test_runs_rec_and_table;&lt;br/&gt;end;&lt;br/&gt;&lt;br/&gt;$END&lt;br/&gt;&lt;br/&gt;end wtplsql;</source>
</body>
<synonyms>
<Synonym class="oracle.dbtools.crest.model.design.storage.oracle.v10g.SynonymOraclev10g" name="WTPLSQL" directorySegmentName="seg_0" id="ACDA84A7-E2E0-7DE2-1A86-F85F807EF223">
<sourceConnName>wtp@XE</sourceConnName>
<sourceObjSchema>PUBLIC</sourceObjSchema>
<sourceObjName>WTPLSQL</sourceObjName>
<createdBy>Duane</createdBy>
<createdTime>2018-01-21 14:30:36 UTC</createdTime>
<ownerDesignName>wtPLSQL</ownerDesignName>
<object>WTPLSQL</object>
<objectUser>8BAEC76D-10C0-D6CD-F400-EACE584ED648</objectUser>
<public>YES</public>
<user>PUBLIC</user>
<referredObjectID>EBB7B5E0-EA49-2BC8-93E0-45C09C13BFC8</referredObjectID>
</Synonym>
<Synonym class="oracle.dbtools.crest.model.design.storage.oracle.v10g.SynonymOraclev10g" name="WT_WTPLSQL" directorySegmentName="seg_0" id="AD012475-046C-16B7-28AF-A9FEA109DED3">
<sourceConnName>wtp@XE</sourceConnName>
<sourceObjSchema>PUBLIC</sourceObjSchema>
<sourceObjName>WT_WTPLSQL</sourceObjName>
<createdBy>Duane</createdBy>
<createdTime>2018-01-21 14:30:36 UTC</createdTime>
<ownerDesignName>wtPLSQL</ownerDesignName>
<object>WTPLSQL</object>
<objectUser>8BAEC76D-10C0-D6CD-F400-EACE584ED648</objectUser>
<public>YES</public>
<user>PUBLIC</user>
<referredObjectID>EBB7B5E0-EA49-2BC8-93E0-45C09C13BFC8</referredObjectID>
</Synonym>
</synonyms>
</PackageOracle>