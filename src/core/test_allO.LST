
    Start Date/Time: 18-Apr-2018 06:11:54
Test Results Run ID: 11, WTP.WTPLSQL
----------------------------------------
       Total Testcases:        9      Total Assertions:       28
  Minimum Elapsed msec:        0     Failed Assertions:        0
  Average Elapsed msec:        2      Error Assertions:        0
  Maximum Elapsed msec:       16            Test Yield:   100.00%
  Total Run Time (sec):      0.0

WTP.WTPLSQL Details (Test Run ID 11)
----------------------------------------
---***  Show Version Happy Path  ***--------------------------------------------
 PASS   16ms Test Existing Version. ISNOTNULL - Expected NOT NULL and got "1.0"
 PASS   16ms Test New Version. EQ - Expected "TESTING" and got "TESTING"
 PASS    0ms Return to Existing Version. EQ - Expected "1.0" and got "1.0"
---***  CHECK_RUNNER Sad Path 1  ***--------------------------------------------
 PASS    0ms Null RUNNER_NAME. EQ - Expected "ORA-20001: RUNNER_NAME is null" and got "ORA-20001: RUNNER_NAME is null"
---***  CHECK_RUNNER Sad Path 2  ***--------------------------------------------
 PASS    0ms Invalid RUNNER_NAME. EQ - Expected "ORA-20002: RUNNER_NAME "BOGUS" is not valid" and got "ORA-20002: RUNNER_NAME "BOGUS" is not valid"
---***  INSERT_TEST_RUN Happy Path  ***-----------------------------------------
 PASS    0ms Number of Records. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_test_runs where id = 11
 PASS    0ms Records After Delete. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = 11
---***  TEST_ALL Happy Path  ***------------------------------------------------
 PASS    0ms test_all_aa.EXISTS('WTPLSQL'). THIS - Expected "PASS" and got "PASS"
---***  DELETE_RUNS Happy Path 1  ***-------------------------------------------
 PASS    0ms Number of Records Before Insert. ISNOTNULL - Expected NOT NULL and got "4"
 PASS    0ms Number of Records Before Insert <= 20. THIS - Expected "PASS" and got "PASS"
 PASS   15ms Number of Records After Insert. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_test_runs where id = 11
 PASS    0ms Number of Records After Delete. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = 11
---***  DELETE_RUNS Happy Path 2  ***-------------------------------------------
 PASS    0ms Confirm number of records. EQQUERYVALUE - Expected "4" and got "4" for Query: select count(*) from wt_test_runs where runner_owner = 'WTP' and runner_name = 'WTPLSQL'
 PASS    0ms Check Added 20 records. EQQUERYVALUE - Expected "24" and got "24" for Query: select count(*) from wt_test_runs where runner_owner = 'WTP' and runner_name = 'WTPLSQL'
 PASS    0ms Check number of records reduced. EQQUERYVALUE - Expected "20" and got "20" for Query: select count(*) from wt_test_runs where runner_owner = 'WTP' and runner_name = 'WTPLSQL'
 PASS    0ms Confirm original number of records. EQQUERYVALUE - Expected "4" and got "4" for Query: select count(*) from wt_test_runs where runner_owner = 'WTP' and runner_name = 'WTPLSQL'
---***  DELETE_RUNS Sad Path 1  ***---------------------------------------------
 PASS    0ms Delete Runs(-9995). ISNULL - Expected NULL and got ""
---***  TEST_RUNS_REC_AND_TABLE Happy Path  ***---------------------------------
 PASS    0ms g_test_runs_rec.id. ISNOTNULL - Expected NOT NULL and got "11"
 PASS    0ms g_test_runs_rec.start_dtm. ISNOTNULL - Expected NOT NULL and got "18-APR-18 06.11.54.885000 AM"
 PASS    0ms g_test_runs_rec.runner_owner. ISNOTNULL - Expected NOT NULL and got "WTP"
 PASS    0ms g_test_runs_rec.runner_name. EQ - Expected "WTPLSQL" and got "WTPLSQL"
 PASS    0ms g_test_runs_rec.dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms g_test_runs_rec.dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms g_test_runs_rec.dbout_type. ISNULL - Expected NULL and got ""
 PASS    0ms g_test_runs_rec.profiler_runid. ISNULL - Expected NULL and got ""
 PASS    0ms g_test_runs_rec.end_dtm. ISNULL - Expected NULL and got ""
 PASS    0ms g_test_runs_rec.error_message. ISNULL - Expected NULL and got ""
 PASS    0ms TEST_RUNS Record for this TEST_RUN. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from WT_TEST_RUNS where id = '11'


    Start Date/Time: 18-Apr-2018 05:43:39
Test Results Run ID: 8, WTP.WT_ASSERT
----------------------------------------
       Total Testcases:      120      Total Assertions:      337
  Minimum Elapsed msec:        0     Failed Assertions:        0
  Average Elapsed msec:       14      Error Assertions:        0
  Maximum Elapsed msec:      763            Test Yield:   100.00%
  Total Run Time (sec):      4.7

Code Coverage Run ID: 8, PACKAGE BODY WTP.WT_ASSERT
----------------------------------------
    Total Source Lines:     1109          Missed Lines:        0
  Minimum Elapsed usec:        0       Annotated Lines:      812
  Average Elapsed usec:     1296        Excluded Lines:        5
  Maximum Elapsed usec:   249439         Unknown Lines:       43
 Trigger Source Offset:        0         Code Coverage:   100.00%

WTP.WT_ASSERT Details (Test Run ID 8)
----------------------------------------
---***  BOOLEAN_TO_STATUS  ***--------------------------------------------------
 PASS  763ms Test for "TRUE" conversion. EQ - Expected "PASS" and got "PASS"
 PASS    0ms Test for "FALSE" conversion. EQ - Expected "FAIL" and got "FAIL"
 PASS    0ms Test for NULL. ISNULL - Expected NULL and got ""
---***  COMPARE_QUERIES Bad Query Test 1  ***-----------------------------------
 PASS    4ms g_rec.last_pass. EQ - Expected "FAIL" and got "FAIL"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "ORA-06550: line 2, column 60:\nPL/SQL: ORA-00942: table or view does not exist\nORA-06550: line 2, column 18:\nPL/SQL: SQL Statement ignored\nORA-06550: line 2, column 11:\nPLS-00341: declaration of cursor 'CUR' is incomplete or malformed\nORA-06550: line 3, column 8:\nPL/SQL: Item ignored\nORA-06550: line 6, column 19:\nPLS-00320: the declaration of the type of this expression is incomplete or malformed\nORA-06550: line 6, column 4:\nPL/SQL: SQL Statement ignored\nFAILURE of Compare Query: with check_query as (select bogus123 from bogus456), against_query as (select bogus987 from bogus654), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2;"
 PASS    0ms g_rec.last_details. THIS - Expected "PASS" and got "PASS"
---***  COMPARE_QUERIES Bad Query Test 2  ***-----------------------------------
 PASS  365ms g_rec.last_pass. EQ - Expected "FAIL" and got "FAIL"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Comparison Query: with check_query as (select table_name from user_tables), against_query as (select tablespace_name from user_tables), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2"
 PASS    0ms g_rec.last_details. THIS - Expected "PASS" and got "PASS"
---***  NLS Settings  ***-------------------------------------------------------
 PASS    3ms get_NLS_DATE_FORMAT 1. EQ - Expected "DD-MON-YYYY" and got "DD-MON-YYYY"
 PASS    0ms get_NLS_DATE_FORMAT 2. EQ - Expected "DD-MON-YYYY HH24:MI:SS" and got "DD-MON-YYYY HH24:MI:SS"
 PASS    7ms get_NLS_TIMESTAMP_FORMAT 2. EQ - Expected "DD-MON-YYYY" and got "DD-MON-YYYY"
 PASS    0ms get_NLS_TIMESTAMP_FORMAT 2. EQ - Expected "DD-MON-YYYY HH24:MI:SS.FF6" and got "DD-MON-YYYY HH24:MI:SS.FF6"
 PASS    3ms get_NLS_TIMESTAMP_TZ_FORMAT 2. EQ - Expected "DD-MON-YYYY" and got "DD-MON-YYYY"
 PASS    0ms get_NLS_TIMESTAMP_TZ_FORMAT 2. EQ - Expected "DD-MON-YYYY HH24:MI:SS.FF6 TZH:TZM" and got "DD-MON-YYYY HH24:MI:SS.FF6 TZH:TZM"
---***  Last Values Tests  ***--------------------------------------------------
 PASS    0ms Last Pass. EQ - Expected "PASS" and got "PASS"
 PASS    0ms Last Assert. EQ - Expected "EQ" and got "EQ"
 PASS    0ms Last MSG. EQ - Expected "Last Assert" and got "Last Assert"
 PASS    0ms Last Details. EQ - Expected "Expected "Last Assert" and got "Last Assert"" and got "Expected "Last Assert" and got "Last Assert""
---***  RESET_GLOBALS  ***------------------------------------------------------
 PASS    0ms g_testcase. ISNULL - Expected NULL and got ""
 PASS    0ms g_raise_exception. EQ - Expected "FAIL" and got "FAIL"
 PASS    0ms g_rec.last_pass. ISNULL - Expected NULL and got ""
 PASS    1ms g_rec.last_assert. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.last_msg. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.last_details. ISNULL - Expected NULL and got ""
---***  This Happy Path  ***----------------------------------------------------
 PASS    0ms Run Test. THIS - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_pass. EQ - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_assert. EQ - Expected "THIS" and got "THIS"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "Expected "PASS" and got "PASS"" and got "Expected "PASS" and got "PASS""
---***  This Sad Path 1  ***----------------------------------------------------
 PASS    0ms g_rec.last_pass. EQ - Expected "FAIL" and got "FAIL"
---***  This Sad Path 2  ***----------------------------------------------------
 PASS    0ms g_rec.last_pass. EQ - Expected "FAIL" and got "FAIL"
---***  EQ VARCHAR2 Happy Path 1  ***-------------------------------------------
 PASS    0ms Run Test. EQ - Expected "X" and got "X"
 PASS    0ms g_rec.last_pass value. ISNOTNULL - Expected NOT NULL and got "PASS"
 PASS    0ms g_rec.last_pass. THIS - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_assert value. ISNOTNULL - Expected NOT NULL and got "EQ"
 PASS    0ms g_rec.last_assert. THIS - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_msg value. ISNOTNULL - Expected NOT NULL and got "Run Test"
 PASS    0ms g_rec.last_msg. THIS - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "X" and got "X""
 PASS    0ms g_rec.last_details. THIS - Expected "PASS" and got "PASS"
---***  EQ VARCHAR2 Happy Path 2  ***-------------------------------------------
 PASS    0ms Run Test. EQ - Expected "X" and got "X"
---***  EQ VARCHAR2 Happy Path 3  ***-------------------------------------------
 PASS    0ms Run Test. EQ - Expected "" and got ""
---***  EQ VARCHAR2 Sad Path 1  ***---------------------------------------------
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "X"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "Y"
 PASS    1ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ VARCHAR2 Sad Path 2  ***---------------------------------------------
 PASS    0ms check_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "Y"
 PASS    0ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ VARCHAR2 Sad Path 3  ***---------------------------------------------
 PASS    0ms check_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ VARCHAR2 Sad Path 4  ***---------------------------------------------
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "X"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "Y"
 PASS    0ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ VARCHAR2 Sad Path 5  ***---------------------------------------------
 PASS    0ms check_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "Y"
 PASS    0ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ ROWID Happy Path 1  ***----------------------------------------------
 PASS    0ms Run Test. EQ - Expected "AAAFd1AAFAAAABSAA/" and got "AAAFd1AAFAAAABSAA/"
---***  EQ ROWID Sad Path 1  ***------------------------------------------------
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "AAAFd1AAFAAAABSAA/"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "AAAFd1AAFAAAABSAB/"
 PASS    0ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ LONG Happy Path 1  ***-----------------------------------------------
 PASS    0ms Run Test. EQ - Expected "0123456789ABCDEF0123456789ABCDEF" and got "0123456789ABCDEF0123456789ABCDEF"
---***  EQ LONG Sad Path 1  ***-------------------------------------------------
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "0123456789ABCDEF0123456789ABCDEF"
 PASS    1ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "FEDCBA9876543210FEDCBA9876543210"
 PASS    0ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ RAW Happy Path 1  ***------------------------------------------------
 PASS    0ms Run Test. EQ - Expected "2345" and got "2345"
---***  EQ RAW Sad Path 1  ***--------------------------------------------------
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "2345"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "6789"
 PASS    0ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ LANG RAW Happy Path 1  ***-------------------------------------------
 PASS    0ms Run Test. EQ - Expected "0123456789ABCDEF0123456789ABCDEF" and got "0123456789ABCDEF0123456789ABCDEF"
---***  EQ LONG RAW Sad Path 1  ***---------------------------------------------
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "0123456789ABCDEF0123456789ABCDEF"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "FEDCBA9876543210FEDCBA9876543210"
 PASS    0ms Sad Path 1. THIS - Expected "PASS" and got "PASS"
---***  EQ NVARCHAR2 Happy Path 1  ***------------------------------------------
 PASS    0ms Run Test. EQ - Expected "NCHAR1" and got "NCHAR1"
---***  EQ NVARCHAR2 Sad Path 1  ***--------------------------------------------
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "NCHAR1"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "NCHAR2"
 PASS    0ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ BOOLEAN Happy Path 1  ***--------------------------------------------
 PASS    0ms Run Test. EQ - Expected "FAIL" and got "FAIL"
---***  EQ BOOLEAN Happy Path 2  ***--------------------------------------------
 PASS    0ms Run Test. EQ - Expected "FAIL" and got "FAIL"
---***  EQ BOOLEAN Happy Path 3  ***--------------------------------------------
 PASS    0ms Run Test. EQ - Expected "" and got ""
---***  EQ BOOLEAN Happy Sad 1  ***---------------------------------------------
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "FAIL"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "PASS"
 PASS    0ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ BOOLEAN Happy Sad 2  ***---------------------------------------------
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "FAIL"
 PASS    0ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ BOOLEAN Happy Sad 3  ***---------------------------------------------
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "FAIL"
 PASS    1ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "PASS"
 PASS    0ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ BOOLEAN Happy Sad 4  ***---------------------------------------------
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "FAIL"
 PASS    0ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ NUMBER Happy Path 1  ***---------------------------------------------
 PASS    0ms Run Test. EQ - Expected "4" and got "4"
---***  EQ NUMBER Happy Path 2  ***---------------------------------------------
 PASS    0ms Run Test. EQ - Expected "9876543210987654321098765432109876543210" and got "9876543210987654321098765432109876543210"
---***  EQ NUMBER Happy Path 1  ***---------------------------------------------
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "4"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "5"
 PASS    0ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ PLS_INTEGER Happy Path 1  ***----------------------------------------
 PASS    0ms Run Test. EQ - Expected "2" and got "2"
---***  EQ PLS_INTEGER Sad Path 1  ***------------------------------------------
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "2"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "3"
 PASS    0ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ DATE Happy Path 1  ***-----------------------------------------------
 PASS    0ms Run Test. EQ - Expected "18-APR-2018 05:43:39" and got "18-APR-2018 05:43:39"
---***  EQ DATE Sad Path 1  ***-------------------------------------------------
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "18-APR-2018 05:43:39"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "18-APR-2018 06:43:39"
 PASS    1ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ TIMSETAMP Happy Path 1  ***------------------------------------------
 PASS    0ms EQ TIMSETAMP Happy Path 1. EQ - Expected "18-APR-2018 05:43:39.452000" and got "18-APR-2018 05:43:39.452000"
---***  EQ TIMSETAMP Sad Path 1  ***--------------------------------------------
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "18-APR-2018 05:43:39.452000"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "18-APR-2018 06:43:39"
 PASS    0ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ TIMSETAMP WITH LOCAL TIME ZONE Happy Path 1  ***---------------------
 PASS    0ms Run Test. EQ - Expected "18-APR-2018 05:43:39.452000 -05:00" and got "18-APR-2018 05:43:39.452000 -05:00"
---***  EQ TIMSETAMP WITH LOCAL TIME ZONE Sad Path 1  ***-----------------------
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "18-APR-2018 05:43:39.452000"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "18-APR-2018 06:43:39"
 PASS    0ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ TIMSETAMP WITH TIME ZONE Happy Path 1  ***---------------------------
 PASS    0ms Run Test. EQ - Expected "18-APR-2018 05:43:39.452000 -05:00" and got "18-APR-2018 05:43:39.452000 -05:00"
---***  EQ TIMSETAMP WITH TIME ZONE Sad Path 1  ***-----------------------------
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "18-APR-2018 05:43:39.452000 -05:00"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "18-APR-2018 06:43:39"
 PASS    0ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ INTERVAL DAY TO SECOND Happy Path 1  ***-----------------------------
 PASS    0ms Run Test. EQ - Expected "+01 01:01:01.001000" and got "+01 01:01:01.001000"
---***  EQ INTERVAL DAY TO SECOND Sad Path 1  ***-------------------------------
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "+01 01:01:01.001000"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "+02 02:02:02.002000"
 PASS    1ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ INTERVAL YEAR TO MONTH Happy Path 1  ***-----------------------------
 PASS    0ms Run Test. EQ - Expected "+01-01" and got "+01-01"
---***  EQ INTERVAL YEAR TO MONTH Sad Path 1  ***-------------------------------
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "+01-01"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "+02-02"
 PASS    0ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ XMLTYPE Happy Path 1  ***--------------------------------------------
 PASS  101ms Run Test. EQ - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=award
full&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/se
arch.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   "
 PASS    1ms g_rec.last_pass value. ISNOTNULL - Expected NOT NULL and got "PASS"
 PASS    0ms g_rec.last_pass. THIS - Expected "PASS" and got "PASS"
 PASS    0ms  g_rec.last_assert value. ISNOTNULL - Expected NOT NULL and got "EQ"
 PASS    0ms g_rec.last_assert. THIS - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_msg value. ISNOTNULL - Expected NOT NULL and got "Run Test"
 PASS    0ms g_rec.last_msg. THIS - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds
.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type=
"text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF0"
 PASS    0ms g_rec.last_details. THIS - Expected "PASS" and got "PASS"
---***  EQ XMLTYPE Sad Path 1  ***----------------------------------------------
 PASS   39ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/s
earch.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber>\n          </ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n          </ns1:referencedIDVID>\n        </ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <
ns1:effectiveDate>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:curr"
 PASS    1ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?><note>2</note>"
 PASS    0ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ CLOB Happy Path 1  ***-----------------------------------------------
 PASS    2ms Run Test. EQ - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&a
mp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpd
s.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J"
 PASS    1ms g_rec.last_pass value. ISNOTNULL - Expected NOT NULL and got "PASS"
 PASS    0ms g_rec.last_pass. THIS - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_assert value. ISNOTNULL - Expected NOT NULL and got "EQ"
 PASS    0ms g_rec.last_assert. THIS - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_msg value. ISNOTNULL - Expected NOT NULL and got "Run Test"
 PASS    0ms g_rec.last_msg. THIS - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href
="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel=
"alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName"
 PASS    0ms g_rec.last_details. THIS - Expected "PASS" and got "PASS"
---***  EQ CLOB Happy Path 2  ***-----------------------------------------------
 PASS    3ms Run Test. EQ - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&a
mp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpd
s.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J"
---***  EQ CLOB Happy Path 3  ***-----------------------------------------------
 PASS    1ms Run Test. EQ - Expected "" and got ""
---***  EQ CLOB Sad Path 1  ***-------------------------------------------------
 PASS    3ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.f
pds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:effect
iveDate>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    1ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "This is another clob."
 PASS    0ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ CLOB Sad Path 2  ***-------------------------------------------------
 PASS    6ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.f
pds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:effect
iveDate>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    0ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
 PASS    7ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.f
pds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:effect
iveDate>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    0ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ NCLOB Happy Path 1  ***----------------------------------------------
 PASS   24ms Run Test. EQ - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&a
mp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpd
s.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J"
---***  EQ NCLOB Happy Path 2  ***----------------------------------------------
 PASS   14ms Run Test. EQ - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&a
mp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpd
s.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J"
---***  EQ NCLOB Happy Path 3  ***----------------------------------------------
 PASS    2ms Run Test. EQ - Expected "" and got ""
---***  EQ NCLOB Sad Path 1  ***------------------------------------------------
 PASS   18ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.f
pds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:effect
iveDate>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    1ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "This is another clob."
 PASS    0ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ NCLOB Sad Path 2  ***------------------------------------------------
 PASS   18ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.f
pds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:effect
iveDate>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    1ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ NCLOB Sad Path 3  ***------------------------------------------------
 PASS   13ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.f
pds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:effect
iveDate>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    1ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    1ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ BLOB Happy Path 1  ***-----------------------------------------------
 PASS    6ms Run Test. EQ - DBMS_LOB.COMPARE on BLOBs, compare_results: 0
 PASS    0ms g_rec.last_pass value. ISNOTNULL - Expected NOT NULL and got "PASS"
 PASS    0ms g_rec.last_pass. THIS - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_assert value. ISNOTNULL - Expected NOT NULL and got "EQ"
 PASS    0ms g_rec.last_assert. THIS - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_msg value. ISNOTNULL - Expected NOT NULL and got "Run Test"
 PASS    0ms g_rec.last_msg. THIS - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "DBMS_LOB.COMPARE on BLOBs, compare_results: 0"
 PASS    0ms g_rec.last_details. THIS - Expected "PASS" and got "PASS"
---***  EQ BLOB Happy Path 2  ***-----------------------------------------------
 PASS    0ms Run Test. EQ - DBMS_LOB.COMPARE on BLOBs, compare_results: 0
---***  EQ BLOB Happy Path 3  ***-----------------------------------------------
 PASS    0ms Run Test. EQ - DBMS_LOB.COMPARE on BLOBs, compare_results: -1
---***  EQ BLOB Sad Path 1  ***-------------------------------------------------
 PASS    1ms check_this_in value. ISNOTNULL - BLOB is NOT NULL
 PASS    0ms against_this_in value. ISNOTNULL - BLOB is NOT NULL
 PASS    0ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ BLOB Sad Path 2  ***-------------------------------------------------
 PASS    0ms check_this_in value. ISNOTNULL - BLOB is NOT NULL
 PASS    0ms against_this_in value. ISNULL - BLOB is NULL
 PASS    0ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  EQ BLOB Sad Path 3  ***-------------------------------------------------
 PASS    1ms check_this_in value. ISNOTNULL - BLOB is NOT NULL
 PASS    0ms against_this_in value. ISNULL - BLOB is NULL
 PASS    0ms last_pass = FALSE. THIS - Expected "PASS" and got "PASS"
---***  ISNOTNULL VARCHAR2 Happy Path 1  ***------------------------------------
 PASS    4ms Run Test. ISNOTNULL - Expected NOT NULL and got "X"
 PASS    0ms g_rec.last_pass. EQ - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_assert. EQ - Expected "ISNOTNULL" and got "ISNOTNULL"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "Expected NOT NULL and got "X"" and got "Expected NOT NULL and got "X""
---***  ISNOTNULL VARCHAR2 Sad Path 1  ***--------------------------------------
 PASS    0ms g_rec.last_pass. EQ - Expected "FAIL" and got "FAIL"
---***  ISNOTNULL BOOLEAN Happy Path 1  ***-------------------------------------
 PASS    0ms Run Test. ISNOTNULL - Expected NOT NULL and got "PASS"
---***  ISNOTNULL BOOLEAN Sad Path 1  ***---------------------------------------
 PASS    0ms g_rec.last_pass. EQ - Expected "FAIL" and got "FAIL"
---***  ISNOTNULL CLOB Happy Path 1  ***----------------------------------------
 PASS    2ms Run Test. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezs
earch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:effectiveDate>200
7-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    1ms g_rec.last_pass. EQ - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_assert. EQ - Expected "ISNOTNULL" and got "ISNOTNULL"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type
="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:si
gnedDate>\n          <ns1:effectiveDate>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-1"
 PASS    0ms g_rec.last_details. THIS - Expected "PASS" and got "PASS"
---***  ISNOTNULL CLOB Sad Path 1  ***------------------------------------------
 PASS    0ms g_rec.last_pass. EQ - Expected "FAIL" and got "FAIL"
---***  ISNOTNULL BLOB Happy Path 1  ***----------------------------------------
 PASS    1ms Run Test. ISNOTNULL - BLOB is NOT NULL
 PASS    0ms g_rec.last_pass. EQ - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_assert. EQ - Expected "ISNOTNULL" and got "ISNOTNULL"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "BLOB is NOT NULL" and got "BLOB is NOT NULL"
---***  ISNOTNULL BLOB Sad Path 1  ***------------------------------------------
 PASS    0ms g_rec.last_pass. EQ - Expected "FAIL" and got "FAIL"
---***  ISNULL VARCHAR2 Happy Path 1  ***---------------------------------------
 PASS    0ms Run Test. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.last_pass. EQ - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_assert. EQ - Expected "ISNULL" and got "ISNULL"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "Expected NULL and got """ and got "Expected NULL and got """
---***  ISNULL VARCHAR2 Sad Path 1  ***-----------------------------------------
 PASS    0ms g_rec.last_pass. EQ - Expected "FAIL" and got "FAIL"
---***  ISNULL BOOLEAN Happy Path 1  ***----------------------------------------
 PASS    0ms Run Test. ISNULL - Expected NULL and got ""
---***  ISNULL BOOLEAN Sad Path 1  ***------------------------------------------
 PASS    0ms g_rec.last_pass. EQ - Expected "FAIL" and got "FAIL"
---***  ISNULL CLOB Happy Path 1  ***-------------------------------------------
 PASS    1ms Run Test. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.last_pass. EQ - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_assert. EQ - Expected "ISNULL" and got "ISNULL"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "Expected NULL and got """ and got "Expected NULL and got """
---***  ISNULL CLOB Sad Path 1  ***---------------------------------------------
 PASS    1ms g_rec.last_pass. EQ - Expected "FAIL" and got "FAIL"
---***  ISNULL BLOB Happy Path 1  ***-------------------------------------------
 PASS    0ms Run Test. ISNULL - BLOB is NULL
 PASS    0ms g_rec.last_pass. EQ - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_assert. EQ - Expected "ISNULL" and got "ISNULL"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "BLOB is NULL" and got "BLOB is NULL"
---***  ISNULL BLOB Sad Path 1  ***---------------------------------------------
 PASS    0ms g_rec.last_pass. EQ - Expected "FAIL" and got "FAIL"
---***  Raises Tests Happy Path  ***--------------------------------------------
 PASS    2ms Run Test. RAISES - Expected exception "%PLS-00302: component 'BOGUS' must be declared%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored\nORA-06512: at "WTP.WT_ASSERT", line 1894\n". Exception raised by: wt_assert.bogus
 PASS    0ms g_rec.last_pass. EQ - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_assert. EQ - Expected "RAISES" and got "RAISES"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected exception "%PLS-00302: component 'BOGUS' must be declared%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored\nORA-06512: at "WTP.WT_ASSERT", line 1894\n". Exception raised by: wt_assert.bogus"
 PASS    0ms g_rec.last_details. THIS - Expected "PASS" and got "PASS"
---***  Raises Tests Sad Path 1  ***--------------------------------------------
 PASS    1ms g_rec.last_pass. EQ - Expected "FAIL" and got "FAIL"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected exception "%Incorrect Exception%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored\nORA-06512: at "WTP.WT_ASSERT", line 1894\n". Exception raised by: wt_assert.bogus"
 PASS    0ms g_rec.last_details. THIS - Expected "PASS" and got "PASS"
---***  Raises Tests Sad Path 2  ***--------------------------------------------
 PASS    2ms g_rec.last_pass. EQ - Expected "FAIL" and got "FAIL"
 PASS    0ms g_rec.last_details. EQ - Expected "Expected exception "%Incorrect Exception%". Actual exception raised was "". Exception raised by: wt_assert.set_NLS_DATE_FORMAT" and got "Expected exception "%Incorrect Exception%". Actual exception raised was "". Exception raised by: wt_assert.set_NLS_DATE_FORMAT"
---***  EQQUERYVALUE VARCHAR2 Happy Path 1  ***---------------------------------
 PASS    3ms Run Test. EQQUERYVALUE - Expected "X" and got "X" for Query: select dummy from DUAL
 PASS    0ms g_rec.last_pass. EQ - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_assert. EQ - Expected "EQQUERYVALUE" and got "EQQUERYVALUE"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "Expected "X" and got "X" for Query: select dummy from DUAL" and got "Expected "X" and got "X" for Query: select dummy from DUAL"
---***  EQQUERYVALUE VARCHAR2 Happy Path 2  ***---------------------------------
 PASS    6ms Run Test. EQQUERYVALUE - Expected "" and got "" for Query: select max(dummy) from DUAL where 0 = 1
---***  EQQUERYVALUE VARCHAR2 Sad Path 1  ***-----------------------------------
 PASS    0ms g_rec.last_pass. EQ - Expected "FAIL" and got "FAIL"
---***  EQQUERYVALUE XMLTYPE Happy Path 1  ***----------------------------------
 PASS   72ms Run Test. EQQUERYVALUE - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;index
Name=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/e
zsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " for Query: select temp_xml from wt_test_data where id = 1
 PASS    0ms g_rec.last_pass. EQ - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_assert. EQ - Expected "EQQUERYVALUE" and got "EQQUERYVALUE"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds
.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type=
"text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF0"
 PASS    0ms g_rec.last_details. THIS - Expected "PASS" and got "PASS"
---***  EQQUERYVALUE XMLTYPE Sad Path 1  ***------------------------------------
 PASS   22ms g_rec.last_pass. EQ - Expected "FAIL" and got "FAIL"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "<?xml version="1.0" encoding="UTF-8"?><note>2</note>" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n  
  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " for Query: select temp_xml from wt_test_data where id = 1"
 PASS    0ms g_rec.last_details. THIS - Expected "PASS" and got "PASS"
---***  EQQUERYVALUE CLOB Happy Path 1  ***-------------------------------------
 PASS   14ms Run Test. EQQUERYVALUE - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.d
o?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https
://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" for Query: select temp_clob from wt_test_data where id = 1
 PASS    0ms g_rec.last_pass. EQ - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_assert. EQ - Expected "EQQUERYVALUE" and got "EQQUERYVALUE"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href
="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel=
"alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName"
 PASS    0ms g_rec.last_details. THIS - Expected "PASS" and got "PASS"
---***  EQQUERYVALUE CLOB Happy Path 2  ***-------------------------------------
 PASS    2ms Run Test. EQQUERYVALUE - Expected "" and got "" for Query: select temp_clob from wt_test_data where 0 = 1
---***  EQQUERYVALUE CLOB Sad Path 1  ***---------------------------------------
 PASS    3ms g_rec.last_pass. EQ - Expected "FAIL" and got "FAIL"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "This is another clob." and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="
alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" for Query: select temp_clob from wt_test_data where id = 1"
 PASS    0ms g_rec.last_details. THIS - Expected "PASS" and got "PASS"
---***  EQQUERYVALUE BLOB Happy Path 1  ***-------------------------------------
 PASS    7ms Run Test. EQQUERYVALUE - DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_test_data where id = 1, compare_results: 0
 PASS    0ms g_rec.last_pass. EQ - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_assert. EQ - Expected "EQQUERYVALUE" and got "EQQUERYVALUE"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_test_data where id = 1, compare_results: 0" and got "DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_test_data where id = 1, compare_results: 0"
---***  EQQUERYVALUE BLOB Happy Path 2  ***-------------------------------------
 PASS    2ms Run Test. EQQUERYVALUE - DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_test_data where 0 = 1, compare_results: -1
---***  EQQUERYVALUE BLOB Sad Path 1  ***---------------------------------------
 PASS    2ms g_rec.last_pass. EQ - Expected "FAIL" and got "FAIL"
 PASS    1ms g_rec.last_details. EQ - Expected "DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_test_data where id = 1, compare_results: -1" and got "DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_test_data where id = 1, compare_results: -1"
---***  EQQUERY Tests Happy Path 1  ***-----------------------------------------
 PASS  410ms Run Test. EQQUERY - Comparison Query: with check_query as (select * from USER_TABLES), against_query as (select * from USER_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2
 PASS    0ms g_rec.last_pass. EQ - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_assert. EQ - Expected "EQQUERY" and got "EQQUERY"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Comparison Query: with check_query as (select * from USER_TABLES), against_query as (select * from USER_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2"
 PASS    0ms EQQUERY Tests Happy Path 1b g_rec.last_details. THIS - Expected "PASS" and got "PASS"
---***  EQQUERY Tests Sad Path 1  ***-------------------------------------------
 PASS  438ms g_rec.last_pass. EQ - Expected "FAIL" and got "FAIL"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Comparison Query: with check_query as (select * from USER_TABLES), against_query as (select * from USER_TABLES where 0 = 1), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2"
 PASS    0ms g_rec.last_details. THIS - Expected "PASS" and got "PASS"
---***  EQQUERY Tests Sad Path 2  ***-------------------------------------------
 PASS    3ms g_rec.last_pass. EQ - Expected "FAIL" and got "FAIL"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "ORA-06550: line 2, column 119:\nPL/SQL: ORA-01789: query block has incorrect number of result columns\nORA-06550: line 2, column 18:\nPL/SQL: SQL Statement ignored\nORA-06550: line 2, column 11:\nPLS-00341: declaration of cursor 'CUR' is incomplete or malformed\nORA-06550: line 3, column 8:\nPL/SQL: Item ignored\nORA-06550: line 6, column 19:\nPLS-00320: the declaration of the type of this expression is incomplete or malformed\nORA-06550: line 6, column 4:\nPL/SQL: SQL Statement ignored\nFAILURE of Compare Query: with check_query as (select * from USER_TABLES), against_query as (select * from ALL_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2;"
 PASS    0ms g_rec.last_details. THIS - Expected "PASS" and got "PASS"
---***  EQTABLE Tests Happy Path 1  ***-----------------------------------------
 PASS  394ms Run Test. EQTABLE - Comparison Query: with check_query as (select * from USER_TABLES), against_query as (select * from USER_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2
 PASS    0ms g_rec.last_pass. EQ - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_assert. EQ - Expected "EQTABLE" and got "EQTABLE"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Comparison Query: with check_query as (select * from USER_TABLES), against_query as (select * from USER_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2"
 PASS    0ms g_rec.last_details. THIS - Expected "PASS" and got "PASS"
---***  EQTABLE Tests Happy Path 2  ***-----------------------------------------
 PASS  423ms Run Test. EQTABLE - Comparison Query: with check_query as (select * from ALL_TABLES where owner = 'WTP'), against_query as (select * from ALL_TABLES where owner = 'WTP'), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2
---***  EQTABLE Sad Path 1  ***-------------------------------------------------
 PASS  547ms g_rec.last_pass. EQ - Expected "FAIL" and got "FAIL"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Comparison Query: with check_query as (select * from ALL_TABLES where owner = 'WTP'), against_query as (select * from ALL_TABLES where 0 = 1), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2"
 PASS    0ms g_rec.last_details. THIS - Expected "PASS" and got "PASS"
---***  EQTABLE Sad Path 2  ***-------------------------------------------------
 PASS    3ms g_rec.last_pass. EQ - Expected "FAIL" and got "FAIL"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "ORA-06550: line 2, column 119:\nPL/SQL: ORA-01789: query block has incorrect number of result columns\nORA-06550: line 2, column 18:\nPL/SQL: SQL Statement ignored\nORA-06550: line 2, column 11:\nPLS-00341: declaration of cursor 'CUR' is incomplete or malformed\nORA-06550: line 3, column 8:\nPL/SQL: Item ignored\nORA-06550: line 6, column 19:\nPLS-00320: the declaration of the type of this expression is incomplete or malformed\nORA-06550: line 6, column 4:\nPL/SQL: SQL Statement ignored\nFAILURE of Compare Query: with check_query as (select * from USER_TABLES), against_query as (select * from ALL_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2;"
 PASS    0ms g_rec.last_details. THIS - Expected "PASS" and got "PASS"
---***  EQTABCOUNT Tests Happy Path 1  ***--------------------------------------
 PASS  171ms Run Test. EQTABCOUNT - Expected 8 rows from "ALL_TABLES" and got 8 rows from "ALL_TABLES"
 PASS    0ms g_rec.last_pass. EQ - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_assert. EQ - Expected "EQTABCOUNT" and got "EQTABCOUNT"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected 8 rows from "ALL_TABLES" and got 8 rows from "ALL_TABLES""
 PASS    1ms g_rec.last_details. THIS - Expected "PASS" and got "PASS"
---***  EQTABCOUNT Tests Happy Path 2  ***--------------------------------------
 PASS  150ms Run Test. EQTABCOUNT - Expected 8 rows from "USER_TABLES" and got 8 rows from "ALL_TABLES"
---***  EQTABCOUNT Sad Path 1  ***----------------------------------------------
 PASS  127ms g_rec.last_pass. EQ - Expected "FAIL" and got "FAIL"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected 8 rows from "ALL_TABLES" and got 0 rows from "ALL_TABLES""
 PASS    0ms g_rec.last_details. THIS - Expected "PASS" and got "PASS"
---***  EQTABCOUNT Sad Path 2  ***----------------------------------------------
 PASS  279ms g_rec.last_pass. EQ - Expected "FAIL" and got "FAIL"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected 65 rows from "USER_TAB_COLUMNS" and got 8 rows from "USER_TABLES""
 PASS    0ms g_rec.last_details. THIS - Expected "PASS" and got "PASS"
---***  EQTABCOUNT Sad Path 3  ***----------------------------------------------
 PASS    1ms g_rec.last_pass. EQ - Expected "FAIL" and got "FAIL"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "ORA-00942: table or view does not exist\nFAILURE of Compare Query: select count(*) from BOGUS1;"
 PASS    0ms g_rec.last_details. THIS - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_details 2. THIS - Expected "PASS" and got "PASS"
---***  OBJEXISTS Happy Path 1  ***---------------------------------------------
 PASS  107ms Run Test. OBJEXISTS - Number of objects found for "SYS.DUAL" is 1
 PASS    0ms g_rec.last_pass. EQ - Expected "PASS" and got "PASS"
 PASS    1ms g_rec.last_assert. EQ - Expected "OBJEXISTS" and got "OBJEXISTS"
 PASS    1ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "Number of objects found for "SYS.DUAL" is 1" and got "Number of objects found for "SYS.DUAL" is 1"
---***  OBJEXISTS Happy Path 2  ***---------------------------------------------
 PASS    1ms Run Test. OBJEXISTS - Number of objects found for "SYS.DUAL"(TABLE) is 1
---***  OBJEXISTS Happy Path 3  ***---------------------------------------------
 PASS    0ms Run Test. OBJEXISTS - Number of objects found for "SYS.DUAL" is 1
---***  OBJEXISTS Happy Path 4  ***---------------------------------------------
 PASS    8ms Run Test. OBJEXISTS - Number of objects found for "DUAL" is 2
---***  OBJEXISTS Sad Path 1  ***-----------------------------------------------
 PASS  109ms g_rec.last_pass. EQ - Expected "FAIL" and got "FAIL"
 PASS    1ms g_rec.last_details. EQ - Expected "Number of objects found for "JOE SMITH.BOGUS" is 0" and got "Number of objects found for "JOE SMITH.BOGUS" is 0"
---***  OBJNOTEXISTS Happy Path 1  ***------------------------------------------
 PASS    0ms Run Test. OBJNOTEXISTS - Number of objects found for "BOGUS.THING123" is 0
 PASS    0ms g_rec.last_pass. EQ - Expected "PASS" and got "PASS"
 PASS    0ms g_rec.last_assert. EQ - Expected "OBJNOTEXISTS" and got "OBJNOTEXISTS"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "Number of objects found for "BOGUS.THING123" is 0" and got "Number of objects found for "BOGUS.THING123" is 0"
---***  OBJNOTEXISTS Happy Path 2  ***------------------------------------------
 PASS    0ms Run Test. OBJNOTEXISTS - Number of objects found for "BOGUS.THING123"(PACKAGE) is 0
---***  OBJNOTEXISTS Happy Path 3  ***------------------------------------------
 PASS    1ms Run Test. OBJNOTEXISTS - Number of objects found for "BOGUS.THING123" is 0
---***  OBJNOTEXISTS Sad Path 1  ***--------------------------------------------
 PASS    0ms g_rec.last_pass. EQ - Expected "FAIL" and got "FAIL"
 PASS    0ms g_rec.last_details. EQ - Expected "Number of objects found for "SYS.DUAL" is 1" and got "Number of objects found for "SYS.DUAL" is 1"

WTP.WT_ASSERT PACKAGE BODY Code Coverage Details (Test Run ID 8)
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
     1 EXCL      0         0       0         0 package body wt_assert is
    13 ANNO      0         0       0         0       temp_rowid1 CONSTANT rowid          := chartorowid('AAAFd1AAFAAAABSAA/');
    14 ANNO      0         0       0         0       temp_rowid2 CONSTANT rowid          := chartorowid('AAAFd1AAFAAAABSAB/');
    15 ANNO      0         0       0         0       temp_long1  CONSTANT long           := hextoraw('0123456789ABCDEF0123456789ABCDEF');
    16 ANNO      0         0       0         0       temp_long2  CONSTANT long           := hextoraw('FEDCBA9876543210FEDCBA9876543210');
    17 ANNO      0         0       0         0       temp_raw1   CONSTANT raw(2)         := hextoraw('2345');
    18 ANNO      0         0       0         0       temp_raw2   CONSTANT raw(2)         := hextoraw('6789');
    19 ANNO      0         0       0         0       temp_lraw1  CONSTANT long raw       := hextoraw('0123456789ABCDEF0123456789ABCDEF');
    20 ANNO      0         0       0         0       temp_lraw2  CONSTANT long raw       := hextoraw('FEDCBA9876543210FEDCBA9876543210');
    22 ANNO      0         0       0         0       temp_blob2  CONSTANT BLOB           := hextoraw('FEDCBA9876543210FEDCBA9876543210');
    23 ANNO      0         0       0         0       temp_nc1    CONSTANT NVARCHAR2(12)  := 'NCHAR1';
    24 ANNO      0         0       0         0       temp_nc2    CONSTANT NVARCHAR2(12)  := 'NCHAR2';
    25 ANNO      0         0       0         0       temp_bool   CONSTANT boolean        := NULL;
    27 ANNO      0         0       0         0       temp_clob2  CONSTANT CLOB           := 'This is another clob.';
    29 ANNO      0         0       0         0       temp_nclob2 CONSTANT NCLOB          := 'This is another clob.';
    31 ANNO      0         0       0         0       temp_xml2   CONSTANT XMLTYPE        := xmltype('<?xml version="1.0" encoding="UTF-8"?><note>2</note>');
    32 ANNO      0         0       0         0       temp_pint1  CONSTANT pls_integer    := 2;
    33 ANNO      0         0       0         0       temp_pint2  CONSTANT pls_integer    := 3;
    34 ANNO      0         0       0         0       temp_date   CONSTANT date           := sysdate;
    35 ANNO      0         0       0         0       temp_tstmp  CONSTANT timestamp      := systimestamp;
    36 ANNO      0         0       0         0       temp_tstlzn CONSTANT timestamp with local time zone := systimestamp;
    37 ANNO      0         0       0         0       temp_tstzn  CONSTANT timestamp with time zone := systimestamp;
    38 ANNO      0         0       0         0       temp_intds1 CONSTANT interval day to second   := interval '+01 01:01:01.001' day to second;
    39 ANNO      0         0       0         0       temp_intds2 CONSTANT interval day to second   := interval '+02 02:02:02.002' day to second;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
    40 ANNO      0         0       0         0       temp_intym1 CONSTANT interval year to month   := interval '+01-01' year to month;
    41 ANNO      0         0       0         0       temp_intym2 CONSTANT interval year to month   := interval '+02-02' year to month;
    45 ANNO      0         0       0         0       wtplsql_skip_save boolean := FALSE;
    53 UNKN      0       139       0        88 function boolean_to_status
    58 EXEC    197        33       0         1    if in_boolean is null
    60 EXEC     11         2       0         1       return '';
    61 EXEC    186        26       0         1    elsif in_boolean
    63 EXEC    115        24       0         8       return C_PASS;
    65 EXEC     71        22       0         1    return C_FAIL;
    66 EXEC    197        31       0         2 end boolean_to_status;
    70 ANNO      0         6       6         6    procedure t_boolean_to_status
    73 ANNO      1         3       3         3       wt_assert.g_testcase := 'BOOLEAN_TO_STATUS';
    75 ANNO      1         0       0         0       wt_assert.eq
    79 ANNO      1         2       1         1       wt_assert.eq
    83 ANNO      1         1       1         1       wt_assert.isnull
    86 ANNO      1         1       1         1    end t_boolean_to_status;
    91 UNKN      0       375       0        15 procedure process_assertion
    96 ANNO    395        66       1         1       if not wtplsql_skip_save then
    98 EXEC    337       160       0         3    wt_result.save
   100 UNKN      0       628       0        52       ,in_status         => case g_rec.last_pass
   101 UNKN      0        97       0         2                             when TRUE then C_PASS
   111 EXEC    395      1126       0      1042    if g_raise_exception and not g_rec.last_pass
   113 EXEC      1       150       1        77       raise_application_error(-20003, wt_text_report.format_test_result
   120 UNKN      0       104       0         2 end process_assertion;
   124 ANNO      0         1       1         1    procedure t_process_assertion
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   130 ANNO      1         1       1         1       g_testcase         := 'PROCESS_ASSERTION';
   131 ANNO      1         1       1         1       g_rec.last_assert  := 'THIS';
   132 ANNO      1         0       0         0       g_rec.last_pass    := FALSE;
   133 ANNO      1         0       0         0       g_rec.last_details := 'Expected "PASS" and got "FAIL"';
   134 ANNO      1         1       1         1       g_rec.last_msg     := 'Process Assertion Forced Failure';
   135 ANNO      1         0       0         0       wt_assert.g_raise_exception  := TRUE;
   136 ANNO      1         1       1         1       wtplsql_skip_save  := TRUE;
   137 ANNO      1         0       0         0       process_assertion;  -- Should throw exception
   138 ANNO      0         0       0         0       wtplsql_skip_save  := FALSE;
   139 ANNO      0         0       0         0       wt_assert.g_raise_exception  := FALSE;
   141 ANNO      1         0       0         0       when ASSERT_TEST_EXCEPTION then
   142 ANNO      1         0       0         0          wtplsql_skip_save := FALSE;
   143 ANNO      1         0       0         0          g_raise_exception := FALSE;
   144 ANNO      1         2       0         2    end t_process_assertion;
   149 EXEC      9        27       1         4 procedure compare_queries (
   158 EXEC      9        22       1         6    l_qry_txt := 'with check_query as (' || check_query_in   ||
   167 EXEC      9        10       1         2    l_exec_txt :=
   180 EXEC      9     65013     201     14500    execute immediate l_exec_txt using out l_ret_txt;
   181 EXEC      6         7       1         2    if l_ret_txt = 'FOUND'
   183 EXEC      3         4       1         2       g_rec.last_pass := FALSE; -- Some Difference Found
   185 EXEC      3         6       2         2       g_rec.last_pass := TRUE;  -- Nothing found, queries match
   188 EXEC      6        46       4        20    g_rec.last_details := 'Comparison Query: ' || l_qry_txt;
   190 EXEC      3         0       0         0    when OTHERS
   192 EXEC      3       225      55        90       g_rec.last_details := SQLERRM || CHR(10) ||
   194 EXEC      3         2       0         1       g_rec.last_pass    := FALSE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   195 EXEC      9        20       1         3 end compare_queries;
   199 ANNO      0         2       2         2    procedure t_compare_queries
   203 ANNO      1         1       1         1       wt_assert.g_testcase := 'COMPARE_QUERIES Bad Query Test 1';
   204 ANNO      1         0       0         0       compare_queries (
   207 ANNO      1         5       5         5       temp_rec := g_rec;
   208 ANNO      1         0       0         0       wt_assert.eq (
   212 ANNO      1         0       0         0       wt_assert.isnotnull(
   215 ANNO      1        11      11        11       wt_assert.this(
   220 ANNO      1         1       1         1       wt_assert.g_testcase := 'COMPARE_QUERIES Bad Query Test 2';
   221 ANNO      1         1       1         1       compare_queries (
   224 ANNO      1         5       5         5       temp_rec := g_rec;
   225 ANNO      1         1       1         1       wt_assert.eq (
   229 ANNO      1         1       1         1       wt_assert.isnotnull(
   232 ANNO      1         5       5         5       wt_assert.this(
   237 ANNO      1         0       0         0    end t_compare_queries;
   246 UNKN      0         1       1         1 function last_pass
   250 EXEC      1         0       0         0    return g_rec.last_pass;
   251 EXEC      1         1       1         1 end last_pass;
   253 EXCL      0         0       0         0 function last_assert
   257 EXEC      1         0       0         0    return g_rec.last_assert;
   258 EXEC      1         0       0         0 end last_assert;
   260 UNKN      0         1       1         1 function last_msg
   264 EXEC      1         1       1         1    return g_rec.last_msg;
   265 EXEC      1         1       1         1 end last_msg;
   267 EXCL      0         0       0         0 function last_details
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   271 EXEC      1         1       1         1    return g_rec.last_details;
   272 EXEC      1         0       0         0 end last_details;
   276 ANNO      0         3       3         3    procedure t_last_values
   280 ANNO      1         0       0         0       wt_assert.g_testcase := 'Last Values Tests';
   281 ANNO      1         0       0         0       wt_assert.eq (
   286 ANNO      1         1       1         1       wt_assert.eq (
   292 ANNO      1         1       1         1       temp_rec := g_rec;
   293 ANNO      1         0       0         0       wt_assert.eq (
   298 ANNO      1         0       0         0       wt_assert.eq (
   303 ANNO      1         0       0         0    end t_last_values;
   308 EXCL      0         0       0         0 procedure reset_globals
   311 EXEC      1         1       1         1    g_raise_exception   := FALSE;
   312 EXEC      1         1       1         1    g_testcase          := '';
   313 EXEC      1         1       1         1    g_rec.last_pass     := NULL;
   314 EXEC      1         0       0         0    g_rec.last_assert   := '';
   315 EXEC      1         0       0         0    g_rec.last_msg      := '';
   316 EXEC      1         1       1         1    g_rec.last_details  := '';
   317 EXEC      1         0       0         0 end reset_globals;
   321 ANNO      0         0       0         0    procedure t_reset_globals
   324 ANNO      1         0       0         0       reset_globals;  -- Resets g_testcase
   325 ANNO      1         0       0         0       temp_rec         := g_rec;
   326 ANNO      1         0       0         0       temp_raise_excpt := g_raise_exception;
   327 ANNO      1         0       0         0       temp_testcase    := g_testcase;
   329 ANNO      1         0       0         0       g_testcase       := 'RESET_GLOBALS';
   330 ANNO      1         0       0         0       wt_assert.isnull(
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   333 ANNO      1         0       0         0       wt_assert.eq(
   337 ANNO      1         0       0         0       wt_assert.isnull
   340 ANNO      1         1       1         1       wt_assert.isnull
   343 ANNO      1         1       1         1       wt_assert.isnull
   346 ANNO      1         1       1         1       wt_assert.isnull
   349 ANNO      1         0       0         0    end t_reset_globals;
   354 UNKN      0         4       1         3 function get_NLS_DATE_FORMAT
   359 EXEC      2      2129      84      2045    select value into l_format
   362 EXEC      2         6       1         5    return l_format;
   363 EXEC      2         4       1         3 end get_NLS_DATE_FORMAT;
   365 UNKN      0         4       1         2 procedure set_NLS_DATE_FORMAT
   369 EXEC      3       699     150       309    execute immediate 'alter session set NLS_DATE_FORMAT = ''' ||
   371 EXEC      3         3       1         1 end set_NLS_DATE_FORMAT;
   373 UNKN      0         3       1         2 function get_NLS_TIMESTAMP_FORMAT
   378 EXEC      2      6312      86      6226    select value into l_format
   381 EXEC      2         4       1         3    return l_format;
   382 EXEC      2         4       0         4 end get_NLS_TIMESTAMP_FORMAT;
   384 UNKN      0         3       1         2 procedure set_NLS_TIMESTAMP_FORMAT
   388 EXEC      2       540     202       338    execute immediate 'alter session set NLS_TIMESTAMP_FORMAT = ''' ||
   390 EXEC      2         1       1         1 end set_NLS_TIMESTAMP_FORMAT;
   392 UNKN      0         3       1         2 function get_NLS_TIMESTAMP_TZ_FORMAT
   397 EXEC      2      2083      80      2003    select value into l_format
   400 EXEC      2         3       1         2    return l_format;
   401 EXEC      2         3       1         2 end get_NLS_TIMESTAMP_TZ_FORMAT;
   403 UNKN      0         3       1         2 procedure set_NLS_TIMESTAMP_TZ_FORMAT
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   407 EXEC      2       507     223       284    execute immediate 'alter session set NLS_TIMESTAMP_TZ_FORMAT = ''' ||
   409 EXEC      2         1       0         1 end set_NLS_TIMESTAMP_TZ_FORMAT;
   413 ANNO      0         4       4         4    procedure t_nls_settings
   417 ANNO      1         0       0         0       wt_assert.g_testcase := 'NLS Settings';
   418 ANNO      1         0       0         0       set_NLS_DATE_FORMAT('DD-MON-YYYY');
   419 ANNO      1         1       1         1       wt_assert.eq
   423 ANNO      1         0       0         0       set_NLS_DATE_FORMAT;
   424 ANNO      1         1       0         1       wt_assert.eq
   428 ANNO      1         1       1         1       set_NLS_TIMESTAMP_FORMAT('DD-MON-YYYY');
   429 ANNO      1         1       1         1       wt_assert.eq
   433 ANNO      1         0       0         0       set_NLS_TIMESTAMP_FORMAT;
   435 ANNO      1         0       0         0       wt_assert.eq
   439 ANNO      1         0       0         0       set_NLS_TIMESTAMP_TZ_FORMAT('DD-MON-YYYY');
   440 ANNO      1         1       1         1       wt_assert.eq
   444 ANNO      1         1       1         1       set_NLS_TIMESTAMP_TZ_FORMAT;
   445 ANNO      1         1       1         1       wt_assert.eq
   449 ANNO      1         1       1         1    end t_nls_settings;
   458 UNKN      0        59       1         2 procedure this (
   464 EXEC     71        37       0         2    g_rec.last_assert  := 'THIS';
   465 EXEC     71        23       1         1    g_rec.last_msg     := msg_in;
   467 EXEC     71        24       0         1    g_rec.last_pass    := nvl(check_this_in, FALSE);
   468 EXEC     71        83       1         3    g_rec.last_details := 'Expected "' || C_PASS ||
   470 EXEC     71        12       0         1    process_assertion;
   471 EXEC     71         6       0         1 end this;
   475 ANNO      0         1       1         1    procedure t_this
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   479 ANNO      1         1       1         1       wt_assert.g_testcase := 'This Happy Path';
   480 ANNO      1         0       0         0       wt_assert.this (
   483 ANNO      1         0       0         0       temp_rec := g_rec;
   484 ANNO      1         1       1         1       wt_assert.eq (
   488 ANNO      1         0       0         0       wt_assert.eq (
   492 ANNO      1         0       0         0       wt_assert.eq (
   496 ANNO      1         0       0         0       wt_assert.eq (
   501 ANNO      1         1       1         1       wt_assert.g_testcase := 'This Sad Path 1';
   502 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   503 ANNO      1         0       0         0       this (
   506 ANNO      1         0       0         0       temp_rec := g_rec;
   507 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   508 ANNO      1         0       0         0       wt_assert.eq (
   513 ANNO      1         0       0         0       wt_assert.g_testcase := 'This Sad Path 2';
   514 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
   515 ANNO      1         0       0         0       this (
   518 ANNO      1         0       0         0       temp_rec := g_rec;
   519 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   520 ANNO      1         1       1         1       wt_assert.eq (
   524 ANNO      1         0       0         0    end t_this;
   530 UNKN      0       317       0       142 procedure eq (
   537 EXEC    147        63       0         2    g_rec.last_assert  := 'EQ';
   538 EXEC    147        42       0         1    g_rec.last_msg     := msg_in;
   539 EXEC    147      5049       0      4841    g_rec.last_pass    := (   nvl(check_this_in = against_this_in, false)
   540 UNKN      0        12       0         2                            or (    check_this_in is null
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   544 EXEC    147       295       1        25    g_rec.last_details := 'Expected "' || substr(against_this_in,1,1000) ||
   547 EXEC    147        24       1         1    process_assertion;
   548 EXEC    147        31       0         1 end eq;
   551 UNKN      0        55       1         6 procedure eq (
   558 EXEC     53        41       1         1    eq (msg_in           => msg_in
   562 EXEC     53        26       0        17 end eq;
   565 UNKN      0        19       8        11 procedure eq (
   571 EXEC      2         1       0         1    g_rec.last_assert  := 'EQ';
   572 EXEC      2         0       0         0    g_rec.last_msg     := msg_in;
   573 EXEC      2     64920       1     55603    g_rec.last_pass    := (xmltype.getclobval(check_this_in)  =
   575 EXEC      2     34948       8     14398    g_rec.last_details := 'Expected "' || substr(xmltype.getclobval(against_this_in),1,1000) ||
   578 EXEC      2         2       1         1    process_assertion;
   579 EXEC      2       138      68        70 end eq;
   582 UNKN      0       206       6        54 procedure eq (
   589 EXEC     12        16       2         3    g_rec.last_assert  := 'EQ';
   590 EXEC     12         8       1         1    g_rec.last_msg     := msg_in;
   591 EXEC     12      2187       0       966    g_rec.last_pass    := (   nvl(check_this_in = against_this_in, false)
   592 UNKN      0        14       1         3                            or (    check_this_in is null
   596 EXEC     12     28315     628      4997    g_rec.last_details := 'Expected "' || substr(against_this_in,1,1000) ||
   599 EXEC     12         6       1         1    process_assertion;
   600 EXEC     12      1045      56       326 end eq;
   603 UNKN      0         8       1         2 procedure eq (
   611 EXEC      6         2       1         1    g_rec.last_assert  := 'EQ';
   612 EXEC      6         3       0         1    g_rec.last_msg     := msg_in;
   613 EXEC      6      2100       0      2086    compare_results    := nvl(DBMS_LOB.COMPARE(check_this_in, against_this_in),-1);
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   614 EXEC      6         8       0         3    g_rec.last_pass    := (    (compare_results = 0)
   615 UNKN      0         5       0         2                            or (    check_this_in is null
   619 EXEC      6        22       1         9    g_rec.last_details := 'DBMS_LOB.COMPARE on BLOBs, compare_results: ' || compare_results;
   620 EXEC      6         2       0         1    process_assertion;
   621 EXEC      6         0       0         0 end eq;
   625 ANNO      0        37      37        37    procedure t_eq
   629 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ VARCHAR2 Happy Path 1';
   630 ANNO      1         1       1         1       eq (
   634 ANNO      1         1       1         1       temp_rec := g_rec;
   635 ANNO      1         1       1         1       wt_assert.isnotnull (
   638 ANNO      1         0       0         0       wt_assert.this (
   641 ANNO      1         0       0         0       wt_assert.isnotnull (
   644 ANNO      1         0       0         0       wt_assert.this (
   647 ANNO      1         0       0         0       wt_assert.isnotnull (
   650 ANNO      1         1       1         1       wt_assert.this (
   653 ANNO      1         1       1         1       wt_assert.isnotnull (
   656 ANNO      1         1       1         1       wt_assert.this (
   660 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ VARCHAR2 Happy Path 2';
   661 ANNO      1         0       0         0       eq (
   666 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ VARCHAR2 Happy Path 3';
   667 ANNO      1         0       0         0       eq (
   673 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 1';
   674 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
   675 ANNO      1         0       0         0       eq (
   679 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   680 ANNO      1         1       1         1       temp_rec := g_rec;
   681 ANNO      1         1       1         1       wt_assert.isnotnull (
   684 ANNO      1         1       1         1       wt_assert.isnotnull (
   687 ANNO      1         0       0         0       wt_assert.this (
   691 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 2';
   692 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   693 ANNO      1         1       1         1       eq (
   697 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   698 ANNO      1         0       0         0       temp_rec := g_rec;
   699 ANNO      1         0       0         0       wt_assert.isnull (
   702 ANNO      1         1       1         1       wt_assert.isnotnull (
   705 ANNO      1         0       0         0       wt_assert.this (
   709 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 3';
   710 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
   711 ANNO      1         0       0         0       eq (
   715 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   716 ANNO      1         1       1         1       temp_rec := g_rec;
   717 ANNO      1         1       1         1       wt_assert.isnull (
   720 ANNO      1         1       1         1       wt_assert.isnull (
   723 ANNO      1         1       1         1       wt_assert.this (
   727 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 4';
   728 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
   729 ANNO      1         0       0         0       eq (
   734 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   735 ANNO      1         1       1         1       temp_rec := g_rec;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   736 ANNO      1         1       1         1       wt_assert.isnotnull (
   739 ANNO      1         0       0         0       wt_assert.isnotnull (
   742 ANNO      1         0       0         0       wt_assert.this (
   746 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 5';
   747 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
   748 ANNO      1         0       0         0       eq (
   753 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   754 ANNO      1         1       1         1       temp_rec := g_rec;
   755 ANNO      1         1       1         1       wt_assert.isnull (
   758 ANNO      1         1       1         1       wt_assert.isnotnull (
   761 ANNO      1         0       0         0       wt_assert.this (
   766 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ ROWID Happy Path 1';
   767 ANNO      1         0       0         0       eq (
   772 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ ROWID Sad Path 1';
   773 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   774 ANNO      1         0       0         0       eq (
   778 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   779 ANNO      1         1       1         1       temp_rec := g_rec;
   780 ANNO      1         0       0         0       wt_assert.isnotnull (
   783 ANNO      1         1       1         1       wt_assert.isnotnull (
   786 ANNO      1         1       1         1       wt_assert.this (
   791 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ LONG Happy Path 1';
   792 ANNO      1         0       0         0       eq (
   797 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ LONG Sad Path 1';
   798 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   799 ANNO      1         1       1         1       eq (
   803 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
   804 ANNO      1         0       0         0       temp_rec := g_rec;
   805 ANNO      1         0       0         0       wt_assert.isnotnull (
   808 ANNO      1         0       0         0       wt_assert.isnotnull (
   811 ANNO      1         0       0         0       wt_assert.this (
   816 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ RAW Happy Path 1';
   817 ANNO      1         1       1         1       eq (
   822 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ RAW Sad Path 1';
   823 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   824 ANNO      1         1       1         1       eq (
   828 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   829 ANNO      1         0       0         0       temp_rec := g_rec;
   830 ANNO      1         1       1         1       wt_assert.isnotnull (
   833 ANNO      1         0       0         0       wt_assert.isnotnull (
   836 ANNO      1         0       0         0       wt_assert.this (
   841 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ LANG RAW Happy Path 1';
   842 ANNO      1         1       1         1       eq (
   848 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ LANG RAW Happy Path 1';
   849 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
   850 ANNO      1         1       1         1       eq (
   855 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ LONG RAW Sad Path 1';
   856 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   857 ANNO      1         0       0         0       temp_rec := g_rec;
   858 ANNO      1         1       1         1       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   861 ANNO      1         0       0         0       wt_assert.isnotnull (
   864 ANNO      1         1       1         1       wt_assert.this (
   869 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NVARCHAR2 Happy Path 1';
   870 ANNO      1         8       8         8       eq (
   875 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NVARCHAR2 Sad Path 1';
   876 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   877 ANNO      1         3       3         3       eq (
   881 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
   882 ANNO      1         1       1         1       temp_rec := g_rec;
   883 ANNO      1         2       2         2       wt_assert.isnotnull (
   886 ANNO      1         7       7         7       wt_assert.isnotnull (
   889 ANNO      1         1       1         1       wt_assert.this (
   893 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BOOLEAN Happy Path 1';
   894 ANNO      1         0       0         0       eq (
   898 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BOOLEAN Happy Path 2';
   899 ANNO      1         0       0         0       eq (
   904 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BOOLEAN Happy Path 3';
   905 ANNO      1         1       1         1       eq (
   911 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BOOLEAN Happy Sad 1';
   912 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
   913 ANNO      1         0       0         0       eq (
   917 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   918 ANNO      1         1       1         1       temp_rec := g_rec;
   919 ANNO      1         0       0         0       wt_assert.isnotnull (
   922 ANNO      1         0       0         0       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   925 ANNO      1         1       1         1       wt_assert.this (
   929 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BOOLEAN Happy Sad 2';
   930 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   931 ANNO      1         0       0         0       eq (
   935 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   936 ANNO      1         0       0         0       temp_rec := g_rec;
   937 ANNO      1         0       0         0       wt_assert.isnotnull (
   940 ANNO      1         1       1         1       wt_assert.isnull (
   943 ANNO      1         1       1         1       wt_assert.this (
   947 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ BOOLEAN Happy Sad 3';
   948 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   949 ANNO      1         0       0         0       eq (
   954 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   955 ANNO      1         0       0         0       temp_rec := g_rec;
   956 ANNO      1         0       0         0       wt_assert.isnotnull (
   959 ANNO      1         0       0         0       wt_assert.isnotnull (
   962 ANNO      1         1       1         1       wt_assert.this (
   966 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BOOLEAN Happy Sad 4';
   967 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   968 ANNO      1         0       0         0       eq (
   973 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   974 ANNO      1         0       0         0       temp_rec := g_rec;
   975 ANNO      1         0       0         0       wt_assert.isnotnull (
   978 ANNO      1         0       0         0       wt_assert.isnull (
   981 ANNO      1         0       0         0       wt_assert.this (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   985 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NUMBER Happy Path 1';
   986 ANNO      1         3       3         3       eq (
   990 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NUMBER Happy Path 2';
   991 ANNO      1         2       2         2       eq (
   996 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NUMBER Happy Path 1';
   997 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   998 ANNO      1         1       1         1       eq (
  1002 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1003 ANNO      1         0       0         0       temp_rec := g_rec;
  1004 ANNO      1         0       0         0       wt_assert.isnotnull (
  1007 ANNO      1         1       1         1       wt_assert.isnotnull (
  1010 ANNO      1         1       1         1       wt_assert.this (
  1015 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ PLS_INTEGER Happy Path 1';
  1016 ANNO      1         2       2         2       eq (
  1020 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1022 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ PLS_INTEGER Sad Path 1';
  1023 ANNO      1         2       2         2       eq (
  1027 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1028 ANNO      1         0       0         0       temp_rec := g_rec;
  1029 ANNO      1         0       0         0       wt_assert.isnotnull (
  1032 ANNO      1         1       1         1       wt_assert.isnotnull (
  1035 ANNO      1         1       1         1       wt_assert.this (
  1039 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ DATE Happy Path 1';
  1040 ANNO      1        13      13        13       eq (
  1045 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ DATE Sad Path 1';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1046 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1047 ANNO      1         8       8         8       eq (
  1051 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1052 ANNO      1         0       0         0       temp_rec := g_rec;
  1053 ANNO      1         2       2         2       wt_assert.isnotnull (
  1056 ANNO      1         5       5         5       wt_assert.isnotnull (
  1059 ANNO      1         0       0         0       wt_assert.this (
  1064 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ TIMSETAMP Happy Path 1';
  1065 ANNO      1        36      36        36       eq (
  1070 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ TIMSETAMP Sad Path 1';
  1071 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  1072 ANNO      1         7       7         7       eq (
  1076 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1077 ANNO      1         1       1         1       temp_rec := g_rec;
  1078 ANNO      1         2       2         2       wt_assert.isnotnull (
  1081 ANNO      1         5       5         5       wt_assert.isnotnull (
  1084 ANNO      1         0       0         0       wt_assert.this (
  1089 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ TIMSETAMP WITH LOCAL TIME ZONE Happy Path 1';
  1090 ANNO      1         5       5         5       eq (
  1095 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ TIMSETAMP WITH LOCAL TIME ZONE Sad Path 1';
  1096 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1097 ANNO      1        15      15        15       eq (
  1101 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1102 ANNO      1         1       1         1       temp_rec := g_rec;
  1103 ANNO      1         4       4         4       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1106 ANNO      1         5       5         5       wt_assert.isnotnull (
  1109 ANNO      1         0       0         0       wt_assert.this (
  1114 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ TIMSETAMP WITH TIME ZONE Happy Path 1';
  1115 ANNO      1         4       4         4       eq (
  1120 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ TIMSETAMP WITH TIME ZONE Sad Path 1';
  1121 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1122 ANNO      1         9       9         9       eq (
  1126 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1127 ANNO      1         0       0         0       temp_rec := g_rec;
  1128 ANNO      1         2       2         2       wt_assert.isnotnull (
  1131 ANNO      1         5       5         5       wt_assert.isnotnull (
  1134 ANNO      1         0       0         0       wt_assert.this (
  1139 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ INTERVAL DAY TO SECOND Happy Path 1';
  1140 ANNO      1         3       3         3       eq (
  1145 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ INTERVAL DAY TO SECOND Sad Path 1';
  1146 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1147 ANNO      1         2       2         2       eq (
  1151 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1152 ANNO      1         0       0         0       temp_rec := g_rec;
  1153 ANNO      1         0       0         0       wt_assert.isnotnull (
  1156 ANNO      1         1       1         1       wt_assert.isnotnull (
  1159 ANNO      1         1       1         1       wt_assert.this (
  1164 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ INTERVAL YEAR TO MONTH Happy Path 1';
  1165 ANNO      1         2       2         2       eq (
  1170 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ INTERVAL YEAR TO MONTH Sad Path 1';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1171 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1172 ANNO      1         2       2         2       eq (
  1176 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1177 ANNO      1         0       0         0       temp_rec := g_rec;
  1178 ANNO      1         0       0         0       wt_assert.isnotnull (
  1181 ANNO      1         1       1         1       wt_assert.isnotnull (
  1184 ANNO      1         1       1         1       wt_assert.this (
  1188 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ XMLTYPE Happy Path 1';
  1189 ANNO      1         0       0         0       eq (
  1193 ANNO      1         3       3         3       temp_rec := g_rec;
  1194 ANNO      1         1       1         1       wt_assert.isnotnull (
  1197 ANNO      1         1       1         1       wt_assert.this (
  1200 ANNO      1         0       0         0       wt_assert.isnotnull (
  1203 ANNO      1         2       2         2       wt_assert.this (
  1206 ANNO      1         0       0         0       wt_assert.isnotnull (
  1209 ANNO      1         1       1         1       wt_assert.this (
  1212 ANNO      1         1       1         1       wt_assert.isnotnull (
  1215 ANNO      1        17      17        17       wt_assert.this (
  1220 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ XMLTYPE Sad Path 1';
  1221 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1222 ANNO      1         1       1         1       eq (
  1226 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  1227 ANNO      1         5       5         5       temp_rec := g_rec;
  1228 ANNO      1         6       1         5       wt_assert.isnotnull (
  1231 ANNO      1         5       1         4       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1234 ANNO      1         1       1         1       wt_assert.this (
  1238 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ CLOB Happy Path 1';
  1239 ANNO      1         0       0         0       eq (
  1243 ANNO      1         2       2         2       temp_rec := g_rec;
  1244 ANNO      1         1       1         1       wt_assert.isnotnull (
  1247 ANNO      1         2       2         2       wt_assert.this (
  1250 ANNO      1         0       0         0       wt_assert.isnotnull (
  1253 ANNO      1         1       1         1       wt_assert.this (
  1256 ANNO      1         0       0         0       wt_assert.isnotnull (
  1259 ANNO      1         0       0         0       wt_assert.this (
  1262 ANNO      1         0       0         0       wt_assert.isnotnull (
  1265 ANNO      1        17      17        17       wt_assert.this (
  1270 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ CLOB Happy Path 2';
  1271 ANNO      1         0       0         0       eq (
  1277 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ CLOB Happy Path 3';
  1278 ANNO      1         0       0         0       eq (
  1284 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ CLOB Sad Path 1';
  1285 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1286 ANNO      1         1       1         1       eq (
  1290 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  1291 ANNO      1         3       3         3       temp_rec := g_rec;
  1292 ANNO      1         0       0         0       wt_assert.isnotnull (
  1295 ANNO      1         1       1         1       wt_assert.isnotnull (
  1298 ANNO      1         1       1         1       wt_assert.this (
  1302 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ CLOB Sad Path 2';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1303 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1304 ANNO      1         0       0         0       eq (
  1308 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  1309 ANNO      1         6       6         6       temp_rec := g_rec;
  1310 ANNO      1         1       1         1       wt_assert.isnotnull (
  1313 ANNO      1         1       1         1       wt_assert.isnull (
  1316 ANNO      1         2       2         2       wt_assert.this (
  1320 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ CLOB Sad Path 2';
  1321 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1322 ANNO      1         1       1         1       eq (
  1327 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  1328 ANNO      1         5       5         5       temp_rec := g_rec;
  1329 ANNO      1         1       1         1       wt_assert.isnotnull (
  1332 ANNO      1         1       1         1       wt_assert.isnull (
  1335 ANNO      1         1       1         1       wt_assert.this (
  1339 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NCLOB Happy Path 1';
  1340 ANNO      1     17430   17430     17430       eq (
  1345 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ NCLOB Happy Path 2';
  1346 ANNO      1     10761   10761     10761       eq (
  1352 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ NCLOB Happy Path 3';
  1353 ANNO      1         4       4         4       eq (
  1359 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ NCLOB Sad Path 1';
  1360 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1361 ANNO      1      5463    5463      5463       eq (
  1365 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1366 ANNO      1         6       6         6       temp_rec := g_rec;
  1367 ANNO      1     10237   10237     10237       wt_assert.isnotnull (
  1370 ANNO      1       253     253       253       wt_assert.isnotnull (
  1373 ANNO      1         1       1         1       wt_assert.this (
  1377 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NCLOB Sad Path 2';
  1378 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1379 ANNO      1      5968    5968      5968       eq (
  1383 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1384 ANNO      1         5       5         5       temp_rec := g_rec;
  1385 ANNO      1      9037    9037      9037       wt_assert.isnotnull (
  1388 ANNO      1         2       2         2       wt_assert.isnull (
  1391 ANNO      1         2       2         2       wt_assert.this (
  1395 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NCLOB Sad Path 3';
  1396 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1397 ANNO      1      4999    4999      4999       eq (
  1402 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1403 ANNO      1         5       5         5       temp_rec := g_rec;
  1404 ANNO      1      6682    6682      6682       wt_assert.isnotnull (
  1407 ANNO      1       395     395       395       wt_assert.isnull (
  1410 ANNO      1         2       2         2       wt_assert.this (
  1414 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ BLOB Happy Path 1';
  1415 ANNO      1         0       0         0       eq (
  1419 ANNO      1         1       1         1       temp_rec := g_rec;
  1420 ANNO      1         0       0         0       wt_assert.isnotnull (
  1423 ANNO      1         1       1         1       wt_assert.this (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1426 ANNO      1         0       0         0       wt_assert.isnotnull (
  1429 ANNO      1         1       1         1       wt_assert.this (
  1432 ANNO      1         0       0         0       wt_assert.isnotnull (
  1435 ANNO      1         1       1         1       wt_assert.this (
  1438 ANNO      1         0       0         0       wt_assert.isnotnull (
  1441 ANNO      1         1       1         1       wt_assert.this (
  1446 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BLOB Happy Path 2';
  1447 ANNO      1         0       0         0       eq (
  1453 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ BLOB Happy Path 3';
  1454 ANNO      1         0       0         0       eq (
  1460 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ BLOB Sad Path 1';
  1461 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1462 ANNO      1         0       0         0       eq (
  1466 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1467 ANNO      1         5       5         5       temp_rec := g_rec;
  1468 ANNO      1         0       0         0       wt_assert.isnotnull (
  1471 ANNO      1         0       0         0       wt_assert.isnotnull (
  1474 ANNO      1         1       1         1       wt_assert.this (
  1478 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BLOB Sad Path 2';
  1479 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1480 ANNO      1         1       1         1       eq (
  1484 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1485 ANNO      1         1       1         1       temp_rec := g_rec;
  1486 ANNO      1         0       0         0       wt_assert.isnotnull (
  1489 ANNO      1         1       1         1       wt_assert.isnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1492 ANNO      1         1       1         1       wt_assert.this (
  1496 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BLOB Sad Path 3';
  1497 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1498 ANNO      1         0       0         0       eq (
  1503 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1504 ANNO      1         1       1         1       temp_rec := g_rec;
  1505 ANNO      1         0       0         0       wt_assert.isnotnull (
  1508 ANNO      1         1       1         1       wt_assert.isnull (
  1511 ANNO      1         1       1         1       wt_assert.this (
  1514 ANNO      1      4263    4263      4263    end t_eq;
  1520 UNKN      0        52       1         2 procedure isnotnull (
  1525 EXEC     77        38       0         2    g_rec.last_assert  := 'ISNOTNULL';
  1526 EXEC     77        18       0         1    g_rec.last_msg     := msg_in;
  1527 EXEC     77        27       0         1    g_rec.last_pass    := (check_this_in is not null);
  1528 EXEC     77       242       1        61    g_rec.last_details := 'Expected NOT NULL and got "' ||
  1530 EXEC     77        13       0         1    process_assertion;
  1531 EXEC     77        11       0         1 end isnotnull;
  1534 UNKN      0        12       1         2 procedure isnotnull (
  1539 EXEC     12        11       0         1    isnotnull (msg_in        => msg_in
  1541 EXEC     12         2       0         1 end isnotnull;
  1544 UNKN      0       424       6       267 procedure isnotnull (
  1549 EXEC     12        18       0         3    g_rec.last_assert  := 'ISNOTNULL';
  1550 EXEC     12         6       1         1    g_rec.last_msg     := msg_in;
  1551 EXEC     12         6       0         1    g_rec.last_pass    := (check_this_in is not null);
  1552 EXEC     12     22449     395     12748    g_rec.last_details := 'Expected NOT NULL and got "' ||
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1554 EXEC     12         7       0         1    process_assertion;
  1555 EXEC     12       790      56       102 end isnotnull;
  1558 UNKN      0         1       0         1 procedure isnotnull (
  1563 EXEC      6         5       0         2    g_rec.last_assert  := 'ISNOTNULL';
  1564 EXEC      6         2       1         1    g_rec.last_msg     := msg_in;
  1565 EXEC      6         2       0         1    g_rec.last_pass    := (check_this_in is not null);
  1566 EXEC      6         2       0         1    if g_rec.last_pass
  1568 EXEC      5         3       0         1       g_rec.last_details := 'BLOB is NOT NULL';
  1570 EXEC      1         0       0         0       g_rec.last_details := 'BLOB is NULL';
  1572 EXEC      6         0       0         0    process_assertion;
  1573 EXEC      6         1       0         1 end isnotnull;
  1577 ANNO      0        23      23        23    procedure t_isnotnull
  1581 ANNO      1         3       3         3       wt_assert.g_testcase := 'ISNOTNULL VARCHAR2 Happy Path 1';
  1582 ANNO      1         1       1         1       isnotnull (
  1585 ANNO      1         1       1         1       temp_rec := g_rec;
  1586 ANNO      1         1       1         1       wt_assert.eq (
  1590 ANNO      1         0       0         0       wt_assert.eq (
  1594 ANNO      1         0       0         0       wt_assert.eq (
  1598 ANNO      1         0       0         0       wt_assert.eq (
  1603 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL VARCHAR2 Sad Path 1';
  1604 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1605 ANNO      1         1       1         1       isnotnull (
  1608 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1609 ANNO      1         0       0         0       wt_assert.eq (
  1614 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL BOOLEAN Happy Path 1';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1615 ANNO      1         0       0         0       isnotnull (
  1619 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL BOOLEAN Sad Path 1';
  1620 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1621 ANNO      1         1       1         1       isnotnull (
  1624 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1625 ANNO      1         1       1         1       wt_assert.eq (
  1630 ANNO      1         1       1         1       wt_assert.g_testcase := 'ISNOTNULL CLOB Happy Path 1';
  1631 ANNO      1         0       0         0       isnotnull (
  1634 ANNO      1         3       3         3       temp_rec := g_rec;
  1635 ANNO      1         0       0         0       wt_assert.eq (
  1639 ANNO      1         0       0         0       wt_assert.eq (
  1643 ANNO      1         0       0         0       wt_assert.eq (
  1647 ANNO      1         0       0         0       wt_assert.isnotnull (
  1650 ANNO      1        17      17        17       wt_assert.this (
  1655 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL CLOB Sad Path 1';
  1656 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1657 ANNO      1         0       0         0       isnotnull (
  1660 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  1661 ANNO      1         1       1         1       wt_assert.eq (
  1666 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL BLOB Happy Path 1';
  1667 ANNO      1         0       0         0       isnotnull (
  1670 ANNO      1         1       1         1       temp_rec := g_rec;
  1671 ANNO      1         0       0         0       wt_assert.eq (
  1675 ANNO      1         0       0         0       wt_assert.eq (
  1679 ANNO      1         1       1         1       wt_assert.eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1683 ANNO      1         0       0         0       wt_assert.eq (
  1688 ANNO      1         1       1         1       wt_assert.g_testcase := 'ISNOTNULL BLOB Sad Path 1';
  1689 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1690 ANNO      1         0       0         0       isnotnull (
  1693 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  1694 ANNO      1         0       0         0       wt_assert.eq (
  1698 ANNO      1         4       4         4    end t_isnotnull;
  1704 UNKN      0         8       0         1 procedure isnull (
  1709 EXEC     16         5       0         1    g_rec.last_assert  := 'ISNULL';
  1710 EXEC     16         2       1         1    g_rec.last_msg     := msg_in;
  1711 EXEC     16         4       0         1    g_rec.last_pass    := (check_this_in is null);
  1712 EXEC     16        14       1         2    g_rec.last_details := 'Expected NULL and got "' ||
  1714 EXEC     16         3       0         1    process_assertion;
  1715 EXEC     16         2       0         1 end isnull;
  1718 UNKN      0         2       0         1 procedure isnull (
  1723 EXEC      5         2       0         1    isnull (msg_in        => msg_in
  1725 EXEC      5         2       1         1 end isnull;
  1728 UNKN      0        43       4         9 procedure isnull (
  1733 EXEC      6         6       0         2    g_rec.last_assert  := 'ISNULL';
  1734 EXEC      6         2       0         1    g_rec.last_msg     := msg_in;
  1735 EXEC      6         3       0         1    g_rec.last_pass    := (check_this_in is null);
  1736 EXEC      6      3161     397      1109    g_rec.last_details := 'Expected NULL and got "' ||
  1738 EXEC      6         5       1         2    process_assertion;
  1739 EXEC      6       362      54        72 end isnull;
  1742 UNKN      0         1       0         1 procedure isnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1747 EXEC      4         1       0         1    g_rec.last_assert  := 'ISNULL';
  1748 EXEC      4         0       0         0    g_rec.last_msg     := msg_in;
  1749 EXEC      4         3       0         1    g_rec.last_pass    := (check_this_in is null);
  1750 EXEC      4         0       0         0    if g_rec.last_pass
  1752 EXEC      3         2       0         1       g_rec.last_details := 'BLOB is NULL';
  1754 EXEC      1         0       0         0       g_rec.last_details := 'BLOB is NOT NULL';
  1756 EXEC      4         1       0         1    process_assertion;
  1757 EXEC      4         0       0         0 end isnull;
  1761 ANNO      0         7       7         7    procedure t_isnull
  1765 ANNO      1         1       1         1       wt_assert.g_testcase := 'ISNULL VARCHAR2 Happy Path 1';
  1766 ANNO      1         0       0         0       isnull (
  1769 ANNO      1         0       0         0       temp_rec := g_rec;
  1770 ANNO      1         0       0         0       wt_assert.eq (
  1774 ANNO      1         1       1         1       wt_assert.eq (
  1778 ANNO      1         1       1         1       wt_assert.eq (
  1782 ANNO      1         1       1         1       wt_assert.eq (
  1787 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL VARCHAR2 Sad Path 1';
  1788 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1789 ANNO      1         0       0         0       isnull (
  1792 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1793 ANNO      1         0       0         0       wt_assert.eq (
  1798 ANNO      1         1       1         1       wt_assert.g_testcase := 'ISNULL BOOLEAN Happy Path 1';
  1799 ANNO      1         0       0         0       isnull (
  1803 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL BOOLEAN Sad Path 1';
  1804 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1805 ANNO      1         0       0         0       isnull (
  1808 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1809 ANNO      1         1       1         1       wt_assert.eq (
  1814 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL CLOB Happy Path 1';
  1815 ANNO      1         0       0         0       isnull (
  1818 ANNO      1         1       1         1       temp_rec := g_rec;
  1819 ANNO      1         0       0         0       wt_assert.eq (
  1823 ANNO      1         0       0         0       wt_assert.eq (
  1827 ANNO      1         1       1         1       wt_assert.eq (
  1831 ANNO      1         0       0         0       wt_assert.eq (
  1836 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL CLOB Sad Path 1';
  1837 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  1838 ANNO      1         0       0         0       isnull (
  1841 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1842 ANNO      1         0       0         0       wt_assert.eq (
  1847 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL BLOB Happy Path 1';
  1848 ANNO      1         0       0         0       isnull (
  1851 ANNO      1         0       0         0       temp_rec := g_rec;
  1852 ANNO      1         0       0         0       wt_assert.eq (
  1856 ANNO      1         0       0         0       wt_assert.eq (
  1860 ANNO      1         0       0         0       wt_assert.eq (
  1864 ANNO      1         0       0         0       wt_assert.eq (
  1869 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL BLOB Sad Path 1';
  1870 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1871 ANNO      1         0       0         0       isnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1874 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1875 ANNO      1         0       0         0       wt_assert.eq (
  1879 ANNO      1         2       2         2    end t_isnull;
  1885 EXEC      3         8       0         4 procedure raises (
  1894 EXEC      3      3258       0      1287       execute immediate 'begin ' || check_call_in || '; end;';
  1895 EXEC      2         0       0         0    exception when OTHERS then
  1896 EXEC      2        53      22        31       l_sqlerrm := SQLERRM;
  1897 EXEC      2       109      26        83       l_errstack := substr(dbms_utility.format_error_stack  ||
  1900 UNKN      0         1       0         1    end;
  1902 EXEC      3         1       1         1    g_rec.last_assert  := 'RAISES';
  1903 EXEC      3         2       1         1    g_rec.last_msg     := msg_in;
  1904 EXEC      3        15       4         7    if l_sqlerrm like '%' || against_exc_in || '%'
  1906 EXEC      1         0       0         0       g_rec.last_pass := TRUE;
  1908 EXEC      2         0       0         0       g_rec.last_pass := FALSE;
  1910 EXEC      3         4       1         2    g_rec.last_details := 'Expected exception "%'           || against_exc_in ||
  1913 EXEC      3         2       1         1    process_assertion;
  1914 EXEC      3         2       0         1 end raises;
  1918 ANNO      0         2       2         2    procedure t_raises
  1922 ANNO      1         1       1         1       wt_assert.g_testcase := 'Raises Tests Happy Path';
  1923 ANNO      1         1       1         1       raises (
  1927 ANNO      1         0       0         0       temp_rec := g_rec;
  1928 ANNO      1         0       0         0       wt_assert.eq (
  1932 ANNO      1         1       1         1       wt_assert.eq (
  1936 ANNO      1         0       0         0       wt_assert.eq (
  1940 ANNO      1         1       1         1       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1943 ANNO      1         5       5         5       wt_assert.this (
  1949 ANNO      1         0       0         0       wt_assert.g_testcase := 'Raises Tests Sad Path 1';
  1950 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1951 ANNO      1         1       1         1       raises (
  1955 ANNO      1         2       2         2       temp_rec := g_rec;
  1956 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1957 ANNO      1         1       1         1       wt_assert.eq (
  1961 ANNO      1         1       1         1       wt_assert.isnotnull (
  1964 ANNO      1         4       4         4       wt_assert.this (
  1970 ANNO      1         0       0         0       wt_assert.g_testcase := 'Raises Tests Sad Path 2';
  1971 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1972 ANNO      1         1       1         1       raises (
  1976 ANNO      1         2       2         2       temp_rec := g_rec;
  1977 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1978 ANNO      1         0       0         0       wt_assert.eq (
  1982 ANNO      1         1       1         1       wt_assert.eq (
  1988 ANNO      1         0       0         0    end t_raises;
  1994 EXEC      4        10       0         5 procedure eqqueryvalue (
  2004 EXEC      4         2       0         1    g_rec.last_assert  := 'EQQUERYVALUE';
  2005 EXEC      4         2       0         1    g_rec.last_msg     := msg_in;
  2006 EXEC      4      7960     134      4663    open l_rc for check_query_in;
  2007 EXEC      4      1482      63      1263    fetch l_rc into l_rc_buff;
  2008 EXEC      4        93      13        29    close l_rc;
  2009 EXEC      4        10       0         3    g_rec.last_pass    := (   l_rc_buff = against_value_in
  2010 UNKN      0         5       1         2                           or (    l_rc_buff is null
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2013 EXEC      4        29       5        10    g_rec.last_details := 'Expected "' || substr(against_value_in,1,1000) ||
  2016 EXEC      4         2       1         1    process_assertion;
  2017 EXEC      4         7       1         2 end eqqueryvalue;
  2020 EXEC      2        19       9        10 procedure eqqueryvalue (
  2029 EXEC      2         1       1         1    g_rec.last_assert  := 'EQQUERYVALUE';
  2030 EXEC      2         1       1         1    g_rec.last_msg     := msg_in;
  2031 EXEC      2      1555     279      1276    open l_rc for check_query_in;
  2032 EXEC      2       363     180       183    fetch l_rc into l_rc_buff;
  2033 EXEC      2        51      19        32    close l_rc;
  2034 EXEC      2     56805       1     46251    g_rec.last_pass    := (xmltype.getclobval(l_rc_buff)       =
  2036 EXEC      2     29537       8     12853    g_rec.last_details := 'Expected "' || substr(xmltype.getclobval(against_value_in),1,1000) ||
  2039 EXEC      2         1       0         1    process_assertion;
  2040 EXEC      2       146      72        74 end eqqueryvalue;
  2043 EXEC      2        22       1        10 procedure eqqueryvalue (
  2053 EXEC      2         1       0         1    g_rec.last_assert  := 'EQQUERYVALUE';
  2054 EXEC      2         1       0         1    g_rec.last_msg     := msg_in;
  2055 EXEC      2      5049     148      4901    open l_rc for check_query_in;
  2056 EXEC      2       171      61       110    fetch l_rc into l_rc_buff;
  2057 EXEC      2        56      14        42    close l_rc;
  2058 EXEC      2      7306       0      6646    g_rec.last_pass    := (   l_rc_buff = against_value_in
  2059 UNKN      0         1       1         1                           or (    l_rc_buff is null
  2062 EXEC      2      4033    1701      2331    g_rec.last_details := 'Expected "' || substr(against_value_in,1,1000) ||
  2065 EXEC      2         2       1         1    process_assertion;
  2066 EXEC      2       124      59        65 end eqqueryvalue;
  2069 EXEC      3        21       0         7 procedure eqqueryvalue (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2080 EXEC      3         2       1         1    g_rec.last_assert  := 'EQQUERYVALUE';
  2081 EXEC      3         0       0         0    g_rec.last_msg     := msg_in;
  2082 EXEC      3      4601     164      2932    open l_rc for check_query_in;
  2083 EXEC      3       229      66        95    fetch l_rc into l_rc_buff;
  2084 EXEC      3        68      16        27    close l_rc;
  2085 EXEC      3        19       1         7    compare_results    := nvl(DBMS_LOB.COMPARE(l_rc_buff, against_value_in),-1);
  2086 EXEC      3        10       0         3    g_rec.last_pass    := (   (compare_results = 0)
  2087 UNKN      0         3       1         2                           or (    l_rc_buff is null
  2090 EXEC      3        33       9        14    g_rec.last_details := 'DBMS_LOB.COMPARE between BLOB and Query: ' ||
  2093 EXEC      3         2       1         1    process_assertion;
  2094 EXEC      3        18       3        12 end eqqueryvalue;
  2098 ANNO      0         5       5         5    procedure t_eqqueryvalue
  2102 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE VARCHAR2 Happy Path 1';
  2103 ANNO      1         0       0         0       eqqueryvalue (
  2108 ANNO      1         0       0         0       temp_rec := g_rec;
  2109 ANNO      1         1       1         1       wt_assert.eq (
  2113 ANNO      1         0       0         0       wt_assert.eq (
  2117 ANNO      1         1       1         1       wt_assert.eq (
  2121 ANNO      1         1       1         1       wt_assert.eq (
  2126 ANNO      1         3       3         3       wt_assert.g_testcase := 'EQQUERYVALUE VARCHAR2 Happy Path 2';
  2127 ANNO      1         1       1         1       eqqueryvalue (
  2133 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE VARCHAR2 Sad Path 1';
  2134 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2135 ANNO      1         1       1         1       eqqueryvalue (
  2139 ANNO      1         1       1         1       temp_rec := g_rec;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2140 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2141 ANNO      1         1       1         1       wt_assert.eq (
  2146 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE XMLTYPE Happy Path 1';
  2147 ANNO      1         0       0         0       eqqueryvalue (
  2151 ANNO      1         3       3         3       temp_rec := g_rec;
  2152 ANNO      1         1       1         1       wt_assert.eq (
  2156 ANNO      1         0       0         0       wt_assert.eq (
  2160 ANNO      1         0       0         0       wt_assert.eq (
  2164 ANNO      1         0       0         0       wt_assert.isnotnull (
  2167 ANNO      1        18      18        18       wt_assert.this (
  2172 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE XMLTYPE Sad Path 1';
  2173 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2174 ANNO      1         1       1         1       eqqueryvalue (
  2178 ANNO      1         5       5         5       temp_rec := g_rec;
  2179 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  2180 ANNO      1         0       0         0       wt_assert.eq (
  2184 ANNO      1         1       1         1       wt_assert.isnotnull (
  2187 ANNO      1        12      12        12       wt_assert.this (
  2193 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE CLOB Happy Path 1';
  2194 ANNO      1         0       0         0       eqqueryvalue (
  2199 ANNO      1         3       3         3       temp_rec := g_rec;
  2200 ANNO      1         1       1         1       wt_assert.eq (
  2204 ANNO      1         1       1         1       wt_assert.eq (
  2208 ANNO      1         1       1         1       wt_assert.eq (
  2212 ANNO      1         0       0         0       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2215 ANNO      1        18      18        18       wt_assert.this (
  2220 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE CLOB Happy Path 2';
  2221 ANNO      1         0       0         0       eqqueryvalue (
  2226 ANNO      1         0       0         0       temp_rec := g_rec;
  2228 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE CLOB Sad Path 1';
  2229 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2230 ANNO      1         0       0         0       eqqueryvalue (
  2234 ANNO      1         4       4         4       temp_rec := g_rec;
  2235 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2236 ANNO      1         1       1         1       wt_assert.eq (
  2240 ANNO      1         0       0         0       wt_assert.isnotnull (
  2243 ANNO      1        12      12        12       wt_assert.this (
  2249 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE BLOB Happy Path 1';
  2250 ANNO      1         0       0         0       eqqueryvalue (
  2255 ANNO      1         1       1         1       temp_rec := g_rec;
  2256 ANNO      1         1       1         1       wt_assert.eq (
  2260 ANNO      1         0       0         0       wt_assert.eq (
  2264 ANNO      1         1       1         1       wt_assert.eq (
  2268 ANNO      1         2       2         2       wt_assert.eq (
  2274 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE BLOB Happy Path 2';
  2275 ANNO      1         0       0         0       eqqueryvalue (
  2281 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE BLOB Sad Path 1';
  2282 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  2283 ANNO      1         1       1         1       eqqueryvalue (
  2287 ANNO      1         5       5         5       temp_rec := g_rec;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2288 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  2289 ANNO      1         0       0         0       wt_assert.eq (
  2293 ANNO      1         4       4         4       wt_assert.eq (
  2298 ANNO      1         3       3         3    end t_eqqueryvalue;
  2303 UNKN      0         1       0         1 procedure eqquery (
  2309 EXEC      3         1       0         1    g_rec.last_assert  := 'EQQUERY';
  2310 EXEC      3         1       0         1    g_rec.last_msg     := msg_in;
  2311 EXEC      3         3       1         1    compare_queries(check_query_in, against_query_in);
  2312 EXEC      3         2       0         1    process_assertion;
  2313 EXEC      3         0       0         0 end eqquery;
  2317 ANNO      0         2       2         2    procedure t_eqquery
  2321 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERY Tests Happy Path 1';
  2322 ANNO      1         1       1         1       wt_assert.eqquery (
  2326 ANNO      1         1       1         1       temp_rec := g_rec;
  2327 ANNO      1         1       1         1       wt_assert.eq (
  2331 ANNO      1         0       0         0       wt_assert.eq (
  2335 ANNO      1         0       0         0       wt_assert.eq (
  2339 ANNO      1         0       0         0       wt_assert.isnotnull (
  2342 ANNO      1         3       3         3       wt_assert.this (
  2347 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERY Tests Sad Path 1';
  2348 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2349 ANNO      1         0       0         0       eqquery (
  2353 ANNO      1         4       4         4       temp_rec := g_rec;
  2354 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2355 ANNO      1         0       0         0       wt_assert.eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2359 ANNO      1         0       0         0       wt_assert.isnotnull (
  2362 ANNO      1         4       4         4       wt_assert.this (
  2367 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERY Tests Sad Path 2';
  2368 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2369 ANNO      1         0       0         0       eqquery (
  2373 ANNO      1         5       5         5       temp_rec := g_rec;
  2374 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2375 ANNO      1         0       0         0       wt_assert.eq (
  2379 ANNO      1         0       0         0       wt_assert.isnotnull (
  2382 ANNO      1        11      11        11       wt_assert.this (
  2386 ANNO      1         1       1         1    end t_eqquery;
  2391 UNKN      0      1013       1      1010 procedure eqtable (
  2398 EXEC      4         8       1         6    l_check_query    varchar2(16000) := 'select * from ' || check_this_in;
  2399 EXEC      4         1       0         1    l_against_query  varchar2(16000) := 'select * from ' || against_this_in;
  2401 EXEC      4         4       0         3    g_rec.last_assert  := 'EQTABLE';
  2402 EXEC      4         0       0         0    g_rec.last_msg     := msg_in;
  2403 EXEC      4         2       1         1    if check_where_in is not null
  2405 EXEC      2         2       2         2       l_check_query := l_check_query || ' where ' || check_where_in;
  2407 EXEC      2         1       0         1    if against_where_in is not null
  2409 EXEC      2         0       0         0       l_against_query := l_against_query || ' where ' || against_where_in;
  2411 EXEC      4         2       0         1    compare_queries(l_check_query, l_against_query);
  2412 EXEC      4         4       1         1    process_assertion;
  2413 EXEC      4         1       0         1 end eqtable;
  2417 ANNO      0         2       2         2    procedure t_eqtable
  2421 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQTABLE Tests Happy Path 1';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2422 ANNO      1         0       0         0       wt_assert.eqtable (
  2428 ANNO      1         1       1         1       temp_rec := g_rec;
  2429 ANNO      1         1       1         1       wt_assert.eq (
  2433 ANNO      1         0       0         0       wt_assert.eq (
  2437 ANNO      1         0       0         0       wt_assert.eq (
  2441 ANNO      1         1       1         1       wt_assert.isnotnull (
  2444 ANNO      1         3       3         3       wt_assert.this (
  2449 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQTABLE Tests Happy Path 2';
  2450 ANNO      1         5       1         4       eqtable (
  2457 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQTABLE Sad Path 1';
  2458 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2459 ANNO      1         4       2         2       eqtable (
  2465 ANNO      1         4       4         4       temp_rec := g_rec;
  2466 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2467 ANNO      1         1       1         1       wt_assert.eq (
  2471 ANNO      1         0       0         0       wt_assert.isnotnull (
  2474 ANNO      1         7       7         7       wt_assert.this (
  2479 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQTABLE Sad Path 2';
  2480 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2481 ANNO      1         0       0         0       eqtable (
  2485 ANNO      1         4       4         4       temp_rec := g_rec;
  2486 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2487 ANNO      1         1       1         1       wt_assert.eq (
  2491 ANNO      1         1       1         1       wt_assert.isnotnull (
  2494 ANNO      1         9       9         9       wt_assert.this (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2498 ANNO      1         1       1         1    end t_eqtable;
  2503 UNKN      0         7       1         2 procedure eqtabcount (
  2510 EXEC      5         5       1         1    l_query      varchar2(16000) := 'select count(*) from ' || check_this_in;
  2514 EXEC      9        21       0         5    procedure l_run_query is
  2518 EXEC      9    536872     157    249439       open l_rc for l_query;
  2519 EXEC      8    189659    1310     42587       fetch l_rc into l_cnt;
  2520 EXEC      8       391      39        60       close l_rc;
  2521 EXEC      8        13       1         2       l_success := TRUE;
  2523 EXEC      1         0       0         0       when OTHERS
  2525 EXEC      1        76      76        76          g_rec.last_details := SQLERRM || CHR(10) ||
  2527 EXEC      1         0       0         0          g_rec.last_pass    := FALSE;
  2528 EXEC      1         0       0         0          l_success      := FALSE;
  2529 EXEC      1         1       1         1          process_assertion;
  2530 EXEC      9        49       1        17    end l_run_query;
  2532 EXEC      5         0       0         0    g_rec.last_assert  := 'EQTABCOUNT';
  2533 EXEC      5         1       0         1    g_rec.last_msg     := msg_in;
  2535 EXEC      5         1       0         1    l_query := 'select count(*) from ' || check_this_in;
  2536 EXEC      5         0       0         0    if check_where_in is not null
  2538 EXEC      3         3       1         2       l_query := l_query || ' where ' || check_where_in;
  2540 EXEC      5         0       0         0    l_run_query;
  2541 EXEC      6         3       1         1    if NOT l_success then return; end if;
  2542 EXEC      4         4       1         1    l_check_cnt := l_cnt;
  2544 EXEC      4        17       4         5    l_query := 'select count(*) from ' || against_this_in;
  2545 EXEC      4         3       1         1    if against_where_in is not null
  2547 EXEC      2         3       1         2       l_query := l_query || ' where ' || against_where_in;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2549 EXEC      4         3       1         1    l_run_query;
  2550 EXEC      4         2       1         1    if NOT l_success then return; end if;
  2551 EXEC      4         8       2         2    g_rec.last_pass    := (l_check_cnt = l_cnt);
  2553 EXEC      4        41      10        11    g_rec.last_details := 'Expected ' || l_cnt       || ' rows from "' || against_this_in ||
  2556 EXEC      4         4       1         1    process_assertion;
  2557 EXEC      4         1       0         1 end eqtabcount;
  2561 ANNO      0         4       4         4    procedure t_eqtabcount
  2565 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQTABCOUNT Tests Happy Path 1';
  2566 ANNO      1         6       1         3       eqtabcount (
  2572 ANNO      1         2       2         2       temp_rec := g_rec;
  2573 ANNO      1         1       1         1       wt_assert.eq (
  2577 ANNO      1         0       0         0       wt_assert.eq (
  2581 ANNO      1         1       1         1       wt_assert.eq (
  2585 ANNO      1         1       1         1       wt_assert.isnotnull (
  2588 ANNO      1         8       8         8       wt_assert.this (
  2594 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQTABCOUNT Tests Happy Path 2';
  2595 ANNO      1         4       1         3       eqtabcount (
  2602 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQTABCOUNT Sad Path 1';
  2603 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2604 ANNO      1         4       2         2       eqtabcount (
  2610 ANNO      1         4       4         4       temp_rec := g_rec;
  2611 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  2612 ANNO      1         1       1         1       wt_assert.eq (
  2616 ANNO      1         1       1         1       wt_assert.isnotnull (
  2619 ANNO      1         7       7         7       wt_assert.this (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2625 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQTABCOUNT Sad Path 2';
  2626 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2627 ANNO      1         1       1         1       eqtabcount (
  2631 ANNO      1         5       5         5       temp_rec := g_rec;
  2632 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  2633 ANNO      1         1       1         1       wt_assert.eq (
  2637 ANNO      1         0       0         0       wt_assert.isnotnull (
  2640 ANNO      1         6       6         6       wt_assert.this (
  2645 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQTABCOUNT Sad Path 3';
  2646 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2647 ANNO      1         1       1         1       eqtabcount (
  2651 ANNO      1         3       3         3       temp_rec := g_rec;
  2652 ANNO      1        10      10        10       wtplsql_skip_save := FALSE;
  2653 ANNO      1         0       0         0       wt_assert.eq (
  2657 ANNO      1         0       0         0       wt_assert.isnotnull (
  2660 ANNO      1         2       2         2       wt_assert.this (
  2664 ANNO      1         1       1         1       wt_assert.this (
  2668 ANNO      1         2       2         2    end t_eqtabcount;
  2673 EXEC      5         6       0         1 procedure objexists (
  2681 EXEC      5         2       0         1    g_rec.last_assert  := 'OBJEXISTS';
  2682 EXEC      5         2       0         1    g_rec.last_msg     := msg_in;
  2683 EXEC      5    219703     336    106865    select count(*) into l_num_objects
  2690 EXEC      5        17       0         4    g_rec.last_pass    := case l_num_objects when 0 then FALSE else TRUE end;
  2691 EXEC      5         5       1         2    g_rec.last_details := 'Number of objects found for "' ||
  2692 UNKN      0        19       1         6                          case when obj_owner_in is null then ''
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2695 UNKN      0       156       1       135                          case when obj_type_in is null then ''
  2698 EXEC      5         2       1         1    process_assertion;
  2699 EXEC      5         7       1         2 end objexists;
  2702 UNKN      0         3       1         2 procedure objexists (
  2706 EXEC      2         5       2         3    l_pos    number := instr(check_this_in, '.');
  2708 EXEC      2         5       2         3    objexists(msg_in       => msg_in
  2711 EXEC      2         1       1         1 end objexists;
  2715 ANNO      0         2       2         2    procedure t_object_exists
  2719 ANNO      1         1       1         1       wt_assert.g_testcase := 'OBJEXISTS Happy Path 1';
  2720 ANNO      1         1       1         1       objexists (
  2724 ANNO      1         2       2         2       temp_rec := g_rec;
  2725 ANNO      1         1       1         1       wt_assert.eq (
  2729 ANNO      1         2       2         2       wt_assert.eq (
  2733 ANNO      1         1       1         1       wt_assert.eq (
  2737 ANNO      1         0       0         0       wt_assert.eq (
  2742 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJEXISTS Happy Path 2';
  2743 ANNO      1         0       0         0       objexists (
  2749 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJEXISTS Happy Path 3';
  2750 ANNO      1         0       0         0       objexists (
  2754 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJEXISTS Happy Path 4';
  2755 ANNO      1         1       1         1       objexists (
  2759 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJEXISTS Sad Path 1';
  2760 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2761 ANNO      1         1       1         1       objexists (
  2765 ANNO      1         4       4         4       temp_rec := g_rec;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2766 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2767 ANNO      1         0       0         0       wt_assert.eq (
  2771 ANNO      1         0       0         0       wt_assert.eq (
  2775 ANNO      1         1       1         1    end t_object_exists;
  2780 EXEC      4         6       0         1 procedure objnotexists (
  2788 EXEC      4         0       0         0    g_rec.last_assert  := 'OBJNOTEXISTS';
  2789 EXEC      4         2       0         1    g_rec.last_msg     := msg_in;
  2790 EXEC      4      1079     129       468    select count(*) into l_num_objects
  2797 EXEC      4         6       0         1    g_rec.last_pass    := case l_num_objects when 0 then TRUE else FALSE end;
  2798 EXEC      4         2       0         1    g_rec.last_details := 'Number of objects found for "' ||
  2799 UNKN      0         5       0         2                          case when obj_owner_in is null then ''
  2802 UNKN      0        12       3         4                          case when obj_type_in is null then ''
  2805 EXEC      4         3       1         1    process_assertion;
  2806 EXEC      4         1       1         1 end objnotexists;
  2809 UNKN      0         1       1         1 procedure objnotexists (
  2813 EXEC      1         3       3         3    l_pos    number := instr(check_this_in, '.');
  2815 EXEC      1         3       3         3    objnotexists(msg_in       => msg_in
  2818 EXEC      1         0       0         0 end objnotexists;
  2822 ANNO      0         2       2         2    procedure t_object_not_exists
  2826 ANNO      1         1       1         1       wt_assert.g_testcase := 'OBJNOTEXISTS Happy Path 1';
  2827 ANNO      1         1       1         1       objnotexists (
  2831 ANNO      1         1       1         1       temp_rec := g_rec;
  2832 ANNO      1         1       1         1       wt_assert.eq (
  2836 ANNO      1         0       0         0       wt_assert.eq (
  2840 ANNO      1         0       0         0       wt_assert.eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2844 ANNO      1         0       0         0       wt_assert.eq (
  2849 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJNOTEXISTS Happy Path 2';
  2850 ANNO      1         0       0         0       objnotexists (
  2856 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJNOTEXISTS Happy Path 3';
  2857 ANNO      1         1       1         1       objnotexists (
  2861 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJNOTEXISTS Sad Path 1';
  2862 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  2863 ANNO      1         0       0         0       objnotexists (
  2867 ANNO      1         1       1         1       temp_rec := g_rec;
  2868 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2869 ANNO      1         1       1         1       wt_assert.eq (
  2873 ANNO      1         0       0         0       wt_assert.eq (
  2877 ANNO      1         1       1         1    end t_object_not_exists;
  2886 ANNO      0         5       5         5    procedure WTPLSQL_RUN  --% WTPLSQL SET DBOUT "WT_ASSERT" %--
  2889 ANNO      1     39612   39612     39612       select temp_clob,  temp_nclob,  temp_xml,  temp_blob
  2892 ANNO      1         1       1         1       wt_assert.g_raise_exception := FALSE;
  2893 ANNO      1         1       1         1       t_boolean_to_status;
  2894 ANNO      1         0       0         0       t_process_assertion;
  2895 ANNO      1         0       0         0       t_compare_queries;
  2896 ANNO      1         0       0         0       t_nls_settings;
  2897 ANNO      1         0       0         0       t_last_values;
  2898 ANNO      1         0       0         0       t_reset_globals;
  2899 ANNO      1         1       1         1       t_this;
  2900 ANNO      1         1       1         1       t_eq;
  2901 ANNO      1         1       1         1       t_isnotnull;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2902 ANNO      1         0       0         0       t_isnull;
  2903 ANNO      1         1       1         1       t_raises;
  2904 ANNO      1         0       0         0       t_eqqueryvalue;
  2905 ANNO      1         1       1         1       t_eqquery;
  2906 ANNO      1         1       1         1       t_eqtable;
  2907 ANNO      1         0       0         0       t_eqtabcount;
  2908 ANNO      1         0       0         0       t_object_exists;
  2909 ANNO      1         0       0         0       t_object_not_exists;
  2910 ANNO      1         1       1         1    end WTPLSQL_RUN;
  2915 EXCL      0         0       0         0 end wt_assert;


    Start Date/Time: 18-Apr-2018 05:43:45
Test Results Run ID: 9, WTP.WT_PROFILER
----------------------------------------
       Total Testcases:       39      Total Assertions:      252
  Minimum Elapsed msec:        0     Failed Assertions:        0
  Average Elapsed msec:        5      Error Assertions:        0
  Maximum Elapsed msec:      128            Test Yield:   100.00%
  Total Run Time (sec):      1.2

Code Coverage Run ID: 9, PACKAGE BODY WTP.WT_PROFILER
----------------------------------------
    Total Source Lines:      701          Missed Lines:        3
  Minimum Elapsed usec:        0       Annotated Lines:      554
  Average Elapsed usec:      581        Excluded Lines:        2
  Maximum Elapsed usec:    65146         Unknown Lines:       11
 Trigger Source Offset:        0         Code Coverage:    97.76%

WTP.WT_PROFILER Details (Test Run ID 9)
----------------------------------------
---***  Get Error Messages  ***-------------------------------------------------
 PASS   40ms ERROR_PARAM Test 1. ISNOTNULL - Expected NOT NULL and got "DBMS_PROFILER Error: A subprogram was called with an incorrect parameter."
 PASS    0ms ERROR_PARAM Test 2. THIS - Expected "PASS" and got "PASS"
 PASS    0ms ERROR_IO Test 1. ISNOTNULL - Expected NOT NULL and got "DBMS_PROFILER Error: Data flush operation failed. Check whether the profiler tables have been created, are accessible, and that there is adequate space."
 PASS    0ms ERROR_IO Test 2. THIS - Expected "PASS" and got "PASS"
 PASS    0ms ERROR_VERSION Test 1. ISNOTNULL - Expected NOT NULL and got "DBMS_PROFILER Error: There is a mismatch between package and database implementation. Oracle returns this error if an incorrect version of the DBMS_PROFILER package is installed, and if the version of the profiler package cannot work with this database version."
 PASS    0ms ERROR_VERSION Test 2. THIS - Expected "PASS" and got "PASS"
 PASS    0ms Unknown Error Test 1. ISNOTNULL - Expected NOT NULL and got "DBMS_PROFILER Error: Unknown error number -9999"
 PASS    1ms Unknown Error Test 2. THIS - Expected "PASS" and got "PASS"
---***  Delete PL/SQL Profiler Records Happy Path 1  ***------------------------
 PASS    0ms delete_plsql_profiler_recs(-99) 1. ISNULL - Expected NULL and got ""
 PASS    2ms Number of plsql_profiler_runs (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_runs where runid = -99
 PASS    5ms Number of plsql_profiler_units (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_units where runid = -99
 PASS   17ms Number of plsql_profiler_data (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_data where runid = -99
---***  Delete PL/SQL Profiler Records Happy Path 2  ***------------------------
 PASS    2ms insert plsql_profiler_runs (-99). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    6ms insert plsql_profiler_units (-99). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS   16ms insert plsql_profiler_data (RUNID: -99). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms Number of plsql_profiler_runs (-99). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_runs where runid = -99
 PASS    0ms Number of plsql_profiler_units (-99). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_units where runid = -99
 PASS    0ms Number of plsql_profiler_data (-99). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_data where runid = -99
 PASS    1ms delete_plsql_profiler_recs(-99) 2. ISNULL - Expected NULL and got ""
 PASS    0ms Number of plsql_profiler_runs (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_runs where runid = -99
 PASS   18ms Number of plsql_profiler_units (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_units where runid = -99
 PASS    1ms Number of plsql_profiler_data (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_data where runid = -99
---***  Find DBOUT Setup  ***---------------------------------------------------
 PASS   39ms Compile package WT_PROFILE_FIND_DBOUT. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS   20ms Compile package WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_FIND_DBOUT package. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE) is 1
 PASS    0ms g_rec.dbout_owner. EQ - Expected "WTP" and got "WTP"
 PASS    0ms g_rec.dbout_name. EQ - Expected "WT_PROFILER" and got "WT_PROFILER"
 PASS    0ms g_rec.dbout_type. EQ - Expected "PACKAGE BODY" and got "PACKAGE BODY"
 PASS    0ms g_rec.error_message. ISNULL - Expected NULL and got ""
---***  Find DBOUT Happy Path 1  ***--------------------------------------------
 PASS   18ms Compile package body WT_PROFILE_FIND_DBOUT. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS   13ms Compile package body WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_FIND_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE BODY) is 1
 PASS   53ms g_rec.dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_type. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.error_message. ISNULL - Expected NULL and got ""
---***  Find DBOUT Happy Path 2  ***--------------------------------------------
 PASS   18ms Compile package body WT_PROFILE_FIND_DBOUT. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms Compile package body WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_FIND_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE BODY) is 1
 PASS    9ms g_rec.dbout_owner. EQ - Expected "WTP" and got "WTP"
 PASS    0ms g_rec.dbout_name. EQ - Expected "WT_PROFILE_FIND_DBOUT" and got "WT_PROFILE_FIND_DBOUT"
 PASS    0ms g_rec.dbout_type. EQ - Expected "PACKAGE BODY" and got "PACKAGE BODY"
 PASS    0ms g_rec.error_message. ISNULL - Expected NULL and got ""
---***  Find DBOUT Happy Path 3  ***--------------------------------------------
 PASS   20ms Compile package body WT_PROFILE_FIND_DBOUT. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms Compile package body WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_FIND_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE BODY) is 1
 PASS    1ms g_rec.dbout_owner. EQ - Expected "WTP" and got "WTP"
 PASS    0ms g_rec.dbout_name. EQ - Expected "WT_PROFILE_FIND_DBOUT" and got "WT_PROFILE_FIND_DBOUT"
 PASS    0ms g_rec.dbout_type. EQ - Expected "PACKAGE BODY" and got "PACKAGE BODY"
 PASS    0ms g_rec.error_message. ISNULL - Expected NULL and got ""
---***  Find DBOUT Sad Path 1  ***----------------------------------------------
 PASS   17ms Compile package body WT_PROFILE_FIND_DBOUT. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms Compile package body WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_FIND_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE BODY) is 1
 PASS    1ms g_rec.dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_type. ISNULL - Expected NULL and got ""
 PASS    1ms g_rec.error_message. EQ - Expected "Unable to find Database Object "BOGUS1". " and got "Unable to find Database Object "BOGUS1". "
---***  Find DBOUT Teardown  ***------------------------------------------------
 PASS  128ms Drop package WT_PROFILE_FIND_DBOUT. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms WT_PROFILE_FIND_DBOUT package. OBJNOTEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE) is 0
---***  Load Anno Setup  ***----------------------------------------------------
 PASS    0ms Number of ANNO_AA elements. ISNOTNULL - Expected NOT NULL and got "0"
 PASS   15ms Compile package WT_PROFILE_LOAD_ANNO. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms Compile package WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_LOAD_ANNO package. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE) is 1
---***  Load Anno Happy Path 1  ***---------------------------------------------
 PASS    9ms Compile package body WT_PROFILE_LOAD_ANNO. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    3ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS    2ms l_annoTest.COUNT. EQ - Expected "0" and got "0"
---***  Load Anno Happy Path 2  ***---------------------------------------------
 PASS   21ms Compile package body WT_PROFILE_LOAD_ANNO. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS  121ms l_annoTest.COUNT. EQ - Expected "3" and got "3"
 PASS    1ms l_annoTest.exists(3). EQ - Expected "PASS" and got "PASS"
 PASS    0ms l_annoTest.exists(4). EQ - Expected "PASS" and got "PASS"
 PASS    0ms l_annoTest.exists(5). EQ - Expected "PASS" and got "PASS"
---***  Load Anno Happy Path 3  ***---------------------------------------------
 PASS   30ms Compile package body WT_PROFILE_LOAD_ANNO. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS    1ms l_annoTest.COUNT. EQ - Expected "3" and got "3"
 PASS    0ms l_annoTest.exists(4). EQ - Expected "PASS" and got "PASS"
 PASS    0ms l_annoTest.exists(5). EQ - Expected "PASS" and got "PASS"
 PASS    0ms l_annoTest.exists(6). EQ - Expected "PASS" and got "PASS"
---***  Load Anno Happy Path 4  ***---------------------------------------------
 PASS   25ms Compile package body WT_PROFILE_LOAD_ANNO. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    2ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS    2ms l_annoTest.COUNT. EQ - Expected "6" and got "6"
 PASS    0ms l_annoTest.exists(4). EQ - Expected "PASS" and got "PASS"
 PASS    0ms l_annoTest.exists(5). EQ - Expected "PASS" and got "PASS"
 PASS    0ms l_annoTest.exists(6). EQ - Expected "PASS" and got "PASS"
 PASS    0ms l_annoTest.exists(8). EQ - Expected "PASS" and got "PASS"
 PASS    0ms l_annoTest.exists(9). EQ - Expected "PASS" and got "PASS"
 PASS    0ms l_annoTest.exists(10). EQ - Expected "PASS" and got "PASS"
---***  Load Anno Sad Path 1  ***-----------------------------------------------
 PASS   23ms Compile package body WT_PROFILE_LOAD_ANNO. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS    1ms l_annoTest.COUNT. EQ - Expected "0" and got "0"
---***  Load Anno Sad Path 2  ***-----------------------------------------------
 PASS   26ms Compile package body WT_PROFILE_LOAD_ANNO. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS    1ms l_annoTest.COUNT. EQ - Expected "3" and got "3"
 PASS    0ms l_annoTest.exists(4). EQ - Expected "PASS" and got "PASS"
 PASS    0ms l_annoTest.exists(5). EQ - Expected "PASS" and got "PASS"
 PASS    0ms l_annoTest.exists(6). EQ - Expected "PASS" and got "PASS"
---***  Load Anno Sad Path 3  ***-----------------------------------------------
 PASS   31ms Compile package body WT_PROFILE_LOAD_ANNO. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS    2ms l_annoTest.COUNT. EQ - Expected "5" and got "5"
 PASS    0ms l_annoTest.exists(4). EQ - Expected "PASS" and got "PASS"
 PASS    0ms l_annoTest.exists(5). EQ - Expected "PASS" and got "PASS"
 PASS    0ms l_annoTest.exists(6). EQ - Expected "PASS" and got "PASS"
 PASS    0ms l_annoTest.exists(7). EQ - Expected "PASS" and got "PASS"
 PASS    0ms l_annoTest.exists(8). EQ - Expected "PASS" and got "PASS"
---***  Load Anno Teardown  ***-------------------------------------------------
 PASS   42ms Drop package WT_PROFILE_LOAD_ANNO. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms WT_PROFILE_LOAD_ANNO package. OBJNOTEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE) is 0
 PASS    0ms Number of ANNO_AA elements. ISNOTNULL - Expected NOT NULL and got "0"
---***  Insert DBOUT Profile Setup  ***-----------------------------------------
 PASS   18ms Compile package WT_PROFILE_INSERT_DBOUT. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms Compile package WT_PROFILE_INSERT_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_INSERT_DBOUT package. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_INSERT_DBOUT"(PACKAGE) is 1
 PASS   11ms Compile package body WT_PROFILE_INSERT_DBOUT. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms Compile package body WT_PROFILE_INSERT_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_INSERT_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_INSERT_DBOUT"(PACKAGE BODY) is 1
 PASS    1ms insert plsql_profiler_runs (-97). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms insert plsql_profiler_units (-97). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms insert plsql_profiler_data (RUNID: -97). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    2ms Number of plsql_profiler_runs (-97). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_runs where runid = -97
 PASS    1ms Number of plsql_profiler_units (-97). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_units where runid = -97
 PASS    1ms Number of plsql_profiler_data (-97). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_data where runid = -97
 PASS    1ms Insert wt_test_runs (-97). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    2ms wt_test_runs (-97) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_test_runs where id = -97
 PASS    1ms insert UNIT 1 into plsql_profiler_units. ISNULL - Expected NULL and got ""
 PASS    1ms Number of UNIT 1 plsql_profiler_units. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_units where runid = -97 and unit_number = 1
 PASS    1ms insert plsql_profiler_data (LINE#: 1). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms insert plsql_profiler_data (LINE#: 2). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms insert plsql_profiler_data (LINE#: 3). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms insert plsql_profiler_data (LINE#: 5). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms insert plsql_profiler_data (LINE#: 7). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms insert plsql_profiler_data (LINE#: 8). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    2ms Number of UNIT 1 plsql_profiler_data. EQQUERYVALUE - Expected "6" and got "6" for Query: select count(*) from plsql_profiler_data where runid = -97 and unit_number = 1
---***  Insert DBOUT Profile Happy Path  ***------------------------------------
 PASS   66ms SQLERRM. ISNULL - Expected NULL and got ""
 PASS    5ms wt_dbout_profiles line 1, column STATUS. EQQUERYVALUE - Expected "EXCL" and got "EXCL" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 1
 PASS    1ms wt_dbout_profiles line 1, column TEXT. EQQUERYVALUE - Expected "package body WT_PROFILE_INSERT_DBOUT is\n" and got "package body WT_PROFILE_INSERT_DBOUT is\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 1
 PASS    1ms wt_dbout_profiles line 2, column STATUS. EQQUERYVALUE - Expected "UNKN" and got "UNKN" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 2
 PASS    2ms wt_dbout_profiles line 2, column TEXT. EQQUERYVALUE - Expected "begin\n" and got "begin\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 2
 PASS    3ms wt_dbout_profiles line 3, column STATUS. EQQUERYVALUE - Expected "EXEC" and got "EXEC" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 3
 PASS    6ms wt_dbout_profiles line 3, column TEXT. EQQUERYVALUE - Expected "  l_junk := 1;\n" and got "  l_junk := 1;\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 3
 PASS    2ms wt_dbout_profiles line 5, column STATUS. EQQUERYVALUE - Expected "ANNO" and got "ANNO" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 5
 PASS    2ms wt_dbout_profiles line 5, column TEXT. EQQUERYVALUE - Expected "  l_junk := 2;\n" and got "  l_junk := 2;\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 5
 PASS    1ms wt_dbout_profiles line 7, column STATUS. EQQUERYVALUE - Expected "EXEC" and got "EXEC" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 7
 PASS    1ms wt_dbout_profiles line 7, column TEXT. EQQUERYVALUE - Expected "  l_junk := 3;\n" and got "  l_junk := 3;\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 7
 PASS    3ms wt_dbout_profiles line 8, column STATUS. EQQUERYVALUE - Expected "EXCL" and got "EXCL" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 8
 PASS    1ms wt_dbout_profiles line 8, column TEXT. EQQUERYVALUE - Expected "end WT_PROFILE_INSERT_DBOUT;" and got "end WT_PROFILE_INSERT_DBOUT;" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 8
---***  Insert DBOUT Profile Teardown  ***--------------------------------------
 PASS    1ms Delete wt_dbout_profiles (-97). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    3ms wt_dbout_profiles (-97) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -97
 PASS    0ms Delete wt_test_runs (-97). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    2ms wt_test_runs (-97) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = -97
 PASS    1ms delete plsql_profiler_data (-97). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms delete plsql_profiler_units (-97). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms delete plsql_profiler_runs (-97). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms Number of plsql_profiler_runs (-97). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_runs where runid = -97
 PASS    1ms Number of plsql_profiler_units (-97). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_units where runid = -97
 PASS    0ms Number of plsql_profiler_data (-97). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_data where runid = -97
 PASS   24ms Drop package WT_PROFILE_INSERT_DBOUT. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms WT_PROFILE_INSERT_DBOUT package. OBJNOTEXISTS - Number of objects found for "WTP.WT_PROFILE_INSERT_DBOUT"(PACKAGE) is 0
---***  Insert DBOUT Profile Setup  ***-----------------------------------------
 PASS   42ms Compile package WT_PROFILE_INITIALIZE. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms Compile package WT_PROFILE_INITIALIZE Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_INITIALIZE package. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_INITIALIZE"(PACKAGE) is 1
---***  Initialize Test HAPPY Path 1  ***---------------------------------------
 PASS   22ms Compile package body WT_PROFILE_INITIALIZE. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms Compile package body WT_PROFILE_INITIALIZE Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_INITIALIZE package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_INITIALIZE"(PACKAGE BODY) is 1
 PASS    0ms OUT dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms OUT dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms OUT dbout_type. ISNULL - Expected NULL and got ""
 PASS    0ms OUT prof_runid. ISNULL - Expected NULL and got ""
 PASS    0ms OUT trigger_offset. ISNULL - Expected NULL and got ""
 PASS    0ms OUT error_message. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_type. ISNULL - Expected NULL and got ""
 PASS    1ms g_rec.prof_runid. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.trigger_offset. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.error_message. ISNULL - Expected NULL and got ""
---***  Initialize Test HAPPY Path 2  ***---------------------------------------
 PASS   18ms Compile package body WT_PROFILE_INITIALIZE. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms Compile package body WT_PROFILE_INITIALIZE Error. ISNULL - Expected NULL and got ""
 PASS    3ms WT_PROFILE_INITIALIZE package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_INITIALIZE"(PACKAGE BODY) is 1
 PASS    5ms OUT dbout_owner. EQ - Expected "WTP" and got "WTP"
 PASS    0ms OUT dbout_name. EQ - Expected "WT_PROFILE_INITIALIZE" and got "WT_PROFILE_INITIALIZE"
 PASS    1ms OUT dbout_type. EQ - Expected "PACKAGE BODY" and got "PACKAGE BODY"
 PASS    0ms OUT prof_runid. ISNOTNULL - Expected NOT NULL and got "5"
 PASS    0ms OUT trigger_offset. EQ - Expected "0" and got "0"
 PASS    0ms OUT error_message. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_owner. EQ - Expected "WTP" and got "WTP"
 PASS    0ms g_rec.dbout_name. EQ - Expected "WT_PROFILE_INITIALIZE" and got "WT_PROFILE_INITIALIZE"
 PASS    0ms g_rec.dbout_type. EQ - Expected "PACKAGE BODY" and got "PACKAGE BODY"
 PASS    0ms g_rec.prof_runid. ISNOTNULL - Expected NOT NULL and got "5"
 PASS    0ms g_rec.trigger_offset. EQ - Expected "0" and got "0"
 PASS    0ms g_rec.error_message. ISNULL - Expected NULL and got ""
---***  Initialize Test Sad Path 1  ***-----------------------------------------
 PASS    0ms SQLERRM. EQ - Expected "ORA-20004: i_test_run_id is null" and got "ORA-20004: i_test_run_id is null"
---***  Finalize Happy Path 1  ***----------------------------------------------
 PASS    0ms g_rec.dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms SQLERRM. ISNULL - Expected NULL and got ""
---***  Finalize Happy Path 2  ***----------------------------------------------
 PASS    0ms g_rec.dbout_owner. ISNOTNULL - Expected NOT NULL and got "WTP"
 PASS    0ms g_rec.dbout_name. ISNOTNULL - Expected NOT NULL and got "WT_PROFILER"
 PASS    0ms g_rec.dbout_type. ISNOTNULL - Expected NOT NULL and got "PACKAGE BODY"
 PASS    0ms g_rec.prof_runid. ISNOTNULL - Expected NOT NULL and got "5"
 PASS    0ms g_rec.trigger_offset. ISNOTNULL - Expected NOT NULL and got "0"
 PASS    0ms g_rec.error_message. ISNULL - Expected NULL and got ""
 PASS    0ms SQLERRM. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_owner. ISNULL - Expected NULL and got ""
 PASS    1ms g_rec.dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_type. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.prof_runid. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.trigger_offset. ISNULL - Expected NULL and got ""
---***  Finalize Sad Path 1  ***------------------------------------------------
 PASS    0ms SQLERRM. EQ - Expected "ORA-20000: g_rec.test_run_id is null" and got "ORA-20000: g_rec.test_run_id is null"
---***  Trigger Offset Happy Path  ***------------------------------------------
 PASS   49ms Trigger Test. EQ - Expected "3" and got "3"
 PASS    0ms Package Test. EQ - Expected "0" and got "0"
---***  Trigger Offset Sad Path  ***--------------------------------------------
 PASS    0ms Non Existent Object. EQ - Expected "0" and got "0"
---***  Calculate Percentage Offset Setup  ***----------------------------------
 PASS    1ms Insert wt_test_runs (-95). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    2ms wt_test_runs (-95) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_test_runs where id = -95
---***  Calculate Percentage Offset Happy Path 1  ***---------------------------
 PASS    1ms Insert wt_dbout_profiles (-95,1). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    2ms wt_dbout_profiles (-95,1) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 1
 PASS    1ms Insert wt_dbout_profiles (-95,2). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    6ms wt_dbout_profiles (-95,2) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 2
 PASS    1ms Insert wt_dbout_profiles (-95,3). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms wt_dbout_profiles (-95,3) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 3
 PASS    2ms Main Test. EQ - Expected "66.67" and got "66.67"
 PASS    1ms Delete wt_dbout_profiles (-95). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms wt_dbout_profiles (-95) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95
---***  Calculate Percentage Offset Happy Path 2  ***---------------------------
 PASS    1ms Insert wt_dbout_profiles (-95,1). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_dbout_profiles (-95,1) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 1
 PASS    0ms Insert wt_dbout_profiles (-95,2). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms wt_dbout_profiles (-95,2) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 2
 PASS    0ms Insert wt_dbout_profiles (-95,3). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_dbout_profiles (-95,3) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 3
 PASS    0ms Main Test. EQ - Expected "-1" and got "-1"
 PASS    1ms Delete wt_dbout_profiles (-95). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_dbout_profiles (-95) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95
---***  Calculate Percentage Offset Sad Path  ***-------------------------------
 PASS    0ms Missing Test Run ID. ISNULL - Expected NULL and got ""
 PASS    0ms NULL Test Run ID. ISNULL - Expected NULL and got ""
---***  Calculate Percentage Offset Teardown  ***-------------------------------
 PASS    1ms Delete wt_test_runs (-95). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_test_runs (-95) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = -95
---***  Delete Records Setup  ***-----------------------------------------------
 PASS    1ms wt_test_runs Count 0. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = -98
 PASS    3ms wt_dbout_profiles Count 0. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -98
 PASS    0ms Insert wt_test_runs (-98). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms wt_test_runs (-98) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_test_runs where id = -98
 PASS    0ms Insert wt_dbout_profiles (-98,1). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    2ms wt_dbout_profiles (-98,1) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -98 and line = 1
---***  Delete Records Happy Path 1  ***----------------------------------------
 PASS    1ms SQLERRM. ISNULL - Expected NULL and got ""
 PASS    0ms wt_dbout_profiles Count 2. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -98
---***  Delete Records Sad Path 1  ***------------------------------------------
 PASS    0ms SQLERRM. ISNULL - Expected NULL and got ""
 PASS    1ms wt_dbout_profiles Count 2. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -98
---***  Delete Records Sad Path 2  ***------------------------------------------
 PASS    0ms SQLERRM. ISNULL - Expected NULL and got ""
 PASS    0ms wt_dbout_profiles Count 2. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -98
---***  Delete Records Teardown  ***--------------------------------------------
 PASS    0ms Delete wt_test_runs (-98). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_test_runs (-98) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = -98

WTP.WT_PROFILER PACKAGE BODY Code Coverage Details (Test Run ID 9)
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
     1 EXCL      0         0       0         0 package body wt_profiler
    29 ANNO      0         0       0         0    g_skip_this  boolean := FALSE;
    31 ANNO      0       134       5        10    procedure compile_db_object
    37 ANNO     18         6       1         1       l_errtxt   varchar2(32000) := '';
    41 ANNO     18     14510     633      1118          execute immediate 'create or replace ' ||
    44 ANNO     18        91       4         9          l_sqlerrm := SQLERRM;
    45 ANNO      0         0       0         0       exception when others then
    46 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
    47 ANNO      0         0       0         0       end;
    48 ANNO     18       234       8        50       wt_assert.eq
    53 ANNO     36     36551      19     19790       for buff in (select * from user_errors
    59 ANNO      0         0       0         0          l_errtxt := l_errtxt || buff.line || ', ' ||
    62 ANNO     18        91       3        12       wt_assert.isnull
    66 ANNO     18       188       1        10       wt_assert.objexists (
    71 ANNO     18        41       1         4    end compile_db_object;
    73 ANNO      0         6       2         2    procedure drop_db_object
    81 ANNO      3      8910     636      6201          execute immediate
    83 ANNO      3        15       5         5          l_sqlerrm := SQLERRM;
    84 ANNO      0         0       0         0       exception when others then
    85 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
    86 ANNO      0         0       0         0       end;
    87 ANNO      3        28       9        10       wt_assert.eq
    91 ANNO      3        33       2         9       wt_assert.objnotexists (
    96 ANNO      3         2       1         1    end drop_db_object;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
    98 ANNO      0         6       1         2    procedure count_plsql_profiler_records
   104 ANNO      5        21       3         6       wt_assert.eqqueryvalue
   109 ANNO      5        26       4         7       wt_assert.eqqueryvalue
   114 ANNO      5       138       4       119       wt_assert.eqqueryvalue
   119 ANNO      5         3       0         1    end count_plsql_profiler_records;
   121 ANNO      0         6       3         3    procedure insert_plsql_profiler_records
   128 ANNO      2      1762     524      1238          insert into plsql_profiler_runs (runid)
   130 ANNO      2       272     124       148          commit;
   131 ANNO      2         7       3         4          l_sqlerrm := SQLERRM;
   132 ANNO      0         0       0         0       exception when others then
   133 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
   134 ANNO      0         0       0         0       end;
   135 ANNO      2        26      12        14       wt_assert.eq (
   141 ANNO      2      6321     279      6042          insert into plsql_profiler_units (runid,    unit_number, total_time)
   143 ANNO      2       222      77       145          commit;
   144 ANNO      2         5       1         4          l_sqlerrm := SQLERRM;
   145 ANNO      0         0       0         0       exception when others then
   146 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
   147 ANNO      0         0       0         0       end;
   148 ANNO      2        20       5        15       wt_assert.eq (
   154 ANNO      2     16169     254     15915          insert into plsql_profiler_data (runid,    unit_number, line#)
   156 ANNO      2       208      69       139          commit;
   157 ANNO      2         7       2         5          l_sqlerrm := SQLERRM;
   158 ANNO      0         0       0         0       exception when others then
   159 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   160 ANNO      0         0       0         0       end;
   161 ANNO      2        19       4        15       wt_assert.eq (
   165 ANNO      2         2       1         1    end insert_plsql_profiler_records;
   167 ANNO      0         3       3         3    procedure delete_plsql_profiler_records
   174 ANNO      1       264     264       264          delete from plsql_profiler_data
   176 ANNO      1        85      85        85          commit;
   177 ANNO      1         3       3         3          l_sqlerrm := SQLERRM;
   178 ANNO      0         0       0         0       exception when others then
   179 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
   180 ANNO      0         0       0         0       end;
   181 ANNO      1         7       7         7       wt_assert.eq (
   187 ANNO      1        88      88        88          delete from plsql_profiler_units
   189 ANNO      1        47      47        47          commit;
   190 ANNO      1         1       1         1          l_sqlerrm := SQLERRM;
   191 ANNO      0         0       0         0       exception when others then
   192 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
   193 ANNO      0         0       0         0       end;
   194 ANNO      1         4       4         4       wt_assert.eq (
   200 ANNO      1       125     125       125          delete from plsql_profiler_runs
   202 ANNO      1        46      46        46          commit;
   203 ANNO      1         1       1         1          l_sqlerrm := SQLERRM;
   204 ANNO      0         0       0         0       exception when others then
   205 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
   206 ANNO      0         0       0         0       end;
   207 ANNO      1         4       4         4       wt_assert.eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   211 ANNO      1       124     124       124       COMMIT;
   212 ANNO      1         1       1         1    end delete_plsql_profiler_records;
   214 ANNO      0         7       1         3    procedure insert_test_runs
   222 ANNO      3      1803     272      1122          insert into wt_test_runs
   226 ANNO      3         7       2         3          l_sqlerrm := SQLERRM;
   227 ANNO      3       414     132       141          commit;
   228 ANNO      0         0       0         0       exception when others then
   229 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
   230 ANNO      0         0       0         0       end;
   232 ANNO      3        23       6         9       wt_assert.eq (
   236 ANNO      3        15       5         5       wt_assert.eqqueryvalue (
   241 ANNO      3         3       1         1    end insert_test_runs;
   243 ANNO      0         8       2         3    procedure delete_test_runs
   250 ANNO      3       736     140       380          delete from wt_test_runs where id = in_test_run_id;
   251 ANNO      3         5       1         2          l_sqlerrm := SQLERRM;
   252 ANNO      3       309      83       122          commit;
   253 ANNO      0         0       0         0       exception when others then
   254 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
   255 ANNO      0         0       0         0       end;
   256 ANNO      3        18       4         9       wt_assert.eq (
   260 ANNO      3        13       3         6       wt_assert.eqqueryvalue (
   265 ANNO      3         2       1         1    end delete_test_runs;
   267 ANNO      0        14       1         3    procedure insert_dbout_profiles
   274 ANNO      7      1698     113       401          insert into wt_dbout_profiles values in_rec;
   275 ANNO      7        12       1         2          l_sqlerrm := SQLERRM;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   276 ANNO      7      1609      78       462          commit;
   277 ANNO      0         0       0         0       exception when others then
   278 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
   279 ANNO      0         0       0         0       end;
   281 ANNO      7        50       4        16       wt_assert.eq (
   286 ANNO      7        40       4         7       wt_assert.eqqueryvalue (
   293 ANNO      7         5       1         1    end insert_dbout_profiles;
   295 ANNO      0         9       2         4    procedure delete_dbout_profiles
   302 ANNO      3       995     199       445          delete from wt_dbout_profiles where test_run_id = in_test_run_id;
   303 ANNO      3         5       1         2          l_sqlerrm := SQLERRM;
   304 ANNO      3       337      88       130          commit;
   305 ANNO      0         0       0         0       exception when others then
   306 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
   307 ANNO      0         0       0         0       end;
   309 ANNO      3       246       4       235       wt_assert.eq (
   313 ANNO      3        19       3        10       wt_assert.eqqueryvalue (
   318 ANNO      3         4       0         2    end delete_dbout_profiles;
   325 UNKN      0         9       1         2 function get_error_msg
   329 EXEC      8         0       0         0    l_msg_prefix  varchar2(50) := 'DBMS_PROFILER Error: ';
   331 EXEC      8         0       0         0    case retnum_in
   332 EXEC     10        14       0         7    when dbms_profiler.error_param then return l_msg_prefix ||
   334 EXEC      8         2       0         1    when dbms_profiler.error_io then return l_msg_prefix ||
   338 EXEC      6         6       0         2    when dbms_profiler.error_version then return l_msg_prefix ||
   343 EXEC      2         8       2         6    else return l_msg_prefix ||
   346 EXEC      8         3       0         2 end get_error_msg;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   350 ANNO      0         7       7         7    procedure t_get_error_msg
   354 ANNO      2        24       2        22       wt_assert.g_testcase := 'Get Error Messages';
   355 ANNO      1         1       1         1       wt_assert.isnotnull (
   358 ANNO      1        29       1        28       wt_assert.this (
   362 ANNO      1         1       0         1       wt_assert.isnotnull (
   365 ANNO      1         8       8         8       wt_assert.this (
   369 ANNO      1         2       1         1       wt_assert.isnotnull (
   372 ANNO      1        26      26        26       wt_assert.this (
   376 ANNO      1         1       1         1       wt_assert.isnotnull (
   379 ANNO      1         8       1         7       wt_assert.this (
   383 ANNO      1         1       1         1    end t_get_error_msg;
   388 UNKN      0         8       1         5 procedure delete_plsql_profiler_recs
   392 EXEC      4        85      14        28 begin
   393 EXEC      4      1162     115       601    delete from plsql_profiler_data
   395 EXEC      4       532      58       262    delete from plsql_profiler_units
   397 EXEC      4       375      46       159    delete from plsql_profiler_runs
   399 EXEC      4      3831      68      3554    COMMIT;
   400 EXEC      4        58       9        28 end delete_plsql_profiler_recs;
   404 ANNO      0         3       3         3    procedure t_delete_profiler_recs
   406 ANNO      1         1       1         1       c_test_run_id   constant number := -99;
   410 ANNO      1         1       1         1       wt_assert.g_testcase := 'Delete PL/SQL Profiler Records Happy Path 1';
   412 ANNO      1         0       0         0          delete_plsql_profiler_recs(c_test_run_id);  -- Should run without error
   413 ANNO      1        57      57        57          l_err_stack := dbms_utility.format_error_stack     ||
   415 ANNO      0         0       0         0       exception when others then
   416 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   418 ANNO      0         0       0         0       end;
   419 ANNO      1        10      10        10       wt_assert.isnull (
   422 ANNO      1         0       0         0       count_plsql_profiler_records(c_test_run_id, 0);
   424 ANNO      1         0       0         0       wt_assert.g_testcase := 'Delete PL/SQL Profiler Records Happy Path 2';
   425 ANNO      1         0       0         0       insert_plsql_profiler_records(c_test_run_id);
   426 ANNO      1         0       0         0       count_plsql_profiler_records(c_test_run_id, 1);
   428 ANNO      1         0       0         0          delete_plsql_profiler_recs(c_test_run_id);  -- Should run without error
   429 ANNO      1         7       7         7          l_err_stack := dbms_utility.format_error_stack     ||
   431 ANNO      0         0       0         0       exception when others then
   432 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
   434 ANNO      0         0       0         0       end;
   435 ANNO      1         6       6         6       wt_assert.isnull (
   438 ANNO      1         0       0         0       count_plsql_profiler_records(c_test_run_id, 0);
   439 ANNO      1         3       3         3    end t_delete_profiler_recs;
   444 UNKN      0        18       2         4 procedure find_dbout
   447 EXEC      6         5       1         1    C_HEAD_RE CONSTANT varchar2(30) := '--% WTPLSQL SET DBOUT "';
   448 EXEC      6         5       1         1    C_MAIN_RE CONSTANT varchar2(30) := '[[:alnum:]._$#]+';
   449 EXEC      6         6       1         1    C_TAIL_RE CONSTANT varchar2(30) := '" %--';
   464#NOTX#     0         0       0         0    cursor c_annotation is
   465 EXEC      6     53028     129     52105       select regexp_substr(src.text, C_HEAD_RE||C_MAIN_RE||C_TAIL_RE)  TEXT
   471 UNKN      0         5       1         2        order by src.line;
   475 EXEC      6         2       0         1    open c_annotation;
   476 EXEC      6      1760     206       556    fetch c_annotation into l_target;
   477 EXEC      6         6       1         2    if c_annotation%NOTFOUND
   479 EXEC      2       133      17       116       close c_annotation;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   480 EXEC      2        14       2        12       return;
   482 EXEC      4       144      29        51    close c_annotation;
   484 EXEC      4       114      26        30    l_target := regexp_replace(SRCSTR      => l_target
   490 EXEC      4        38       7        11    l_target := regexp_replace(SRCSTR      => l_target
   496 EXEC      4        77       4        63    l_pos := instr(l_target,'.');
   498 EXEC      4      2962     304      1207       select obj.owner
   521 EXEC      1         0       0         0    exception when NO_DATA_FOUND
   523 EXEC      1         4       4         4       g_rec.error_message := 'Unable to find Database Object "' ||
   525 UNKN      0         1       1         1    end;
   526 EXEC      4        19       3         7 end find_dbout;
   530 ANNO      1         5       5         5    procedure t_find_dbout
   535 ANNO      1         0       0         0       l_pname      varchar2(128) := 'WT_PROFILE_FIND_DBOUT';
   536 ANNO      0         2       0         1       procedure run_find_dbout is begin
   537 ANNO      4         9       2         3          l_recSAVE := g_rec;
   538 ANNO      4         3       1         1          g_rec := l_recNULL;
   539 ANNO      4         2       0         1          find_dbout(l_pname);
   540 ANNO      4        20       3         9          l_recTEST := g_rec;
   541 ANNO      4         4       0         2          g_rec := l_recSAVE;
   542 ANNO      4         1       0         1       end run_find_dbout;
   545 ANNO      1         1       1         1       wt_assert.g_testcase := 'Find DBOUT Setup';
   546 ANNO      1         0       0         0       compile_db_object
   550 ANNO      1         2       2         2       l_recTEST := g_rec;
   551 ANNO      1         3       1         2       wt_assert.eq
   555 ANNO      1         1       1         1       wt_assert.eq
   559 ANNO      1         1       1         1       wt_assert.eq
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   563 ANNO      1         1       1         1       wt_assert.isnull
   567 ANNO      1         0       0         0       wt_assert.g_testcase := 'Find DBOUT Happy Path 1';
   568 ANNO      1         5       5         5       compile_db_object
   572 ANNO      1         0       0         0       run_find_dbout;
   573 ANNO      1         5       5         5       wt_assert.isnull
   576 ANNO      1         2       2         2       wt_assert.isnull
   579 ANNO      1         1       1         1       wt_assert.isnull
   582 ANNO      1         0       0         0       wt_assert.isnull
   586 ANNO      1         1       1         1       wt_assert.g_testcase := 'Find DBOUT Happy Path 2';
   587 ANNO      1         6       6         6       compile_db_object
   594 ANNO      1         0       0         0       run_find_dbout;
   595 ANNO      1         8       3         5       wt_assert.eq
   599 ANNO      1         1       1         1       wt_assert.eq
   603 ANNO      1         1       1         1       wt_assert.eq
   607 ANNO      1         1       1         1       wt_assert.isnull
   611 ANNO      1         1       1         1       wt_assert.g_testcase := 'Find DBOUT Happy Path 3';
   612 ANNO      1         8       1         7       compile_db_object
   620 ANNO      1         0       0         0       run_find_dbout;
   621 ANNO      1         4       2         2       wt_assert.eq
   625 ANNO      1         1       1         1       wt_assert.eq
   629 ANNO      1         0       0         0       wt_assert.eq
   633 ANNO      1         1       1         1       wt_assert.isnull
   637 ANNO      1         0       0         0       wt_assert.g_testcase := 'Find DBOUT Sad Path 1';
   638 ANNO      1         4       4         4       compile_db_object
   645 ANNO      1         0       0         0       run_find_dbout;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   646 ANNO      1         2       2         2       wt_assert.isnull
   649 ANNO      1         1       1         1       wt_assert.isnull
   652 ANNO      1         1       1         1       wt_assert.isnull
   655 ANNO      1         1       1         1       wt_assert.eq
   660 ANNO      1         1       1         1       wt_assert.g_testcase := 'Find DBOUT Teardown';
   661 ANNO      1         0       0         0       drop_db_object(l_pname, 'package');
   662 ANNO      1         2       2         2    end t_find_dbout;
   667 EXEC      8        37       3         6 procedure load_anno_aa
   669 UNKN      0         5       1         1    cursor c_find_begin is
   670 EXEC      8     56214     119     54292       select line
   677 ANNO      0         7       1         2        order by line;
   679 ANNO      0         6       0         1    cursor c_find_end (in_line in number, in_col in number) is
   680 ANNO      8     57186      51     56215       with q1 as (
   697 UNKN      0         9       1         3             ,col;
   700 EXEC      8         9       1         2    anno_aa.delete;
   701 EXEC      8         6       1         1    open c_find_begin;
   702 EXEC     16         0       0         0    loop
   703 EXEC     16      2085      18       568       fetch c_find_begin into buff_find_begin;
   704 EXEC     16        17       0         3       exit when c_find_begin%NOTFOUND;
   705 EXEC      8         2       0         1       open c_find_end (buff_find_begin.line, buff_find_begin.col);
   706 EXEC      8      2160      98       860       fetch c_find_end into buff_find_end;
   707 EXEC      8         9       1         2       if c_find_end%NOTFOUND
   709 EXEC      2     65493     347     65146          select max(line)
   716 EXEC      8       243       9        58       close c_find_end;
   717 EXEC     34        47       0         6       for i in buff_find_begin.line + g_rec.trigger_offset ..
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   720 EXEC     26        44       0         8          anno_aa(i) := 'X';
   723 EXEC      8       153      10        39    close c_find_begin;
   724 EXEC      8        26       2         6 end load_anno_aa;
   728 ANNO      1         8       8         8    procedure t_load_anno_aa
   733 ANNO      1         1       1         1       l_pname      varchar2(128) := 'WT_PROFILE_LOAD_ANNO';
   735 ANNO      0        10       1         3       procedure run_load_anno is begin
   736 ANNO      7        14       2         2          l_recSAVE  := g_rec;
   737 ANNO      7        16       2         3          l_annoSAVE := anno_aa;
   738 ANNO      7         8       1         2          anno_aa.delete;
   739 ANNO      7         9       0         1          g_rec.dbout_owner    := USER;
   740 ANNO      7         4       0         1          g_rec.dbout_name     := l_pname;
   741 ANNO      7         2       1         1          g_rec.dbout_type     := 'PACKAGE BODY';
   742 ANNO      7         2       0         1          g_rec.trigger_offset := 0;
   743 ANNO      7         3       0         1          load_anno_aa;
   744 ANNO      7      1057       3       702          l_annoTEST := anno_aa;
   745 ANNO      7        20       2         7          anno_aa := l_annoSAVE;
   746 ANNO      7        19       1         6          g_rec   := l_recSAVE;
   747 ANNO      7         3       1         1       end run_load_anno;
   750 ANNO      1         1       1         1       wt_assert.g_testcase := 'Load Anno Setup';
   751 ANNO      1         4       4         4       wt_assert.isnotnull
   754 ANNO      1         0       0         0       compile_db_object
   759 ANNO      1         0       0         0       wt_assert.g_testcase := 'Load Anno Happy Path 1';
   760 ANNO      1         5       5         5       compile_db_object
   764 ANNO      1         1       1         1       run_load_anno;
   765 ANNO      1        14      14        14       wt_assert.eq
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   770 ANNO      1         1       1         1       wt_assert.g_testcase := 'Load Anno Happy Path 2';
   771 ANNO      1         9       9         9       compile_db_object
   779 ANNO      1         0       0         0       run_load_anno;
   780 ANNO      1        17      17        17       wt_assert.eq
   784 ANNO      4         2       0         1       for i in 3 .. 5
   786 ANNO      3        12       2         7          wt_assert.eq
   792 ANNO      1         1       1         1       wt_assert.g_testcase := 'Load Anno Happy Path 3';
   793 ANNO      1         8       8         8       compile_db_object
   803 ANNO      1         0       0         0       run_load_anno;
   804 ANNO      1        14      14        14       wt_assert.eq
   808 ANNO      4         1       0         1       for i in 4 .. 6
   810 ANNO      3        11       3         5          wt_assert.eq
   816 ANNO      1         1       1         1       wt_assert.g_testcase := 'Load Anno Happy Path 4';
   817 ANNO      1         6       6         6       compile_db_object
   830 ANNO      1         1       1         1       run_load_anno;
   831 ANNO      1        10      10        10       wt_assert.eq
   835 ANNO      4         0       0         0       for i in 4 .. 6
   837 ANNO      3        10       2         5          wt_assert.eq
   842 ANNO      3         0       0         0       for i in 8 .. 10
   844 ANNO      3         7       2         3          wt_assert.eq
   850 ANNO      1         0       0         0       wt_assert.g_testcase := 'Load Anno Sad Path 1';
   851 ANNO      1         4       4         4       compile_db_object
   858 ANNO      1         0       0         0       run_load_anno;
   859 ANNO      1         5       5         5       wt_assert.eq
   864 ANNO      1         0       0         0       wt_assert.g_testcase := 'Load Anno Sad Path 2';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   865 ANNO      1         6       6         6       compile_db_object
   877 ANNO      1         0       0         0       run_load_anno;
   878 ANNO      1         5       5         5       wt_assert.eq
   882 ANNO      4         1       0         1       for i in 4 .. 6
   884 ANNO      3        10       2         5          wt_assert.eq
   890 ANNO      1         1       1         1       wt_assert.g_testcase := 'Load Anno Sad Path 3';
   891 ANNO      1         6       6         6       compile_db_object
   903 ANNO      1         1       1         1       run_load_anno;
   904 ANNO      1        10      10        10       wt_assert.eq
   908 ANNO      6         1       1         1       for i in 4 .. 8
   910 ANNO      5        16       2         5          wt_assert.eq
   916 ANNO      1         0       0         0       wt_assert.g_testcase := 'Load Anno Teardown';
   917 ANNO      1         0       0         0       drop_db_object(l_pname, 'package');
   918 ANNO      1         4       4         4       wt_assert.isnotnull
   921 ANNO      1         4       4         4    end t_load_anno_aa;
   926 EXEC      1        11       1        10 procedure insert_dbout_profile
   931 UNKN      0        23       2         7    procedure l_set_status is begin
   932 EXEC      6        17       2         4       if anno_aa.EXISTS(prof_rec.line)
   935 EXEC      1         1       1         1          prof_rec.status := 'ANNO';
   936 EXEC      1         1       1         1          return;
   938 EXEC      5         4       0         1       if prof_rec.total_occur > 0
   941 EXEC      2         1       1         1          prof_rec.status := 'EXEC';
   942 EXEC      2         2       1         1          return;
   944 EXEC      3         2       1         1       if    prof_rec.total_occur = 0
   948 EXEC      2        65      29        36          if regexp_like(prof_rec.text, '^[[:space:]]*' ||
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   953 EXEC      1         1       1         1             prof_rec.status := 'EXCL';
   956 EXEC      1         0       0         0             prof_rec.status := 'NOTX';
   958 EXEC      2         5       2         3          return;
   961 EXEC      1         0       0         0       prof_rec.status := 'UNKN';
   962 EXEC      1         1       1         1    end l_set_status;
   963 EXEC      1        18      18        18 begin
   964 EXEC      1         1       1         1    prof_rec.test_run_id := g_rec.test_run_id;
   965 EXEC      1         0       0         0    load_anno_aa;
   966 EXEC      3       563       1       499    for buf1 in (
   967#NOTX#     0         0       0         0       select src.line
   987 EXEC      6        11       1         4       prof_rec.line        := buf1.line;
   988 EXEC      6         2       1         1       prof_rec.total_occur := buf1.total_occur;
   989 EXEC      6         1       0         1       prof_rec.total_time  := buf1.total_time;
   990 EXEC      6         1       0         1       prof_rec.min_time    := buf1.min_time;
   991 EXEC      6         1       0         1       prof_rec.max_time    := buf1.max_time;
   992 EXEC      6         6       1         2       prof_rec.text        := buf1.text;
   993 EXEC      6         4       0         1       prof_rec.status      := NULL;
   994 EXEC      6         2       1         1       l_set_status;
   995 EXEC      6       182       0       181       l_max_line := buf1.line;
   996 EXEC      6      2063      79       894       insert into wt_dbout_profiles values prof_rec;
   999 EXEC      1       369     369       369    update wt_dbout_profiles
  1005 EXEC      1       596     596       596    COMMIT;
  1008 EXEC      1        10      10        10    anno_aa.delete;
  1009 EXEC      1         4       4         4    delete_plsql_profiler_recs(g_rec.prof_runid);
  1010 EXEC      1        14      14        14 end insert_dbout_profile;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1014 ANNO      1         8       8         8    procedure t_insert_dbout_profile
  1020 ANNO      1         1       1         1       c_test_run_id  constant number := -97;
  1021 ANNO      1         1       1         1       l_pname        varchar2(128) := 'WT_PROFILE_INSERT_DBOUT';
  1024 ANNO      0         7       1         2       procedure insert_plsql_profiler_data
  1030 ANNO      6         1       0         1          data_rec.line#       := in_line#;
  1031 ANNO      6         5       1         1          data_rec.total_occur := in_total_occur;
  1032 ANNO      6         1       0         1          data_rec.total_time  := in_total_time;
  1034 ANNO      6      1567     100       968             insert into plsql_profiler_data values data_rec;
  1035 ANNO      6      1835      75      1182             commit;
  1036 ANNO      6        14       1         4             l_sqlerrm := SQLERRM;
  1037 ANNO      0         0       0         0          exception when others then
  1038 ANNO      0         0       0         0             l_sqlerrm := SQLERRM;
  1039 ANNO      0         0       0         0          end;
  1040 ANNO      6        35       4        11          wt_assert.eq (
  1044 ANNO      6         4       1         1       end insert_plsql_profiler_data;
  1045 ANNO      0        18       1         5       procedure test_dbout_profiler
  1051 ANNO     12      1069       5       981          wt_assert.eqqueryvalue
  1059 ANNO     12         5       1         1       end test_dbout_profiler;
  1062 ANNO      1         1       1         1       wt_assert.g_testcase := 'Insert DBOUT Profile Setup';
  1063 ANNO      1         0       0         0       compile_db_object
  1067 ANNO      1         8       8         8       compile_db_object
  1077 ANNO      1         0       0         0       insert_plsql_profiler_records(c_test_run_id);
  1078 ANNO      1         1       1         1       count_plsql_profiler_records(c_test_run_id, 1);
  1079 ANNO      1         0       0         0       insert_test_runs(c_test_run_id, 'Insert DBOUT Test');
  1081 ANNO      1         1       1         1       units_rec.runid        := c_test_run_id;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1082 ANNO      1         1       1         1       units_rec.unit_number  := 1;
  1083 ANNO      1         1       0         1       units_rec.unit_owner   := USER;
  1084 ANNO      1         1       1         1       units_rec.unit_name    := l_pname;
  1085 ANNO      1         0       0         0       units_rec.unit_type    := 'PACKAGE BODY';
  1086 ANNO      1         0       0         0       units_rec.total_time   := 0;
  1088 ANNO      1       944     944       944          insert into plsql_profiler_units values units_rec;
  1089 ANNO      1       119     119       119          commit;
  1090 ANNO      1         5       5         5          l_err_stack := dbms_utility.format_error_stack     ||
  1092 ANNO      0         0       0         0       exception when others then
  1093 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1095 ANNO      0         0       0         0       end;
  1096 ANNO      1         2       2         2       wt_assert.isnull (
  1099 ANNO      1         9       9         9       wt_assert.eqqueryvalue
  1106 ANNO      1         0       0         0       data_rec.runid       := c_test_run_id;
  1107 ANNO      1         0       0         0       data_rec.unit_number := 1;
  1108 ANNO      1         1       1         1       data_rec.min_time    := 0;
  1109 ANNO      1         0       0         0       data_rec.max_time    := 1;
  1110 ANNO      1         1       1         1       insert_plsql_profiler_data(1, 0, 0);
  1111 ANNO      1         1       1         1       insert_plsql_profiler_data(2, 0, 1);
  1112 ANNO      1         1       1         1       insert_plsql_profiler_data(3, 1, 1);
  1113 ANNO      1         0       0         0       insert_plsql_profiler_data(5, 1, 1);
  1114 ANNO      1         0       0         0       insert_plsql_profiler_data(7, 1, 1);
  1115 ANNO      1         1       1         1       insert_plsql_profiler_data(8, 0, 0);
  1116 ANNO      1         7       7         7       wt_assert.eqqueryvalue
  1123 ANNO      1         1       1         1       wt_assert.g_testcase := 'Insert DBOUT Profile Happy Path';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1124 ANNO      1         2       2         2       l_recSAVE := g_rec;
  1125 ANNO      1         0       0         0       g_rec.test_run_id     := c_test_run_id;
  1126 ANNO      1         1       0         1       g_rec.dbout_owner     := USER;
  1127 ANNO      1         1       1         1       g_rec.dbout_name      := l_pname;
  1128 ANNO      1         0       0         0       g_rec.dbout_type      := 'PACKAGE BODY';
  1129 ANNO      1         1       1         1       g_rec.prof_runid      := c_test_run_id;
  1130 ANNO      1         0       0         0       g_rec.trigger_offset  := 0;
  1131 ANNO      1         1       1         1       g_rec.error_message   := '';
  1133 ANNO      1         1       1         1          insert_dbout_profile;
  1134 ANNO      1        10      10        10          l_err_stack := dbms_utility.format_error_stack     ||
  1136 ANNO      0         0       0         0       exception when others then
  1137 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1139 ANNO      0         0       0         0       end;
  1140 ANNO      1         4       4         4       g_rec := l_recSAVE;
  1141 ANNO      1         5       5         5       wt_assert.isnull (
  1145 ANNO      1        18      18        18       test_dbout_profiler(1, 'STATUS', 'EXCL');
  1146 ANNO      1         5       5         5       test_dbout_profiler(1, 'TEXT',   'package body WT_PROFILE_INSERT_DBOUT is' || CHR(10));
  1147 ANNO      1         0       0         0       test_dbout_profiler(2, 'STATUS', 'UNKN');
  1148 ANNO      1         2       2         2       test_dbout_profiler(2, 'TEXT',   'begin' || CHR(10));
  1149 ANNO      1         1       1         1       test_dbout_profiler(3, 'STATUS', 'EXEC');
  1150 ANNO      1         3       3         3       test_dbout_profiler(3, 'TEXT',   '  l_junk := 1;' || CHR(10));
  1151 ANNO      1         1       1         1       test_dbout_profiler(5, 'STATUS', 'ANNO');
  1152 ANNO      1         3       3         3       test_dbout_profiler(5, 'TEXT',   '  l_junk := 2;' || CHR(10));
  1153 ANNO      1         0       0         0       test_dbout_profiler(7, 'STATUS', 'EXEC');
  1154 ANNO      1         3       3         3       test_dbout_profiler(7, 'TEXT',   '  l_junk := 3;' || CHR(10));
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1155 ANNO      1         0       0         0       test_dbout_profiler(8, 'STATUS', 'EXCL');
  1156 ANNO      1         1       1         1       test_dbout_profiler(8, 'TEXT',   'end WT_PROFILE_INSERT_DBOUT;');
  1158 ANNO      1         0       0         0       wt_assert.g_testcase := 'Insert DBOUT Profile Teardown';
  1159 ANNO      1         1       1         1       delete_dbout_profiles(c_test_run_id);
  1160 ANNO      1         1       1         1       delete_test_runs(c_test_run_id);
  1161 ANNO      1         0       0         0       delete_plsql_profiler_records(c_test_run_id);
  1162 ANNO      1         1       1         1       count_plsql_profiler_records(c_test_run_id, 0);
  1163 ANNO      1         0       0         0       drop_db_object(l_pname, 'package');
  1164 ANNO      1         2       2         2    end t_insert_dbout_profile;
  1174 EXEC      3        12       3         5 procedure initialize
  1187 EXEC      3         1       0         1    out_dbout_owner     := '';
  1188 EXEC      3         0       0         0    out_dbout_name      := '';
  1189 EXEC      3         0       0         0    out_dbout_type      := '';
  1190 EXEC      3         0       0         0    out_trigger_offset  := NULL;
  1191 EXEC      3         0       0         0    out_profiler_runid  := NULL;
  1192 EXEC      3         1       0         1    out_error_message   := '';
  1193 EXEC      3         1       0         1    g_rec := l_rec_NULL;
  1194 EXEC      3         0       0         0    if in_test_run_id is null
  1196 EXEC      1        78      78        78       raise_application_error  (-20004, 'i_test_run_id is null');
  1198 EXEC      2         1       1         1    g_rec.test_run_id := in_test_run_id;
  1199 EXEC      2         0       0         0    find_dbout(in_pkg_name => in_runner_name);
  1200 EXEC      2         3       1         2    if g_rec.dbout_name is null
  1202 EXEC      1         1       1         1       return;
  1204 EXEC      1         2       2         2    out_dbout_owner    := g_rec.dbout_owner;
  1205 EXEC      1         0       0         0    out_dbout_name     := g_rec.dbout_name;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1206 EXEC      1         0       0         0    out_dbout_type     := g_rec.dbout_type;
  1207 EXEC      1         1       1         1    out_error_message  := g_rec.error_message;
  1208 EXEC      1         2       1         1    g_rec.trigger_offset := wt_profiler.trigger_offset
  1212 EXEC      1         1       1         1    out_trigger_offset := g_rec.trigger_offset;
  1213 EXEC      1         4       0         4    l_retnum := dbms_profiler.INTERNAL_VERSION_CHECK;
  1214 EXEC      1         1       1         1    if l_retnum <> 0 then
  1217 ANNO      0         0       0         0       raise_application_error(-20005,
  1222 EXEC      1        20       0        16    l_retnum := dbms_profiler.START_PROFILER(run_number => g_rec.prof_runid);
  1223 EXEC      2         2       1         1    if l_retnum <> 0 then
  1225 ANNO      0         0       0         0       raise_application_error(-20006,
  1229 EXEC      2         1       0         1    out_profiler_runid := g_rec.prof_runid;
  1230 EXEC      2         4       1         3 end initialize;
  1234 ANNO      0         7       7         7    procedure t_initialize
  1236 ANNO      1         0       0         0       c_test_run_id   constant number := -96;
  1237 ANNO      1         0       0         0       l_pname         varchar2(128) := 'WT_PROFILE_INITIALIZE';
  1244 ANNO      1         1       1         1       wt_assert.g_testcase := 'Insert DBOUT Profile Setup';
  1245 ANNO      1         0       0         0       compile_db_object
  1250 ANNO      1         1       1         1       wt_assert.g_testcase := 'Initialize Test HAPPY Path 1';
  1251 ANNO      1         4       4         4       compile_db_object
  1257 ANNO      1         1       1         1       l_recSAVE := g_rec;
  1258 ANNO      1         5       2         3       initialize
  1267 ANNO      1         1       1         1       l_recTEST := g_rec;
  1268 ANNO      1         0       0         0       g_rec := l_recSAVE;
  1270 ANNO      1         2       2         2       wt_assert.isnull (
  1273 ANNO      1         1       1         1       wt_assert.isnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1276 ANNO      1         1       1         1       wt_assert.isnull (
  1279 ANNO      1         2       2         2       wt_assert.isnull (
  1282 ANNO      1         1       1         1       wt_assert.isnull (
  1285 ANNO      1         1       1         1       wt_assert.isnull (
  1289 ANNO      1         2       2         2       wt_assert.isnull (
  1292 ANNO      1         1       1         1       wt_assert.isnull (
  1295 ANNO      1         1       1         1       wt_assert.isnull (
  1298 ANNO      1         1       1         1       wt_assert.isnull (
  1301 ANNO      1         1       1         1       wt_assert.isnull (
  1304 ANNO      1         1       1         1       wt_assert.isnull (
  1308 ANNO      1         1       1         1       wt_assert.g_testcase := 'Initialize Test HAPPY Path 2';
  1309 ANNO      1         3       3         3       compile_db_object
  1316 ANNO      1         1       1         1       l_recSAVE := g_rec;
  1317 ANNO      1         5       2         3       initialize
  1326 ANNO      1         2       2         2       l_recTEST := g_rec;
  1327 ANNO      1         1       1         1       g_rec := l_recSAVE;
  1329 ANNO      1         4       1         3       wt_assert.eq (
  1333 ANNO      1         0       0         0       wt_assert.eq (
  1337 ANNO      1         1       1         1       wt_assert.eq (
  1341 ANNO      1         5       5         5       wt_assert.isnotnull (
  1344 ANNO      1         2       2         2       wt_assert.eq (
  1348 ANNO      1         0       0         0       wt_assert.isnull (
  1352 ANNO      1         2       1         1       wt_assert.eq (
  1356 ANNO      1         0       0         0       wt_assert.eq (
  1360 ANNO      1         1       1         1       wt_assert.eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1364 ANNO      1         2       2         2       wt_assert.isnotnull (
  1367 ANNO      1         1       1         1       wt_assert.eq (
  1371 ANNO      1         0       0         0       wt_assert.isnull (
  1375 ANNO      1         0       0         0       wt_assert.g_testcase := 'Initialize Test Sad Path 1';
  1376 ANNO      1         1       1         1       l_recSAVE := g_rec;
  1377 ANNO      0         0       0         0       begin
  1378 ANNO      1         1       1         1          initialize
  1387 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
  1388 ANNO      1         0       0         0       exception when others then
  1389 ANNO      1        79      79        79          l_sqlerrm := SQLERRM;
  1390 ANNO      0         1       1         1       end;
  1391 ANNO      1         1       1         1       l_recTEST := g_rec;
  1392 ANNO      1         1       1         1       g_rec := l_recSAVE;
  1393 ANNO      1         2       2         2       wt_assert.eq (
  1397 ANNO      1         1       1         1    end t_initialize;
  1404 EXEC      4         7       1         4 procedure finalize
  1408 EXEC      4         1       1         1    if g_rec.dbout_name is null
  1410 EXEC      1         1       1         1       return;
  1412 EXEC      3         1       0         1    if g_rec.test_run_id is null
  1414 EXEC      1        48      48        48       raise_application_error (-20000, 'g_rec.test_run_id is null');
  1418 ANNO      0         0       0         0       if not g_skip_this
  1422 ANNO      1         2       2         2    dbms_profiler.STOP_PROFILER;
  1423 ANNO      0         0       0         0    insert_dbout_profile;
  1428 EXEC      1         0       0         0    g_rec := l_rec_NULL;
  1429 EXEC      1         0       0         0 end finalize;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1433 ANNO      1         4       0         4    procedure t_finalize
  1441 ANNO      1         1       1         1       wt_assert.g_testcase := 'Finalize Happy Path 1';
  1442 ANNO      1         1       1         1       l_recSAVE := g_rec;
  1443 ANNO      1         1       1         1       g_rec.dbout_name := '';
  1444 ANNO      1         1       1         1       wt_assert.isnull (
  1448 ANNO      1         0       0         0          finalize;
  1449 ANNO      1         4       4         4          l_err_stack := dbms_utility.format_error_stack     ||
  1451 ANNO      0         0       0         0       exception when others then
  1452 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1454 ANNO      0         0       0         0       end;
  1455 ANNO      1         0       0         0       g_rec := l_recSAVE;
  1456 ANNO      1         0       0         0       wt_assert.isnull (
  1460 ANNO      1         0       0         0       wt_assert.g_testcase := 'Finalize Happy Path 2';
  1461 ANNO      1         2       2         2       wt_assert.isnotnull (
  1464 ANNO      1         0       0         0       wt_assert.isnotnull (
  1467 ANNO      1         0       0         0       wt_assert.isnotnull (
  1470 ANNO      1         2       2         2       wt_assert.isnotnull (
  1473 ANNO      1         1       1         1       wt_assert.isnotnull (
  1476 ANNO      1         1       1         1       wt_assert.isnull (
  1480 ANNO      1         0       0         0       l_recSAVE := g_rec;
  1481 ANNO      1         0       0         0       g_skip_this := TRUE;
  1483 ANNO      1         0       0         0          finalize;
  1484 ANNO      1         2       2         2          l_err_stack := dbms_utility.format_error_stack     ||
  1486 ANNO      0         0       0         0       exception when others then
  1487 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1489 ANNO      0         0       0         0       end;
  1490 ANNO      1         0       0         0       g_skip_this := FALSE;
  1491 ANNO      1         0       0         0       l_recTEST := g_rec;
  1492 ANNO      1         0       0         0       g_rec := l_recSAVE;
  1493 ANNO      1         0       0         0       wt_assert.isnull (
  1497 ANNO      1         1       1         1       wt_assert.isnull (
  1500 ANNO      1         0       0         0       wt_assert.isnull (
  1503 ANNO      1         1       1         1       wt_assert.isnull (
  1506 ANNO      1         1       1         1       wt_assert.isnull (
  1509 ANNO      1         1       1         1       wt_assert.isnull (
  1513 ANNO      1         0       0         0       wt_assert.g_testcase := 'Finalize Sad Path 1';
  1514 ANNO      1         1       1         1       l_recSAVE := g_rec;
  1515 ANNO      1         1       1         1       g_rec.dbout_name  := 'BOGUS1';
  1516 ANNO      1         0       0         0       g_rec.test_run_id := NULL;
  1518 ANNO      1         0       0         0          finalize;
  1519 ANNO      1         0       0         0       exception when others then
  1520 ANNO      1        17      17        17          l_sqlerrm := SQLERRM;
  1521 ANNO      0         0       0         0       end;
  1522 ANNO      1         1       1         1       g_rec := l_recSAVE;
  1523 ANNO      1         1       1         1       wt_assert.eq (
  1527 ANNO      1         0       0         0    end t_finalize;
  1533 UNKN      0        32       4        15 function trigger_offset
  1540 EXEC      4         1       0         1    if dbout_type_in != 'TRIGGER'
  1542 EXEC      2         0       0         0       return 0;
  1544 EXEC      4     49031       1     48910    for buff in (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1545 UNKN      0         1       0         1       select line, text from all_source
  1551 EXEC      4       237       8       142       if regexp_instr(buff.text,
  1563 EXEC      1        33       2        31          return buff.line - 1;
  1566 EXEC      1         0       0         0    return 0;
  1567 EXEC      4        11       1         8 end trigger_offset;
  1571 ANNO      0         2       2         2    procedure t_trigger_offset
  1575 ANNO      1         0       0         0       wt_assert.g_testcase := 'Trigger Offset Happy Path';
  1576 ANNO      1        12       1        11       wt_assert.eq (
  1582 ANNO      1         4       3         3       wt_assert.eq (
  1589 ANNO      1         0       0         0       wt_assert.g_testcase := 'Trigger Offset Sad Path';
  1590 ANNO      1         4       4         4       wt_assert.eq (
  1596 ANNO      1         1       1         1    end t_trigger_offset;
  1601 UNKN      0        20       3         8 function calc_pct_coverage
  1606 EXEC      8      2056       2      1779    for buff in (
  1612 EXEC      4         7       1         3       if buff.hits + buff.misses = 0
  1614 EXEC      1        25       1        17          return -1;
  1616 EXEC      3        10       1         7          return round(100 * buff.hits / (buff.hits + buff.misses),2);
  1619#NOTX#     0         0       0         0    return null;
  1620 EXEC      4        12       2         5 END calc_pct_coverage;
  1624 ANNO      0         4       4         4    procedure t_calc_pct_coverage
  1626 ANNO      1         1       1         1       c_test_run_id  constant number := -95;
  1630 ANNO      1         1       1         1       wt_assert.g_testcase := 'Calculate Percentage Offset Setup';
  1631 ANNO      1         0       0         0       insert_test_runs(c_test_run_id, 'Calculate Offset Test');
  1632 ANNO      1         1       1         1       l_rec.test_run_id  := c_test_run_id;
  1633 ANNO      1         0       0         0       l_rec.total_occur  := 1;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1634 ANNO      1         0       0         0       l_rec.total_time   := 1;
  1635 ANNO      1         0       0         0       l_rec.min_time     := 1;
  1636 ANNO      1         0       0         0       l_rec.max_time     := 1;
  1638 ANNO      1         1       1         1       wt_assert.g_testcase := 'Calculate Percentage Offset Happy Path 1';
  1639 ANNO      1         1       1         1       l_rec.line         := 1;
  1640 ANNO      1         0       0         0       l_rec.status       := 'EXEC';
  1641 ANNO      1         4       4         4       l_rec.text         := 'Testing ' || l_rec.line;
  1642 ANNO      1         0       0         0       insert_dbout_profiles(l_rec);
  1644 ANNO      1         0       0         0       l_rec.line         := 2;
  1645 ANNO      1         1       1         1       l_rec.status       := 'NOTX';
  1646 ANNO      1         5       5         5       l_rec.text         := 'Testing ' || l_rec.line;
  1647 ANNO      1         0       0         0       insert_dbout_profiles(l_rec);
  1649 ANNO      1         1       1         1       l_rec.line         := 3;
  1650 ANNO      1         0       0         0       l_rec.status       := 'EXEC';
  1651 ANNO      1         3       3         3       l_rec.text         := 'Testing ' || l_rec.line;
  1652 ANNO      1         0       0         0       insert_dbout_profiles(l_rec);
  1653 ANNO      1         9       9         9       wt_assert.eq (
  1657 ANNO      1         1       1         1       delete_dbout_profiles(c_test_run_id);
  1659 ANNO      1         1       1         1       wt_assert.g_testcase := 'Calculate Percentage Offset Happy Path 2';
  1661 ANNO      1         0       0         0       l_rec.line         := 1;
  1662 ANNO      1         0       0         0       l_rec.status       := 'EXCL';
  1663 ANNO      1         3       3         3       l_rec.text         := 'Testing ' || l_rec.line;
  1664 ANNO      1         1       1         1       insert_dbout_profiles(l_rec);
  1666 ANNO      1         0       0         0       l_rec.line         := 2;
  1667 ANNO      1         1       1         1       l_rec.status       := 'UNKN';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1668 ANNO      1         2       2         2       l_rec.text         := 'Testing ' || l_rec.line;
  1669 ANNO      1         1       1         1       insert_dbout_profiles(l_rec);
  1671 ANNO      1         0       0         0       l_rec.line         := 3;
  1672 ANNO      1         0       0         0       l_rec.status       := 'EXCL';
  1673 ANNO      1         1       1         1       l_rec.text         := 'Testing ' || l_rec.line;
  1674 ANNO      1         0       0         0       insert_dbout_profiles(l_rec);
  1675 ANNO      1         4       4         4       wt_assert.eq (
  1679 ANNO      1         1       1         1       delete_dbout_profiles(c_test_run_id);
  1681 ANNO      1         1       1         1       wt_assert.g_testcase := 'Calculate Percentage Offset Sad Path';
  1682 ANNO      1         2       2         2       wt_assert.isnull (
  1685 ANNO      1         2       2         2       wt_assert.isnull (
  1689 ANNO      1         0       0         0       wt_assert.g_testcase := 'Calculate Percentage Offset Teardown';
  1690 ANNO      1         1       1         1       delete_test_runs(c_test_run_id);
  1691 ANNO      1         2       2         2    end t_calc_pct_coverage;
  1696 EXEC      3         4       0         2 procedure delete_records
  1701 EXEC      3       368      66       156    select profiler_runid into l_profiler_runid
  1703 EXEC      1         0       0         0    delete_plsql_profiler_recs(l_profiler_runid);
  1704 EXEC      1       274     274       274    delete from wt_dbout_profiles
  1707 EXEC      2         0       0         0    when NO_DATA_FOUND
  1709 EXEC      2         1       0         1       return;
  1710 EXEC      3         3       1         1 end delete_records;
  1714 ANNO      0         4       4         4    procedure t_delete_records
  1716 ANNO      1         1       1         1       c_test_run_id  constant number := -98;
  1721 ANNO      1         1       1         1       wt_assert.g_testcase := 'Delete Records Setup';
  1722 ANNO      1         5       5         5       wt_assert.eqqueryvalue (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1727 ANNO      1         7       7         7       wt_assert.eqqueryvalue (
  1732 ANNO      1         1       1         1       insert_test_runs(c_test_run_id, 'Delete Records Test');
  1734 ANNO      1         0       0         0       l_rec.test_run_id  := c_test_run_id;
  1735 ANNO      1         1       1         1       l_rec.line         := 1;
  1736 ANNO      1         1       1         1       l_rec.status       := 'EXEC';
  1737 ANNO      1         0       0         0       l_rec.total_occur  := 1;
  1738 ANNO      1         0       0         0       l_rec.total_time   := 1;
  1739 ANNO      1         0       0         0       l_rec.min_time     := 1;
  1740 ANNO      1         0       0         0       l_rec.max_time     := 1;
  1741 ANNO      1         1       1         1       l_rec.text         := 'Testing';
  1742 ANNO      1         0       0         0       insert_dbout_profiles(l_rec);
  1744 ANNO      1         0       0         0       wt_assert.g_testcase := 'Delete Records Happy Path 1';
  1746 ANNO      1         0       0         0          delete_records(c_test_run_id);
  1747 ANNO      1         6       6         6          l_err_stack := dbms_utility.format_error_stack     ||
  1749 ANNO      0         0       0         0       exception when others then
  1750 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1752 ANNO      0         0       0         0       end;
  1753 ANNO      1         2       2         2       wt_assert.isnull (
  1756 ANNO      1         7       7         7       wt_assert.eqqueryvalue (
  1762 ANNO      1         0       0         0       wt_assert.g_testcase := 'Delete Records Sad Path 1';
  1763 ANNO      0         0       0         0       begin
  1764 ANNO      1         0       0         0          delete_records(-9876);
  1765 ANNO      1         2       2         2          l_err_stack := dbms_utility.format_error_stack     ||
  1767 ANNO      0         0       0         0       exception when others then
  1768 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1770 ANNO      0         0       0         0       end;
  1771 ANNO      1         1       1         1       wt_assert.isnull (
  1774 ANNO      1         4       4         4       wt_assert.eqqueryvalue (
  1780 ANNO      1         0       0         0       wt_assert.g_testcase := 'Delete Records Sad Path 2';
  1782 ANNO      1         0       0         0          delete_records(NULL);
  1783 ANNO      1         2       2         2          l_err_stack := dbms_utility.format_error_stack     ||
  1785 ANNO      0         0       0         0       exception when others then
  1786 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1788 ANNO      0         0       0         0       end;
  1789 ANNO      1         1       1         1       wt_assert.isnull (
  1792 ANNO      1         4       4         4       wt_assert.eqqueryvalue (
  1798 ANNO      1         1       1         1       wt_assert.g_testcase := 'Delete Records Teardown';
  1799 ANNO      1         1       1         1       delete_test_runs(c_test_run_id);
  1800 ANNO      1         2       2         2    end t_delete_records;
  1807 ANNO      0         1       1         1    procedure WTPLSQL_RUN  --% WTPLSQL SET DBOUT "WT_PROFILER" %--
  1810 ANNO      1         1       1         1       t_get_error_msg;
  1811 ANNO      1         0       0         0       t_delete_profiler_recs;
  1812 ANNO      1         0       0         0       t_find_dbout;
  1813 ANNO      1         0       0         0       t_load_anno_aa;
  1814 ANNO      1         0       0         0       t_insert_dbout_profile;
  1815 ANNO      1         1       1         1       t_initialize;
  1816 ANNO      1         1       1         1       t_finalize;
  1817 ANNO      1         0       0         0       t_trigger_offset;
  1818 ANNO      1         0       0         0       t_calc_pct_coverage;
  1819 ANNO      1         1       1         1       t_delete_records;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1820 ANNO      1         1       1         1    end WTPLSQL_RUN;
  1825 EXCL      0         0       0         0 end wt_profiler;


    Start Date/Time: 18-Apr-2018 05:43:47
Test Results Run ID: 10, WTP.WT_RESULT
----------------------------------------
       Total Testcases:        7      Total Assertions:       36
  Minimum Elapsed msec:        0     Failed Assertions:        0
  Average Elapsed msec:        1      Error Assertions:        0
  Maximum Elapsed msec:       19            Test Yield:   100.00%
  Total Run Time (sec):      0.0

Code Coverage Run ID: 10, PACKAGE BODY WTP.WT_RESULT
----------------------------------------
    Total Source Lines:      177          Missed Lines:        1
  Minimum Elapsed usec:        0       Annotated Lines:      136
  Average Elapsed usec:       83        Excluded Lines:        2
  Maximum Elapsed usec:     5291         Unknown Lines:        2
 Trigger Source Offset:        0         Code Coverage:    97.30%

WTP.WT_RESULT Details (Test Run ID 10)
----------------------------------------
---***  Initialize Happy Path  ***----------------------------------------------
 PASS   19ms g_results_rec.test_run_id. EQ - Expected "-99" and got "-99"
 PASS    0ms g_results_rec.result_seq. EQ - Expected "0" and got "0"
 PASS    0ms g_results_rec.executed_dtm. ISNOTNULL - Expected NOT NULL and got "18-APR-2018 05:43:47.242000"
 PASS    0ms g_results_rec.elapsed_msecs. ISNULL - Expected NULL and got ""
 PASS    0ms g_results_rec.assertion. ISNULL - Expected NULL and got ""
 PASS    0ms g_results_rec.status. ISNULL - Expected NULL and got ""
 PASS    0ms g_results_rec.details. ISNULL - Expected NULL and got ""
 PASS    0ms g_results_rec.testcase. ISNULL - Expected NULL and got ""
 PASS    0ms g_results_rec.message. ISNULL - Expected NULL and got ""
 PASS    0ms g_results_nt.COUNT. EQ - Expected "1" and got "1"
 PASS    0ms g_results_nt(1).test_run_id. ISNULL - Expected NULL and got ""
 PASS    3ms Raises ORA-20009. RAISES - Expected exception "%ORA-20009: "in_test_run_id" cannot be NULL%". Actual exception raised was "ORA-20009: "in_test_run_id" cannot be NULL\nORA-06512: at "WTP.WT_RESULT", line 26\nORA-06512: at line 1\nORA-06512: at "WTP.WT_ASSERT", line 1894\n". Exception raised by: wt_result.initialize(NULL)
---***  Finalize Happy Path  ***------------------------------------------------
 PASS   11ms Before NULL Test Record Count. EQ - Expected "0" and got "0"
 PASS    0ms After NULL Test Record Count. EQ - Expected "0" and got "0"
 PASS    0ms g_results_rec.test_run_id. ISNULL - Expected NULL and got ""
 PASS    0ms g_results_nt.COUNT. EQ - Expected "1" and got "1"
 PASS    0ms Record Count Test. EQ - Expected "1" and got "1"
---***  Ad Hoc Save Happy Path Setup  ***---------------------------------------
 PASS    0ms l_dbmsout_buff.COUNT - 1. ISNOTNULL - Expected NOT NULL and got "0"
---***  Ad Hoc Save Testing Happy Path  ***-------------------------------------
 PASS    1ms DBMS_OUTPUT Status. EQ - Expected "0" and got "0"
 PASS    0ms DBMS_OUTPUT Line. ISNOTNULL - Expected NOT NULL and got "---***  Ad Hoc Save Testing Happy Path  ***-------------------------------------\n PASS t_save_testing Message. SELFTEST1 - t_save_testing Details"
 PASS    0ms Save Testing NULL Test DBMS_OUTPUT 3 Message. THIS - Expected "PASS" and got "PASS"
---***  Ad Hoc Save Happy Path Teardown  ***------------------------------------
 PASS    0ms l_dbmsout_buff.COUNT - 1. ISNOTNULL - Expected NOT NULL and got "0"
---***  Save Testing Happy Path  ***--------------------------------------------
 PASS    0ms t_save_testing Testing Message. SELFTEST2 - t_save_testing Testing Details
 PASS    0ms g_results_nt.COUNT. EQ - Expected "24" and got "24"
 PASS    0ms g_results_nt(23).assetion. EQ - Expected "SELFTEST2" and got "SELFTEST2"
 PASS    0ms g_results_nt(23).status. EQ - Expected "PASS" and got "PASS"
 PASS    0ms g_results_nt(23).details. EQ - Expected "t_save_testing Testing Details" and got "t_save_testing Testing Details"
 PASS    0ms g_results_nt(23).testcase. EQ - Expected "Save Testing Happy Path" and got "Save Testing Happy Path"
 PASS    0ms g_results_nt(23).message. EQ - Expected "t_save_testing Testing Message" and got "t_save_testing Testing Message"
 PASS    0ms g_results_nt(23).elapsed_msecs. ISNOTNULL - Expected NOT NULL and got "0"
 PASS    0ms g_results_nt(23).executed_dtm. ISNOTNULL - Expected NOT NULL and got "18-APR-2018 05:43:47.258000"
 PASS    0ms g_results_nt(23).result_seq. ISNOTNULL - Expected NOT NULL and got "23"
---***  Delete Records Happy Path  ***------------------------------------------
 PASS    1ms Before Insert Count. ISNOTNULL - Expected NOT NULL and got "0"
 PASS    3ms After Insert Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_results where test_run_id = -99
 PASS    1ms After Test Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_results where test_run_id = -99
 PASS    1ms After ROLLBACK Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_results where test_run_id = -99

WTP.WT_RESULT PACKAGE BODY Code Coverage Details (Test Run ID 10)
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
     1 EXCL      0         0       0         0 package body wt_result
    19 EXEC      2        41      10        31 procedure initialize
    24 EXEC      2         0       0         0    if in_test_run_id is NULL
    26 EXEC      1        97      97        97       raise_application_error(-20009, '"in_test_run_id" cannot be NULL');
    28 EXEC      1         0       0         0    g_results_rec := l_results_recNULL;
    29 EXEC      1         1       1         1    g_results_rec.test_run_id  := in_test_run_id;
    30 EXEC      1         0       0         0    g_results_rec.result_seq   := 0;
    31 EXEC      1         7       3         4    g_results_rec.executed_dtm := systimestamp;
    32 EXEC      1         3       3         3    g_results_nt := results_nt_type(null);
    33 EXEC      1         1       1         1 end initialize;
    37 ANNO      1        18      18        18    procedure t_initialize
    45 ANNO      1        11      11        11       l_results_ntSAVE  := g_results_nt;
    46 ANNO      1         1       1         1       l_results_recSAVE := g_results_rec;
    47 ANNO      1         1       1         1       g_results_rec     := l_results_recNULL;
    48 ANNO      1         1       1         1       initialize(-99);
    49 ANNO      1         1       1         1       l_results_recTEST := g_results_rec;
    50 ANNO      1         0       0         0       g_results_rec     := l_results_recSAVE;
    51 ANNO      1         2       2         2       l_results_ntTEST  := g_results_nt;
    52 ANNO      1         0       0         0       g_results_nt      := l_results_ntSAVE;
    54 ANNO      2        16       1        15       wt_assert.g_testcase := 'Initialize Happy Path';
    55 ANNO      1         8       8         8       wt_assert.eq (
    59 ANNO      1         2       2         2       wt_assert.eq (
    63 ANNO      1        16      16        16       wt_assert.isnotnull (
    66 ANNO      1         1       1         1       wt_assert.isnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
    69 ANNO      1         1       1         1       wt_assert.isnull (
    73 ANNO      1         0       0         0       wt_assert.isnull (
    76 ANNO      1         1       1         1       wt_assert.isnull (
    79 ANNO      1         0       0         0       wt_assert.isnull (
    82 ANNO      1         1       1         1       wt_assert.isnull (
    85 ANNO      1         2       2         2       wt_assert.eq (
    90 ANNO      1         2       2         2       wt_assert.isnull (
    93 ANNO      1         1       1         1       wt_assert.raises (
    97 ANNO      1         4       4         4    end t_initialize;
   104 EXEC      2        47      19        29 procedure finalize
   108 EXEC      2        38      17        21 begin
   109 EXEC      2         2       1         1    if g_results_rec.test_run_id IS NULL
   111 EXEC      1        13      13        13       return;
   114 EXEC      1       196     196       196    forall i in 1 .. g_results_nt.COUNT - 1
   115#NOTX#     0         0       0         0       insert into wt_results values g_results_nt(i);
   116 EXEC      1        83      83        83    COMMIT;
   117 EXEC      1         8       8         8    g_results_nt := results_nt_type(null);
   118 EXEC      1         0       0         0    g_results_rec := l_results_recNULL;
   119 EXEC      1         1       1         1    g_results_nt := results_nt_type(null);
   120 EXEC      1        12      12        12 end finalize;
   124 ANNO      1        36      36        36    procedure t_finalize
   136 ANNO      1         1       1         1       wt_assert.g_testcase := '   ';
   137 ANNO      1        20      20        20       l_results_ntSAVE     := g_results_nt;    -- Capture Original Values
   138 ANNO      1         1       1         1       l_results_recSAVE    := g_results_rec;   -- Capture Original Values
   141 ANNO      1         1       1         1       g_results_rec  := l_results_recNULL;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   142 ANNO      1         1       1         1       g_results_rec.test_run_id   := -99;
   143 ANNO      1         0       0         0       g_results_rec.result_seq    := 1;
   144 ANNO      1         3       1         2       g_results_rec.executed_dtm  := systimestamp;
   145 ANNO      1         0       0         0       g_results_rec.elapsed_msecs := 99;
   146 ANNO      1         0       0         0       g_results_rec.assertion     := 'FINALTEST';
   147 ANNO      1         0       0         0       g_results_rec.status        := wt_assert.C_PASS;
   148 ANNO      1         1       1         1       g_results_rec.details       := 'This is a WT_RESULT.FINALIZE Test';
   149 ANNO      1        10      10        10       g_results_nt := results_nt_type(null);
   150 ANNO      1         0       0         0       g_results_nt(1) := g_results_rec;
   151 ANNO      1         2       2         2       g_results_nt.extend;  -- Finalize expects that last element to be NULL
   154 ANNO      1         1       1         1       g_results_rec.test_run_id   := NULL;
   155 ANNO      1      5291    5291      5291       select count(*)
   159 ANNO      1         1       1         1       finalize;
   160 ANNO      1       115     115       115       select count(*)
   164 ANNO      1       119     119       119       rollback;    -- UNDO all database changes
   165 ANNO      1         1       1         1       g_results_rec.test_run_id   := -99;
   168 ANNO      1         0       0         0       l_test_runs_rec.id           := -99;
   169 ANNO      1         9       4         5       l_test_runs_rec.start_dtm    := systimestamp;
   170 ANNO      1         2       2         2       l_test_runs_rec.runner_name  := 'Finalize Test';
   171 ANNO      1         1       1         1       l_test_runs_rec.runner_owner := 'BOGUS';
   172 ANNO      1       529     529       529       insert into wt_test_runs values l_test_runs_rec;
   173 ANNO      1       138     138       138       commit;      -- Must commit because finalize is AUTONOMOUS TRANSACTION
   174 ANNO      1         0       0         0       finalize;    -- g_results_nt is still loaded with one element
   175 ANNO      1         3       3         3       l_results_ntTEST  := g_results_nt;
   176 ANNO      1         0       0         0       l_results_recTEST := g_results_rec;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   177 ANNO      1       118     118       118       select count(*)
   181 ANNO      1      2123    2123      2123       delete from wt_results where test_run_id = -99;
   182 ANNO      1      1258    1258      1258       delete from wt_test_runs where id = -99;
   183 ANNO      1       148     148       148       commit;      -- UNDO all database changes
   185 ANNO      1         2       2         2       wt_assert.g_testcase := 'Finalize Happy Path';
   187 ANNO      1         5       5         5       g_results_rec := l_results_recSAVE;
   188 ANNO      1        21      21        21       g_results_nt  := l_results_ntSAVE;
   189 ANNO      1        12      12        12       wt_assert.eq (
   193 ANNO      1         2       2         2       wt_assert.eq (
   197 ANNO      1         2       2         2       wt_assert.isnull (
   200 ANNO      1         3       3         3       wt_assert.eq (
   204 ANNO      1         2       2         2       wt_assert.eq (
   208 ANNO      1         6       6         6    end t_finalize;
   213 UNKN      0       127       2        12 procedure save
   222 EXEC     37         7       0         1    if g_results_rec.test_run_id IS NULL
   224 EXEC      1        12      12        12       wt_text_report.ad_hoc_result
   230 EXEC      1         2       2         2       return;
   233 EXEC     36        54       1         4    l_current_tstamp := systimestamp;
   234 EXEC     36       339       4        35    g_results_rec.elapsed_msecs := extract(day from (
   237 EXEC     36         7       0         1    g_results_rec.executed_dtm  := l_current_tstamp;
   239 EXEC     36        15       1         1    g_results_rec.assertion     := in_assertion;
   240 EXEC     36         7       0         1    g_results_rec.status        := in_status;
   241 EXEC     36        37       1         3    g_results_rec.details       := substr(in_details,1,4000);
   242 EXEC     36        16       1         2    g_results_rec.testcase      := substr(in_testcase,1,50);
   243 EXEC     36        18       0         1    g_results_rec.message       := substr(in_message,1,200);
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   245 EXEC     36        22       1         2    g_results_rec.result_seq    := g_results_rec.result_seq + 1;
   246 EXEC     36        86       1         9    g_results_nt(g_results_nt.COUNT) := g_results_rec;
   247 EXEC     36        74       1         8    g_results_nt.extend;
   248 EXEC     36        45       1         2 end save;
   252 ANNO      0        11      11        11    procedure t_save_testing
   255 ANNO      1         4       4         4       l_dbmsout_buff   l_dbmsout_buff_type := l_dbmsout_buff_type(1);
   262 ANNO      1         1       1         1       wt_assert.g_testcase := 'Ad Hoc Save Happy Path Setup';
   264 ANNO      1         0       0         0       loop
   265 ANNO      1        42      42        42          DBMS_OUTPUT.GET_LINE (
   268 ANNO      1         0       0         0          exit when l_dbmsout_stat != 0;
   269 ANNO      0         0       0         0          l_dbmsout_buff(l_dbmsout_buff.COUNT) := l_dbmsout_line;
   270 ANNO      0         0       0         0          l_dbmsout_buff.extend;
   272 ANNO      1         2       2         2       wt_assert.isnotnull (
   276 ANNO      1         1       1         1       wt_assert.g_testcase := 'Ad Hoc Save Testing Happy Path';
   277 ANNO      1         1       1         1       l_test_run_id  := g_results_rec.test_run_id;
   278 ANNO      1         0       0         0       g_results_rec.test_run_id := NULL;
   279 ANNO      1         0       0         0       wt_result.save (
   285 ANNO      1         2       2         2       g_results_rec.test_run_id := l_test_run_id;
   286 ANNO      1         1       0         1       DBMS_OUTPUT.GET_LINE (
   290 ANNO      1         2       2         2       wt_assert.eq (
   294 ANNO      1         1       0         1       if not wt_assert.last_pass
   296 ANNO      0         0       0         0          return;  -- DBMS_OUPUT.GET_LINE failes. End this now.
   298 ANNO      1         1       1         1       wt_assert.isnotnull (
   301 ANNO      1         7       7         7       wt_assert.this (
   305 ANNO      1         1       0         1       if not wt_assert.last_pass
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   308 ANNO      0         0       0         0          DBMS_OUTPUT.PUT_LINE(l_dbmsout_line);
   309 ANNO      0         0       0         0          return;
   312 ANNO      1         0       0         0       wt_assert.g_testcase := 'Ad Hoc Save Happy Path Teardown';
   314 ANNO      1         0       0         0       for i in 1 .. l_dbmsout_buff.COUNT - 1
   316 ANNO      0         0       0         0          DBMS_OUTPUT.PUT_LINE(l_dbmsout_buff(i));
   318 ANNO      1         1       1         1       wt_assert.isnotnull (
   322 ANNO      1         1       1         1       wt_assert.g_testcase := 'Save Testing Happy Path';
   323 ANNO      1         0       0         0       l_nt_count     := g_results_nt.COUNT;
   324 ANNO      1         0       0         0       wt_result.save (
   330 ANNO      1         3       3         3       wt_assert.eq (
   334 ANNO      1         1       0         1       if not wt_assert.last_pass
   339 ANNO      1         3       3         3       wt_assert.eq (
   343 ANNO      1         2       2         2       wt_assert.eq (
   347 ANNO      1         2       2         2       wt_assert.eq (
   351 ANNO      1         3       3         3       wt_assert.eq (
   356 ANNO      1         2       2         2       wt_assert.eq (
   360 ANNO      1         2       2         2       wt_assert.isnotnull (
   363 ANNO      1        15      15        15       wt_assert.isnotnull (
   366 ANNO      1         2       2         2       wt_assert.isnotnull (
   372 ANNO      1         1       1         1    end t_save_testing;
   377 UNKN      0         1       1         1 procedure delete_records
   381 EXEC      1       389     389       389    delete from wt_results
   383 EXEC      1         2       2         2 end delete_records;
   387 ANNO      1         5       1         4    procedure t_delete_records
   394 ANNO      1         1       1         1       wt_assert.g_testcase := 'Delete Records Happy Path';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   395 ANNO      1       163     163       163       select count(*) into l_num_recs
   398 ANNO      1         4       4         4       wt_assert.isnotnull (
   402 ANNO      1         0       0         0       l_test_runs_rec.id           := -99;
   403 ANNO      1         2       1         1       l_test_runs_rec.start_dtm    := sysdate;
   404 ANNO      1         0       0         0       l_test_runs_rec.runner_name  := 'Delete Records Test';
   405 ANNO      1         0       0         0       l_test_runs_rec.runner_owner := 'BOGUS';
   406 ANNO      1       282     282       282       insert into wt_test_runs values l_test_runs_rec;
   407 ANNO      1         0       0         0       l_results_rec.test_run_id   := -99;
   408 ANNO      1         0       0         0       l_results_rec.result_seq    := 1;
   409 ANNO      1         3       1         2       l_results_rec.executed_dtm  := sysdate;
   410 ANNO      1         1       1         1       l_results_rec.elapsed_msecs := 99;
   411 ANNO      1         0       0         0       l_results_rec.assertion     := 'DELRECTEST';
   412 ANNO      1         1       1         1       l_results_rec.status        := wt_assert.C_PASS;
   413 ANNO      1         3       3         3       l_results_rec.details       := 'This is a WT_RESULT.DELETE_RECORDS Test';
   414 ANNO      1      1320    1320      1320       insert into wt_results values l_results_rec;
   416 ANNO      1        11      11        11       wt_assert.eqqueryvalue (
   421 ANNO      1         1       1         1       delete_records(-99);
   422 ANNO      1        10      10        10       wt_assert.eqqueryvalue (
   427 ANNO      1       853     853       853       rollback;
   428 ANNO      1        11      11        11       wt_assert.eqqueryvalue (
   433 ANNO      1         3       3         3    end t_delete_records;
   440 ANNO      0         1       1         1    procedure WTPLSQL_RUN  --% WTPLSQL SET DBOUT "WT_RESULT" %--
   443 ANNO      1         0       0         0       t_initialize;
   444 ANNO      1         1       1         1       t_finalize;
   445 ANNO      1         1       1         1       t_save_testing;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   446 ANNO      1         0       0         0       t_delete_records;
   447 ANNO      1         1       1         1    end WTPLSQL_RUN;
   452 EXCL      0         0       0         0 end wt_result;



PL/SQL procedure successfully completed.

