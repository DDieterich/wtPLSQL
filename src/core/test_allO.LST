
    wtPLSQL 1.1.0 - Run ID 6: 09-Jun-2018 11:48:42 AM

  Test Results for WTP.WTPLSQL
        Total Testcases:       10       Total Assertions:       34
  Minimum Interval msec:        0      Failed Assertions:        0
  Average Interval msec:        2       Error Assertions:        0
  Maximum Interval msec:       28             Test Yield:   100.00%
   Total Run Time (sec):      0.1

 - WTP.WTPLSQL Test Result Details (Test Run ID 6)
-----------------------------------------------------------
 ---- Test Case: Show Version Happy Path
 PASS   16ms Test Existing Version. ISNOTNULL - Expected NOT NULL and got "1.1.0"
 PASS    2ms Test New Version. EQ - Expected "TESTING" and got "TESTING"
 PASS    0ms Return to Existing Version. EQ - Expected "1.1.0" and got "1.1.0"
 ---- Test Case: CHECK_RUNNER Sad Path 1
 PASS    0ms Null RUNNER_NAME. EQ - Expected "ORA-20001: RUNNER_NAME is null" and got "ORA-20001: RUNNER_NAME is null"
 ---- Test Case: CHECK_RUNNER Sad Path 2
 PASS    2ms Invalid RUNNER_NAME. EQ - Expected "ORA-20002: RUNNER_NAME "BOGUS.WTPLSQL_RUN" is not valid" and got "ORA-20002: RUNNER_NAME "BOGUS.WTPLSQL_RUN" is not valid"
 ---- Test Case: INSERT_TEST_RUN Happy Path 1
 PASS    6ms Number of Records. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_test_runs where id = 6
 PASS    2ms Records After Delete. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = 6
 ---- Test Case: INSERT_TEST_RUN Sad Path 1
 PASS    0ms l_dbmsout_buff.COUNT - 1. ISNOTNULL - Expected NOT NULL and got "0"
 PASS    2ms Number of Records should stay the same. EQQUERYVALUE - Expected "5" and got "5" for Query: select count(*) from wt_test_runs
 PASS    0ms DBMS_OUTPUT Status. EQ - Expected "0" and got "0"
 PASS    0ms DBMS_OUTPUT Line. ISNOTNULL - Expected NOT NULL and got "ORA-01400: cannot insert NULL into ("WTP"."WT_TEST_RUNS"."START_DTM")\nORA-06512: at "WTP.WTPLSQL", line 106\n"
 PASS    0ms Confirm DBMS_OUTPUT Line text. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms l_dbmsout_buff.COUNT - 1. ISNOTNULL - Expected NOT NULL and got "0"
 ---- Test Case: TEST_ALL Happy Path
 PASS    7ms test_all_aa.EXISTS('WTPLSQL'). THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: DELETE_RUNS Happy Path 1
 PASS    3ms Number of Records Before Insert. ISNOTNULL - Expected NOT NULL and got "1"
 PASS    1ms Number of Records Before Insert <= 20. THIS - Expected "TRUE" and got "TRUE"
 PASS    1ms Number of Records After Insert. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_test_runs where id = 6
 PASS   28ms Number of Records After Delete. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = 6
 ---- Test Case: DELETE_RUNS Happy Path 2
 PASS    0ms Confirm number of records. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_test_runs where runner_owner = 'WTP' and runner_name = 'WTPLSQL'
 PASS    3ms Check Added 20 records. EQQUERYVALUE - Expected "21" and got "21" for Query: select count(*) from wt_test_runs where runner_owner = 'WTP' and runner_name = 'WTPLSQL'
 PASS    4ms Check number of records reduced. EQQUERYVALUE - Expected "20" and got "20" for Query: select count(*) from wt_test_runs where runner_owner = 'WTP' and runner_name = 'WTPLSQL'
 PASS    2ms Confirm original number of records. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_test_runs where runner_owner = 'WTP' and runner_name = 'WTPLSQL'
 ---- Test Case: DELETE_RUNS Sad Path 1
 PASS    1ms Delete Runs(-9995). ISNULL - Expected NULL and got ""
 ---- Test Case: TEST_RUNS_REC_AND_TABLE Happy Path
 PASS    0ms g_test_runs_rec.id. ISNOTNULL - Expected NOT NULL and got "6"
 PASS    0ms g_test_runs_rec.start_dtm. ISNOTNULL - Expected NOT NULL and got "09-JUN-2018 11:48:42.846000"
 PASS    0ms g_test_runs_rec.runner_owner. ISNOTNULL - Expected NOT NULL and got "WTP"
 PASS    0ms g_test_runs_rec.runner_name. EQ - Expected "WTPLSQL" and got "WTPLSQL"
 PASS    0ms g_test_runs_rec.dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms g_test_runs_rec.dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms g_test_runs_rec.dbout_type. ISNULL - Expected NULL and got ""
 PASS    0ms g_test_runs_rec.profiler_runid. ISNULL - Expected NULL and got ""
 PASS    0ms g_test_runs_rec.end_dtm. ISNULL - Expected NULL and got ""
 PASS    0ms g_test_runs_rec.error_message. ISNULL - Expected NULL and got ""
 PASS    2ms TEST_RUNS Record for this TEST_RUN. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from WT_TEST_RUNS where id = '6'


    wtPLSQL 1.1.0 - Run ID 7: 09-Jun-2018 11:48:42 AM

  Test Results for WTP.WT_ASSERT
        Total Testcases:      150       Total Assertions:      404
  Minimum Interval msec:        0      Failed Assertions:        0
  Average Interval msec:        7       Error Assertions:        0
  Maximum Interval msec:      761             Test Yield:   100.00%
   Total Run Time (sec):      2.8

  Code Coverage for PACKAGE BODY WTP.WT_ASSERT
          Ignored Lines:     1103   Total Profiled Lines:     1464
         Excluded Lines:        6   Total Executed Lines:      309
  Minimum LineExec usec:        0     Not Executed Lines:        0
  Average LineExec usec:      394          Unknown Lines:       46
  Maximum LineExec usec:    65814          Code Coverage:   100.00%
  Trigger Source Offset:        0

 - WTP.WT_ASSERT Test Result Details (Test Run ID 7)
-----------------------------------------------------------
 ---- Test Case: BOOLEAN_TO_STATUS
 PASS  761ms Test for "TRUE" conversion. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms Test for "FALSE" conversion. EQ - Expected "FALSE" and got "FALSE"
 PASS    1ms Test for NULL. ISNULL - Expected NULL and got ""
 ---- Test Case: COMPARE_QUERIES Bad Query Test 1
 PASS    2ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "ORA-06550: line 2, column 60:\nPL/SQL: ORA-00942: table or view does not exist\nORA-06550: line 2, column 18:\nPL/SQL: SQL Statement ignored\nORA-06550: line 2, column 11:\nPLS-00341: declaration of cursor 'CUR' is incomplete or malformed\nORA-06550: line 3, column 8:\nPL/SQL: Item ignored\nORA-06550: line 6, column 19:\nPLS-00320: the declaration of the type of this expression is incomplete or malformed\nORA-06550: line 6, column 4:\nPL/SQL: SQL Statement ignored\nFAILURE of Compare Query: with check_query as (select bogus123 from bogus456), against_query as (select bogus987 from bogus654), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2;"
 PASS    1ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: COMPARE_QUERIES Bad Query Test 2
 PASS  266ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Comparison Query: with check_query as (select table_name from user_tables), against_query as (select tablespace_name from user_tables), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: NLS Settings
 PASS    1ms get_NLS_DATE_FORMAT 1. EQ - Expected "DD-MON-YYYY" and got "DD-MON-YYYY"
 PASS    0ms get_NLS_DATE_FORMAT 2. EQ - Expected "DD-MON-YYYY HH24:MI:SS" and got "DD-MON-YYYY HH24:MI:SS"
 PASS    0ms get_NLS_TIMESTAMP_FORMAT 2. EQ - Expected "DD-MON-YYYY" and got "DD-MON-YYYY"
 PASS    1ms get_NLS_TIMESTAMP_FORMAT 2. EQ - Expected "DD-MON-YYYY HH24:MI:SS.FF6" and got "DD-MON-YYYY HH24:MI:SS.FF6"
 PASS    0ms get_NLS_TIMESTAMP_TZ_FORMAT 2. EQ - Expected "DD-MON-YYYY" and got "DD-MON-YYYY"
 PASS    1ms get_NLS_TIMESTAMP_TZ_FORMAT 2. EQ - Expected "DD-MON-YYYY HH24:MI:SS.FF6 TZH:TZM" and got "DD-MON-YYYY HH24:MI:SS.FF6 TZH:TZM"
 ---- Test Case: Last Values Tests
 PASS    0ms Last Pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms Last Assert. EQ - Expected "EQ" and got "EQ"
 PASS    0ms Last MSG. EQ - Expected "Last Assert" and got "Last Assert"
 PASS    0ms Last Details. EQ - Expected "Expected "Last Assert" and got "Last Assert"" and got "Expected "Last Assert" and got "Last Assert""
 ---- Test Case: RESET_GLOBALS
 PASS    0ms temp_testcase. ISNULL - Expected NULL and got ""
 PASS    0ms temp_rec.last_pass. ISNULL - Expected NULL and got ""
 PASS    0ms temp_rec.raise_exception. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_assert. ISNULL - Expected NULL and got ""
 PASS    0ms temp_rec.last_msg. ISNULL - Expected NULL and got ""
 PASS    0ms temp_rec.last_details. ISNULL - Expected NULL and got ""
 ---- Test Case: This Happy Path
 PASS    0ms Run Test. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "THIS" and got "THIS"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details. EQ - Expected "Expected "TRUE" and got "TRUE"" and got "Expected "TRUE" and got "TRUE""
 ---- Test Case: This Sad Path 1
 PASS    1ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: This Sad Path 2
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: This Sad Path 3
 PASS    0ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: EQ VARCHAR2 Happy Path 1
 PASS    0ms Run Test. EQ - Expected "X" and got "X"
 PASS    0ms temp_rec.last_pass value. ISNOTNULL - Expected NOT NULL and got "TRUE"
 PASS    0ms temp_rec.last_pass. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert value. ISNOTNULL - Expected NOT NULL and got "EQ"
 PASS    0ms temp_rec.last_assert. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_msg value. ISNOTNULL - Expected NOT NULL and got "Run Test"
 PASS    0ms temp_rec.last_msg. THIS - Expected "TRUE" and got "TRUE"
 PASS    1ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "X" and got "X""
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ VARCHAR2 Happy Path 2
 PASS    0ms Run Test. EQ - Expected "X" and got "X"
 ---- Test Case: EQ VARCHAR2 Happy Path 3
 PASS    0ms Run Test. EQ - Expected "" and got ""
 ---- Test Case: EQ VARCHAR2 Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "X"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "Y"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ VARCHAR2 Sad Path 2
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ VARCHAR2 Sad Path 3
 PASS    0ms check_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "Y"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ VARCHAR2 Sad Path 4
 PASS    0ms check_this_in value. ISNULL - Expected NULL and got ""
 PASS    1ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ VARCHAR2 Sad Path 5
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "X"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "Y"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ VARCHAR2 Sad Path 6
 PASS    0ms check_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "Y"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ ROWID Happy Path 1
 PASS    0ms Run Test. EQ - Expected "AAAFd1AAFAAAABSAA/" and got "AAAFd1AAFAAAABSAA/"
 ---- Test Case: EQ ROWID Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "AAAFd1AAFAAAABSAA/"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "AAAFd1AAFAAAABSAB/"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ LONG Happy Path 1
 PASS    0ms Run Test. EQ - Expected "0123456789ABCDEF0123456789ABCDEF" and got "0123456789ABCDEF0123456789ABCDEF"
 ---- Test Case: EQ LONG Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "0123456789ABCDEF0123456789ABCDEF"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "FEDCBA9876543210FEDCBA9876543210"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ RAW Happy Path 1
 PASS    0ms Run Test. EQ - Expected "2345" and got "2345"
 ---- Test Case: EQ RAW Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "2345"
 PASS    1ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "6789"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ LANG RAW Happy Path 1
 PASS    0ms Run Test. EQ - Expected "0123456789ABCDEF0123456789ABCDEF" and got "0123456789ABCDEF0123456789ABCDEF"
 ---- Test Case: EQ LONG RAW Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "0123456789ABCDEF0123456789ABCDEF"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "FEDCBA9876543210FEDCBA9876543210"
 PASS    0ms Sad Path 1. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ NVARCHAR2 Happy Path 1
 PASS    0ms Run Test. EQ - Expected "NCHAR1" and got "NCHAR1"
 ---- Test Case: EQ NVARCHAR2 Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "NCHAR1"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "NCHAR2"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BOOLEAN Happy Path 1
 PASS    0ms Run Test. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: EQ BOOLEAN Happy Path 2
 PASS    0ms Run Test. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: EQ BOOLEAN Happy Path 3
 PASS    0ms Run Test. EQ - Expected "" and got ""
 ---- Test Case: EQ BOOLEAN Happy Sad 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "FALSE"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "TRUE"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BOOLEAN Happy Sad 2
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "FALSE"
 PASS    0ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    1ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BOOLEAN Happy Sad 3
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "FALSE"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "TRUE"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BOOLEAN Happy Sad 4
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "FALSE"
 PASS    0ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ NUMBER Happy Path 1
 PASS    0ms Run Test. EQ - Expected "4" and got "4"
 ---- Test Case: EQ NUMBER Happy Path 2
 PASS    0ms Run Test. EQ - Expected "9876543210987654321098765432109876543210" and got "9876543210987654321098765432109876543210"
 ---- Test Case: EQ NUMBER Happy Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "4"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "5"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ PLS_INTEGER Happy Path 1
 PASS    0ms Run Test. EQ - Expected "2" and got "2"
 ---- Test Case: EQ PLS_INTEGER Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "2"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "3"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ DATE Happy Path 1
 PASS    0ms Run Test. EQ - Expected "09-JUN-2018 11:09:57" and got "09-JUN-2018 11:09:57"
 ---- Test Case: EQ DATE Sad Path 1
 PASS    1ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "09-JUN-2018 11:09:57"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "09-JUN-2018 12:09:57"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ TIMSETAMP Happy Path 1
 PASS    0ms EQ TIMSETAMP Happy Path 1. EQ - Expected "09-JUN-2018 11:09:57.352000" and got "09-JUN-2018 11:09:57.352000"
 ---- Test Case: EQ TIMSETAMP Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "09-JUN-2018 11:09:57.352000"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "09-JUN-2018 12:09:57"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ TIMSETAMP WITH LOCAL TIME ZONE Happy Path 1
 PASS    0ms Run Test. EQ - Expected "09-JUN-2018 11:09:57.352000 -05:00" and got "09-JUN-2018 11:09:57.352000 -05:00"
 ---- Test Case: EQ TIMSETAMP WITH LOCAL TIME ZONE Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "09-JUN-2018 11:09:57.352000"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "09-JUN-2018 12:09:57"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ TIMSETAMP WITH TIME ZONE Happy Path 1
 PASS    0ms Run Test. EQ - Expected "09-JUN-2018 11:09:57.352000 -05:00" and got "09-JUN-2018 11:09:57.352000 -05:00"
 ---- Test Case: EQ TIMSETAMP WITH TIME ZONE Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "09-JUN-2018 11:09:57.352000 -05:00"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "09-JUN-2018 12:09:57"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ INTERVAL DAY TO SECOND Happy Path 1
 PASS    0ms Run Test. EQ - Expected "+01 01:01:01.001000" and got "+01 01:01:01.001000"
 ---- Test Case: EQ INTERVAL DAY TO SECOND Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "+01 01:01:01.001000"
 PASS    1ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "+02 02:02:02.002000"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ INTERVAL YEAR TO MONTH Happy Path 1
 PASS    0ms Run Test. EQ - Expected "+01-01" and got "+01-01"
 ---- Test Case: EQ INTERVAL YEAR TO MONTH Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "+01-01"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "+02-02"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ XMLTYPE Happy Path 1
 PASS   52ms Run Test. EQ - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;t
emplateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;i
ndexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   "
 PASS    0ms temp_rec.last_pass value. ISNOTNULL - Expected NOT NULL and got "TRUE"
 PASS    0ms temp_rec.last_pass. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms  g_rec.last_assert value. ISNOTNULL - Expected NOT NULL and got "EQ"
 PASS    0ms temp_rec.last_assert. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_msg value. ISNOTNULL - Expected NOT NULL and got "Run Test"
 PASS    0ms temp_rec.last_msg. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ez
search/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href=
"https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF0"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ XMLTYPE Sad Path 1
 PASS   31ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s
=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber>\n          </ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n          </ns1:referencedIDVID>\n        </ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:effectiveDate>20
07-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:curr"
 PASS    1ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?><note>2</note>"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ XMLTYPE Sad Path 2
 PASS   19ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ CLOB Happy Path 1
 PASS    2ms Run Test. EQ - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexNa
me=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/searc
h.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J"
 PASS    1ms temp_rec.last_pass value. ISNOTNULL - Expected NOT NULL and got "TRUE"
 PASS    0ms temp_rec.last_pass. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert value. ISNOTNULL - Expected NOT NULL and got "EQ"
 PASS    0ms temp_rec.last_assert. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_msg value. ISNOTNULL - Expected NOT NULL and got "Run Test"
 PASS    0ms temp_rec.last_msg. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https
://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type=
"text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ CLOB Happy Path 2
 PASS    3ms Run Test. EQ - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexNa
me=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/searc
h.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J"
 ---- Test Case: EQ CLOB Happy Path 3
 PASS    1ms Run Test. EQ - Expected "" and got ""
 ---- Test Case: EQ CLOB Sad Path 1
 PASS    8ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ez
search/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:effectiveDate>2007-04-15 0
0:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    1ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "This is another clob."
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ CLOB Sad Path 2
 PASS    3ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ CLOB Sad Path 3
 PASS    4ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ez
search/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:effectiveDate>2007-04-15 0
0:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    3ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ CLOB Sad Path 4
 PASS    3ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ez
search/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:effectiveDate>2007-04-15 0
0:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    1ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ NCLOB Happy Path 1
 PASS   15ms Run Test. EQ - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexNa
me=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/searc
h.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J"
 ---- Test Case: EQ NCLOB Happy Path 2
 PASS   28ms Run Test. EQ - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexNa
me=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/searc
h.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J"
 ---- Test Case: EQ NCLOB Happy Path 3
 PASS    3ms Run Test. EQ - Expected "" and got ""
 ---- Test Case: EQ NCLOB Sad Path 1
 PASS   23ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ez
search/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:effectiveDate>2007-04-15 0
0:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    1ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "This is another clob."
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ NCLOB Sad Path 2
 PASS   22ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ NCLOB Sad Path 3
 PASS   18ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ez
search/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:effectiveDate>2007-04-15 0
0:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    3ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ NCLOB Sad Path 4
 PASS   13ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ez
search/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:effectiveDate>2007-04-15 0
0:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    1ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS   11ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BLOB Happy Path 1
 PASS    0ms Run Test. EQ - DBMS_LOB.COMPARE on BLOBs, compare_results: 0
 PASS    0ms temp_rec.last_pass value. ISNOTNULL - Expected NOT NULL and got "TRUE"
 PASS    0ms temp_rec.last_pass. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert value. ISNOTNULL - Expected NOT NULL and got "EQ"
 PASS    0ms temp_rec.last_assert. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_msg value. ISNOTNULL - Expected NOT NULL and got "Run Test"
 PASS    0ms temp_rec.last_msg. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "DBMS_LOB.COMPARE on BLOBs, compare_results: 0"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BLOB Happy Path 2
 PASS    1ms Run Test. EQ - DBMS_LOB.COMPARE on BLOBs, compare_results: 0
 ---- Test Case: EQ BLOB Happy Path 3
 PASS    0ms Run Test. EQ - DBMS_LOB.COMPARE on BLOBs, compare_results: -1
 ---- Test Case: EQ BLOB Sad Path 1
 PASS    1ms check_this_in value. ISNOTNULL - BLOB is NOT NULL
 PASS    1ms against_this_in value. ISNOTNULL - BLOB is NOT NULL
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BLOB Sad Path 2
 PASS    1ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BLOB Sad Path 3
 PASS    0ms check_this_in value. ISNOTNULL - BLOB is NOT NULL
 PASS    0ms against_this_in value. ISNULL - BLOB is NULL
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BLOB Sad Path 4
 PASS    0ms check_this_in value. ISNOTNULL - BLOB is NOT NULL
 PASS    0ms against_this_in value. ISNULL - BLOB is NULL
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNOTNULL VARCHAR2 Happy Path 1
 PASS    4ms Run Test. ISNOTNULL - Expected NOT NULL and got "X"
 PASS    0ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "ISNOTNULL" and got "ISNOTNULL"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details. EQ - Expected "Expected NOT NULL and got "X"" and got "Expected NOT NULL and got "X""
 ---- Test Case: ISNOTNULL VARCHAR2 Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNOTNULL VARCHAR2 Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    1ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNOTNULL BOOLEAN Happy Path 1
 PASS    0ms Run Test. ISNOTNULL - Expected NOT NULL and got "TRUE"
 ---- Test Case: ISNOTNULL BOOLEAN Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNOTNULL BOOLEAN Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNOTNULL CLOB Happy Path 1
 PASS    2ms Run Test. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/sear
ch.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:effectiveDate>2007-04-15 00:00:00</ns
1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    0ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "ISNOTNULL" and got "ISNOTNULL"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/
html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n
    <ns1:effectiveDate>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-1"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNOTNULL CLOB Sad Path 1
 PASS    1ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNOTNULL CLOB Sad Path 2
 PASS    1ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNOTNULL BLOB Happy Path 1
 PASS    0ms Run Test. ISNOTNULL - BLOB is NOT NULL
 PASS    0ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "ISNOTNULL" and got "ISNOTNULL"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details. EQ - Expected "BLOB is NOT NULL" and got "BLOB is NOT NULL"
 ---- Test Case: ISNOTNULL BLOB Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNOTNULL BLOB Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNULL VARCHAR2 Happy Path 1
 PASS    0ms Run Test. ISNULL - Expected NULL and got ""
 PASS    1ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "ISNULL" and got "ISNULL"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details. EQ - Expected "Expected NULL and got """ and got "Expected NULL and got """
 ---- Test Case: ISNULL VARCHAR2 Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNULL VARCHAR2 Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNULL BOOLEAN Happy Path 1
 PASS    0ms Run Test. ISNULL - Expected NULL and got ""
 ---- Test Case: ISNULL BOOLEAN Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNULL BOOLEAN Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNULL CLOB Happy Path 1
 PASS    1ms Run Test. ISNULL - Expected NULL and got ""
 PASS    0ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "ISNULL" and got "ISNULL"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details. EQ - Expected "Expected NULL and got """ and got "Expected NULL and got """
 ---- Test Case: ISNULL CLOB Sad Path 1
 PASS    1ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNULL CLOB Sad Path 2
 PASS    2ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNULL BLOB Happy Path 1
 PASS    0ms Run Test. ISNULL - BLOB is NULL
 PASS    0ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "ISNULL" and got "ISNULL"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details. EQ - Expected "BLOB is NULL" and got "BLOB is NULL"
 ---- Test Case: ISNULL BLOB Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNULL BLOB Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: Raises Tests Happy Path 1
 PASS    2ms RAISES Varchar2 Test. RAISES/THROWS - Expected exception "%PLS-00302: component 'BOGUS' must be declared%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;".
 PASS    0ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "RAISES/THROWS" and got "RAISES/THROWS"
 PASS    0ms temp_rec.last_msg. EQ - Expected "RAISES Varchar2 Test" and got "RAISES Varchar2 Test"
 PASS    0ms temp_rec.last_details. EQ - Expected "Expected exception "%PLS-00302: component 'BOGUS' must be declared%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;"." and got "Expected exception "%PLS-00302: component 'BOGUS' must be declared%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;"."
 ---- Test Case: Raises Tests Happy Path 2
 PASS    1ms RAISES Number Test. RAISES/THROWS - Expected exception "%-00302%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;".
 PASS    4ms temp_rec.last_details value. EQ - Expected "Expected exception "%-00302%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;"." and got "Expected exception "%-00302%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;"."
 PASS    2ms THROWS Varchar2 Test. RAISES/THROWS - Expected exception "%PLS-00302: component 'BOGUS' must be declared%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;".
 PASS    0ms temp_rec.last_details value. EQ - Expected "Expected exception "%PLS-00302: component 'BOGUS' must be declared%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;"." and got "Expected exception "%PLS-00302: component 'BOGUS' must be declared%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;"."
 PASS    3ms THROWS Number Test. RAISES/THROWS - Expected exception "%-00302%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;".
 PASS    1ms temp_rec.last_details value. EQ - Expected "Expected exception "%-00302%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;"." and got "Expected exception "%-00302%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;"."
 ---- Test Case: Raises Tests Happy Path 3
 PASS    0ms RAISES Varchar2 No Error. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "begin wt_assert.set_NLS_DATE_FORMAT(wt_assert.get_NLS_DATE_FORMAT); end;".
 PASS    0ms temp_rec.last_details value. EQ - Expected "No exception was expected. Exception raised was "". Exception raised by: "begin wt_assert.set_NLS_DATE_FORMAT(wt_assert.get_NLS_DATE_FORMAT); end;"." and got "No exception was expected. Exception raised was "". Exception raised by: "begin wt_assert.set_NLS_DATE_FORMAT(wt_assert.get_NLS_DATE_FORMAT); end;"."
 PASS    1ms RAISES Number No Error. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "begin wt_assert.set_NLS_DATE_FORMAT(wt_assert.get_NLS_DATE_FORMAT); end;".
 PASS    0ms temp_rec.last_details value. EQ - Expected "No exception was expected. Exception raised was "". Exception raised by: "begin wt_assert.set_NLS_DATE_FORMAT(wt_assert.get_NLS_DATE_FORMAT); end;"." and got "No exception was expected. Exception raised was "". Exception raised by: "begin wt_assert.set_NLS_DATE_FORMAT(wt_assert.get_NLS_DATE_FORMAT); end;"."
 ---- Test Case: Raises Tests Sad Path 1
 PASS    2ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected exception "%Incorrect Exception%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;". Error Stack: ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored\nORA-06512: at "WTP.WT_ASSERT", line 2326\n"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: Raises Tests Sad Path 2
 PASS    1ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details. EQ - Expected "Expected exception "%Incorrect Exception%". No exception was raised by: "begin wt_assert.set_NLS_DATE_FORMAT; end;". Error Stack: " and got "Expected exception "%Incorrect Exception%". No exception was raised by: "begin wt_assert.set_NLS_DATE_FORMAT; end;". Error Stack: "
 ---- Test Case: EQQUERYVALUE VARCHAR2 Happy Path 1
 PASS    0ms Run Test. EQQUERYVALUE - Expected "X" and got "X" for Query: select dummy from DUAL
 PASS    0ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "EQQUERYVALUE" and got "EQQUERYVALUE"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details. EQ - Expected "Expected "X" and got "X" for Query: select dummy from DUAL" and got "Expected "X" and got "X" for Query: select dummy from DUAL"
 ---- Test Case: EQQUERYVALUE VARCHAR2 Happy Path 2
 PASS    1ms Run Test. EQQUERYVALUE - Expected "" and got "" for Query: select max(dummy) from DUAL where 0 = 1
 ---- Test Case: EQQUERYVALUE VARCHAR2 Sad Path 1
 PASS    0ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: EQQUERYVALUE VARCHAR2 Sad Path 2
 PASS    2ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE VARCHAR2 Sad Path 3
 PASS    1ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS   13ms temp_rec.last_details. ISNOTNULL - Expected NOT NULL and got "Exception raised for Query: Garbage query that won't work\nORA-00900: invalid SQL statement\nORA-06512: at "WTP.WT_ASSERT", line 2586\n"
 PASS    0ms temp_rec.last_details value. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE XMLTYPE Happy Path 1
 PASS   84ms Run Test. EQQUERYVALUE - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=award
full&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=
FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " for Query: select temp_xml from wt_self_test where id = 1
 PASS    0ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "EQQUERYVALUE" and got "EQQUERYVALUE"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ez
search/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href=
"https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF0"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE XMLTYPE Sad Path 1
 PASS   42ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "<?xml version="1.0" encoding="UTF-8"?><note>2</note>" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link
 rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " for Query: select temp_xml from wt_self_test where id = 1"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE XMLTYPE Sad Path 2
 PASS   34ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE XMLTYPE Sad Path 3
 PASS    1ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details. ISNOTNULL - Expected NOT NULL and got "Exception raised for Query: Garbage query that won't work\nORA-00900: invalid SQL statement\nORA-06512: at "WTP.WT_ASSERT", line 2624\n"
 PASS    0ms temp_rec.last_details value. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE CLOB Happy Path 1
 PASS   12ms Run Test. EQQUERYVALUE - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&a
mp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezse
arch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" for Query: select temp_clob from wt_self_test where id = 1
 PASS    1ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "EQQUERYVALUE" and got "EQQUERYVALUE"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https
://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type=
"text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE CLOB Happy Path 2
 PASS    0ms Run Test. EQQUERYVALUE - Expected "" and got "" for Query: select temp_clob from wt_self_test where 0 = 1
 ---- Test Case: EQQUERYVALUE CLOB Sad Path 1
 PASS    4ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "This is another clob." and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alterna
te" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" for Query: select temp_clob from wt_self_test where id = 1"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE CLOB Sad Path 2
 PASS    4ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    1ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE CLOB Sad Path 3
 PASS    0ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details. ISNOTNULL - Expected NOT NULL and got "Exception raised for Query: Garbage query that won't work\nORA-00900: invalid SQL statement\nORA-06512: at "WTP.WT_ASSERT", line 2660\n"
 PASS    0ms temp_rec.last_details value. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE BLOB Happy Path 1
 PASS   16ms Run Test. EQQUERYVALUE - DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_self_test where id = 1, compare_results: 0
 PASS    0ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    1ms temp_rec.last_assert. EQ - Expected "EQQUERYVALUE" and got "EQQUERYVALUE"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details. EQ - Expected "DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_self_test where id = 1, compare_results: 0" and got "DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_self_test where id = 1, compare_results: 0"
 ---- Test Case: EQQUERYVALUE BLOB Happy Path 2
 PASS    0ms Run Test. EQQUERYVALUE - DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_self_test where 0 = 1, compare_results: -1
 ---- Test Case: EQQUERYVALUE BLOB Sad Path 1
 PASS    1ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details. EQ - Expected "DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_self_test where id = 1, compare_results: -1" and got "DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_self_test where id = 1, compare_results: -1"
 ---- Test Case: EQQUERYVALUE BLOB Sad Path 2
 PASS    2ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE BLOB Sad Path 3
 PASS   11ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details. ISNOTNULL - Expected NOT NULL and got "Exception raised for Query: Garbage query that won't work\nORA-00900: invalid SQL statement\nORA-06512: at "WTP.WT_ASSERT", line 2699\n"
 PASS    0ms temp_rec.last_details value. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERY Tests Happy Path 1
 PASS  170ms Run Test. EQQUERY - Comparison Query: with check_query as (select * from USER_TABLES), against_query as (select * from USER_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2
 PASS    0ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "EQQUERY" and got "EQQUERY"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Comparison Query: with check_query as (select * from USER_TABLES), against_query as (select * from USER_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2"
 PASS    0ms EQQUERY Tests Happy Path 1b g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERY Tests Sad Path 1
 PASS  562ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Comparison Query: with check_query as (select * from USER_TABLES), against_query as (select * from USER_TABLES where 0 = 1), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERY Tests Sad Path 2
 PASS   42ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERY Tests Sad Path 3
 PASS    6ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "ORA-06550: line 2, column 119:\nPL/SQL: ORA-01789: query block has incorrect number of result columns\nORA-06550: line 2, column 18:\nPL/SQL: SQL Statement ignored\nORA-06550: line 2, column 11:\nPLS-00341: declaration of cursor 'CUR' is incomplete or malformed\nORA-06550: line 3, column 8:\nPL/SQL: Item ignored\nORA-06550: line 6, column 19:\nPLS-00320: the declaration of the type of this expression is incomplete or malformed\nORA-06550: line 6, column 4:\nPL/SQL: SQL Statement ignored\nFAILURE of Compare Query: with check_query as (select * from USER_TABLES), against_query as (select * from ALL_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2;"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABLE Tests Happy Path 1
 PASS   90ms Run Test. EQTABLE - Comparison Query: with check_query as (select * from USER_TABLES), against_query as (select * from USER_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2
 PASS    1ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "EQTABLE" and got "EQTABLE"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Comparison Query: with check_query as (select * from USER_TABLES), against_query as (select * from USER_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABLE Tests Happy Path 2
 PASS   66ms Run Test. EQTABLE - Comparison Query: with check_query as (select * from ALL_TABLES where owner = 'WTP'), against_query as (select * from ALL_TABLES where owner = 'WTP'), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2
 ---- Test Case: EQTABLE Sad Path 1
 PASS   29ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Comparison Query: with check_query as (select * from ALL_TABLES where owner = 'WTP'), against_query as (select * from ALL_TABLES where 0 = 1), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2"
 PASS    1ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABLE Sad Path 2
 PASS   33ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABLE Sad Path 3
 PASS    3ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "ORA-06550: line 2, column 119:\nPL/SQL: ORA-01789: query block has incorrect number of result columns\nORA-06550: line 2, column 18:\nPL/SQL: SQL Statement ignored\nORA-06550: line 2, column 11:\nPLS-00341: declaration of cursor 'CUR' is incomplete or malformed\nORA-06550: line 3, column 8:\nPL/SQL: Item ignored\nORA-06550: line 6, column 19:\nPLS-00320: the declaration of the type of this expression is incomplete or malformed\nORA-06550: line 6, column 4:\nPL/SQL: SQL Statement ignored\nFAILURE of Compare Query: with check_query as (select * from USER_TABLES), against_query as (select * from ALL_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2;"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABCOUNT Tests Happy Path 1
 PASS   57ms Run Test. EQTABCOUNT - Expected 10 rows from "ALL_TABLES" and got 10 rows from "ALL_TABLES"
 PASS    1ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "EQTABCOUNT" and got "EQTABCOUNT"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected 10 rows from "ALL_TABLES" and got 10 rows from "ALL_TABLES""
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABCOUNT Tests Happy Path 2
 PASS   49ms Run Test. EQTABCOUNT - Expected 10 rows from "USER_TABLES" and got 10 rows from "ALL_TABLES"
 ---- Test Case: EQTABCOUNT Sad Path 1
 PASS   27ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected 10 rows from "ALL_TABLES" and got 0 rows from "ALL_TABLES""
 PASS    1ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABCOUNT Sad Path 2
 PASS   23ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABCOUNT Sad Path 3
 PASS   92ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    1ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected 98 rows from "USER_TAB_COLUMNS" and got 10 rows from "USER_TABLES""
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABCOUNT Sad Path 4
 PASS    0ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "ORA-00942: table or view does not exist\nFAILURE of Compare Query: select count(*) from BOGUS1;"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 PASS    1ms temp_rec.last_details 2. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: OBJEXISTS Happy Path 1
 PASS    0ms Run Test. OBJEXISTS - Number of objects found for "SYS.DUAL" is 1
 PASS    0ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    1ms temp_rec.last_assert. EQ - Expected "OBJEXISTS" and got "OBJEXISTS"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details. EQ - Expected "Number of objects found for "SYS.DUAL" is 1" and got "Number of objects found for "SYS.DUAL" is 1"
 ---- Test Case: OBJEXISTS Happy Path 2
 PASS    0ms Run Test. OBJEXISTS - Number of objects found for "SYS.DUAL"(TABLE) is 1
 ---- Test Case: OBJEXISTS Happy Path 3
 PASS    1ms Run Test. OBJEXISTS - Number of objects found for "SYS.DUAL" is 1
 ---- Test Case: OBJEXISTS Happy Path 4
 PASS    1ms Run Test. OBJEXISTS - Number of objects found for "DUAL" is 2
 ---- Test Case: OBJEXISTS Sad Path 1
 PASS    0ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details. EQ - Expected "Number of objects found for "JOE SMITH.BOGUS" is 0" and got "Number of objects found for "JOE SMITH.BOGUS" is 0"
 ---- Test Case: OBJEXISTS Sad Path 2
 PASS    0ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: OBJNOTEXISTS Happy Path 1
 PASS    1ms Run Test. OBJNOTEXISTS - Number of objects found for "BOGUS.THING123" is 0
 PASS    0ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "OBJNOTEXISTS" and got "OBJNOTEXISTS"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details. EQ - Expected "Number of objects found for "BOGUS.THING123" is 0" and got "Number of objects found for "BOGUS.THING123" is 0"
 ---- Test Case: OBJNOTEXISTS Happy Path 2
 PASS    0ms Run Test. OBJNOTEXISTS - Number of objects found for "BOGUS.THING123"(PACKAGE) is 0
 ---- Test Case: OBJNOTEXISTS Happy Path 3
 PASS    0ms Run Test. OBJNOTEXISTS - Number of objects found for "BOGUS.THING123" is 0
 ---- Test Case: OBJNOTEXISTS Sad Path 1
 PASS    1ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details. EQ - Expected "Number of objects found for "SYS.DUAL" is 1" and got "Number of objects found for "SYS.DUAL" is 1"
 ---- Test Case: OBJNOTEXISTS Sad Path 2
 PASS    0ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"

 - WTP.WT_ASSERT PACKAGE BODY Code Coverage Details (Test Run ID 7)
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
     1 EXCL      0         0       0         0 package body wt_assert is
    13 IGNR      0         0       0         0       temp_rowid1 CONSTANT rowid          := chartorowid('AAAFd1AAFAAAABSAA/');
    14 IGNR      0         0       0         0       temp_rowid2 CONSTANT rowid          := chartorowid('AAAFd1AAFAAAABSAB/');
    15 IGNR      0         0       0         0       temp_long1  CONSTANT long           := hextoraw('0123456789ABCDEF0123456789ABCDEF');
    16 IGNR      0         0       0         0       temp_long2  CONSTANT long           := hextoraw('FEDCBA9876543210FEDCBA9876543210');
    17 IGNR      0         0       0         0       temp_raw1   CONSTANT raw(2)         := hextoraw('2345');
    18 IGNR      0         0       0         0       temp_raw2   CONSTANT raw(2)         := hextoraw('6789');
    19 IGNR      0         0       0         0       temp_lraw1  CONSTANT long raw       := hextoraw('0123456789ABCDEF0123456789ABCDEF');
    20 IGNR      0         0       0         0       temp_lraw2  CONSTANT long raw       := hextoraw('FEDCBA9876543210FEDCBA9876543210');
    22 IGNR      0         0       0         0       temp_blob2  CONSTANT BLOB           := hextoraw('FEDCBA9876543210FEDCBA9876543210');
    24 IGNR      0         0       0         0       temp_nc1    CONSTANT NVARCHAR2(12)  := 'NCHAR1';
    25 IGNR      0         0       0         0       temp_nc2    CONSTANT NVARCHAR2(12)  := 'NCHAR2';
    26 IGNR      0         0       0         0       temp_bool   CONSTANT boolean        := NULL;
    28 IGNR      0         0       0         0       temp_clob2  CONSTANT CLOB           := 'This is another clob.';
    30 IGNR      0         0       0         0       temp_nclob2 CONSTANT NCLOB          := 'This is another clob.';
    32 IGNR      0         0       0         0       temp_xml2   CONSTANT XMLTYPE        := xmltype('<?xml version="1.0" encoding="UTF-8"?><note>2</note>');
    34 IGNR      0         0       0         0       temp_pint1  CONSTANT pls_integer    := 2;
    35 IGNR      0         0       0         0       temp_pint2  CONSTANT pls_integer    := 3;
    36 IGNR      0         0       0         0       temp_date   CONSTANT date           := sysdate;
    37 IGNR      0         0       0         0       temp_tstmp  CONSTANT timestamp      := systimestamp;
    38 IGNR      0         0       0         0       temp_tstlzn CONSTANT timestamp with local time zone := systimestamp;
    39 IGNR      0         0       0         0       temp_tstzn  CONSTANT timestamp with time zone := systimestamp;
    40 IGNR      0         0       0         0       temp_intds1 CONSTANT interval day to second   := interval '+01 01:01:01.001' day to second;
    41 IGNR      0         0       0         0       temp_intds2 CONSTANT interval day to second   := interval '+02 02:02:02.002' day to second;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
    42 IGNR      0         0       0         0       temp_intym1 CONSTANT interval year to month   := interval '+01-01' year to month;
    43 IGNR      0         0       0         0       temp_intym2 CONSTANT interval year to month   := interval '+02-02' year to month;
    47 IGNR      0         0       0         0       wtplsql_skip_save boolean := FALSE;
    55 UNKN      0        59       0         3 function boolean_to_status
    60 EXEC    298        38       0         1    if in_boolean is null
    62 EXEC     12         1       0         1       return '';
    63 EXEC    286        22       0         1    elsif in_boolean
    65 EXEC    169        56       0         5       return 'TRUE';
    67 EXEC    117        37       0         1    return 'FALSE';
    68 EXEC    298        50       0         2 end boolean_to_status;
    72 IGNR      0         5       5         5    procedure t_boolean_to_status
    75 IGNR      1         3       3         3       wt_assert.g_testcase := 'BOOLEAN_TO_STATUS';
    77 IGNR      1         1       0         1       wt_assert.eq
    81 IGNR      1         1       0         1       wt_assert.eq
    86 IGNR      1         1       1         1       wt_assert.isnull
    89 IGNR      1         0       0         0    end t_boolean_to_status;
    94 UNKN      0       857       1       284 procedure process_assertion
    99 IGNR    493        81       0         2    if not wtplsql_skip_save then
   101 EXEC    404       165       0         2    wt_result.save
   103 UNKN      0       549       0        18       ,in_status         => case g_rec.last_pass
   104 UNKN      0       110       0         1                             when TRUE then C_PASS
   114 EXEC    493       139       0         2    if g_rec.raise_exception and not g_rec.last_pass
   116 EXEC     28      2084       1       265       raise_application_error(-20003, wt_text_report.format_test_result
   124 UNKN      0       107       0         2 end process_assertion;
   128 IGNR      0         1       1         1    procedure t_process_assertion
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   132 IGNR      1         0       0         0       g_testcase  := 'PROCESS_ASSERTION';
   133 IGNR      1         0       0         0       g_rec.last_assert     := 'THIS';
   134 IGNR      1         1       1         1       g_rec.last_pass       := FALSE;
   135 IGNR      1         1       1         1       g_rec.last_details    := 'Expected "PASS" and got "FAIL"';
   136 IGNR      1         0       0         0       g_rec.last_msg        := 'Process Assertion Forced Failure';
   137 IGNR      1         0       0         0       g_rec.raise_exception := TRUE;
   138 IGNR      1         0       0         0       wtplsql_skip_save  := TRUE;
   139 IGNR      1         0       0         0       process_assertion;  -- Should throw exception
   140 IGNR      0         0       0         0       wtplsql_skip_save  := FALSE;
   143 IGNR      1         0       0         0       when ASSERT_FAILURE_EXCEPTION then
   144 IGNR      1         0       0         0          wtplsql_skip_save := FALSE;
   145 IGNR      1         1       0         1    end t_process_assertion;
   150 EXEC     11        18       1         2 procedure compare_queries (
   159 EXEC     11        20       1         3    l_qry_txt := 'with check_query as (' || check_query_in   ||
   168 EXEC     11        15       1         4    l_exec_txt :=
   181 EXEC     11     13503      77      5515    execute immediate l_exec_txt using out l_ret_txt;
   182 EXEC      8        13       1         2    if l_ret_txt = 'FOUND'
   184 EXEC      5         8       1         3       g_rec.last_pass := FALSE; -- Some Difference Found
   186 EXEC      3         6       2         2       g_rec.last_pass := TRUE;  -- Nothing found, queries match
   189 EXEC      8        41       4         6    g_rec.last_details := 'Comparison Query: ' || l_qry_txt;
   191 EXEC      3         0       0         0    when OTHERS
   193 EXEC      3       212      53        92       g_rec.last_details := SQLERRM || CHR(10) ||
   195 EXEC      3         2       1         1       g_rec.last_pass    := FALSE;
   196 EXEC     11        21       1         3 end compare_queries;
   200 IGNR      0         1       1         1    procedure t_compare_queries
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   204 IGNR      1         0       0         0       wt_assert.g_testcase := 'COMPARE_QUERIES Bad Query Test 1';
   205 IGNR      1         1       1         1       compare_queries (
   208 IGNR      1        19      19        19       temp_rec := g_rec;
   209 IGNR      1         1       1         1       wt_assert.eq (
   214 IGNR      1         1       1         1       wt_assert.isnotnull(
   217 IGNR      1        10      10        10       wt_assert.this(
   222 IGNR      1         0       0         0       wt_assert.g_testcase := 'COMPARE_QUERIES Bad Query Test 2';
   223 IGNR      1         0       0         0       compare_queries (
   226 IGNR      1         5       5         5       temp_rec := g_rec;
   227 IGNR      1         0       0         0       wt_assert.eq (
   232 IGNR      1         1       1         1       wt_assert.isnotnull(
   235 IGNR      1         6       6         6       wt_assert.this(
   240 IGNR      1         0       0         0    end t_compare_queries;
   249 EXCL      0         0       0         0 function last_pass
   253 EXEC      1         0       0         0    return g_rec.last_pass;
   254 EXEC      1         0       0         0 end last_pass;
   256 UNKN      0         1       1         1 function last_assert
   260 EXEC      1         1       1         1    return g_rec.last_assert;
   261 EXEC      1         0       0         0 end last_assert;
   263 EXCL      0         0       0         0 function last_msg
   267 EXEC      1         0       0         0    return g_rec.last_msg;
   268 EXEC      1         0       0         0 end last_msg;
   270 UNKN      0         1       1         1 function last_details
   274 EXEC      1         0       0         0    return g_rec.last_details;
   275 EXEC      1         1       1         1 end last_details;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   279 IGNR      0         1       1         1    procedure t_last_values
   283 IGNR      1         0       0         0       wt_assert.g_testcase := 'Last Values Tests';
   284 IGNR      1         2       1         1       wt_assert.eq (
   289 IGNR      1         1       0         1       wt_assert.eq (
   295 IGNR      1         1       1         1       temp_rec := g_rec;
   296 IGNR      1         1       1         1       wt_assert.eq (
   301 IGNR      1         0       0         0       wt_assert.eq (
   306 IGNR      1         0       0         0    end t_last_values;
   311 EXCL      0         0       0         0 procedure reset_globals
   314 EXEC      1         1       1         1    g_testcase            := '';
   315 EXEC      1         1       1         1    g_rec.last_pass       := NULL;
   316 EXEC      1         0       0         0    g_rec.last_assert     := '';
   317 EXEC      1         0       0         0    g_rec.last_msg        := '';
   318 EXEC      1         0       0         0    g_rec.last_details    := '';
   319 EXEC      1         1       1         1    g_rec.raise_exception := FALSE;
   320 EXEC      1         0       0         0 end reset_globals;
   324 IGNR      0         0       0         0    procedure t_reset_globals
   327 IGNR      1         0       0         0       reset_globals;  -- Resets g_testcase
   328 IGNR      1         0       0         0       temp_rec         := g_rec;
   329 IGNR      1         1       1         1       temp_testcase    := g_testcase;
   331 IGNR      1         1       1         1       g_testcase       := 'RESET_GLOBALS';
   332 IGNR      1         0       0         0       wt_assert.isnull(
   335 IGNR      1         1       1         1       wt_assert.isnull
   339 IGNR      1         1       1         1       wt_assert.eq(
   343 IGNR      1         0       0         0       wt_assert.isnull
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   347 IGNR      1         0       0         0       wt_assert.isnull
   350 IGNR      1         1       1         1       wt_assert.isnull
   353 IGNR      1         0       0         0    end t_reset_globals;
   358 UNKN      0         6       1         2 function get_NLS_DATE_FORMAT
   363 EXEC      4       678      75       330    select value into l_format
   366 EXEC      4         9       0         5    return l_format;
   367 EXEC      4         6       1         2 end get_NLS_DATE_FORMAT;
   369 UNKN      0         8       1         2 procedure set_NLS_DATE_FORMAT
   373 EXEC      5       634      91       171    execute immediate 'alter session set NLS_DATE_FORMAT = ''' ||
   375 EXEC      5         5       2         2 end set_NLS_DATE_FORMAT;
   377 UNKN      0         4       2         2 function get_NLS_TIMESTAMP_FORMAT
   382 EXEC      2       245      77       168    select value into l_format
   385 EXEC      2         2       1         1    return l_format;
   386 EXEC      2         1       0         1 end get_NLS_TIMESTAMP_FORMAT;
   388 UNKN      0         1       0         1 procedure set_NLS_TIMESTAMP_FORMAT
   392 EXEC      2       299     142       157    execute immediate 'alter session set NLS_TIMESTAMP_FORMAT = ''' ||
   394 EXEC      2         2       1         1 end set_NLS_TIMESTAMP_FORMAT;
   396 UNKN      0         3       1         2 function get_NLS_TIMESTAMP_TZ_FORMAT
   401 EXEC      2       323      83       240    select value into l_format
   404 EXEC      2         3       1         2    return l_format;
   405 EXEC      2         2       1         1 end get_NLS_TIMESTAMP_TZ_FORMAT;
   407 UNKN      0         1       0         1 procedure set_NLS_TIMESTAMP_TZ_FORMAT
   411 EXEC      2       356     169       187    execute immediate 'alter session set NLS_TIMESTAMP_TZ_FORMAT = ''' ||
   413 EXEC      2         1       0         1 end set_NLS_TIMESTAMP_TZ_FORMAT;
   417 IGNR      0         3       3         3    procedure t_nls_settings
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   421 IGNR      1         1       1         1       wt_assert.g_testcase := 'NLS Settings';
   422 IGNR      1         1       1         1       set_NLS_DATE_FORMAT('DD-MON-YYYY');
   423 IGNR      1         1       0         1       wt_assert.eq
   427 IGNR      1         0       0         0       set_NLS_DATE_FORMAT;
   429 IGNR      1         1       0         1       wt_assert.eq
   433 IGNR      1         0       0         0       set_NLS_TIMESTAMP_FORMAT('DD-MON-YYYY');
   434 IGNR      1         0       0         0       wt_assert.eq
   438 IGNR      1         0       0         0       set_NLS_TIMESTAMP_FORMAT;
   440 IGNR      1         2       1         1       wt_assert.eq
   444 IGNR      1         0       0         0       set_NLS_TIMESTAMP_TZ_FORMAT('DD-MON-YYYY');
   446 IGNR      1         1       0         1       wt_assert.eq
   450 IGNR      1         0       0         0       set_NLS_TIMESTAMP_TZ_FORMAT;
   451 IGNR      1         2       1         1       wt_assert.eq
   455 IGNR      1         2       2         2    end t_nls_settings;
   464 UNKN      0        57       1         4 procedure this (
   471 EXEC     80        40       0         1    g_rec.last_assert  := 'THIS';
   472 EXEC     80        23       0         1    g_rec.last_msg     := msg_in;
   473 EXEC     80        24       0         1    g_rec.last_pass    := nvl(check_this_in, FALSE);
   474 EXEC     80     10631       0     10552    g_rec.last_details := 'Expected "TRUE" and got "' ||
   476 EXEC     80        19       1         1    g_rec.raise_exception := raise_exc_in;
   477 EXEC     80         7       0         1    process_assertion;
   478 EXEC     79        13       1         1 end this;
   482 IGNR      0         1       1         1    procedure t_this
   487 IGNR      1         0       0         0       wt_assert.g_testcase := 'This Happy Path';
   488 IGNR      1         0       0         0       wt_assert.this (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   491 IGNR      1         1       1         1       temp_rec := g_rec;
   492 IGNR      1         1       1         1       wt_assert.eq (
   497 IGNR      1         1       1         1       wt_assert.eq (
   501 IGNR      1         1       1         1       wt_assert.eq (
   505 IGNR      1         0       0         0       wt_assert.eq (
   510 IGNR      1         0       0         0       wt_assert.g_testcase := 'This Sad Path 1';
   511 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
   512 IGNR      1         0       0         0       this (
   515 IGNR      1         0       0         0       temp_rec := g_rec;
   516 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
   517 IGNR      1         0       0         0       wt_assert.eq (
   522 IGNR      1         0       0         0       wt_assert.g_testcase := 'This Sad Path 2';
   523 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
   525 IGNR      1         1       1         1          this (
   529 IGNR      0         0       0         0          l_found_exception := FALSE;
   530 IGNR      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
   531 IGNR      1         0       0         0          l_found_exception := TRUE;
   532 IGNR      0         1       1         1       end;
   534 IGNR      1         1       1         1       temp_rec := g_rec;
   535 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
   536 IGNR      1         0       0         0       wt_assert.eq (
   540 IGNR      1         0       0         0       wt_assert.eq (
   545 IGNR      1         0       0         0       wt_assert.g_testcase := 'This Sad Path 3';
   546 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
   547 IGNR      1         1       1         1       this (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   550 IGNR      1         0       0         0       temp_rec := g_rec;
   551 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
   552 IGNR      1         0       0         0       wt_assert.eq (
   556 IGNR      1         0       0         0    end t_this;
   562 UNKN      0       144       0         5 procedure eq (
   570 EXEC    199        89       1         2    g_rec.last_assert  := 'EQ';
   571 EXEC    199        69       0         5    g_rec.last_msg     := msg_in;
   572 EXEC    199       229       1         8    g_rec.last_pass    := (   nvl(check_this_in = against_this_in, false)
   573 UNKN      0        14       1         1                            or (    check_this_in is null
   577 EXEC    199       367       1         9    g_rec.last_details := 'Expected "' || substr(against_this_in,1,1000) ||
   580 EXEC    199        25       1         1    g_rec.raise_exception := raise_exc_in;
   581 EXEC    199        31       0         4    process_assertion;
   582 EXEC    198        28       0         1 end eq;
   585 UNKN      0        98       1         5 procedure eq (
   593 EXEC     98        59       0         1    eq (msg_in           => msg_in
   598 EXEC     98        18       0         1 end eq;
   601 UNKN      0        23       6         9 procedure eq (
   609 EXEC      3         2       1         1    g_rec.last_assert  := 'EQ';
   610 EXEC      3         2       1         1    g_rec.last_msg     := msg_in;
   611 EXEC      3     51087       2     33631    g_rec.last_pass    := (xmltype.getclobval(check_this_in)  =
   613 EXEC      3     35791       7      9614    g_rec.last_details := 'Expected "' || substr(xmltype.getclobval(against_this_in),1,1000) ||
   616 EXEC      3         3       1         1    g_rec.raise_exception := raise_exc_in;
   617 EXEC      3         1       1         1    process_assertion;
   618 EXEC      2       129      61        68 end eq;
   621 UNKN      0       235       8        29 procedure eq (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   629 EXEC     14        20       1         3    g_rec.last_assert  := 'EQ';
   630 EXEC     14         7       1         1    g_rec.last_msg     := msg_in;
   631 EXEC     14     14749       0     12653    g_rec.last_pass    := (   nvl(check_this_in = against_this_in, false)
   632 UNKN      0        19       1         3                            or (    check_this_in is null
   636 EXEC     14     26550     707      6480    g_rec.last_details := 'Expected "' || substr(against_this_in,1,1000) ||
   639 EXEC     14        15       1         2    g_rec.raise_exception := raise_exc_in;
   640 EXEC     14        51       1        41    process_assertion;
   641 EXEC     12      1028      65       160 end eq;
   644 UNKN      0         6       0         2 procedure eq (
   653 EXEC      7         3       0         1    g_rec.last_assert  := 'EQ';
   654 EXEC      7         1       0         1    g_rec.last_msg     := msg_in;
   655 EXEC      7        95       0        85    compare_results    := nvl(DBMS_LOB.COMPARE(check_this_in, against_this_in),-1);
   656 EXEC      7        10       0         2    g_rec.last_pass    := (    (compare_results = 0)
   657 UNKN      0         8       0         3                            or (    check_this_in is null
   661 EXEC      7        27       1        10    g_rec.last_details := 'DBMS_LOB.COMPARE on BLOBs, compare_results: ' || compare_results;
   662 EXEC      7         4       1         1    g_rec.raise_exception := raise_exc_in;
   663 EXEC      7         2       0         1    process_assertion;
   664 EXEC      6         2       0         1 end eq;
   672 IGNR      0        23      23        23    procedure t_eq
   677 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQ VARCHAR2 Happy Path 1';
   678 IGNR      1         1       1         1       eq (
   682 IGNR      1         1       1         1       temp_rec := g_rec;
   684 IGNR      1         0       0         0       wt_assert.isnotnull (
   687 IGNR      1         1       1         1       wt_assert.this (
   691 IGNR      1         0       0         0       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   694 IGNR      1         1       1         1       wt_assert.this (
   698 IGNR      1         0       0         0       wt_assert.isnotnull (
   701 IGNR      1         0       0         0       wt_assert.this (
   705 IGNR      1         0       0         0       wt_assert.isnotnull (
   708 IGNR      1         0       0         0       wt_assert.this (
   712 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQ VARCHAR2 Happy Path 2';
   713 IGNR      1         1       1         1       eq (
   718 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ VARCHAR2 Happy Path 3';
   719 IGNR      1         0       0         0       eq (
   725 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 1';
   726 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
   727 IGNR      1         0       0         0       eq (
   731 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
   732 IGNR      1         1       1         1       temp_rec := g_rec;
   734 IGNR      1         0       0         0       wt_assert.isnotnull (
   737 IGNR      1         0       0         0       wt_assert.isnotnull (
   740 IGNR      1         0       0         0       wt_assert.this (
   744 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 2';
   745 IGNR      1         1       1         1       wtplsql_skip_save := TRUE;
   747 IGNR      1         0       0         0          eq (
   752 IGNR      0         0       0         0          l_found_exception := FALSE;
   753 IGNR      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
   754 IGNR      1         0       0         0          l_found_exception := TRUE;
   755 IGNR      0         1       1         1       end;
   757 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   758 IGNR      1         2       2         2       temp_rec := g_rec;
   759 IGNR      1         1       1         1       wt_assert.this (
   762 IGNR      1         1       1         1       wt_assert.eq (
   767 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 3';
   768 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
   769 IGNR      1         0       0         0       eq (
   773 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
   774 IGNR      1         1       1         1       temp_rec := g_rec;
   776 IGNR      1         1       1         1       wt_assert.isnull (
   779 IGNR      1         0       0         0       wt_assert.isnotnull (
   782 IGNR      1         1       1         1       wt_assert.this (
   786 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 4';
   787 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
   788 IGNR      1         0       0         0       eq (
   792 IGNR      1         1       1         1       wtplsql_skip_save := FALSE;
   793 IGNR      1         1       1         1       temp_rec := g_rec;
   795 IGNR      1         0       0         0       wt_assert.isnull (
   798 IGNR      1         0       0         0       wt_assert.isnull (
   801 IGNR      1         1       1         1       wt_assert.this (
   805 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 5';
   806 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
   807 IGNR      1         7       7         7       eq (
   812 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
   813 IGNR      1         0       0         0       temp_rec := g_rec;
   815 IGNR      1         0       0         0       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   818 IGNR      1         0       0         0       wt_assert.isnotnull (
   821 IGNR      1         1       1         1       wt_assert.this (
   825 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 6';
   826 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
   827 IGNR      1         0       0         0       eq (
   832 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
   833 IGNR      1         1       1         1       temp_rec := g_rec;
   835 IGNR      1         0       0         0       wt_assert.isnull (
   838 IGNR      1         1       1         1       wt_assert.isnotnull (
   841 IGNR      1         0       0         0       wt_assert.this (
   846 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ ROWID Happy Path 1';
   847 IGNR      1         0       0         0       eq (
   852 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ ROWID Sad Path 1';
   853 IGNR      1         1       1         1       wtplsql_skip_save := TRUE;
   854 IGNR      1         0       0         0       eq (
   858 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
   859 IGNR      1         0       0         0       temp_rec := g_rec;
   861 IGNR      1         0       0         0       wt_assert.isnotnull (
   864 IGNR      1         0       0         0       wt_assert.isnotnull (
   867 IGNR      1         1       1         1       wt_assert.this (
   872 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQ LONG Happy Path 1';
   873 IGNR      1         1       1         1       eq (
   878 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ LONG Sad Path 1';
   879 IGNR      1         1       1         1       wtplsql_skip_save := TRUE;
   880 IGNR      1         0       0         0       eq (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   884 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
   885 IGNR      1         0       0         0       temp_rec := g_rec;
   887 IGNR      1         1       1         1       wt_assert.isnotnull (
   890 IGNR      1         0       0         0       wt_assert.isnotnull (
   893 IGNR      1         0       0         0       wt_assert.this (
   898 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ RAW Happy Path 1';
   899 IGNR      1         2       2         2       eq (
   904 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQ RAW Sad Path 1';
   905 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
   906 IGNR      1         1       1         1       eq (
   910 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
   911 IGNR      1         0       0         0       temp_rec := g_rec;
   913 IGNR      1         0       0         0       wt_assert.isnotnull (
   916 IGNR      1         1       1         1       wt_assert.isnotnull (
   919 IGNR      1         1       1         1       wt_assert.this (
   924 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ LANG RAW Happy Path 1';
   925 IGNR      1         1       1         1       eq (
   931 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQ LANG RAW Happy Path 1';
   932 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
   933 IGNR      1         0       0         0       eq (
   938 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ LONG RAW Sad Path 1';
   939 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
   940 IGNR      1         0       0         0       temp_rec := g_rec;
   941 IGNR      1         0       0         0       wt_assert.isnotnull (
   945 IGNR      1         0       0         0       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   948 IGNR      1         0       0         0       wt_assert.this (
   953 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ NVARCHAR2 Happy Path 1';
   954 IGNR      1         8       8         8       eq (
   959 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQ NVARCHAR2 Sad Path 1';
   960 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
   961 IGNR      1         3       3         3       eq (
   965 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
   966 IGNR      1         1       1         1       temp_rec := g_rec;
   968 IGNR      1         1       1         1       wt_assert.isnotnull (
   971 IGNR      1         3       3         3       wt_assert.isnotnull (
   974 IGNR      1         1       1         1       wt_assert.this (
   978 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQ BOOLEAN Happy Path 1';
   979 IGNR      1         1       1         1       eq (
   983 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ BOOLEAN Happy Path 2';
   984 IGNR      1         0       0         0       eq (
   990 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQ BOOLEAN Happy Path 3';
   991 IGNR      1         0       0         0       eq (
   997 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ BOOLEAN Happy Sad 1';
   998 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
   999 IGNR      1         0       0         0       eq (
  1003 IGNR      1         1       1         1       wtplsql_skip_save := FALSE;
  1004 IGNR      1         1       1         1       temp_rec := g_rec;
  1006 IGNR      1         0       0         0       wt_assert.isnotnull (
  1009 IGNR      1         0       0         0       wt_assert.isnotnull (
  1012 IGNR      1         0       0         0       wt_assert.this (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1016 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ BOOLEAN Happy Sad 2';
  1017 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1018 IGNR      1         0       0         0       eq (
  1022 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  1023 IGNR      1         1       1         1       temp_rec := g_rec;
  1025 IGNR      1         0       0         0       wt_assert.isnotnull (
  1028 IGNR      1         0       0         0       wt_assert.isnull (
  1031 IGNR      1         0       0         0       wt_assert.this (
  1035 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ BOOLEAN Happy Sad 3';
  1036 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1037 IGNR      1         0       0         0       eq (
  1042 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  1043 IGNR      1         0       0         0       temp_rec := g_rec;
  1045 IGNR      1         0       0         0       wt_assert.isnotnull (
  1048 IGNR      1         0       0         0       wt_assert.isnotnull (
  1051 IGNR      1         0       0         0       wt_assert.this (
  1055 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ BOOLEAN Happy Sad 4';
  1056 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1057 IGNR      1         0       0         0       eq (
  1062 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  1063 IGNR      1         1       1         1       temp_rec := g_rec;
  1065 IGNR      1         1       1         1       wt_assert.isnotnull (
  1068 IGNR      1         0       0         0       wt_assert.isnull (
  1071 IGNR      1         0       0         0       wt_assert.this (
  1075 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ NUMBER Happy Path 1';
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1076 IGNR      1         5       5         5       eq (
  1080 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ NUMBER Happy Path 2';
  1081 IGNR      1         2       2         2       eq (
  1086 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ NUMBER Happy Path 1';
  1087 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1088 IGNR      1         2       2         2       eq (
  1092 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  1093 IGNR      1         1       1         1       temp_rec := g_rec;
  1095 IGNR      1         0       0         0       wt_assert.isnotnull (
  1098 IGNR      1         1       1         1       wt_assert.isnotnull (
  1101 IGNR      1         0       0         0       wt_assert.this (
  1106 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ PLS_INTEGER Happy Path 1';
  1107 IGNR      1         1       1         1       eq (
  1111 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1113 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ PLS_INTEGER Sad Path 1';
  1114 IGNR      1         1       1         1       eq (
  1118 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  1119 IGNR      1         0       0         0       temp_rec := g_rec;
  1121 IGNR      1         0       0         0       wt_assert.isnotnull (
  1124 IGNR      1         1       1         1       wt_assert.isnotnull (
  1127 IGNR      1         0       0         0       wt_assert.this (
  1131 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQ DATE Happy Path 1';
  1132 IGNR      1        13      13        13       eq (
  1137 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ DATE Sad Path 1';
  1138 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1139 IGNR      1         8       8         8       eq (
  1143 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  1144 IGNR      1         1       1         1       temp_rec := g_rec;
  1146 IGNR      1         2       2         2       wt_assert.isnotnull (
  1149 IGNR      1         5       5         5       wt_assert.isnotnull (
  1152 IGNR      1         0       0         0       wt_assert.this (
  1157 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ TIMSETAMP Happy Path 1';
  1158 IGNR      1         8       8         8       eq (
  1163 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ TIMSETAMP Sad Path 1';
  1164 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1165 IGNR      1         8       8         8       eq (
  1169 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  1170 IGNR      1         1       1         1       temp_rec := g_rec;
  1172 IGNR      1         3       3         3       wt_assert.isnotnull (
  1175 IGNR      1         4       4         4       wt_assert.isnotnull (
  1178 IGNR      1         1       1         1       wt_assert.this (
  1183 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQ TIMSETAMP WITH LOCAL TIME ZONE Happy Path 1';
  1184 IGNR      1         6       6         6       eq (
  1189 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQ TIMSETAMP WITH LOCAL TIME ZONE Sad Path 1';
  1190 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1191 IGNR      1        23      23        23       eq (
  1195 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  1196 IGNR      1         0       0         0       temp_rec := g_rec;
  1198 IGNR      1         4       4         4       wt_assert.isnotnull (
  1201 IGNR      1         5       5         5       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1204 IGNR      1         0       0         0       wt_assert.this (
  1209 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ TIMSETAMP WITH TIME ZONE Happy Path 1';
  1210 IGNR      1         5       5         5       eq (
  1215 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ TIMSETAMP WITH TIME ZONE Sad Path 1';
  1216 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1217 IGNR      1         9       9         9       eq (
  1221 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  1222 IGNR      1         1       1         1       temp_rec := g_rec;
  1224 IGNR      1         3       3         3       wt_assert.isnotnull (
  1227 IGNR      1         5       5         5       wt_assert.isnotnull (
  1230 IGNR      1         0       0         0       wt_assert.this (
  1235 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ INTERVAL DAY TO SECOND Happy Path 1';
  1236 IGNR      1         3       3         3       eq (
  1241 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ INTERVAL DAY TO SECOND Sad Path 1';
  1242 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1243 IGNR      1         2       2         2       eq (
  1247 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  1248 IGNR      1         0       0         0       temp_rec := g_rec;
  1250 IGNR      1         0       0         0       wt_assert.isnotnull (
  1253 IGNR      1         1       1         1       wt_assert.isnotnull (
  1256 IGNR      1         1       1         1       wt_assert.this (
  1261 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ INTERVAL YEAR TO MONTH Happy Path 1';
  1262 IGNR      1         2       2         2       eq (
  1267 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQ INTERVAL YEAR TO MONTH Sad Path 1';
  1268 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1269 IGNR      1         1       1         1       eq (
  1273 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  1274 IGNR      1         0       0         0       temp_rec := g_rec;
  1276 IGNR      1         1       1         1       wt_assert.isnotnull (
  1279 IGNR      1         1       1         1       wt_assert.isnotnull (
  1282 IGNR      1         1       1         1       wt_assert.this (
  1286 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQ XMLTYPE Happy Path 1';
  1287 IGNR      1         0       0         0       eq (
  1291 IGNR      1        19      19        19       temp_rec := g_rec;
  1293 IGNR      1         0       0         0       wt_assert.isnotnull (
  1296 IGNR      1         1       1         1       wt_assert.this (
  1300 IGNR      1         1       1         1       wt_assert.isnotnull (
  1303 IGNR      1         0       0         0       wt_assert.this (
  1307 IGNR      1         1       1         1       wt_assert.isnotnull (
  1310 IGNR      1         1       1         1       wt_assert.this (
  1314 IGNR      1         0       0         0       wt_assert.isnotnull (
  1317 IGNR      1        17      17        17       wt_assert.this (
  1322 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ XMLTYPE Sad Path 1';
  1323 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1324 IGNR      1         0       0         0       eq (
  1328 IGNR      1         1       1         1       wtplsql_skip_save := FALSE;
  1329 IGNR      1         5       5         5       temp_rec := g_rec;
  1331 IGNR      1         7       1         6       wt_assert.isnotnull (
  1334 IGNR      1         4       1         3       wt_assert.isnotnull (
  1337 IGNR      1         2       2         2       wt_assert.this (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1341 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ XMLTYPE Sad Path 2';
  1342 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1343 IGNR      0         1       1         1       begin
  1344 IGNR      1         0       0         0          eq (
  1349 IGNR      0         0       0         0          l_found_exception := FALSE;
  1350 IGNR      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1351 IGNR      1         0       0         0          l_found_exception := TRUE;
  1352 IGNR      0         2       2         2       end;
  1354 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  1355 IGNR      1         5       5         5       temp_rec := g_rec;
  1356 IGNR      1         2       2         2       wt_assert.this (
  1359 IGNR      1         0       0         0       wt_assert.eq (
  1364 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQ CLOB Happy Path 1';
  1365 IGNR      1         0       0         0       eq (
  1369 IGNR      1         3       3         3       temp_rec := g_rec;
  1371 IGNR      1         0       0         0       wt_assert.isnotnull (
  1374 IGNR      1         1       1         1       wt_assert.this (
  1378 IGNR      1         0       0         0       wt_assert.isnotnull (
  1381 IGNR      1         1       1         1       wt_assert.this (
  1385 IGNR      1         1       1         1       wt_assert.isnotnull (
  1388 IGNR      1         1       1         1       wt_assert.this (
  1392 IGNR      1         0       0         0       wt_assert.isnotnull (
  1395 IGNR      1        17      17        17       wt_assert.this (
  1400 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ CLOB Happy Path 2';
  1401 IGNR      1         0       0         0       eq (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1407 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQ CLOB Happy Path 3';
  1408 IGNR      1         1       1         1       eq (
  1414 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ CLOB Sad Path 1';
  1415 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1416 IGNR      1         0       0         0       eq (
  1420 IGNR      1         1       1         1       wtplsql_skip_save := FALSE;
  1421 IGNR      1         7       7         7       temp_rec := g_rec;
  1423 IGNR      1         0       0         0       wt_assert.isnotnull (
  1426 IGNR      1         0       0         0       wt_assert.isnotnull (
  1429 IGNR      1         2       2         2       wt_assert.this (
  1433 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ CLOB Sad Path 2';
  1434 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1436 IGNR      1         1       1         1          eq (
  1441 IGNR      0         0       0         0          l_found_exception := FALSE;
  1442 IGNR      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1443 IGNR      1         1       1         1          l_found_exception := TRUE;
  1444 IGNR      0         2       2         2       end;
  1446 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  1447 IGNR      1         5       5         5       temp_rec := g_rec;
  1448 IGNR      1         1       1         1       wt_assert.this (
  1451 IGNR      1         1       1         1       wt_assert.eq (
  1456 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ CLOB Sad Path 3';
  1457 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1458 IGNR      1         0       0         0       eq (
  1462 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1463 IGNR      1         6       6         6       temp_rec := g_rec;
  1465 IGNR      1         1       1         1       wt_assert.isnotnull (
  1468 IGNR      1         0       0         0       wt_assert.isnull (
  1471 IGNR      1         2       2         2       wt_assert.this (
  1475 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ CLOB Sad Path 4';
  1476 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1477 IGNR      1         0       0         0       eq (
  1482 IGNR      1         1       1         1       wtplsql_skip_save := FALSE;
  1483 IGNR      1         5       5         5       temp_rec := g_rec;
  1485 IGNR      1         0       0         0       wt_assert.isnotnull (
  1488 IGNR      1         1       1         1       wt_assert.isnull (
  1491 IGNR      1         2       2         2       wt_assert.this (
  1495 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ NCLOB Happy Path 1';
  1496 IGNR      1     12812   12812     12812       eq (
  1501 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQ NCLOB Happy Path 2';
  1502 IGNR      1     13893   13893     13893       eq (
  1508 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQ NCLOB Happy Path 3';
  1509 IGNR      1         3       3         3       eq (
  1515 IGNR      1         2       2         2       wt_assert.g_testcase := 'EQ NCLOB Sad Path 1';
  1516 IGNR      1         1       1         1       wtplsql_skip_save := TRUE;
  1517 IGNR      1     10094   10094     10094       eq (
  1521 IGNR      1         1       1         1       wtplsql_skip_save := FALSE;
  1522 IGNR      1         7       7         7       temp_rec := g_rec;
  1524 IGNR      1      9312    9312      9312       wt_assert.isnotnull (
  1527 IGNR      1       154     154       154       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1530 IGNR      1         2       2         2       wt_assert.this (
  1534 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ NCLOB Sad Path 2';
  1535 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1536 IGNR      0         0       0         0       begin
  1537 IGNR      1      6227    6227      6227          eq (
  1542 IGNR      0         0       0         0          l_found_exception := FALSE;
  1543 IGNR      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1544 IGNR      1         1       1         1          l_found_exception := TRUE;
  1545 IGNR      0         2       2         2       end;
  1547 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  1548 IGNR      1         5       5         5       temp_rec := g_rec;
  1549 IGNR      1         3       3         3       wt_assert.this (
  1552 IGNR      1         0       0         0       wt_assert.eq (
  1557 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQ NCLOB Sad Path 3';
  1558 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1559 IGNR      1     10439   10439     10439       eq (
  1563 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  1564 IGNR      1         6       6         6       temp_rec := g_rec;
  1566 IGNR      1      5433    5433      5433       wt_assert.isnotnull (
  1569 IGNR      1        18      18        18       wt_assert.isnull (
  1572 IGNR      1        38      38        38       wt_assert.this (
  1576 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQ NCLOB Sad Path 4';
  1577 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1578 IGNR      1      5809    5809      5809       eq (
  1583 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1584 IGNR      1         5       5         5       temp_rec := g_rec;
  1586 IGNR      1      5453    5453      5453       wt_assert.isnotnull (
  1589 IGNR      1         3       3         3       wt_assert.isnull (
  1592 IGNR      1         1       1         1       wt_assert.this (
  1596 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQ BLOB Happy Path 1';
  1597 IGNR      1         1       1         1       eq (
  1601 IGNR      1         7       7         7       temp_rec := g_rec;
  1603 IGNR      1         1       1         1       wt_assert.isnotnull (
  1606 IGNR      1         0       0         0       wt_assert.this (
  1610 IGNR      1         1       1         1       wt_assert.isnotnull (
  1613 IGNR      1         0       0         0       wt_assert.this (
  1617 IGNR      1         1       1         1       wt_assert.isnotnull (
  1620 IGNR      1         1       1         1       wt_assert.this (
  1624 IGNR      1         0       0         0       wt_assert.isnotnull (
  1627 IGNR      1         0       0         0       wt_assert.this (
  1632 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ BLOB Happy Path 2';
  1633 IGNR      1         0       0         0       eq (
  1639 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ BLOB Happy Path 3';
  1640 IGNR      1         0       0         0       eq (
  1646 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQ BLOB Sad Path 1';
  1647 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1648 IGNR      1         0       0         0       eq (
  1652 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  1653 IGNR      1         5       5         5       temp_rec := g_rec;
  1655 IGNR      1         1       1         1       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1658 IGNR      1         1       1         1       wt_assert.isnotnull (
  1661 IGNR      1         1       1         1       wt_assert.this (
  1665 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ BLOB Sad Path 2';
  1666 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1668 IGNR      1         1       1         1          eq (
  1673 IGNR      0         0       0         0          l_found_exception := FALSE;
  1674 IGNR      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1675 IGNR      1         0       0         0          l_found_exception := TRUE;
  1676 IGNR      0         2       2         2       end;
  1678 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  1679 IGNR      1         4       4         4       temp_rec := g_rec;
  1680 IGNR      1         1       1         1       wt_assert.this (
  1683 IGNR      1         0       0         0       wt_assert.eq (
  1688 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ BLOB Sad Path 3';
  1689 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1690 IGNR      1         0       0         0       eq (
  1694 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  1695 IGNR      1         1       1         1       temp_rec := g_rec;
  1697 IGNR      1         0       0         0       wt_assert.isnotnull (
  1700 IGNR      1         0       0         0       wt_assert.isnull (
  1703 IGNR      1         1       1         1       wt_assert.this (
  1707 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQ BLOB Sad Path 4';
  1708 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1709 IGNR      1         0       0         0       eq (
  1714 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1715 IGNR      1         0       0         0       temp_rec := g_rec;
  1717 IGNR      1         0       0         0       wt_assert.isnotnull (
  1720 IGNR      1         0       0         0       wt_assert.isnull (
  1723 IGNR      1         1       1         1       wt_assert.this (
  1726 IGNR      1      3558    3558      3558    end t_eq;
  1736 UNKN      0        42       0         2 procedure isnotnull (
  1743 EXEC     82        36       0         2    g_rec.last_assert  := 'ISNOTNULL';
  1744 EXEC     82        17       0         1    g_rec.last_msg     := msg_in;
  1745 EXEC     82        34       1         1    g_rec.last_pass    := (check_this_in is not null);
  1746 EXEC     82       181       1        16    g_rec.last_details := 'Expected NOT NULL and got "' ||
  1748 EXEC     82        19       0         1    g_rec.raise_exception := raise_exc_in;
  1749 EXEC     82        15       0         1    process_assertion;
  1750 EXEC     80        18       0         1 end isnotnull;
  1753 UNKN      0         8       0         2 procedure isnotnull (
  1760 EXEC     13         9       0         1    isnotnull (msg_in        => msg_in
  1764 EXEC     12         4       0         1 end isnotnull;
  1767 UNKN      0       234       6        50 procedure isnotnull (
  1774 EXEC     13        19       1         4    g_rec.last_assert  := 'ISNOTNULL';
  1775 EXEC     13         6       0         1    g_rec.last_msg     := msg_in;
  1776 EXEC     13         8       0         1    g_rec.last_pass    := (check_this_in is not null);
  1777 EXEC     13     19114     342      8083    g_rec.last_details := 'Expected NOT NULL and got "' ||
  1779 EXEC     13        12       1         2    g_rec.raise_exception := raise_exc_in;
  1780 EXEC     13        11       0         2    process_assertion;
  1781 EXEC     12       712      50        69 end isnotnull;
  1784 UNKN      0         4       0         1 procedure isnotnull (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1791 EXEC      7         5       1         2    g_rec.last_assert  := 'ISNOTNULL';
  1792 EXEC      7         2       0         1    g_rec.last_msg     := msg_in;
  1793 EXEC      7         2       0         1    g_rec.last_pass    := (check_this_in is not null);
  1794 EXEC      7         0       0         0    if g_rec.last_pass
  1796 EXEC      5         3       0         1       g_rec.last_details := 'BLOB is NOT NULL';
  1798 EXEC      2         1       0         1       g_rec.last_details := 'BLOB is NULL';
  1800 EXEC      7         2       1         1    g_rec.raise_exception := raise_exc_in;
  1801 EXEC      7         0       0         0    process_assertion;
  1802 EXEC      6         0       0         0 end isnotnull;
  1806 IGNR      0        22      22        22    procedure t_isnotnull
  1811 IGNR      1         2       2         2       wt_assert.g_testcase := 'ISNOTNULL VARCHAR2 Happy Path 1';
  1812 IGNR      1         0       0         0       isnotnull (
  1815 IGNR      1         2       2         2       temp_rec := g_rec;
  1817 IGNR      1         0       0         0       wt_assert.eq (
  1821 IGNR      1         0       0         0       wt_assert.eq (
  1826 IGNR      1         0       0         0       wt_assert.eq (
  1830 IGNR      1         0       0         0       wt_assert.eq (
  1835 IGNR      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL VARCHAR2 Sad Path 1';
  1836 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1837 IGNR      1         0       0         0       isnotnull (
  1840 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  1841 IGNR      1         1       1         1       wt_assert.eq (
  1846 IGNR      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL VARCHAR2 Sad Path 2';
  1847 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1849 IGNR      1         0       0         0          isnotnull (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1853 IGNR      0         0       0         0          l_found_exception := FALSE;
  1854 IGNR      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1855 IGNR      1         0       0         0          l_found_exception := TRUE;
  1856 IGNR      0         2       2         2       end;
  1858 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  1859 IGNR      1         0       0         0       wt_assert.eq (
  1863 IGNR      1         0       0         0       wt_assert.eq (
  1868 IGNR      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL BOOLEAN Happy Path 1';
  1869 IGNR      1         0       0         0       isnotnull (
  1873 IGNR      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL BOOLEAN Sad Path 1';
  1874 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1875 IGNR      1         0       0         0       isnotnull (
  1878 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  1879 IGNR      1         0       0         0       wt_assert.eq (
  1884 IGNR      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL BOOLEAN Sad Path 2';
  1885 IGNR      1         1       1         1       wtplsql_skip_save := TRUE;
  1887 IGNR      1         0       0         0          isnotnull (
  1891 IGNR      0         0       0         0          l_found_exception := FALSE;
  1892 IGNR      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1893 IGNR      1         0       0         0          l_found_exception := TRUE;
  1894 IGNR      0         1       1         1       end;
  1896 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  1897 IGNR      1         0       0         0       wt_assert.eq (
  1901 IGNR      1         1       1         1       wt_assert.eq (
  1906 IGNR      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL CLOB Happy Path 1';
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1907 IGNR      1         1       1         1       isnotnull (
  1910 IGNR      1         3       3         3       temp_rec := g_rec;
  1912 IGNR      1         2       2         2       wt_assert.eq (
  1916 IGNR      1         1       1         1       wt_assert.eq (
  1921 IGNR      1         1       1         1       wt_assert.eq (
  1925 IGNR      1         1       1         1       wt_assert.isnotnull (
  1928 IGNR      1        18      18        18       wt_assert.this (
  1933 IGNR      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL CLOB Sad Path 1';
  1934 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1935 IGNR      1         1       1         1       isnotnull (
  1938 IGNR      1         1       1         1       wtplsql_skip_save := FALSE;
  1939 IGNR      1         1       1         1       wt_assert.eq (
  1944 IGNR      1         1       1         1       wt_assert.g_testcase := 'ISNOTNULL CLOB Sad Path 2';
  1945 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1947 IGNR      1         0       0         0          isnotnull (
  1951 IGNR      0         0       0         0          l_found_exception := FALSE;
  1952 IGNR      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1953 IGNR      1         0       0         0          l_found_exception := TRUE;
  1954 IGNR      0         2       2         2       end;
  1956 IGNR      1         1       1         1       wtplsql_skip_save := FALSE;
  1957 IGNR      1         1       1         1       wt_assert.eq (
  1961 IGNR      1         0       0         0       wt_assert.eq (
  1966 IGNR      1         1       1         1       wt_assert.g_testcase := 'ISNOTNULL BLOB Happy Path 1';
  1967 IGNR      1         0       0         0       isnotnull (
  1970 IGNR      1         1       1         1       temp_rec := g_rec;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1972 IGNR      1         0       0         0       wt_assert.eq (
  1976 IGNR      1         0       0         0       wt_assert.eq (
  1981 IGNR      1         0       0         0       wt_assert.eq (
  1985 IGNR      1         1       1         1       wt_assert.eq (
  1990 IGNR      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL BLOB Sad Path 1';
  1991 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  1992 IGNR      1         0       0         0       isnotnull (
  1995 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  1996 IGNR      1         0       0         0       wt_assert.eq (
  2001 IGNR      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL BLOB Sad Path 2';
  2002 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  2004 IGNR      1         1       1         1          isnotnull (
  2008 IGNR      0         0       0         0          l_found_exception := FALSE;
  2009 IGNR      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2010 IGNR      1         0       0         0          l_found_exception := TRUE;
  2011 IGNR      0         0       0         0       end;
  2013 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  2014 IGNR      1         0       0         0       wt_assert.eq (
  2018 IGNR      1         0       0         0       wt_assert.eq (
  2022 IGNR      1         3       3         3    end t_isnotnull;
  2028 UNKN      0        10       0         1 procedure isnull (
  2035 EXEC     18         7       0         1    g_rec.last_assert  := 'ISNULL';
  2036 EXEC     18         3       0         1    g_rec.last_msg     := msg_in;
  2037 EXEC     18         4       0         1    g_rec.last_pass    := (check_this_in is null);
  2038 EXEC     18        16       1         2    g_rec.last_details := 'Expected NULL and got "' ||
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2040 EXEC     18         2       0         1    g_rec.raise_exception := raise_exc_in;
  2041 EXEC     18         1       0         1    process_assertion;
  2042 EXEC     16         0       0         0 end isnull;
  2045 UNKN      0         3       1         1 procedure isnull (
  2052 EXEC      6         4       1         1    isnull (msg_in        => msg_in
  2056 EXEC      5         1       0         1 end isnull;
  2059 UNKN      0        52       4         9 procedure isnull (
  2066 EXEC      7         5       0         1    g_rec.last_assert  := 'ISNULL';
  2067 EXEC      7         2       0         1    g_rec.last_msg     := msg_in;
  2068 EXEC      7         1       0         1    g_rec.last_pass    := (check_this_in is null);
  2069 EXEC      7      8349     399      2983    g_rec.last_details := 'Expected NULL and got "' ||
  2071 EXEC      7         7       1         1    g_rec.raise_exception := raise_exc_in;
  2072 EXEC      7         5       1         1    process_assertion;
  2073 EXEC      6       358      52        80 end isnull;
  2076 UNKN      0         2       0         1 procedure isnull (
  2083 EXEC      5         4       1         1    g_rec.last_assert  := 'ISNULL';
  2084 EXEC      5         1       0         1    g_rec.last_msg     := msg_in;
  2085 EXEC      5         1       0         1    g_rec.last_pass    := (check_this_in is null);
  2086 EXEC      5         0       0         0    if g_rec.last_pass
  2088 EXEC      3         2       1         1       g_rec.last_details := 'BLOB is NULL';
  2090 EXEC      2         1       0         1       g_rec.last_details := 'BLOB is NOT NULL';
  2092 EXEC      5         0       0         0    g_rec.raise_exception := raise_exc_in;
  2093 EXEC      5         1       0         1    process_assertion;
  2094 EXEC      4         1       0         1 end isnull;
  2098 IGNR      0         8       8         8    procedure t_isnull
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2103 IGNR      1         1       1         1       wt_assert.g_testcase := 'ISNULL VARCHAR2 Happy Path 1';
  2104 IGNR      1         0       0         0       isnull (
  2107 IGNR      1         1       1         1       temp_rec := g_rec;
  2109 IGNR      1         0       0         0       wt_assert.eq (
  2113 IGNR      1         0       0         0       wt_assert.eq (
  2118 IGNR      1         0       0         0       wt_assert.eq (
  2122 IGNR      1         1       1         1       wt_assert.eq (
  2127 IGNR      1         0       0         0       wt_assert.g_testcase := 'ISNULL VARCHAR2 Sad Path 1';
  2128 IGNR      1         1       1         1       wtplsql_skip_save := TRUE;
  2129 IGNR      1         0       0         0       isnull (
  2132 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  2133 IGNR      1         0       0         0       wt_assert.eq (
  2138 IGNR      1         1       1         1       wt_assert.g_testcase := 'ISNULL VARCHAR2 Sad Path 2';
  2139 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  2141 IGNR      1         0       0         0          isnull (
  2145 IGNR      0         0       0         0          l_found_exception := FALSE;
  2146 IGNR      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2147 IGNR      1         1       1         1          l_found_exception := TRUE;
  2148 IGNR      0         1       1         1       end;
  2149 IGNR      1         1       1         1       wtplsql_skip_save := FALSE;
  2151 IGNR      1         0       0         0       wt_assert.eq (
  2155 IGNR      1         1       1         1       wt_assert.eq (
  2160 IGNR      1         1       1         1       wt_assert.g_testcase := 'ISNULL BOOLEAN Happy Path 1';
  2161 IGNR      1         1       1         1       isnull (
  2165 IGNR      1        41      41        41       wt_assert.g_testcase := 'ISNULL BOOLEAN Sad Path 1';
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2166 IGNR      1         1       1         1       wtplsql_skip_save := TRUE;
  2167 IGNR      1         0       0         0       isnull (
  2170 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  2171 IGNR      1         1       1         1       wt_assert.eq (
  2176 IGNR      1         0       0         0       wt_assert.g_testcase := 'ISNULL BOOLEAN Sad Path 2';
  2177 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  2179 IGNR      1         0       0         0          isnull (
  2183 IGNR      0         0       0         0          l_found_exception := FALSE;
  2184 IGNR      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2185 IGNR      1         0       0         0          l_found_exception := TRUE;
  2186 IGNR      0         1       1         1       end;
  2187 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  2189 IGNR      1         0       0         0       wt_assert.eq (
  2193 IGNR      1         1       1         1       wt_assert.eq (
  2198 IGNR      1         1       1         1       wt_assert.g_testcase := 'ISNULL CLOB Happy Path 1';
  2199 IGNR      1         1       1         1       isnull (
  2202 IGNR      1         1       1         1       temp_rec := g_rec;
  2204 IGNR      1         1       1         1       wt_assert.eq (
  2208 IGNR      1         0       0         0       wt_assert.eq (
  2213 IGNR      1         0       0         0       wt_assert.eq (
  2217 IGNR      1         1       1         1       wt_assert.eq (
  2222 IGNR      1         0       0         0       wt_assert.g_testcase := 'ISNULL CLOB Sad Path 1';
  2223 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  2224 IGNR      1         1       1         1       isnull (
  2227 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2228 IGNR      1         1       1         1       wt_assert.eq (
  2233 IGNR      1         0       0         0       wt_assert.g_testcase := 'ISNULL CLOB Sad Path 2';
  2234 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  2236 IGNR      1         0       0         0          isnull (
  2240 IGNR      0         0       0         0          l_found_exception := FALSE;
  2241 IGNR      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2242 IGNR      1         1       1         1          l_found_exception := TRUE;
  2243 IGNR      0         1       1         1       end;
  2245 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  2246 IGNR      1         1       1         1       wt_assert.eq (
  2250 IGNR      1         0       0         0       wt_assert.eq (
  2255 IGNR      1         0       0         0       wt_assert.g_testcase := 'ISNULL BLOB Happy Path 1';
  2256 IGNR      1         0       0         0       isnull (
  2259 IGNR      1         1       1         1       temp_rec := g_rec;
  2261 IGNR      1         0       0         0       wt_assert.eq (
  2265 IGNR      1         0       0         0       wt_assert.eq (
  2270 IGNR      1         0       0         0       wt_assert.eq (
  2274 IGNR      1         1       1         1       wt_assert.eq (
  2279 IGNR      1         0       0         0       wt_assert.g_testcase := 'ISNULL BLOB Sad Path 1';
  2280 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  2281 IGNR      1         1       1         1       isnull (
  2284 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  2285 IGNR      1         0       0         0       wt_assert.eq (
  2290 IGNR      1         0       0         0       wt_assert.g_testcase := 'ISNULL BLOB Sad Path 2';
  2291 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2293 IGNR      1         1       1         1          isnull (
  2297 IGNR      0         0       0         0          l_found_exception := FALSE;
  2298 IGNR      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2299 IGNR      1         0       0         0          l_found_exception := TRUE;
  2300 IGNR      0         1       1         1       end;
  2302 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  2303 IGNR      1         0       0         0       wt_assert.eq (
  2307 IGNR      1         1       1         1       wt_assert.eq (
  2311 IGNR      1         2       2         2    end t_isnull;
  2317 EXEC      8        23       1         6 procedure raises (
  2326 EXEC      8      9020       0      2454       execute immediate check_call_in;
  2327 EXEC      5         0       0         0    exception when OTHERS then
  2328 EXEC      5       862      28       528       l_sqlerrm := SQLERRM;
  2329 EXEC      5       265      36        96       l_errstack := substr(dbms_utility.format_error_stack  ||
  2332 UNKN      0         5       0         2    end;
  2334 EXEC      8        11       1         2    g_rec.last_assert  := 'RAISES/THROWS';
  2335 EXEC      8         3       0         1    g_rec.last_msg     := msg_in;
  2336 EXEC      8         2       0         1    if against_exc_in is null AND l_sqlerrm is null
  2339 EXEC      2         1       1         1       g_rec.last_pass := TRUE;
  2340 UNKN      0         3       0         1    elsif against_exc_in is null OR l_sqlerrm is null
  2344 EXEC      1         0       0         0       g_rec.last_pass := FALSE;
  2347 EXEC      5        39       6        10       g_rec.last_pass := l_sqlerrm like '%' || against_exc_in || '%';
  2349 EXEC      8         0       0         0    if against_exc_in is null
  2351 EXEC      2         3       1         2       g_rec.last_details := 'No exception was expected' ||
  2354 EXEC      6         2       0         1    elsif l_sqlerrm is null
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2356 EXEC      1         2       2         2       g_rec.last_details := 'Expected exception "%'           || against_exc_in ||
  2359 EXEC      5         6       1         2       g_rec.last_details := 'Expected exception "%'           || against_exc_in ||
  2363 EXEC      8         4       0         1    if not g_rec.last_pass
  2365 EXEC      2        10       4         6       g_rec.last_details :=
  2368 EXEC      8         6       1         1    process_assertion;
  2369 EXEC      8        17       2         5 end raises;
  2371 UNKN      0         3       1         1 procedure raises (
  2377 EXEC      3         2       1         1    if against_exc_in is null
  2379 EXEC      1         1       1         1       raises (
  2384 EXEC      2        19       8        11       raises (
  2389 EXEC      3         0       0         0 end raises;
  2391 UNKN      0         1       1         1 procedure throws (
  2397 EXEC      1         1       1         1    raises (
  2401 EXEC      1         1       1         1 end throws;
  2403 UNKN      0         1       1         1 procedure throws (
  2409 EXEC      1         1       1         1    raises (
  2413 EXEC      1         0       0         0 end throws;
  2417 IGNR      0         1       1         1    procedure t_raises
  2421 IGNR      1         1       1         1       wt_assert.g_testcase := 'Raises Tests Happy Path 1';
  2422 IGNR      1         0       0         0       raises (
  2426 IGNR      1         1       1         1       temp_rec := g_rec;
  2428 IGNR      1         1       1         1       wt_assert.eq (
  2432 IGNR      1         1       1         1       wt_assert.eq (
  2437 IGNR      1         0       0         0       wt_assert.eq (
  2441 IGNR      1         5       5         5       wt_assert.eq (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2451 IGNR      1         0       0         0       wt_assert.g_testcase := 'Raises Tests Happy Path 2';
  2452 IGNR      1         1       1         1       raises (
  2456 IGNR      1         5       5         5       temp_rec := g_rec;
  2457 IGNR      1         8       8         8       wt_assert.eq (
  2468 IGNR      1         0       0         0       throws (
  2472 IGNR      1         2       2         2       temp_rec := g_rec;
  2473 IGNR      1         5       5         5       wt_assert.eq (
  2484 IGNR      1         0       0         0       throws (
  2488 IGNR      1         2       2         2       temp_rec := g_rec;
  2489 IGNR      1         5       5         5       wt_assert.eq (
  2500 IGNR      1         0       0         0       wt_assert.g_testcase := 'Raises Tests Happy Path 3';
  2501 IGNR      1         0       0         0       raises (
  2505 IGNR      1         1       1         1       temp_rec := g_rec;
  2506 IGNR      1         2       2         2       wt_assert.eq (
  2513 IGNR      1         0       0         0       raises (
  2517 IGNR      1         1       1         1       temp_rec := g_rec;
  2518 IGNR      1         1       1         1       wt_assert.eq (
  2525 IGNR      1         0       0         0       wt_assert.g_testcase := 'Raises Tests Sad Path 1';
  2526 IGNR      1         1       1         1       wtplsql_skip_save := TRUE;
  2527 IGNR      1         0       0         0       raises (
  2531 IGNR      1         5       5         5       temp_rec := g_rec;
  2532 IGNR      1         1       1         1       wtplsql_skip_save := FALSE;
  2534 IGNR      1         1       1         1       wt_assert.eq (
  2538 IGNR      1         1       1         1       wt_assert.isnotnull (
  2541 IGNR      1         6       6         6       wt_assert.this (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2547 IGNR      1         0       0         0       wt_assert.g_testcase := 'Raises Tests Sad Path 2';
  2548 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  2549 IGNR      1         0       0         0       raises (
  2553 IGNR      1         2       2         2       temp_rec := g_rec;
  2554 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  2556 IGNR      1         0       0         0       wt_assert.eq (
  2560 IGNR      1         2       2         2       wt_assert.eq (
  2566 IGNR      1         1       1         1    end t_raises;
  2572 EXEC      6        14       1         2 procedure eqqueryvalue (
  2584 EXEC      6         2       1         1    g_rec.last_assert     := 'EQQUERYVALUE';
  2585 EXEC      6         2       0         1    g_rec.last_msg        := msg_in;
  2586 EXEC      6      1013      50       388    open l_rc for check_query_in;
  2587 EXEC      5       321      33       110    fetch l_rc into l_rc_buff;
  2588 EXEC      5        81      10        25    close l_rc;
  2589 EXEC      5         7       0         2    g_rec.last_pass    := (   l_rc_buff = against_value_in
  2590 UNKN      0         5       1         2                           or (    l_rc_buff is null
  2593 EXEC      5        26       4         6    g_rec.last_details := 'Expected "' || substr(against_value_in,1,1000) ||
  2596 EXEC      5         1       0         1    g_rec.raise_exception := raise_exc_in;
  2597 EXEC      5         1       0         1    process_assertion;
  2598 EXEC      2         0       0         0 exception when others then
  2599 EXEC      2       183      87        96    l_errstack := substr(dbms_utility.format_error_stack ||
  2601 EXEC      2         5       2         3    g_rec.last_details := 'Exception raised for Query: ' ||
  2604 EXEC      2         0       0         0    g_rec.last_pass    := FALSE;
  2605 EXEC      2         1       1         1    g_rec.raise_exception := raise_exc_in;
  2606 EXEC      2         0       0         0    process_assertion;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2607 EXEC      5        40       1        31 end eqqueryvalue;
  2610 EXEC      4        44      10        13 procedure eqqueryvalue (
  2622 EXEC      4         2       1         1    g_rec.last_assert  := 'EQQUERYVALUE';
  2623 EXEC      4         2       1         1    g_rec.last_msg     := msg_in;
  2624 EXEC      4      1417     165       727    open l_rc for check_query_in;
  2625 EXEC      3       584     176       212    fetch l_rc into l_rc_buff;
  2626 EXEC      3       103      33        37    close l_rc;
  2627 EXEC      3     89160       2     53627    g_rec.last_pass    := (xmltype.getclobval(l_rc_buff)       =
  2629 EXEC      3     54101       8     22727    g_rec.last_details := 'Expected "' || substr(xmltype.getclobval(against_value_in),1,1000) ||
  2632 EXEC      3         4       1         2    g_rec.raise_exception := raise_exc_in;
  2633 EXEC      3         4       1         2    process_assertion;
  2634 EXEC      2         0       0         0 exception when others then
  2635 EXEC      2       150      56        94    l_errstack := substr(dbms_utility.format_error_stack ||
  2637 EXEC      2         5       2         3    g_rec.last_details := 'Exception raised for Query: ' ||
  2640 EXEC      2         1       0         1    g_rec.last_pass    := FALSE;
  2641 EXEC      2         0       0         0    g_rec.raise_exception := raise_exc_in;
  2642 EXEC      2         1       0         1    process_assertion;
  2643 EXEC      3       193      42        78 end eqqueryvalue;
  2646 EXEC      4        41       1        10 procedure eqqueryvalue (
  2658 EXEC      4         2       0         1    g_rec.last_assert  := 'EQQUERYVALUE';
  2659 EXEC      4         3       0         1    g_rec.last_msg     := msg_in;
  2660 EXEC      4       761      68       349    open l_rc for check_query_in;
  2661 EXEC      3       219      58        81    fetch l_rc into l_rc_buff;
  2662 EXEC      3        51      11        20    close l_rc;
  2663 EXEC      3      8971       0      7330    g_rec.last_pass    := (   l_rc_buff = against_value_in
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2664 UNKN      0         4       2         2                           or (    l_rc_buff is null
  2667 EXEC      3      9808    2222      4879    g_rec.last_details := 'Expected "' || substr(against_value_in,1,1000) ||
  2670 EXEC      3         4       1         2    g_rec.raise_exception := raise_exc_in;
  2671 EXEC      3         3       1         1    process_assertion;
  2672 EXEC      2         0       0         0 exception when others then
  2673 EXEC      2       148      51        97    l_errstack := substr(dbms_utility.format_error_stack ||
  2675 EXEC      2         7       2         5    g_rec.last_details := 'Exception raised for Query: ' ||
  2678 EXEC      2         0       0         0    g_rec.last_pass    := FALSE;
  2679 EXEC      2         0       0         0    g_rec.raise_exception := raise_exc_in;
  2680 EXEC      2         2       1         1    process_assertion;
  2681 EXEC      3       154      27        64 end eqqueryvalue;
  2684 EXEC      5        31       1         8 procedure eqqueryvalue (
  2697 EXEC      5         3       1         1    g_rec.last_assert  := 'EQQUERYVALUE';
  2698 EXEC      5         1       0         1    g_rec.last_msg     := msg_in;
  2699 EXEC      5     11803      65     11113    open l_rc for check_query_in;
  2700 EXEC      4       249      54        74    fetch l_rc into l_rc_buff;
  2701 EXEC      4        76      11        28    close l_rc;
  2702 EXEC      4        17       1         5    compare_results    := nvl(DBMS_LOB.COMPARE(l_rc_buff, against_value_in),-1);
  2703 EXEC      4        10       0         3    g_rec.last_pass    := (   (compare_results = 0)
  2704 UNKN      0         3       1         1                           or (    l_rc_buff is null
  2707 EXEC      4        30       5        12    g_rec.last_details := 'DBMS_LOB.COMPARE between BLOB and Query: ' ||
  2710 EXEC      4         1       0         1    g_rec.raise_exception := raise_exc_in;
  2711 EXEC      4         3       1         1    process_assertion;
  2712 EXEC      2         0       0         0 exception when others then
  2713 EXEC      2       191      85       106    l_errstack := substr(dbms_utility.format_error_stack ||
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2715 EXEC      2         8       2         6    g_rec.last_details := 'Exception raised for Query: ' ||
  2718 EXEC      2         2       1         1    g_rec.last_pass    := FALSE;
  2719 EXEC      2         1       1         1    g_rec.raise_exception := raise_exc_in;
  2720 EXEC      2         0       0         0    process_assertion;
  2721 EXEC      4        68       1        54 end eqqueryvalue;
  2725 IGNR      0        14      14        14    procedure t_eqqueryvalue
  2730 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE VARCHAR2 Happy Path 1';
  2731 IGNR      1         1       1         1       eqqueryvalue (
  2736 IGNR      1         1       1         1       temp_rec := g_rec;
  2738 IGNR      1         0       0         0       wt_assert.eq (
  2742 IGNR      1         0       0         0       wt_assert.eq (
  2747 IGNR      1         0       0         0       wt_assert.eq (
  2751 IGNR      1         0       0         0       wt_assert.eq (
  2756 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE VARCHAR2 Happy Path 2';
  2757 IGNR      1         0       0         0       eqqueryvalue (
  2763 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE VARCHAR2 Sad Path 1';
  2764 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  2765 IGNR      1         0       0         0       eqqueryvalue (
  2769 IGNR      1         1       1         1       temp_rec := g_rec;
  2770 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  2771 IGNR      1         1       1         1       wt_assert.eq (
  2776 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE VARCHAR2 Sad Path 2';
  2777 IGNR      1         1       1         1       wtplsql_skip_save := TRUE;
  2779 IGNR      1         0       0         0          eqqueryvalue (
  2784 IGNR      0         0       0         0          l_found_exception := FALSE;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2785 IGNR      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2786 IGNR      1         1       1         1          l_found_exception := TRUE;
  2787 IGNR      0         1       1         1       end;
  2789 IGNR      1         1       1         1       temp_rec := g_rec;
  2790 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  2791 IGNR      1         0       0         0       wt_assert.eq (
  2795 IGNR      1         1       1         1       wt_assert.eq (
  2800 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE VARCHAR2 Sad Path 3';
  2801 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  2802 IGNR      1         1       1         1       eqqueryvalue (
  2806 IGNR      1         3       3         3       temp_rec := g_rec;
  2807 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  2809 IGNR      1         0       0         0       wt_assert.eq (
  2813 IGNR      1         1       1         1       wt_assert.isnotnull (
  2816 IGNR      1        12      12        12       wt_assert.this (
  2822 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE XMLTYPE Happy Path 1';
  2823 IGNR      1         0       0         0       eqqueryvalue (
  2827 IGNR      1         2       2         2       temp_rec := g_rec;
  2829 IGNR      1         0       0         0       wt_assert.eq (
  2833 IGNR      1         0       0         0       wt_assert.eq (
  2838 IGNR      1         0       0         0       wt_assert.eq (
  2842 IGNR      1         1       1         1       wt_assert.isnotnull (
  2845 IGNR      1        18      18        18       wt_assert.this (
  2850 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE XMLTYPE Sad Path 1';
  2851 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2852 IGNR      1         0       0         0       eqqueryvalue (
  2856 IGNR      1         5       5         5       temp_rec := g_rec;
  2857 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  2859 IGNR      1         0       0         0       wt_assert.eq (
  2863 IGNR      1         1       1         1       wt_assert.isnotnull (
  2866 IGNR      1        13      13        13       wt_assert.this (
  2872 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE XMLTYPE Sad Path 2';
  2873 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  2875 IGNR      1         1       1         1          eqqueryvalue (
  2880 IGNR      0         0       0         0          l_found_exception := FALSE;
  2881 IGNR      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2882 IGNR      1         1       1         1          l_found_exception := TRUE;
  2883 IGNR      0         1       1         1       end;
  2885 IGNR      1         4       4         4       temp_rec := g_rec;
  2886 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  2887 IGNR      1         0       0         0       wt_assert.eq (
  2891 IGNR      1         1       1         1       wt_assert.eq (
  2896 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE XMLTYPE Sad Path 3';
  2897 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  2898 IGNR      1         0       0         0       eqqueryvalue (
  2902 IGNR      1         1       1         1       temp_rec := g_rec;
  2903 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  2905 IGNR      1         1       1         1       wt_assert.eq (
  2909 IGNR      1         0       0         0       wt_assert.isnotnull (
  2912 IGNR      1         8       8         8       wt_assert.this (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2918 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE CLOB Happy Path 1';
  2919 IGNR      1         1       1         1       eqqueryvalue (
  2924 IGNR      1         4       4         4       temp_rec := g_rec;
  2926 IGNR      1         1       1         1       wt_assert.eq (
  2930 IGNR      1         1       1         1       wt_assert.eq (
  2935 IGNR      1         0       0         0       wt_assert.eq (
  2939 IGNR      1         0       0         0       wt_assert.isnotnull (
  2942 IGNR      1        18      18        18       wt_assert.this (
  2947 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE CLOB Happy Path 2';
  2948 IGNR      1         0       0         0       eqqueryvalue (
  2953 IGNR      1         0       0         0       temp_rec := g_rec;
  2955 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE CLOB Sad Path 1';
  2956 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  2957 IGNR      1         1       1         1       eqqueryvalue (
  2961 IGNR      1         6       6         6       temp_rec := g_rec;
  2962 IGNR      1         1       1         1       wtplsql_skip_save := FALSE;
  2964 IGNR      1         1       1         1       wt_assert.eq (
  2968 IGNR      1         1       1         1       wt_assert.isnotnull (
  2971 IGNR      1        13      13        13       wt_assert.this (
  2977 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE CLOB Sad Path 2';
  2978 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  2980 IGNR      1         0       0         0          eqqueryvalue (
  2985 IGNR      0         0       0         0          l_found_exception := FALSE;
  2986 IGNR      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2987 IGNR      1         0       0         0          l_found_exception := TRUE;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2988 IGNR      0         2       2         2       end;
  2990 IGNR      1         5       5         5       temp_rec := g_rec;
  2991 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  2992 IGNR      1         1       1         1       wt_assert.eq (
  2996 IGNR      1         1       1         1       wt_assert.eq (
  3001 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE CLOB Sad Path 3';
  3002 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  3003 IGNR      1         1       1         1       eqqueryvalue (
  3007 IGNR      1         2       2         2       temp_rec := g_rec;
  3008 IGNR      1         1       1         1       wtplsql_skip_save := FALSE;
  3010 IGNR      1         0       0         0       wt_assert.eq (
  3014 IGNR      1         1       1         1       wt_assert.isnotnull (
  3017 IGNR      1         8       8         8       wt_assert.this (
  3023 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE BLOB Happy Path 1';
  3024 IGNR      1         0       0         0       eqqueryvalue (
  3029 IGNR      1         2       2         2       temp_rec := g_rec;
  3031 IGNR      1         1       1         1       wt_assert.eq (
  3035 IGNR      1         1       1         1       wt_assert.eq (
  3040 IGNR      1         1       1         1       wt_assert.eq (
  3044 IGNR      1         2       2         2       wt_assert.eq (
  3050 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE BLOB Happy Path 2';
  3051 IGNR      1         1       1         1       eqqueryvalue (
  3057 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE BLOB Sad Path 1';
  3058 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  3059 IGNR      1         0       0         0       eqqueryvalue (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3063 IGNR      1         2       2         2       temp_rec := g_rec;
  3064 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  3066 IGNR      1         1       1         1       wt_assert.eq (
  3070 IGNR      1         1       1         1       wt_assert.eq (
  3076 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE BLOB Sad Path 2';
  3077 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  3079 IGNR      1         1       1         1          eqqueryvalue (
  3084 IGNR      0         0       0         0          l_found_exception := FALSE;
  3085 IGNR      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  3086 IGNR      1         1       1         1          l_found_exception := TRUE;
  3087 IGNR      0         2       2         2       end;
  3089 IGNR      1         3       3         3       temp_rec := g_rec;
  3090 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  3091 IGNR      1         0       0         0       wt_assert.eq (
  3095 IGNR      1         0       0         0       wt_assert.eq (
  3100 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE BLOB Sad Path 3';
  3101 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  3102 IGNR      1         0       0         0       eqqueryvalue (
  3106 IGNR      1         5       5         5       temp_rec := g_rec;
  3107 IGNR      1         1       1         1       wtplsql_skip_save := FALSE;
  3109 IGNR      1         0       0         0       wt_assert.eq (
  3113 IGNR      1         0       0         0       wt_assert.isnotnull (
  3116 IGNR      1         8       8         8       wt_assert.this (
  3121 IGNR      1         2       2         2    end t_eqqueryvalue;
  3126 EXCL      0         0       0         0 procedure eqquery (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3133 EXEC      4         4       1         1    g_rec.last_assert  := 'EQQUERY';
  3134 EXEC      4         3       0         1    g_rec.last_msg     := msg_in;
  3135 EXEC      4         0       0         0    compare_queries(check_query_in, against_query_in);
  3136 EXEC      4         0       0         0    g_rec.raise_exception := raise_exc_in;
  3137 EXEC      4         4       1         1    process_assertion;
  3138 EXEC      3         1       1         1 end eqquery;
  3142 IGNR      0         2       2         2    procedure t_eqquery
  3147 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQQUERY Tests Happy Path 1';
  3148 IGNR      1         0       0         0       wt_assert.eqquery (
  3152 IGNR      1         2       2         2       temp_rec := g_rec;
  3154 IGNR      1         1       1         1       wt_assert.eq (
  3158 IGNR      1         0       0         0       wt_assert.eq (
  3163 IGNR      1         1       1         1       wt_assert.eq (
  3167 IGNR      1         1       1         1       wt_assert.isnotnull (
  3170 IGNR      1         3       3         3       wt_assert.this (
  3175 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQQUERY Tests Sad Path 1';
  3176 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  3177 IGNR      1         1       1         1       eqquery (
  3181 IGNR      1         5       5         5       temp_rec := g_rec;
  3182 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  3184 IGNR      1         1       1         1       wt_assert.eq (
  3188 IGNR      1         0       0         0       wt_assert.isnotnull (
  3191 IGNR      1         3       3         3       wt_assert.this (
  3196 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQQUERY Tests Sad Path 2';
  3197 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3199 IGNR      1         1       1         1          eqquery (
  3204 IGNR      0         0       0         0          l_found_exception := FALSE;
  3205 IGNR      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  3206 IGNR      1         0       0         0          l_found_exception := TRUE;
  3207 IGNR      0         1       1         1       end;
  3208 IGNR      1         5       5         5       temp_rec := g_rec;
  3209 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  3211 IGNR      1         0       0         0       wt_assert.eq (
  3215 IGNR      1         0       0         0       wt_assert.eq (
  3220 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQQUERY Tests Sad Path 3';
  3221 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  3222 IGNR      1         1       1         1       eqquery (
  3226 IGNR      1         5       5         5       temp_rec := g_rec;
  3227 IGNR      1         1       1         1       wtplsql_skip_save := FALSE;
  3229 IGNR      1         1       1         1       wt_assert.eq (
  3233 IGNR      1         1       1         1       wt_assert.isnotnull (
  3236 IGNR      1        10      10        10       wt_assert.this (
  3240 IGNR      1         1       1         1    end t_eqquery;
  3245 UNKN      0         7       1         2 procedure eqtable (
  3253 EXEC      5         5       1         2    l_check_query    varchar2(16000) := 'select * from ' || check_this_in;
  3254 EXEC      5         3       1         1    l_against_query  varchar2(16000) := 'select * from ' || against_this_in;
  3256 EXEC      5         3       1         1    g_rec.last_assert  := 'EQTABLE';
  3257 EXEC      5         2       0         1    g_rec.last_msg     := msg_in;
  3258 EXEC      5         0       0         0    if check_where_in is not null
  3260 EXEC      3         3       1         1       l_check_query := l_check_query || ' where ' || check_where_in;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3262 EXEC      3         1       0         1    if against_where_in is not null
  3264 EXEC      3         0       0         0       l_against_query := l_against_query || ' where ' || against_where_in;
  3266 EXEC      5         2       0         1    compare_queries(l_check_query, l_against_query);
  3267 EXEC      5         3       1         1    g_rec.raise_exception := raise_exc_in;
  3268 EXEC      5         5       1         1    process_assertion;
  3269 EXEC      4         0       0         0 end eqtable;
  3273 IGNR      0         3       3         3    procedure t_eqtable
  3278 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQTABLE Tests Happy Path 1';
  3279 IGNR      1         0       0         0       wt_assert.eqtable (
  3285 IGNR      1         1       1         1       temp_rec := g_rec;
  3287 IGNR      1         0       0         0       wt_assert.eq (
  3291 IGNR      1         1       1         1       wt_assert.eq (
  3296 IGNR      1         1       1         1       wt_assert.eq (
  3300 IGNR      1         1       1         1       wt_assert.isnotnull (
  3303 IGNR      1         4       4         4       wt_assert.this (
  3308 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQTABLE Tests Happy Path 2';
  3309 IGNR      1         8       1         4       eqtable (
  3316 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQTABLE Sad Path 1';
  3317 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  3318 IGNR      1         4       1         3       eqtable (
  3324 IGNR      1         4       4         4       temp_rec := g_rec;
  3325 IGNR      1         1       1         1       wtplsql_skip_save := FALSE;
  3327 IGNR      1         1       1         1       wt_assert.eq (
  3331 IGNR      1         0       0         0       wt_assert.isnotnull (
  3334 IGNR      1         7       7         7       wt_assert.this (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3339 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQTABLE Sad Path 2';
  3340 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  3342 IGNR      1         7       3         4          eqtable (
  3349 IGNR      0         0       0         0          l_found_exception := FALSE;
  3350 IGNR      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  3351 IGNR      1         1       1         1          l_found_exception := TRUE;
  3352 IGNR      0         2       2         2       end;
  3354 IGNR      1         5       5         5       temp_rec := g_rec;
  3355 IGNR      1         1       1         1       wtplsql_skip_save := FALSE;
  3356 IGNR      1         1       1         1       wt_assert.eq (
  3360 IGNR      1         0       0         0       wt_assert.eq (
  3365 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQTABLE Sad Path 3';
  3366 IGNR      1         1       1         1       wtplsql_skip_save := TRUE;
  3367 IGNR      1         1       1         1       eqtable (
  3371 IGNR      1         4       4         4       temp_rec := g_rec;
  3372 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  3374 IGNR      1         0       0         0       wt_assert.eq (
  3378 IGNR      1         0       0         0       wt_assert.isnotnull (
  3381 IGNR      1        10      10        10       wt_assert.this (
  3385 IGNR      1         2       2         2    end t_eqtable;
  3390 UNKN      0         9       1         2 procedure eqtabcount (
  3398 EXEC      6         9       1         2    l_query      varchar2(16000) := 'select count(*) from ' || check_this_in;
  3402 EXEC     11        26       1         5    procedure l_run_query is
  3406 EXEC     11     67881     106     65814       open l_rc for l_query;
  3407 EXEC     10    180382    1212     33252       fetch l_rc into l_cnt;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3408 EXEC     10       551      34       142       close l_rc;
  3409 EXEC     10        16       1         2       l_success := TRUE;
  3411 EXEC      1         0       0         0       when OTHERS
  3413 EXEC      1        78      78        78          g_rec.last_details := SQLERRM || CHR(10) ||
  3415 EXEC      1         1       1         1          g_rec.last_pass    := FALSE;
  3416 EXEC      1         0       0         0          l_success      := FALSE;
  3417 EXEC      1         0       0         0          g_rec.raise_exception := raise_exc_in;
  3418 EXEC      1         1       1         1          process_assertion;
  3419 EXEC     11       180       1       118    end l_run_query;
  3421 EXEC      6         3       1         1    g_rec.last_assert  := 'EQTABCOUNT';
  3422 EXEC      6         4       1         1    g_rec.last_msg     := msg_in;
  3424 EXEC      6         2       0         1    l_query := 'select count(*) from ' || check_this_in;
  3425 EXEC      6         2       1         1    if check_where_in is not null
  3427 EXEC      4         3       1         1       l_query := l_query || ' where ' || check_where_in;
  3429 EXEC      6         1       0         1    l_run_query;
  3430 EXEC      7         3       0         1    if NOT l_success then return; end if;
  3431 EXEC      5         4       1         1    l_check_cnt := l_cnt;
  3433 EXEC      5        22       4         5    l_query := 'select count(*) from ' || against_this_in;
  3434 EXEC      5         3       0         1    if against_where_in is not null
  3436 EXEC      3         4       1         2       l_query := l_query || ' where ' || against_where_in;
  3438 EXEC      5         3       1         1    l_run_query;
  3439 EXEC      5         4       1         1    if NOT l_success then return; end if;
  3440 EXEC      5        12       2         3    g_rec.last_pass    := (l_check_cnt = l_cnt);
  3442 EXEC      5        52      10        11    g_rec.last_details := 'Expected ' || l_cnt       || ' rows from "' || against_this_in ||
  3445 EXEC      5         0       0         0    g_rec.raise_exception := raise_exc_in;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3446 EXEC      5         5       1         1    process_assertion;
  3447 EXEC      4         2       0         1 end eqtabcount;
  3451 IGNR      0         3       3         3    procedure t_eqtabcount
  3456 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQTABCOUNT Tests Happy Path 1';
  3457 IGNR      1         5       1         3       eqtabcount (
  3463 IGNR      1         1       1         1       temp_rec := g_rec;
  3465 IGNR      1         1       1         1       wt_assert.eq (
  3469 IGNR      1         1       1         1       wt_assert.eq (
  3474 IGNR      1         0       0         0       wt_assert.eq (
  3478 IGNR      1         0       0         0       wt_assert.isnotnull (
  3481 IGNR      1         8       8         8       wt_assert.this (
  3487 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQTABCOUNT Tests Happy Path 2';
  3488 IGNR      1         4       1         3       eqtabcount (
  3495 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQTABCOUNT Sad Path 1';
  3496 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  3497 IGNR      1         3       1         2       eqtabcount (
  3503 IGNR      1         5       5         5       temp_rec := g_rec;
  3504 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  3506 IGNR      1         0       0         0       wt_assert.eq (
  3510 IGNR      1         1       1         1       wt_assert.isnotnull (
  3513 IGNR      1         8       8         8       wt_assert.this (
  3519 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQTABCOUNT Sad Path 2';
  3520 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  3522 IGNR      1         4       2         2          eqtabcount (
  3529 IGNR      0         0       0         0          l_found_exception := FALSE;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3530 IGNR      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  3531 IGNR      1         0       0         0          l_found_exception := TRUE;
  3532 IGNR      0         2       2         2       end;
  3534 IGNR      1         4       4         4       temp_rec := g_rec;
  3535 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  3536 IGNR      1         1       1         1       wt_assert.eq (
  3540 IGNR      1         0       0         0       wt_assert.eq (
  3545 IGNR      1         1       1         1       wt_assert.g_testcase := 'EQTABCOUNT Sad Path 3';
  3546 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  3547 IGNR      1         0       0         0       eqtabcount (
  3551 IGNR      1        96      96        96       temp_rec := g_rec;
  3552 IGNR      1         1       1         1       wtplsql_skip_save := FALSE;
  3554 IGNR      1         1       1         1       wt_assert.eq (
  3558 IGNR      1         0       0         0       wt_assert.isnotnull (
  3561 IGNR      1         6       6         6       wt_assert.this (
  3566 IGNR      1         0       0         0       wt_assert.g_testcase := 'EQTABCOUNT Sad Path 4';
  3567 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  3568 IGNR      1         1       1         1       eqtabcount (
  3572 IGNR      1         1       1         1       temp_rec := g_rec;
  3573 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  3575 IGNR      1         1       1         1       wt_assert.eq (
  3579 IGNR      1         0       0         0       wt_assert.isnotnull (
  3583 IGNR      1         4       4         4       wt_assert.this (
  3587 IGNR      1         3       3         3       wt_assert.this (
  3591 IGNR      1         2       2         2    end t_eqtabcount;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3596 EXEC      6         9       1         1 procedure objexists (
  3605 EXEC      6         0       0         0    g_rec.last_assert  := 'OBJEXISTS';
  3606 EXEC      6         4       1         1    g_rec.last_msg     := msg_in;
  3607 EXEC      6      2429     122       947    select count(*) into l_num_objects
  3614 EXEC      6        12       0         2    g_rec.last_pass    := case l_num_objects when 0 then FALSE else TRUE end;
  3615 EXEC      6         1       0         1    g_rec.last_details := 'Number of objects found for "' ||
  3616 UNKN      0         9       0         2                          case when obj_owner_in is null then ''
  3619 UNKN      0        21       2         5                          case when obj_type_in is null then ''
  3622 EXEC      6         1       0         1    g_rec.raise_exception := raise_exc_in;
  3623 EXEC      6         2       0         1    process_assertion;
  3624 EXEC      5         4       0         1 end objexists;
  3627 UNKN      0         2       1         1 procedure objexists (
  3633 EXEC      2         5       2         3    l_pos    number := instr(check_this_in, '.');
  3635 EXEC      2         6       3         3    objexists(msg_in       => msg_in
  3638 EXEC      2         1       0         1 end objexists;
  3642 IGNR      0         2       2         2    procedure t_object_exists
  3647 IGNR      1         1       1         1       wt_assert.g_testcase := 'OBJEXISTS Happy Path 1';
  3648 IGNR      1         0       0         0       objexists (
  3652 IGNR      1         1       1         1       temp_rec := g_rec;
  3654 IGNR      1         1       1         1       wt_assert.eq (
  3658 IGNR      1         1       1         1       wt_assert.eq (
  3663 IGNR      1         0       0         0       wt_assert.eq (
  3667 IGNR      1         1       1         1       wt_assert.eq (
  3672 IGNR      1         0       0         0       wt_assert.g_testcase := 'OBJEXISTS Happy Path 2';
  3673 IGNR      1         0       0         0       objexists (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3679 IGNR      1         0       0         0       wt_assert.g_testcase := 'OBJEXISTS Happy Path 3';
  3680 IGNR      1         1       1         1       objexists (
  3684 IGNR      1         1       1         1       wt_assert.g_testcase := 'OBJEXISTS Happy Path 4';
  3685 IGNR      1         1       1         1       objexists (
  3689 IGNR      1         0       0         0       wt_assert.g_testcase := 'OBJEXISTS Sad Path 1';
  3690 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  3691 IGNR      1         0       0         0       objexists (
  3695 IGNR      1         2       2         2       temp_rec := g_rec;
  3696 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  3698 IGNR      1         1       1         1       wt_assert.eq (
  3702 IGNR      1         0       0         0       wt_assert.eq (
  3707 IGNR      1         0       0         0       wt_assert.g_testcase := 'OBJEXISTS Sad Path 2';
  3708 IGNR      1         1       1         1       wtplsql_skip_save := TRUE;
  3710 IGNR      1         0       0         0          objexists (
  3715 IGNR      0         0       0         0          l_found_exception := FALSE;
  3716 IGNR      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  3717 IGNR      1         0       0         0          l_found_exception := TRUE;
  3718 IGNR      0         1       1         1       end;
  3719 IGNR      1         1       1         1       temp_rec := g_rec;
  3720 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  3722 IGNR      1         0       0         0       wt_assert.eq (
  3726 IGNR      1         0       0         0       wt_assert.eq (
  3730 IGNR      1         0       0         0    end t_object_exists;
  3735 EXEC      5         6       0         1 procedure objnotexists (
  3744 EXEC      5         2       0         1    g_rec.last_assert  := 'OBJNOTEXISTS';
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3745 EXEC      5         1       1         1    g_rec.last_msg     := msg_in;
  3746 EXEC      5       985     127       286    select count(*) into l_num_objects
  3753 EXEC      5         6       0         2    g_rec.last_pass    := case l_num_objects when 0 then TRUE else FALSE end;
  3754 EXEC      5         2       0         1    g_rec.last_details := 'Number of objects found for "' ||
  3755 UNKN      0         8       0         2                          case when obj_owner_in is null then ''
  3758 UNKN      0         9       1         2                          case when obj_type_in is null then ''
  3761 EXEC      5         0       0         0    g_rec.raise_exception := raise_exc_in;
  3762 EXEC      5         2       1         1    process_assertion;
  3763 EXEC      4         1       0         1 end objnotexists;
  3766 UNKN      0         2       2         2 procedure objnotexists (
  3772 EXEC      1         3       3         3    l_pos    number := instr(check_this_in, '.');
  3774 EXEC      1         3       3         3    objnotexists(msg_in       => msg_in
  3777 EXEC      1         0       0         0 end objnotexists;
  3781 IGNR      0         3       3         3    procedure t_object_not_exists
  3786 IGNR      1         0       0         0       wt_assert.g_testcase := 'OBJNOTEXISTS Happy Path 1';
  3787 IGNR      1         0       0         0       objnotexists (
  3791 IGNR      1         1       1         1       temp_rec := g_rec;
  3793 IGNR      1         1       1         1       wt_assert.eq (
  3797 IGNR      1         1       1         1       wt_assert.eq (
  3802 IGNR      1         0       0         0       wt_assert.eq (
  3806 IGNR      1         0       0         0       wt_assert.eq (
  3811 IGNR      1         1       1         1       wt_assert.g_testcase := 'OBJNOTEXISTS Happy Path 2';
  3812 IGNR      1         1       1         1       objnotexists (
  3818 IGNR      1         1       1         1       wt_assert.g_testcase := 'OBJNOTEXISTS Happy Path 3';
  3819 IGNR      1         0       0         0       objnotexists (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3823 IGNR      1         0       0         0       wt_assert.g_testcase := 'OBJNOTEXISTS Sad Path 1';
  3824 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  3825 IGNR      1         0       0         0       objnotexists (
  3829 IGNR      1         1       1         1       temp_rec := g_rec;
  3830 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  3832 IGNR      1         0       0         0       wt_assert.eq (
  3836 IGNR      1         1       1         1       wt_assert.eq (
  3841 IGNR      1         0       0         0       wt_assert.g_testcase := 'OBJNOTEXISTS Sad Path 2';
  3842 IGNR      1         0       0         0       wtplsql_skip_save := TRUE;
  3844 IGNR      1         1       1         1          objnotexists (
  3849 IGNR      0         0       0         0          l_found_exception := FALSE;
  3850 IGNR      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  3851 IGNR      1         0       0         0          l_found_exception := TRUE;
  3852 IGNR      0         1       1         1       end;
  3854 IGNR      1         2       2         2       temp_rec := g_rec;
  3855 IGNR      1         0       0         0       wtplsql_skip_save := FALSE;
  3856 IGNR      1         1       1         1       wt_assert.eq (
  3860 IGNR      1         0       0         0       wt_assert.eq (
  3864 IGNR      1         0       0         0    end t_object_not_exists;
  3873 IGNR      0        11      11        11    procedure WTPLSQL_RUN  --% WTPLSQL SET DBOUT "WT_ASSERT:PACKAGE BODY" %--
  3876 IGNR      1       728     728       728       select temp_clob,  temp_nclob,  temp_xml,  temp_blob
  3880 IGNR      1         1       1         1       t_boolean_to_status;
  3881 IGNR      1         0       0         0       t_process_assertion;
  3882 IGNR      1         0       0         0       t_compare_queries;
  3883 IGNR      1         0       0         0       t_nls_settings;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3884 IGNR      1         0       0         0       t_last_values;
  3885 IGNR      1         0       0         0       t_reset_globals;
  3886 IGNR      1         0       0         0       t_this;
  3887 IGNR      1        11      11        11       t_eq;
  3888 IGNR      1         2       2         2       t_isnotnull;
  3889 IGNR      1        15      15        15       t_isnull;
  3891 IGNR      1         0       0         0       t_raises;
  3892 IGNR      1         1       1         1       t_eqqueryvalue;
  3893 IGNR      1         1       1         1       t_eqquery;
  3894 IGNR      1         1       1         1       t_eqtable;
  3895 IGNR      1         0       0         0       t_eqtabcount;
  3896 IGNR      1         1       1         1       t_object_exists;
  3897 IGNR      1         1       1         1       t_object_not_exists;
  3898 IGNR      1         2       2         2    end WTPLSQL_RUN;
  3903 EXCL      0         0       0         0 end wt_assert;


    wtPLSQL 1.1.0 - Run ID 8: 09-Jun-2018 11:48:46 AM

  Test Results for WTP.WT_PROFILER
        Total Testcases:       41       Total Assertions:      265
  Minimum Interval msec:        0      Failed Assertions:        0
  Average Interval msec:       19       Error Assertions:        0
  Maximum Interval msec:      659             Test Yield:   100.00%
   Total Run Time (sec):      5.0

  Code Coverage for PACKAGE BODY WTP.WT_PROFILER
          Ignored Lines:      534   Total Profiled Lines:      696
         Excluded Lines:        2   Total Executed Lines:      145
  Minimum LineExec usec:        0     Not Executed Lines:        3
  Average LineExec usec:     2394          Unknown Lines:       12
  Maximum LineExec usec:   363842          Code Coverage:    98.00%
  Trigger Source Offset:        0

 - WTP.WT_PROFILER Test Result Details (Test Run ID 8)
-----------------------------------------------------------
 ---- Test Case: Get Error Messages
 PASS  659ms ERROR_PARAM Test 1. ISNOTNULL - Expected NOT NULL and got "DBMS_PROFILER Error: A subprogram was called with an incorrect parameter."
 PASS    1ms ERROR_PARAM Test 2. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms ERROR_IO Test 1. ISNOTNULL - Expected NOT NULL and got "DBMS_PROFILER Error: Data flush operation failed. Check whether the profiler tables have been created, are accessible, and that there is adequate space."
 PASS    0ms ERROR_IO Test 2. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms ERROR_VERSION Test 1. ISNOTNULL - Expected NOT NULL and got "DBMS_PROFILER Error: There is a mismatch between package and database implementation. Oracle returns this error if an incorrect version of the DBMS_PROFILER package is installed, and if the version of the profiler package cannot work with this database version."
 PASS    0ms ERROR_VERSION Test 2. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms Unknown Error Test 1. ISNOTNULL - Expected NOT NULL and got "DBMS_PROFILER Error: Unknown error number -9999"
 PASS    0ms Unknown Error Test 2. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: Delete PL/SQL Profiler Records Happy Path 1
 PASS    1ms delete_plsql_profiler_recs(-99) 1. ISNULL - Expected NULL and got ""
 PASS    2ms Number of plsql_profiler_runs (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_runs where runid = -99
 PASS    4ms Number of plsql_profiler_units (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_units where runid = -99
 PASS    4ms Number of plsql_profiler_data (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_data where runid = -99
 ---- Test Case: Delete PL/SQL Profiler Records Happy Path 2
 PASS    2ms insert plsql_profiler_runs (-99). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into plsql_profiler_runs (runid) values (-99)".
 PASS    2ms insert plsql_profiler_units (-99). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into plsql_profiler_units (runid, unit_number, total_time) values (-99, -99, 0)".
 PASS    2ms insert plsql_profiler_data (RUNID: -99). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into plsql_profiler_data (runid, unit_number, line#) values (-99, -99, 0)".
 PASS    1ms Number of plsql_profiler_runs (-99). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_runs where runid = -99
 PASS    0ms Number of plsql_profiler_units (-99). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_units where runid = -99
 PASS    0ms Number of plsql_profiler_data (-99). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_data where runid = -99
 PASS    1ms delete_plsql_profiler_recs(-99) 2. ISNULL - Expected NULL and got ""
 PASS    0ms Number of plsql_profiler_runs (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_runs where runid = -99
 PASS    1ms Number of plsql_profiler_units (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_units where runid = -99
 PASS    0ms Number of plsql_profiler_data (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_data where runid = -99
 ---- Test Case: Find DBOUT Setup
 PASS   13ms Compile package WT_PROFILE_FIND_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package WT_PROFILE_FIND_DBOUT is\n   l_junk number;\nend WT_PROFILE_FIND_DBOUT;".
 PASS    1ms Compile package WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_FIND_DBOUT package. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE) is 1
 ---- Test Case: Find DBOUT Happy Path 1
 PASS   10ms Compile package body WT_PROFILE_FIND_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_FIND_DBOUT is\nbegin\n  l_junk := 1;\nend WT_PROFILE_FIND_DBOUT;".
 PASS    0ms Compile package body WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_FIND_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE BODY) is 1
 PASS    0ms l_recTEST.dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.dbout_type. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.error_message. ISNULL - Expected NULL and got ""
 ---- Test Case: Find DBOUT Happy Path 2
 PASS   17ms Compile package body WT_PROFILE_FIND_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_FIND_DBOUT is\n  --% WTPLSQL SET DBOUT "WT_PROFILE_FIND_DBOUT:PACKAGE BODY" %--\nbegin\n  l_junk := 1;\nend WT_PROFILE_FIND_DBOUT;".
 PASS    1ms Compile package body WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_FIND_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE BODY) is 1
 PASS  634ms l_recTEST.dbout_owner. EQ - Expected "WTP" and got "WTP"
 PASS    1ms l_recTEST.dbout_name. EQ - Expected "WT_PROFILE_FIND_DBOUT" and got "WT_PROFILE_FIND_DBOUT"
 PASS    0ms l_recTEST.dbout_type. EQ - Expected "PACKAGE BODY" and got "PACKAGE BODY"
 PASS    0ms l_recTEST.error_message. ISNULL - Expected NULL and got ""
 ---- Test Case: Find DBOUT Happy Path 3
 PASS   21ms Compile package body WT_PROFILE_FIND_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_FIND_DBOUT is\n  --% WTPLSQL SET DBOUT "WTP.WT_PROFILE_FIND_DBOUT:PACKAGE BODY" %--\nbegin\n  l_junk := 1;\nend WT_PROFILE_FIND_DBOUT;".
 PASS    2ms Compile package body WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_FIND_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE BODY) is 1
 PASS  644ms l_recTEST.dbout_owner. EQ - Expected "WTP" and got "WTP"
 PASS    0ms l_recTEST.dbout_name. EQ - Expected "WT_PROFILE_FIND_DBOUT" and got "WT_PROFILE_FIND_DBOUT"
 PASS    0ms l_recTEST.dbout_type. EQ - Expected "PACKAGE BODY" and got "PACKAGE BODY"
 PASS    0ms l_recTEST.error_message. ISNULL - Expected NULL and got ""
 ---- Test Case: Find DBOUT Sad Path 1
 PASS   19ms Compile package body WT_PROFILE_FIND_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_FIND_DBOUT is\n  --% WTPLSQL SET DBOUT "BOGUS1" %--\nbegin\n  l_junk := 1;\nend WT_PROFILE_FIND_DBOUT;".
 PASS    1ms Compile package body WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_FIND_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE BODY) is 1
 PASS  627ms l_recTEST.dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.dbout_type. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.error_message. EQ - Expected "Unable to find database object "BOGUS1"." and got "Unable to find database object "BOGUS1"."
 ---- Test Case: Find DBOUT Sad Path 2
 PASS   19ms Compile package body WT_PROFILE_FIND_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_FIND_DBOUT is\n  --% WTPLSQL SET DBOUT "WTP.WT_PROFILE_FIND_DBOUT" %--\nbegin\n  l_junk := 1;\nend WT_PROFILE_FIND_DBOUT;".
 PASS    0ms Compile package body WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_FIND_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE BODY) is 1
 PASS  634ms l_recTEST.dbout_owner. EQ - Expected "WTP" and got "WTP"
 PASS    0ms l_recTEST.dbout_name. EQ - Expected "WT_PROFILE_FIND_DBOUT" and got "WT_PROFILE_FIND_DBOUT"
 PASS    0ms l_recTEST.error_message. EQ - Expected "Found too many database objects "WTP.WT_PROFILE_FIND_DBOUT"." and got "Found too many database objects "WTP.WT_PROFILE_FIND_DBOUT"."
 ---- Test Case: Find DBOUT Sad Path 3
 PASS   24ms Compile package body WT_PROFILE_FIND_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_FIND_DBOUT is\n  --% WTPLSQL SET DBOUT "SYS.ALL_OBJECTS:VIEW" %--\nbegin\n  l_junk := 1;\nend WT_PROFILE_FIND_DBOUT;".
 PASS    0ms Compile package body WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_FIND_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE BODY) is 1
 PASS  627ms l_recTEST.dbout_owner. EQ - Expected "SYS" and got "SYS"
 PASS    0ms l_recTEST.dbout_name. EQ - Expected "ALL_OBJECTS" and got "ALL_OBJECTS"
 PASS    1ms l_recTEST.dbout_type. EQ - Expected "VIEW" and got "VIEW"
 PASS    0ms l_recTEST.error_message. ISNULL - Expected NULL and got ""
 ---- Test Case: Find DBOUT Teardown
 PASS   22ms drop package WT_PROFILE_FIND_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "drop package WT_PROFILE_FIND_DBOUT".
 PASS    1ms WT_PROFILE_FIND_DBOUT package. OBJNOTEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE) is 0
 ---- Test Case: Load Ignr Setup
 PASS    0ms Number of IGNR_AA elements. ISNOTNULL - Expected NOT NULL and got "0"
 PASS   10ms Compile package WT_PROFILE_LOAD_IGNR. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package WT_PROFILE_LOAD_IGNR is\n  l_junk number;\nend WT_PROFILE_LOAD_IGNR;".
 PASS    0ms Compile package WT_PROFILE_LOAD_IGNR Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_LOAD_IGNR package. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_IGNR"(PACKAGE) is 1
 ---- Test Case: Load Ignr Happy Path 1
 PASS   10ms Compile package body WT_PROFILE_LOAD_IGNR. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_LOAD_IGNR is\nbegin\n  l_junk := 1;\nend WT_PROFILE_LOAD_IGNR;".
 PASS    0ms Compile package body WT_PROFILE_LOAD_IGNR Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_LOAD_IGNR package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_IGNR"(PACKAGE BODY) is 1
 PASS    0ms l_ignrTest.COUNT. EQ - Expected "0" and got "0"
 ---- Test Case: Load Ignr Happy Path 2
 PASS   22ms Compile package body WT_PROFILE_LOAD_IGNR. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_LOAD_IGNR is\nbegin\n  --%WTPLSQL_begin_ignore_lines%--\n  l_junk := 1;\nend WT_PROFILE_LOAD_IGNR;".
 PASS    1ms Compile package body WT_PROFILE_LOAD_IGNR Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_LOAD_IGNR package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_IGNR"(PACKAGE BODY) is 1
 PASS    2ms l_ignrTest.COUNT. EQ - Expected "3" and got "3"
 PASS    0ms l_ignrTest.exists(3). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_ignrTest.exists(4). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_ignrTest.exists(5). EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: Load Ignr Happy Path 3
 PASS   18ms Compile package body WT_PROFILE_LOAD_IGNR. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_LOAD_IGNR is\nbegin\n  l_junk := 1;\n  --%WTPLSQL_begin_ignore_lines%--\n  l_junk := 2;\n  --%WTPLSQL_end_ignore_lines%--\n  l_junk := 3;\nend WT_PROFILE_LOAD_IGNR;".
 PASS    0ms Compile package body WT_PROFILE_LOAD_IGNR Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_LOAD_IGNR package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_IGNR"(PACKAGE BODY) is 1
 PASS    0ms l_ignrTest.COUNT. EQ - Expected "3" and got "3"
 PASS    1ms l_ignrTest.exists(4). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_ignrTest.exists(5). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_ignrTest.exists(6). EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: Load Ignr Happy Path 4
 PASS   20ms Compile package body WT_PROFILE_LOAD_IGNR. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_LOAD_IGNR is\nbegin\n  l_junk := 1;\n  --%WTPLSQL_begin_ignore_lines%--\n  l_junk := 2;\n  --%WTPLSQL_end_ignore_lines%--\n  l_junk := 3;\n  --%WTPLSQL_begin_ignore_lines%--\n  l_junk := 4;\nend WT_PROFILE_LOAD_IGNR;".
 PASS    0ms Compile package body WT_PROFILE_LOAD_IGNR Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_LOAD_IGNR package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_IGNR"(PACKAGE BODY) is 1
 PASS    1ms l_ignrTest.COUNT. EQ - Expected "6" and got "6"
 PASS    0ms l_ignrTest.exists(4). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_ignrTest.exists(5). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_ignrTest.exists(6). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_ignrTest.exists(8). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_ignrTest.exists(9). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_ignrTest.exists(10). EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: Load Ignr Sad Path 1
 PASS   17ms Compile package body WT_PROFILE_LOAD_IGNR. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_LOAD_IGNR is\nbegin\n  --%WTPLSQL_end_ignore_lines%--\n  l_junk := 4;\nend WT_PROFILE_LOAD_IGNR;".
 PASS    1ms Compile package body WT_PROFILE_LOAD_IGNR Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_LOAD_IGNR package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_IGNR"(PACKAGE BODY) is 1
 PASS    1ms l_ignrTest.COUNT. EQ - Expected "0" and got "0"
 ---- Test Case: Load Ignr Sad Path 2
 PASS   16ms Compile package body WT_PROFILE_LOAD_IGNR. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_LOAD_IGNR is\nbegin\n  l_junk := 1;\n  --%WTPLSQL_begin_ignore_lines%--\n  l_junk := 2;\n  --%WTPLSQL_end_ignore_lines%--\n  l_junk := 3;\n  --%WTPLSQL_end_ignore_lines%--\n  l_junk := 4;\nend WT_PROFILE_LOAD_IGNR;".
 PASS    1ms Compile package body WT_PROFILE_LOAD_IGNR Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_LOAD_IGNR package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_IGNR"(PACKAGE BODY) is 1
 PASS    1ms l_ignrTest.COUNT. EQ - Expected "3" and got "3"
 PASS    0ms l_ignrTest.exists(4). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_ignrTest.exists(5). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_ignrTest.exists(6). EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: Load Ignr Sad Path 3
 PASS   20ms Compile package body WT_PROFILE_LOAD_IGNR. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_LOAD_IGNR is\nbegin\n  l_junk := 1;\n  --%WTPLSQL_begin_ignore_lines%--\n  l_junk := 2;\n  --%WTPLSQL_begin_ignore_lines%--\n  l_junk := 3;\n  --%WTPLSQL_end_ignore_lines%--\n  l_junk := 4;\nend WT_PROFILE_LOAD_IGNR;".
 PASS    0ms Compile package body WT_PROFILE_LOAD_IGNR Error. ISNULL - Expected NULL and got ""
 PASS    2ms WT_PROFILE_LOAD_IGNR package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_IGNR"(PACKAGE BODY) is 1
 PASS    2ms l_ignrTest.COUNT. EQ - Expected "5" and got "5"
 PASS    0ms l_ignrTest.exists(4). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_ignrTest.exists(5). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_ignrTest.exists(6). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_ignrTest.exists(7). EQ - Expected "TRUE" and got "TRUE"
 PASS    1ms l_ignrTest.exists(8). EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: Load Ignr Teardown
 PASS   19ms drop package WT_PROFILE_LOAD_IGNR. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "drop package WT_PROFILE_LOAD_IGNR".
 PASS    1ms WT_PROFILE_LOAD_IGNR package. OBJNOTEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_IGNR"(PACKAGE) is 0
 PASS    0ms Number of IGNR_AA elements. ISNOTNULL - Expected NOT NULL and got "0"
 ---- Test Case: Insert DBOUT Profile Setup
 PASS   12ms Compile package WT_PROFILE_INSERT_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package WT_PROFILE_INSERT_DBOUT is\n  l_junk number;\nend WT_PROFILE_INSERT_DBOUT;".
 PASS    1ms Compile package WT_PROFILE_INSERT_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_INSERT_DBOUT package. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_INSERT_DBOUT"(PACKAGE) is 1
 PASS   11ms Compile package body WT_PROFILE_INSERT_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_INSERT_DBOUT is\nbegin\n  l_junk := 1;\n  --%WTPLSQL_begin_ignore_lines%--\n  l_junk := 2;\n  --%WTPLSQL_end_ignore_lines%--\n  if 0 = 1 then\n     l_junk := 3;\n  end if;\nend WT_PROFILE_INSERT_DBOUT;".
 PASS    0ms Compile package body WT_PROFILE_INSERT_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_INSERT_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_INSERT_DBOUT"(PACKAGE BODY) is 1
 PASS    1ms insert plsql_profiler_runs (-97). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into plsql_profiler_runs (runid) values (-97)".
 PASS    1ms insert plsql_profiler_units (-97). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into plsql_profiler_units (runid, unit_number, total_time) values (-97, -97, 0)".
 PASS    1ms insert plsql_profiler_data (RUNID: -97). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into plsql_profiler_data (runid, unit_number, line#) values (-97, -97, 0)".
 PASS    1ms Number of plsql_profiler_runs (-97). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_runs where runid = -97
 PASS    2ms Number of plsql_profiler_units (-97). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_units where runid = -97
 PASS    2ms Number of plsql_profiler_data (-97). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_data where runid = -97
 PASS    0ms Insert wt_test_runs (-97). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into wt_test_runs (id, start_dtm, runner_owner, runner_name) values (-97, sysdate, USER, 'Insert DBOUT Test')".
 PASS    0ms wt_test_runs (-97) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_test_runs where id = -97
 PASS    2ms insert UNIT 1 into plsql_profiler_units. ISNULL - Expected NULL and got ""
 PASS    2ms Number of UNIT 1 plsql_profiler_units. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_units where runid = -97 and unit_number = 1
 PASS    2ms insert plsql_profiler_data (LINE#: 1). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms insert plsql_profiler_data (LINE#: 2). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms insert plsql_profiler_data (LINE#: 3). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms insert plsql_profiler_data (LINE#: 5). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms insert plsql_profiler_data (LINE#: 7). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms insert plsql_profiler_data (LINE#: 8). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms insert plsql_profiler_data (LINE#: 9). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms insert plsql_profiler_data (LINE#: 10). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    4ms Number of UNIT 1 plsql_profiler_data. EQQUERYVALUE - Expected "8" and got "8" for Query: select count(*) from plsql_profiler_data where runid = -97 and unit_number = 1
 ---- Test Case: Insert DBOUT Profile Happy Path
 PASS    4ms SQLERRM. ISNULL - Expected NULL and got ""
 PASS    0ms wt_dbout_profiles line 1, column STATUS. EQQUERYVALUE - Expected "EXCL" and got "EXCL" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 1
 PASS    0ms wt_dbout_profiles line 1, column TEXT. EQQUERYVALUE - Expected "package body WT_PROFILE_INSERT_DBOUT is\n" and got "package body WT_PROFILE_INSERT_DBOUT is\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 1
 PASS    1ms wt_dbout_profiles line 2, column STATUS. EQQUERYVALUE - Expected "UNKN" and got "UNKN" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 2
 PASS    0ms wt_dbout_profiles line 2, column TEXT. EQQUERYVALUE - Expected "begin\n" and got "begin\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 2
 PASS    0ms wt_dbout_profiles line 3, column STATUS. EQQUERYVALUE - Expected "EXEC" and got "EXEC" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 3
 PASS    0ms wt_dbout_profiles line 3, column TEXT. EQQUERYVALUE - Expected "  l_junk := 1;\n" and got "  l_junk := 1;\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 3
 PASS    0ms wt_dbout_profiles line 5, column STATUS. EQQUERYVALUE - Expected "IGNR" and got "IGNR" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 5
 PASS    1ms wt_dbout_profiles line 5, column TEXT. EQQUERYVALUE - Expected "  l_junk := 2;\n" and got "  l_junk := 2;\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 5
 PASS    0ms wt_dbout_profiles line 7, column STATUS. EQQUERYVALUE - Expected "EXEC" and got "EXEC" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 7
 PASS    0ms wt_dbout_profiles line 7, column TEXT. EQQUERYVALUE - Expected "  if 0 = 1 then\n" and got "  if 0 = 1 then\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 7
 PASS    0ms wt_dbout_profiles line 8, column STATUS. EQQUERYVALUE - Expected "NOTX" and got "NOTX" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 8
 PASS    1ms wt_dbout_profiles line 8, column TEXT. EQQUERYVALUE - Expected "     l_junk := 3;\n" and got "     l_junk := 3;\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 8
 PASS    0ms wt_dbout_profiles line 9, column STATUS. EQQUERYVALUE - Expected "EXEC" and got "EXEC" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 9
 PASS    0ms wt_dbout_profiles line 9, column TEXT. EQQUERYVALUE - Expected "  end if;\n" and got "  end if;\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 9
 PASS    0ms wt_dbout_profiles line 10, column STATUS. EQQUERYVALUE - Expected "EXCL" and got "EXCL" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 10
 PASS    0ms wt_dbout_profiles line 10, column TEXT. EQQUERYVALUE - Expected "end WT_PROFILE_INSERT_DBOUT;" and got "end WT_PROFILE_INSERT_DBOUT;" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 10
 ---- Test Case: Insert DBOUT Profile Teardown
 PASS    1ms Delete wt_dbout_profiles (-97). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from wt_dbout_profiles where test_run_id = -97".
 PASS    0ms wt_dbout_profiles (-97) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -97
 PASS    1ms Delete wt_test_runs (-97). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from wt_test_runs where id = -97".
 PASS    0ms wt_test_runs (-97) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = -97
 PASS    2ms delete plsql_profiler_data (-97). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from plsql_profiler_data where runid = -97".
 PASS    2ms delete plsql_profiler_units (-97). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from plsql_profiler_units where runid = -97".
 PASS    2ms delete plsql_profiler_runs (-97). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from plsql_profiler_runs where runid = -97".
 PASS    1ms Number of plsql_profiler_runs (-97). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_runs where runid = -97
 PASS    0ms Number of plsql_profiler_units (-97). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_units where runid = -97
 PASS    0ms Number of plsql_profiler_data (-97). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_data where runid = -97
 PASS   23ms drop package WT_PROFILE_INSERT_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "drop package WT_PROFILE_INSERT_DBOUT".
 PASS    0ms WT_PROFILE_INSERT_DBOUT package. OBJNOTEXISTS - Number of objects found for "WTP.WT_PROFILE_INSERT_DBOUT"(PACKAGE) is 0
 ---- Test Case: Insert DBOUT Profile Setup
 PASS   11ms Compile package WT_PROFILE_INITIALIZE. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package WT_PROFILE_INITIALIZE is\n  l_junk number;\nend WT_PROFILE_INITIALIZE;".
 PASS    1ms Compile package WT_PROFILE_INITIALIZE Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_INITIALIZE package. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_INITIALIZE"(PACKAGE) is 1
 ---- Test Case: Initialize Test HAPPY Path 1
 PASS   10ms Compile package body WT_PROFILE_INITIALIZE. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_INITIALIZE is\nbegin\n  l_junk := 7;\nend WT_PROFILE_INITIALIZE;".
 PASS    1ms Compile package body WT_PROFILE_INITIALIZE Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_INITIALIZE package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_INITIALIZE"(PACKAGE BODY) is 1
 PASS    1ms OUT dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms OUT dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms OUT dbout_type. ISNULL - Expected NULL and got ""
 PASS    0ms OUT prof_runid. ISNULL - Expected NULL and got ""
 PASS    0ms OUT trigger_offset. ISNULL - Expected NULL and got ""
 PASS    0ms OUT error_message. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.dbout_type. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.prof_runid. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.trigger_offset. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.error_message. ISNULL - Expected NULL and got ""
 ---- Test Case: Initialize Test HAPPY Path 2
 PASS   19ms Compile package body WT_PROFILE_INITIALIZE. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_INITIALIZE is\nbegin\n--% WTPLSQL SET DBOUT "WT_PROFILE_INITIALIZE:PACKAGE BODY" %--\n  l_junk := 7;\nend WT_PROFILE_INITIALIZE;".
 PASS    1ms Compile package body WT_PROFILE_INITIALIZE Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_INITIALIZE package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_INITIALIZE"(PACKAGE BODY) is 1
 PASS  637ms OUT dbout_owner. EQ - Expected "WTP" and got "WTP"
 PASS    0ms OUT dbout_name. EQ - Expected "WT_PROFILE_INITIALIZE" and got "WT_PROFILE_INITIALIZE"
 PASS    1ms OUT dbout_type. EQ - Expected "PACKAGE BODY" and got "PACKAGE BODY"
 PASS    0ms OUT prof_runid. ISNOTNULL - Expected NOT NULL and got "6"
 PASS    0ms OUT trigger_offset. EQ - Expected "0" and got "0"
 PASS    0ms OUT error_message. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.dbout_owner. EQ - Expected "WTP" and got "WTP"
 PASS    0ms l_recTEST.dbout_name. EQ - Expected "WT_PROFILE_INITIALIZE" and got "WT_PROFILE_INITIALIZE"
 PASS    0ms l_recTEST.dbout_type. EQ - Expected "PACKAGE BODY" and got "PACKAGE BODY"
 PASS    0ms l_recTEST.prof_runid. ISNOTNULL - Expected NOT NULL and got "6"
 PASS    0ms l_recTEST.trigger_offset. EQ - Expected "0" and got "0"
 PASS    0ms l_recTEST.error_message. ISNULL - Expected NULL and got ""
 ---- Test Case: Initialize Test Sad Path 1
 PASS    0ms SQLERRM. EQ - Expected "ORA-20004: i_test_run_id is null" and got "ORA-20004: i_test_run_id is null"
 ---- Test Case: Insert DBOUT Profile Teardown
 PASS   21ms drop package WT_PROFILE_INITIALIZE. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "drop package WT_PROFILE_INITIALIZE".
 PASS    2ms WT_PROFILE_INITIALIZE package. OBJNOTEXISTS - Number of objects found for "WTP.WT_PROFILE_INITIALIZE"(PACKAGE) is 0
 ---- Test Case: Finalize Happy Path 1
 PASS    0ms g_rec.prof_runid. ISNULL - Expected NULL and got ""
 PASS    0ms format_error_stack and format_error_backtrace. ISNULL - Expected NULL and got ""
 ---- Test Case: Finalize Happy Path 2
 PASS    0ms SQLERRM. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.test_run_id. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.dbout_type. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.prof_runid. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.trigger_offset. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.error_message. ISNULL - Expected NULL and got ""
 ---- Test Case: Finalize Sad Path 1
 PASS    0ms SQLERRM. EQ - Expected "ORA-20000: g_rec.test_run_id is null" and got "ORA-20000: g_rec.test_run_id is null"
 ---- Test Case: Trigger Offset Happy Path
 PASS    1ms Trigger Test. EQ - Expected "3" and got "3"
 PASS    1ms Package Test. EQ - Expected "0" and got "0"
 ---- Test Case: Trigger Offset Sad Path
 PASS    0ms Non Existent Object. EQ - Expected "0" and got "0"
 ---- Test Case: Calculate Percent Coverage Setup
 PASS    0ms Insert wt_test_runs (-95). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into wt_test_runs (id, start_dtm, runner_owner, runner_name) values (-95, sysdate, USER, 'Calculate Offset Test')".
 PASS    1ms wt_test_runs (-95) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_test_runs where id = -95
 ---- Test Case: Calculate Percent Coverage Happy Path 1
 PASS    0ms Insert wt_dbout_profiles (-95,1). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms wt_dbout_profiles (-95,1) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 1
 PASS    0ms Insert wt_dbout_profiles (-95,2). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_dbout_profiles (-95,2) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 2
 PASS    0ms Insert wt_dbout_profiles (-95,3). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms wt_dbout_profiles (-95,3) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 3
 PASS    0ms Main Test. EQ - Expected "66.67" and got "66.67"
 PASS    0ms Delete wt_dbout_profiles (-95). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from wt_dbout_profiles where test_run_id = -95".
 PASS    1ms wt_dbout_profiles (-95) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95
 ---- Test Case: Calculate Percent Coverage Happy Path 2
 PASS    0ms Insert wt_dbout_profiles (-95,1). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_dbout_profiles (-95,1) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 1
 PASS    0ms Insert wt_dbout_profiles (-95,2). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms wt_dbout_profiles (-95,2) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 2
 PASS    0ms Insert wt_dbout_profiles (-95,3). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_dbout_profiles (-95,3) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 3
 PASS    0ms Main Test. EQ - Expected "-1" and got "-1"
 PASS    1ms Delete wt_dbout_profiles (-95). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from wt_dbout_profiles where test_run_id = -95".
 PASS    0ms wt_dbout_profiles (-95) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95
 ---- Test Case: Calculate Percent Coverage Sad Path
 PASS    0ms Missing Test Run ID. ISNULL - Expected NULL and got ""
 PASS    0ms NULL Test Run ID. ISNULL - Expected NULL and got ""
 ---- Test Case: Calculate Percent Coverage Teardown
 PASS    1ms Delete wt_test_runs (-95). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from wt_test_runs where id = -95".
 PASS    0ms wt_test_runs (-95) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = -95
 ---- Test Case: Delete Records Setup
 PASS    0ms wt_test_runs Count 0. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = -98
 PASS    1ms wt_dbout_profiles Count 0. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -98
 PASS    0ms Insert wt_test_runs (-98). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into wt_test_runs (id, start_dtm, runner_owner, runner_name) values (-98, sysdate, USER, 'Delete Records Test')".
 PASS    0ms wt_test_runs (-98) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_test_runs where id = -98
 PASS    1ms Insert wt_dbout_profiles (-98,1). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_dbout_profiles (-98,1) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -98 and line = 1
 ---- Test Case: Delete Records Happy Path 1
 PASS    1ms SQLERRM. ISNULL - Expected NULL and got ""
 PASS    0ms wt_dbout_profiles Count 2. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -98
 ---- Test Case: Delete Records Sad Path 1
 PASS    1ms SQLERRM. ISNULL - Expected NULL and got ""
 PASS    0ms wt_dbout_profiles Count 2. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -98
 ---- Test Case: Delete Records Sad Path 2
 PASS    0ms SQLERRM. ISNULL - Expected NULL and got ""
 PASS    0ms wt_dbout_profiles Count 2. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -98
 ---- Test Case: Delete Records Teardown
 PASS    0ms Delete wt_test_runs (-98). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from wt_test_runs where id = -98".
 PASS    1ms wt_test_runs (-98) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = -98

 - WTP.WT_PROFILER PACKAGE BODY Code Coverage Details (Test Run ID 8)
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
     1 EXCL      0         0       0         0 package body wt_profiler
    20 IGNR      0         0       0         0       g_skip_insert  boolean := FALSE;
    21 IGNR      0         0       0         0       g_skip_add     boolean := FALSE;
    33 IGNR      0       266       5       100    procedure tl_compile_db_object
    39 IGNR     20        12       1         1       l_errtxt   varchar2(32000) := '';
    43 IGNR     20        77       2         7       l_sql_txt := 'create or replace ' || in_ptype || ' ' ||
    47 IGNR     20        41       1         3       wt_assert.raises
    52 IGNR     40      5143      16       346       for buff in (select * from user_errors
    58 IGNR      0         0       0         0          l_errtxt := l_errtxt || buff.line || ', ' ||
    61 IGNR     20        94       4         8       wt_assert.isnull
    66 IGNR     20       204       2        10       wt_assert.objexists (
    71 IGNR     20        51       2         4    end tl_compile_db_object;
    74 IGNR      0         5       1         2    procedure tl_drop_db_object
    81 IGNR      4         5       1         2       l_sql_txt := 'drop ' || in_ptype || ' ' || in_pname;
    82 IGNR      4         6       1         2       wt_assert.raises
    86 IGNR      4        47       3         9       wt_assert.objnotexists (
    91 IGNR      4         1       1         1    end tl_drop_db_object;
    94 IGNR      0         8       1         2    procedure tl_count_plsql_profiler_recs
   100 IGNR      5        38       3        12       wt_assert.eqqueryvalue
   105 IGNR      5        28       3        10       wt_assert.eqqueryvalue
   111 IGNR      5        23       3         8       wt_assert.eqqueryvalue
   116 IGNR      5         2       1         1    end tl_count_plsql_profiler_recs;
   119 IGNR      0         3       1         2    procedure tl_insert_plsql_profiler_recs
   125 IGNR      2         7       3         4       l_sql_txt := 'insert into plsql_profiler_runs (runid)' ||
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   127 IGNR      2         5       2         3       wt_assert.raises (
   132 IGNR      2         7       2         5       l_sql_txt := 'insert into plsql_profiler_units (runid, unit_number, total_time)' ||
   134 IGNR      2         5       2         3       wt_assert.raises (
   139 IGNR      2         6       2         4       l_sql_txt := 'insert into plsql_profiler_data (runid, unit_number, line#)' ||
   141 IGNR      2         4       1         3       wt_assert.raises (
   145 IGNR      2       585     129       456       commit;
   146 IGNR      2         4       2         2    end tl_insert_plsql_profiler_recs;
   149 IGNR      0         2       2         2    procedure tl_delete_plsql_profiler_recs
   155 IGNR      1         3       3         3       l_sql_txt := 'delete from plsql_profiler_data' ||
   157 IGNR      1         3       3         3       wt_assert.raises (
   162 IGNR      1         3       3         3       l_sql_txt := 'delete from plsql_profiler_units' ||
   164 IGNR      1         2       2         2       wt_assert.raises (
   169 IGNR      1         3       3         3       l_sql_txt := 'delete from plsql_profiler_runs' ||
   171 IGNR      1         2       2         2       wt_assert.raises (
   175 IGNR      1       297     297       297       commit;
   176 IGNR      1         1       1         1    end tl_delete_plsql_profiler_recs;
   179 IGNR      0         4       1         2    procedure tl_insert_test_runs
   186 IGNR      3         8       2         3       l_sql_txt := 'insert into wt_test_runs' ||
   190 IGNR      3         3       0         2       wt_assert.raises (
   194 IGNR      3        13       3         6       wt_assert.eqqueryvalue (
   199 IGNR      3       372      93       142       commit;
   200 IGNR      3         3       1         1    end tl_insert_test_runs;
   203 IGNR      0         6       1         3    procedure tl_delete_test_runs
   209 IGNR      3         6       2         2       l_sql_txt := 'delete from wt_test_runs where id = ' || in_test_run_id;
   210 IGNR      3         3       1         1       wt_assert.raises (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   214 IGNR      3        12       4         4       wt_assert.eqqueryvalue (
   219 IGNR      3       295      94       101       commit;
   220 IGNR      3         3       1         1    end tl_delete_test_runs;
   223 IGNR      0         8       1         3    procedure tl_insert_dbout_profiles
   230 IGNR      7      1387     110       518          insert into wt_dbout_profiles values in_rec;
   231 IGNR      7         9       1         2          l_sqlerrm := SQLERRM;
   232 IGNR      7       618      76       125          commit;
   233 IGNR      0         0       0         0       exception when others then
   234 IGNR      0         0       0         0          l_sqlerrm := SQLERRM;
   235 IGNR      0         0       0         0       end;
   237 IGNR      7        34       4         8       wt_assert.eq (
   242 IGNR      7        28       3         5       wt_assert.eqqueryvalue (
   249 IGNR      7         6       1         1    end tl_insert_dbout_profiles;
   252 IGNR      0         3       1         1    procedure tl_delete_dbout_profiles
   258 IGNR      3         4       1         2       l_sql_txt := 'delete from wt_dbout_profiles where test_run_id = ' ||
   260 IGNR      3         3       1         1       wt_assert.raises (
   264 IGNR      3        11       3         4       wt_assert.eqqueryvalue (
   269 IGNR      3       321      91       133       commit;
   270 IGNR      3         3       1         1    end tl_delete_dbout_profiles;
   277 UNKN      0         6       1         1 function get_error_msg
   281 EXEC      8         1       0         1    l_msg_prefix  varchar2(50) := 'DBMS_PROFILER Error: ';
   283 EXEC      8         0       0         0    case retnum_in
   284 EXEC     10        10       1         4    when dbms_profiler.error_param then return l_msg_prefix ||
   286 EXEC      8         6       0         2    when dbms_profiler.error_io then return l_msg_prefix ||
   290 EXEC      6         6       1         2    when dbms_profiler.error_version then return l_msg_prefix ||
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   295 EXEC      2         6       1         5    else return l_msg_prefix ||
   298 EXEC      8         1       0         1 end get_error_msg;
   302 IGNR      0         4       4         4    procedure t_get_error_msg
   306 IGNR      2         5       1         4       wt_assert.g_testcase := 'Get Error Messages';
   307 IGNR      1         3       1         2       wt_assert.isnotnull (
   310 IGNR      1        25       1        24       wt_assert.this (
   315 IGNR      1         0       0         0       wt_assert.isnotnull (
   318 IGNR      1        12       1        11       wt_assert.this (
   323 IGNR      1         2       1         1       wt_assert.isnotnull (
   326 IGNR      1        29       1        28       wt_assert.this (
   331 IGNR      1         1       1         1       wt_assert.isnotnull (
   334 IGNR      1         7       7         7       wt_assert.this (
   338 IGNR      1         2       2         2    end t_get_error_msg;
   343 UNKN      0         3       1         1 procedure delete_plsql_profiler_recs
   347 EXEC      4        74      14        25 begin
   348 EXEC      4       990     104       399    delete from plsql_profiler_data
   350 EXEC      4       482      56       201    delete from plsql_profiler_units
   352 EXEC      4       366      48       140    delete from plsql_profiler_runs
   354 EXEC      4       584      46       352    COMMIT;
   355 EXEC      4        46       9        15 end delete_plsql_profiler_recs;
   359 IGNR      0         2       2         2    procedure t_delete_profiler_recs
   361 IGNR      1         0       0         0       c_test_run_id   constant number := -99;
   365 IGNR      1         1       1         1       wt_assert.g_testcase := 'Delete PL/SQL Profiler Records Happy Path 1';
   367 IGNR      1         0       0         0          delete_plsql_profiler_recs(c_test_run_id);  -- Should run without error
   368 IGNR      1        59      59        59          l_err_stack := dbms_utility.format_error_stack     ||
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   370 IGNR      0         0       0         0       exception when others then
   371 IGNR      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
   373 IGNR      0         0       0         0       end;
   375 IGNR      1        10      10        10       wt_assert.isnull (
   378 IGNR      1         0       0         0       tl_count_plsql_profiler_recs(c_test_run_id, 0);
   380 IGNR      1         1       1         1       wt_assert.g_testcase := 'Delete PL/SQL Profiler Records Happy Path 2';
   381 IGNR      1         0       0         0       tl_insert_plsql_profiler_recs(c_test_run_id);
   382 IGNR      1         1       1         1       tl_count_plsql_profiler_recs(c_test_run_id, 1);
   384 IGNR      1         0       0         0          delete_plsql_profiler_recs(c_test_run_id);  -- Should run without error
   385 IGNR      1         7       7         7          l_err_stack := dbms_utility.format_error_stack     ||
   387 IGNR      0         0       0         0       exception when others then
   388 IGNR      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
   390 IGNR      0         0       0         0       end;
   392 IGNR      1         9       9         9       wt_assert.isnull (
   395 IGNR      1         1       1         1       tl_count_plsql_profiler_recs(c_test_run_id, 0);
   396 IGNR      1         2       2         2    end t_delete_profiler_recs;
   401 UNKN      0        31       3         4 procedure find_dbout
   445 EXEC      8         8       1         1    C_HEAD_RE CONSTANT varchar2(30) := '--% WTPLSQL SET DBOUT "';
   446 EXEC      8         3       0         1    C_MAIN_RE CONSTANT varchar2(30) := '[[:alnum:] ._$#:]+';
   447 EXEC      8         6       0         1    C_TAIL_RE CONSTANT varchar2(30) := '" %--';
   449 UNKN      0         3       0         1    cursor c_annotation is
   450 EXEC      8      1162      80       204       select regexp_substr(src.text, C_HEAD_RE||C_MAIN_RE||C_TAIL_RE)  TEXT
   456 UNKN      0         6       1         1        order by src.line;
   459 UNKN      0         7       1         2    cursor c_readable is
   460 EXEC      4       800     187       222       select *
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   464 UNKN      0        12       2         6         and  src.type   = g_rec.dbout_type;
   471 EXEC      8         2       0         1    open c_annotation;
   472 EXEC      8      2457     227       667    fetch c_annotation into l_target;
   473 EXEC      8        12       1         2    if c_annotation%NOTFOUND
   476 EXEC      2        25       2        23       close c_annotation;
   477 EXEC      2         5       2         3       return;
   479 EXEC      6       248      32        66    close c_annotation;
   481 EXEC      6       209      28        48    l_target := regexp_replace(SRCSTR      => l_target
   487 EXEC      6        76      10        16    l_target := regexp_replace(SRCSTR      => l_target
   493 EXEC      6        29       4         7    l_dot_pos := instr(l_target,'.');
   494 EXEC      6         5       1         2    l_cln_pos := instr(l_target,':');
   497 EXEC      6   2102720       1    363842       select obj.owner
   528 EXEC      1         0       0         0       when NO_DATA_FOUND
   530 EXEC      1         9       9         9          g_rec.error_message := 'Unable to find database object "' ||
   532 EXEC      1         0       0         0          return;
   533 EXEC      1         0       0         0       when TOO_MANY_ROWS
   535 EXEC      1        11      11        11          g_rec.error_message := 'Found too many database objects "' ||
   537 EXEC      1         1       1         1          return;
   540 EXEC      4         4       1         1    open c_readable;
   541 EXEC      4       550     123       147    fetch c_readable into b_readable;
   542 EXEC      4         6       1         2    if c_readable%NOTFOUND
   544 EXEC      1         3       0         2       if g_rec.dbout_type in ('FUNCTION', 'PROCEDURE', 'PACKAGE BODY',
   549 IGNR      0         0       0         0          g_rec.error_message := 'Unable to read source for ' || g_rec.dbout_type ||
   553 EXEC      1         0       0         0          g_rec.prof_runid := -1;  -- Don't run profiler.
   554 EXEC      1         0       0         0       end if;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   556 EXEC      4       176      16        92    close c_readable;
   558 EXEC      6        38       5         8 end find_dbout;
   562 IGNR      1         5       5         5    procedure t_find_dbout
   567 IGNR      1         1       1         1       l_pname      varchar2(128) := 'WT_PROFILE_FIND_DBOUT';
   569 IGNR      0         5       0         1       procedure run_find_dbout is begin
   570 IGNR      6        11       1         2          l_recSAVE := g_rec;
   571 IGNR      6         6       1         1          g_rec := l_recNULL;
   572 IGNR      6         6       1         1          find_dbout(l_pname);
   573 IGNR      6        27       1         6          l_recTEST := g_rec;
   574 IGNR      6         5       1         1          g_rec := l_recSAVE;
   575 IGNR      6         3       1         1       end run_find_dbout;
   578 IGNR      1         1       1         1       wt_assert.g_testcase := 'Find DBOUT Setup';
   579 IGNR      1         0       0         0       tl_compile_db_object
   584 IGNR      1         0       0         0       wt_assert.g_testcase := 'Find DBOUT Happy Path 1';
   585 IGNR      1         5       5         5       tl_compile_db_object
   590 IGNR      1         0       0         0       run_find_dbout;
   592 IGNR      1         2       2         2       wt_assert.isnull
   595 IGNR      1         0       0         0       wt_assert.isnull
   599 IGNR      1         1       1         1       wt_assert.isnull
   602 IGNR      1         0       0         0       wt_assert.isnull
   606 IGNR      1         0       0         0       wt_assert.g_testcase := 'Find DBOUT Happy Path 2';
   607 IGNR      1         6       6         6       tl_compile_db_object
   615 IGNR      1         0       0         0       run_find_dbout;
   617 IGNR      1         7       2         5       wt_assert.eq
   621 IGNR      1         2       2         2       wt_assert.eq
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   626 IGNR      1         0       0         0       wt_assert.eq
   630 IGNR      1         1       1         1       wt_assert.isnull
   634 IGNR      1         1       1         1       wt_assert.g_testcase := 'Find DBOUT Happy Path 3';
   635 IGNR      1         8       1         7       tl_compile_db_object
   644 IGNR      1         1       1         1       run_find_dbout;
   646 IGNR      1         8       3         5       wt_assert.eq
   650 IGNR      1         0       0         0       wt_assert.eq
   655 IGNR      1         1       1         1       wt_assert.eq
   659 IGNR      1         1       1         1       wt_assert.isnull
   663 IGNR      1         1       1         1       wt_assert.g_testcase := 'Find DBOUT Sad Path 1';
   664 IGNR      1         4       4         4       tl_compile_db_object
   672 IGNR      1         0       0         0       run_find_dbout;
   674 IGNR      1         4       4         4       wt_assert.isnull
   677 IGNR      1         1       1         1       wt_assert.isnull
   681 IGNR      1         1       1         1       wt_assert.isnull
   684 IGNR      1         1       1         1       wt_assert.eq
   689 IGNR      1         1       1         1       wt_assert.g_testcase := 'Find DBOUT Sad Path 2';
   690 IGNR      1         9       1         8       tl_compile_db_object
   698 IGNR      1         0       0         0       run_find_dbout;
   700 IGNR      1         8       2         6       wt_assert.eq
   704 IGNR      1         0       0         0       wt_assert.eq
   708 IGNR      1         0       0         0       wt_assert.eq
   713 IGNR      1         1       1         1       wt_assert.g_testcase := 'Find DBOUT Sad Path 3';
   714 IGNR      1         6       6         6       tl_compile_db_object
   722 IGNR      1         1       1         1       run_find_dbout;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   724 IGNR      1         4       4         4       wt_assert.eq
   728 IGNR      1         0       0         0       wt_assert.eq
   733 IGNR      1         2       2         2       wt_assert.eq
   737 IGNR      1         1       1         1       wt_assert.isnull
   741 IGNR      1         1       1         1       wt_assert.g_testcase := 'Find DBOUT Teardown';
   742 IGNR      1         1       1         1       tl_drop_db_object(l_pname, 'package');
   743 IGNR      1         3       3         3    end t_find_dbout;
   748 EXEC      8        36       4         5 procedure load_ignr_aa
   750 UNKN      0         3       1         1    cursor c_find_begin is
   751 EXEC      8      1120     116       231       select line
   758 IGNR      0         6       1         1        order by line;
   760 IGNR      0         4       1         1    cursor c_find_end (in_line in number, in_col in number) is
   761 IGNR      8       986      48       234       with q1 as (
   778 UNKN      0         6       1         2             ,col;
   781 EXEC      8         8       1         2    g_ignr_aa.delete;
   782 EXEC      8         2       1         1    open c_find_begin;
   783 EXEC     16         0       0         0    loop
   784 EXEC     16      1522      17       241       fetch c_find_begin into buff_find_begin;
   785 EXEC     16        13       0         1       exit when c_find_begin%NOTFOUND;
   786 EXEC      8         3       1         1       open c_find_end (buff_find_begin.line, buff_find_begin.col);
   787 EXEC      8       843      88       138       fetch c_find_end into buff_find_end;
   788 EXEC      8         7       1         1       if c_find_end%NOTFOUND
   790 EXEC      2       528     181       347          select max(line)
   797 EXEC      8       217       7        53       close c_find_end;
   798 EXEC     34        33       1         6       for i in buff_find_begin.line + g_rec.trigger_offset ..
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   801 EXEC     26        41       1         9          g_ignr_aa(i) := 'X';
   804 EXEC      8       101      11        17    close c_find_begin;
   805 EXEC      8        19       1         5 end load_ignr_aa;
   809 IGNR      1         9       9         9    procedure t_load_ignr_aa
   814 IGNR      1         0       0         0       l_pname      varchar2(128) := 'WT_PROFILE_LOAD_IGNR';
   816 IGNR      0         5       1         1       procedure run_load_ignr is begin
   817 IGNR      7        13       1         2          l_recSAVE  := g_rec;
   818 IGNR      7        17       2         3          l_ignrSAVE := g_ignr_aa;
   819 IGNR      7        10       1         2          g_ignr_aa.delete;
   820 IGNR      7         6       0         2          g_rec.dbout_owner    := USER;
   821 IGNR      7         5       1         1          g_rec.dbout_name     := l_pname;
   822 IGNR      7         6       1         1          g_rec.dbout_type     := 'PACKAGE BODY';
   823 IGNR      7         4       1         1          g_rec.trigger_offset := 0;
   824 IGNR      7         1       0         1          load_ignr_aa;
   825 IGNR      7        35       2         8          l_ignrTEST := g_ignr_aa;
   826 IGNR      7        15       2         4          g_ignr_aa := l_ignrSAVE;
   827 IGNR      7        11       1         2          g_rec   := l_recSAVE;
   828 IGNR      7         1       0         1       end run_load_ignr;
   831 IGNR      1         1       1         1       wt_assert.g_testcase := 'Load Ignr Setup';
   832 IGNR      1         5       5         5       wt_assert.isnotnull
   835 IGNR      1         1       1         1       tl_compile_db_object
   840 IGNR      1         0       0         0       wt_assert.g_testcase := 'Load Ignr Happy Path 1';
   841 IGNR      1         6       6         6       tl_compile_db_object
   846 IGNR      1         1       1         1       run_load_ignr;
   847 IGNR      1         7       7         7       wt_assert.eq
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   852 IGNR      1         0       0         0       wt_assert.g_testcase := 'Load Ignr Happy Path 2';
   853 IGNR      1         6       6         6       tl_compile_db_object
   861 IGNR      1         1       1         1       run_load_ignr;
   863 IGNR      1         9       9         9       wt_assert.eq
   867 IGNR      4         0       0         0       for i in 3 .. 5
   869 IGNR      3        10       2         5          wt_assert.eq
   875 IGNR      1         1       1         1       wt_assert.g_testcase := 'Load Ignr Happy Path 3';
   876 IGNR      1        41      41        41       tl_compile_db_object
   886 IGNR      1         0       0         0       run_load_ignr;
   888 IGNR      1         5       5         5       wt_assert.eq
   892 IGNR      4         1       0         1       for i in 4 .. 6
   894 IGNR      3        10       2         6          wt_assert.eq
   900 IGNR      1         1       1         1       wt_assert.g_testcase := 'Load Ignr Happy Path 4';
   901 IGNR      1         7       7         7       tl_compile_db_object
   914 IGNR      1         0       0         0       run_load_ignr;
   916 IGNR      1         5       5         5       wt_assert.eq
   920 IGNR      4         2       1         1       for i in 4 .. 6
   922 IGNR      3        12       3         6          wt_assert.eq
   928 IGNR      3         0       0         0       for i in 8 .. 10
   930 IGNR      3         8       2         3          wt_assert.eq
   936 IGNR      1         0       0         0       wt_assert.g_testcase := 'Load Ignr Sad Path 1';
   937 IGNR      1         4       4         4       tl_compile_db_object
   944 IGNR      1         1       1         1       run_load_ignr;
   945 IGNR      1         5       5         5       wt_assert.eq
   950 IGNR      1         1       1         1       wt_assert.g_testcase := 'Load Ignr Sad Path 2';
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   951 IGNR      1         7       7         7       tl_compile_db_object
   963 IGNR      1         1       1         1       run_load_ignr;
   965 IGNR      1         5       5         5       wt_assert.eq
   969 IGNR      4         2       0         1       for i in 4 .. 6
   971 IGNR      3         9       2         4          wt_assert.eq
   977 IGNR      1         0       0         0       wt_assert.g_testcase := 'Load Ignr Sad Path 3';
   978 IGNR      1         6       6         6       tl_compile_db_object
   990 IGNR      1         0       0         0       run_load_ignr;
   992 IGNR      1        10      10        10       wt_assert.eq
   996 IGNR      6         0       0         0       for i in 4 .. 8
   998 IGNR      5        20       3         6          wt_assert.eq
  1004 IGNR      1         1       1         1       wt_assert.g_testcase := 'Load Ignr Teardown';
  1005 IGNR      1         1       1         1       tl_drop_db_object(l_pname, 'package');
  1006 IGNR      1         4       4         4       wt_assert.isnotnull
  1009 IGNR      1         4       4         4    end t_load_ignr_aa;
  1014 EXEC      1        11       1        10 procedure insert_dbout_profile
  1019 UNKN      0        22       2         5    procedure l_set_status is begin
  1020 EXEC      8        18       2         4       if g_ignr_aa.EXISTS(prof_rec.line)
  1023 EXEC      1         0       0         0          prof_rec.status := 'IGNR';
  1024 EXEC      1         1       1         1          return;
  1026 EXEC      7         4       1         2       if prof_rec.total_occur > 0
  1029 EXEC      3         1       1         1          prof_rec.status := 'EXEC';
  1030 EXEC      3         2       1         1          return;
  1032 EXEC      4         3       1         1       if    prof_rec.total_occur = 0
  1036 EXEC      3        70      17        32          if regexp_like(prof_rec.text, '^[[:space:]]*' ||
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1041 EXEC      2         0       0         0             prof_rec.status := 'EXCL';
  1042 EXEC      2         2       2         2          elsif     prof_rec.line = l_max_line
  1048 EXEC      1         0       0         0             prof_rec.status := 'NOTX';
  1050 EXEC      3         8       2         4          return;
  1053 EXEC      1         0       0         0       prof_rec.status := 'UNKN';
  1054 EXEC      1         1       1         1    end l_set_status;
  1055 EXEC      1        15      15        15 begin
  1057 EXEC      1       221     221       221    select max(ppd.line#) into l_max_line
  1066 EXEC      1         0       0         0    load_ignr_aa;
  1067 EXEC      1         1       1         1    prof_rec.test_run_id := g_rec.test_run_id;
  1068 EXEC      3       798       5       759    for buf1 in (
  1069#NOTX#     0         0       0         0       select src.line
  1089 EXEC      8         7       0         2       prof_rec.line        := buf1.line;
  1090 EXEC      8         0       0         0       prof_rec.total_occur := buf1.total_occur;
  1091 EXEC      8         5       1         1       prof_rec.total_usecs := buf1.total_time/1000;
  1092 EXEC      8         1       0         1       prof_rec.min_usecs   := buf1.min_time/1000;
  1093 EXEC      8         2       0         1       prof_rec.max_usecs   := buf1.max_time/1000;
  1094 EXEC      8        10       1         2       prof_rec.text        := buf1.text;
  1095 EXEC      8         0       0         0       prof_rec.status      := NULL;
  1096 EXEC      8         3       1         1       l_set_status;
  1097 EXEC      8       929      75       373       insert into wt_dbout_profiles values prof_rec;
  1100 IGNR      8         5       1         1       if not g_skip_add then
  1102 IGNR      0         0       0         0       wt_test_run_stat.add_profile(prof_rec);
  1108 EXEC      1       135     135       135    COMMIT;
  1111 EXEC      1         5       5         5    g_ignr_aa.delete;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1112 EXEC      1         2       2         2    delete_plsql_profiler_recs(g_rec.prof_runid);
  1113 EXEC      1         7       7         7 end insert_dbout_profile;
  1117 IGNR      1         6       6         6    procedure t_insert_dbout_profile
  1123 IGNR      1         0       0         0       c_test_run_id  constant number := -97;
  1124 IGNR      1         3       3         3       l_pname        varchar2(128) := 'WT_PROFILE_INSERT_DBOUT';
  1128 IGNR      0         6       0         2       procedure insert_plsql_profiler_data
  1134 IGNR      8         4       0         1          data_rec.line#       := in_line#;
  1135 IGNR      8         2       1         1          data_rec.total_occur := in_total_occur;
  1136 IGNR      8         0       0         0          data_rec.total_time  := in_total_time;
  1139 IGNR      8      2756      98      1844             insert into plsql_profiler_data values data_rec;
  1140 IGNR      8      1058      74       213             commit;
  1141 IGNR      8        18       1         5             l_sqlerrm := SQLERRM;
  1142 IGNR      0         0       0         0          exception when others then
  1143 IGNR      0         0       0         0             l_sqlerrm := SQLERRM;
  1144 IGNR      0         0       0         0          end;
  1145 IGNR      8        44       3        13          wt_assert.eq (
  1149 IGNR      8         6       0         2       end insert_plsql_profiler_data;
  1151 IGNR      0        13       1         2       procedure test_dbout_profiler
  1157 IGNR     16        58       2         7          wt_assert.eqqueryvalue
  1165 IGNR     16         6       0         1       end test_dbout_profiler;
  1168 IGNR      1         2       2         2       wt_assert.g_testcase := 'Insert DBOUT Profile Setup';
  1169 IGNR      1         0       0         0       tl_compile_db_object
  1174 IGNR      1        10      10        10       tl_compile_db_object
  1186 IGNR      1         1       1         1       tl_insert_plsql_profiler_recs(c_test_run_id);
  1187 IGNR      1         1       1         1       tl_count_plsql_profiler_recs(c_test_run_id, 1);
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1188 IGNR      1         0       0         0       tl_insert_test_runs(c_test_run_id, 'Insert DBOUT Test');
  1190 IGNR      1         1       1         1       units_rec.runid        := c_test_run_id;
  1191 IGNR      1         1       1         1       units_rec.unit_number  := 1;
  1192 IGNR      1         2       0         2       units_rec.unit_owner   := USER;
  1193 IGNR      1         1       1         1       units_rec.unit_name    := l_pname;
  1194 IGNR      1         1       1         1       units_rec.unit_type    := 'PACKAGE BODY';
  1195 IGNR      1         0       0         0       units_rec.total_time   := 0;
  1198 IGNR      1      1084    1084      1084          insert into plsql_profiler_units values units_rec;
  1199 IGNR      1       102     102       102          commit;
  1200 IGNR      1         8       8         8          l_err_stack := dbms_utility.format_error_stack     ||
  1202 IGNR      0         0       0         0       exception when others then
  1203 IGNR      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1205 IGNR      0         0       0         0       end;
  1207 IGNR      1         3       3         3       wt_assert.isnull (
  1210 IGNR      1         8       8         8       wt_assert.eqqueryvalue
  1217 IGNR      1         0       0         0       data_rec.runid       := c_test_run_id;
  1218 IGNR      1         0       0         0       data_rec.unit_number := 1;
  1219 IGNR      1         0       0         0       data_rec.min_time    := 0;
  1220 IGNR      1         0       0         0       data_rec.max_time    := 1;
  1221 IGNR      1         1       1         1       insert_plsql_profiler_data(1, 0, 0);
  1222 IGNR      1         1       1         1       insert_plsql_profiler_data(2, 0, 1);
  1223 IGNR      1         1       1         1       insert_plsql_profiler_data(3, 1, 1);
  1224 IGNR      1         1       1         1       insert_plsql_profiler_data(5, 1, 1);
  1225 IGNR      1         0       0         0       insert_plsql_profiler_data(7, 1, 1);
  1226 IGNR      1         0       0         0       insert_plsql_profiler_data(8, 0, 0);
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1227 IGNR      1         1       1         1       insert_plsql_profiler_data(9, 1, 1);
  1228 IGNR      1         0       0         0       insert_plsql_profiler_data(10, 0, 0);
  1230 IGNR      1         6       6         6       wt_assert.eqqueryvalue
  1237 IGNR      1         1       1         1       wt_assert.g_testcase := 'Insert DBOUT Profile Happy Path';
  1238 IGNR      1         2       2         2       l_recSAVE := g_rec;
  1239 IGNR      1         1       1         1       g_rec.test_run_id     := c_test_run_id;
  1240 IGNR      1         1       0         1       g_rec.dbout_owner     := USER;
  1241 IGNR      1         0       0         0       g_rec.dbout_name      := l_pname;
  1242 IGNR      1         1       1         1       g_rec.dbout_type      := 'PACKAGE BODY';
  1243 IGNR      1         1       1         1       g_rec.prof_runid      := c_test_run_id;
  1244 IGNR      1         0       0         0       g_rec.trigger_offset  := 0;
  1245 IGNR      1         0       0         0       g_rec.error_message   := '';
  1247 IGNR      1         0       0         0       g_skip_add := TRUE;
  1249 IGNR      1         1       1         1          insert_dbout_profile;
  1250 IGNR      1         6       6         6          l_err_stack := dbms_utility.format_error_stack     ||
  1252 IGNR      0         0       0         0       exception when others then
  1253 IGNR      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1255 IGNR      0         0       0         0       end;
  1256 IGNR      1         0       0         0       g_skip_add := FALSE;
  1257 IGNR      1         2       2         2       g_rec := l_recSAVE;
  1258 IGNR      1         4       4         4       wt_assert.isnull (
  1262 IGNR      1         1       1         1       test_dbout_profiler(1, 'STATUS', 'EXCL');
  1263 IGNR      1         5       5         5       test_dbout_profiler(1, 'TEXT',   'package body WT_PROFILE_INSERT_DBOUT is' || CHR(10));
  1264 IGNR      1         0       0         0       test_dbout_profiler(2, 'STATUS', 'UNKN');
  1265 IGNR      1         2       2         2       test_dbout_profiler(2, 'TEXT',   'begin' || CHR(10));
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1266 IGNR      1         0       0         0       test_dbout_profiler(3, 'STATUS', 'EXEC');
  1267 IGNR      1         2       2         2       test_dbout_profiler(3, 'TEXT',   '  l_junk := 1;' || CHR(10));
  1268 IGNR      1         1       1         1       test_dbout_profiler(5, 'STATUS', 'IGNR');
  1269 IGNR      1         2       2         2       test_dbout_profiler(5, 'TEXT',   '  l_junk := 2;' || CHR(10));
  1270 IGNR      1         1       1         1       test_dbout_profiler(7, 'STATUS', 'EXEC');
  1271 IGNR      1         1       1         1       test_dbout_profiler(7, 'TEXT',   '  if 0 = 1 then' || CHR(10));
  1272 IGNR      1         0       0         0       test_dbout_profiler(8, 'STATUS', 'NOTX');
  1273 IGNR      1         1       1         1       test_dbout_profiler(8, 'TEXT',   '     l_junk := 3;' || CHR(10));
  1274 IGNR      1         0       0         0       test_dbout_profiler(9, 'STATUS', 'EXEC');
  1275 IGNR      1         1       1         1       test_dbout_profiler(9, 'TEXT',   '  end if;' || CHR(10));
  1276 IGNR      1         0       0         0       test_dbout_profiler(10, 'STATUS', 'EXCL');
  1277 IGNR      1         1       1         1       test_dbout_profiler(10, 'TEXT',   'end WT_PROFILE_INSERT_DBOUT;');
  1279 IGNR      1         0       0         0       wt_assert.g_testcase := 'Insert DBOUT Profile Teardown';
  1280 IGNR      1         0       0         0       tl_delete_dbout_profiles(c_test_run_id);
  1281 IGNR      1         1       1         1       tl_delete_test_runs(c_test_run_id);
  1282 IGNR      1         1       1         1       tl_delete_plsql_profiler_recs(c_test_run_id);
  1283 IGNR      1         1       1         1       tl_count_plsql_profiler_recs(c_test_run_id, 0);
  1284 IGNR      1         1       1         1       tl_drop_db_object(l_pname, 'package');
  1285 IGNR      1         3       3         3    end t_insert_dbout_profile;
  1295 EXEC      3         9       3         3 procedure initialize
  1309 EXEC      3         3       1         1    out_dbout_owner     := '';
  1310 EXEC      3         1       0         1    out_dbout_name      := '';
  1311 EXEC      3         0       0         0    out_dbout_type      := '';
  1312 EXEC      3         1       0         1    out_trigger_offset  := NULL;
  1313 EXEC      3         0       0         0    out_profiler_runid  := NULL;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1314 EXEC      3         1       0         1    out_error_message   := '';
  1315 EXEC      3         1       1         1    g_rec := l_rec_NULL;
  1319 IGNR      3         1       0         1       g_skip_insert := FALSE;
  1320 IGNR      3         1       1         1       g_skip_add    := FALSE;
  1323 EXEC      3         0       0         0    if in_test_run_id is null
  1325 EXEC      1        87      87        87       raise_application_error  (-20004, 'i_test_run_id is null');
  1327 EXEC      2         1       0         1    g_rec.test_run_id := in_test_run_id;
  1329 EXEC      2         0       0         0    find_dbout(in_pkg_name => in_runner_name);
  1330 EXEC      2         4       1         3    out_dbout_owner    := g_rec.dbout_owner;
  1331 EXEC      2         0       0         0    out_dbout_name     := g_rec.dbout_name;
  1332 EXEC      2         0       0         0    out_dbout_type     := g_rec.dbout_type;
  1333 EXEC      2         1       0         1    out_error_message  := g_rec.error_message;
  1335 EXEC      2         1       1         1    if    g_rec.dbout_name    is null      -- No DBOUT notation
  1339 EXEC      1         0       0         0       g_rec.prof_runid := NULL;
  1340 EXEC      1         0       0         0       return;
  1343 EXEC      1         3       1         2    g_rec.trigger_offset := wt_profiler.trigger_offset
  1347 EXEC      1         1       1         1    out_trigger_offset := g_rec.trigger_offset;
  1349 EXEC      1         6       1         5    l_retnum := dbms_profiler.INTERNAL_VERSION_CHECK;
  1350 EXEC      1         1       1         1    if l_retnum <> 0 then
  1353 IGNR      0         0       0         0       raise_application_error(-20005,
  1359 EXEC      1        22       0        18    l_retnum := dbms_profiler.START_PROFILER(run_number => g_rec.prof_runid);
  1360 EXEC      2         1       0         1    if l_retnum <> 0 then
  1362 IGNR      0         0       0         0       raise_application_error(-20006,
  1367 EXEC      2         2       1         1    out_profiler_runid := g_rec.prof_runid;
  1369 EXEC      2         4       1         3 end initialize;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1373 IGNR      0         8       8         8    procedure t_initialize
  1375 IGNR      1         0       0         0       c_test_run_id   constant number := -96;
  1376 IGNR      1         1       1         1       l_pname         varchar2(128) := 'WT_PROFILE_INITIALIZE';
  1383 IGNR      1         2       2         2       wt_assert.g_testcase := 'Insert DBOUT Profile Setup';
  1384 IGNR      1         0       0         0       tl_compile_db_object
  1389 IGNR      1         1       1         1       wt_assert.g_testcase := 'Initialize Test HAPPY Path 1';
  1390 IGNR      1         4       4         4       tl_compile_db_object
  1397 IGNR      1         1       1         1       l_recSAVE := g_rec;
  1398 IGNR      1         4       1         3       initialize
  1407 IGNR      1         2       2         2       l_recTEST := g_rec;
  1408 IGNR      1         1       1         1       g_rec := l_recSAVE;
  1410 IGNR      1         4       4         4       wt_assert.isnull (
  1413 IGNR      1         0       0         0       wt_assert.isnull (
  1417 IGNR      1         1       1         1       wt_assert.isnull (
  1420 IGNR      1         1       1         1       wt_assert.isnull (
  1424 IGNR      1         0       0         0       wt_assert.isnull (
  1427 IGNR      1         0       0         0       wt_assert.isnull (
  1431 IGNR      1         1       1         1       wt_assert.isnull (
  1434 IGNR      1         0       0         0       wt_assert.isnull (
  1438 IGNR      1         1       1         1       wt_assert.isnull (
  1441 IGNR      1         1       1         1       wt_assert.isnull (
  1445 IGNR      1         1       1         1       wt_assert.isnull (
  1448 IGNR      1         0       0         0       wt_assert.isnull (
  1452 IGNR      1         0       0         0       wt_assert.g_testcase := 'Initialize Test HAPPY Path 2';
  1453 IGNR      1         5       5         5       tl_compile_db_object
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1462 IGNR      1         1       1         1       l_recSAVE := g_rec;
  1463 IGNR      1         5       2         3       initialize
  1472 IGNR      1         4       4         4       l_recTEST := g_rec;
  1473 IGNR      1         1       1         1       g_rec := l_recSAVE;
  1475 IGNR      1         3       1         2       wt_assert.eq (
  1479 IGNR      1         0       0         0       wt_assert.eq (
  1484 IGNR      1         0       0         0       wt_assert.eq (
  1488 IGNR      1         4       4         4       wt_assert.isnotnull (
  1492 IGNR      1         2       2         2       wt_assert.eq (
  1496 IGNR      1         0       0         0       wt_assert.isnull (
  1500 IGNR      1         2       1         1       wt_assert.eq (
  1504 IGNR      1         1       1         1       wt_assert.eq (
  1509 IGNR      1         1       1         1       wt_assert.eq (
  1513 IGNR      1         2       2         2       wt_assert.isnotnull (
  1517 IGNR      1         2       2         2       wt_assert.eq (
  1521 IGNR      1         0       0         0       wt_assert.isnull (
  1525 IGNR      1         0       0         0       wt_assert.g_testcase := 'Initialize Test Sad Path 1';
  1526 IGNR      1         0       0         0       l_recSAVE := g_rec;
  1528 IGNR      1         1       1         1          initialize
  1537 IGNR      0         0       0         0          l_sqlerrm := SQLERRM;
  1539 IGNR      1         0       0         0       exception when others then
  1540 IGNR      1        77      77        77          l_sqlerrm := SQLERRM;
  1541 IGNR      0         2       2         2       end;
  1542 IGNR      1         1       1         1       l_recTEST := g_rec;
  1543 IGNR      1         1       1         1       g_rec := l_recSAVE;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1544 IGNR      1         1       1         1       wt_assert.eq (
  1549 IGNR      1         0       0         0       wt_assert.g_testcase := 'Insert DBOUT Profile Teardown';
  1550 IGNR      1         0       0         0       tl_drop_db_object
  1553 IGNR      1         5       5         5    end t_initialize;
  1560 EXEC      4        10       1         4 procedure finalize
  1564 EXEC      4         2       1         1    if g_rec.prof_runid is null
  1566 EXEC      1         0       0         0       return;
  1568 EXEC      3         0       0         0    if g_rec.test_run_id is null
  1570 EXEC      1        38      38        38       raise_application_error (-20000, 'g_rec.test_run_id is null');
  1574 IGNR      0         0       0         0       if not g_skip_insert
  1580 IGNR      1         1       1         1       dbms_profiler.STOP_PROFILER;
  1581 IGNR      0         0       0         0    exception when others then
  1582 IGNR      0         0       0         0       g_rec := l_rec_NULL;
  1584 IGNR      0         0       0         0       raise;
  1586 IGNR      0         0       0         0    insert_dbout_profile;
  1591 EXEC      1         0       0         0    g_rec := l_rec_NULL;
  1592 EXEC      1         1       1         1 end finalize;
  1596 IGNR      1         6       0         6    procedure t_finalize
  1604 IGNR      1         1       1         1       wt_assert.g_testcase := 'Finalize Happy Path 1';
  1605 IGNR      1         1       1         1       l_recSAVE := g_rec;
  1606 IGNR      1         0       0         0       g_rec.prof_runid := NULL;
  1607 IGNR      1         3       3         3       wt_assert.isnull (
  1612 IGNR      1         1       1         1          finalize;
  1613 IGNR      1         5       5         5          l_err_stack := dbms_utility.format_error_stack     ||
  1615 IGNR      0         0       0         0       exception when others then
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1616 IGNR      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1618 IGNR      0         0       0         0       end;
  1619 IGNR      1         1       1         1       g_rec := l_recSAVE;
  1620 IGNR      1         1       1         1       wt_assert.isnull (
  1624 IGNR      1         1       1         1       wt_assert.g_testcase := 'Finalize Happy Path 2';
  1625 IGNR      1         1       1         1       l_recSAVE := g_rec;
  1626 IGNR      1         1       1         1       g_rec.test_run_id    := -1;
  1627 IGNR      1         1       1         1       g_rec.dbout_owner    := 'TEST OWNER';
  1628 IGNR      1         1       1         1       g_rec.dbout_name     := 'TEST NAME';
  1629 IGNR      1         0       0         0       g_rec.dbout_type     := 'TEST TYPE';
  1630 IGNR      1         0       0         0       g_rec.prof_runid     := -2;
  1631 IGNR      1         0       0         0       g_rec.trigger_offset := -3;
  1632 IGNR      1         0       0         0       g_rec.error_message  := 'TEST MESSAGE';
  1634 IGNR      1         0       0         0       g_skip_insert := TRUE;
  1636 IGNR      1         1       1         1          finalize;
  1637 IGNR      1         2       2         2          l_err_stack := dbms_utility.format_error_stack     ||
  1639 IGNR      0         0       0         0       exception when others then
  1640 IGNR      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1642 IGNR      0         0       0         0       end;
  1643 IGNR      1         0       0         0       g_skip_insert := FALSE;
  1645 IGNR      1         1       1         1       l_recTEST := g_rec;
  1646 IGNR      1         0       0         0       g_rec := l_recSAVE;
  1647 IGNR      1         0       0         0       wt_assert.isnull (
  1651 IGNR      1         1       1         1       wt_assert.isnull (
  1654 IGNR      1         1       1         1       wt_assert.isnull (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1658 IGNR      1         1       1         1       wt_assert.isnull (
  1661 IGNR      1         0       0         0       wt_assert.isnull (
  1665 IGNR      1         0       0         0       wt_assert.isnull (
  1668 IGNR      1         1       1         1       wt_assert.isnull (
  1671 IGNR      1         0       0         0       wt_assert.isnull (
  1675 IGNR      1         0       0         0       wt_assert.g_testcase := 'Finalize Sad Path 1';
  1676 IGNR      1         0       0         0       l_recSAVE := g_rec;
  1677 IGNR      1         0       0         0       g_rec.prof_runid := -1;
  1678 IGNR      1         1       1         1       g_rec.test_run_id := NULL;
  1680 IGNR      1         0       0         0          finalize;
  1681 IGNR      1         0       0         0       exception when others then
  1682 IGNR      1        31      31        31          l_sqlerrm := SQLERRM;
  1683 IGNR      0         1       1         1       end;
  1685 IGNR      1         0       0         0       g_rec := l_recSAVE;
  1686 IGNR      1         1       1         1       wt_assert.eq (
  1690 IGNR      1         1       1         1    end t_finalize;
  1696 UNKN      0        35       2        18 function trigger_offset
  1703 EXEC      4         2       0         1    if dbout_type_in != 'TRIGGER'
  1705 EXEC      2         2       0         2       return 0;
  1707 EXEC      4       652       1       536    for buff in (
  1708#NOTX#     0         0       0         0       select line, text from all_source
  1714 EXEC      4       158       4        68       if regexp_instr(buff.text,
  1726 EXEC      1        23       1        22          return buff.line - 1;
  1729 EXEC      1         0       0         0    return 0;
  1730 EXEC      4         6       1         3 end trigger_offset;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1734 IGNR      0         3       3         3    procedure t_trigger_offset
  1738 IGNR      1         1       1         1       wt_assert.g_testcase := 'Trigger Offset Happy Path';
  1739 IGNR      1         8       1         7       wt_assert.eq (
  1746 IGNR      1         4       1         2       wt_assert.eq (
  1753 IGNR      1         1       1         1       wt_assert.g_testcase := 'Trigger Offset Sad Path';
  1754 IGNR      1         3       3         3       wt_assert.eq (
  1760 IGNR      1         1       1         1    end t_trigger_offset;
  1765 UNKN      0        18       2         6 function calc_pct_coverage
  1770 EXEC      8       410       2       169    for buff in (
  1776 EXEC      4         3       0         1       if buff.hits + buff.misses = 0
  1778 EXEC      1        22       1        13          return -1;
  1780 EXEC      3         7       1         4          return round(100 * buff.hits / (buff.hits + buff.misses),2);
  1783#NOTX#     0         0       0         0    return null;
  1784 EXEC      4        10       2         3 END calc_pct_coverage;
  1788 IGNR      0         3       3         3    procedure t_calc_pct_coverage
  1790 IGNR      1         0       0         0       c_test_run_id  constant number := -95;
  1794 IGNR      1         1       1         1       wt_assert.g_testcase := 'Calculate Percent Coverage Setup';
  1795 IGNR      1         0       0         0       tl_insert_test_runs(c_test_run_id, 'Calculate Offset Test');
  1796 IGNR      1         1       1         1       l_rec.test_run_id  := c_test_run_id;
  1797 IGNR      1         1       1         1       l_rec.total_occur  := 1;
  1798 IGNR      1         0       0         0       l_rec.total_usecs  := 1;
  1799 IGNR      1         0       0         0       l_rec.min_usecs    := 1;
  1800 IGNR      1         0       0         0       l_rec.max_usecs    := 1;
  1802 IGNR      1         0       0         0       wt_assert.g_testcase := 'Calculate Percent Coverage Happy Path 1';
  1803 IGNR      1         0       0         0       l_rec.line         := 1;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1804 IGNR      1         1       1         1       l_rec.status       := 'EXEC';
  1805 IGNR      1         4       4         4       l_rec.text         := 'Testing ' || l_rec.line;
  1806 IGNR      1         0       0         0       tl_insert_dbout_profiles(l_rec);
  1808 IGNR      1         0       0         0       l_rec.line         := 2;
  1809 IGNR      1         1       1         1       l_rec.status       := 'NOTX';
  1810 IGNR      1         2       2         2       l_rec.text         := 'Testing ' || l_rec.line;
  1811 IGNR      1         0       0         0       tl_insert_dbout_profiles(l_rec);
  1813 IGNR      1         1       1         1       l_rec.line         := 3;
  1814 IGNR      1         0       0         0       l_rec.status       := 'EXEC';
  1815 IGNR      1         1       1         1       l_rec.text         := 'Testing ' || l_rec.line;
  1816 IGNR      1         0       0         0       tl_insert_dbout_profiles(l_rec);
  1817 IGNR      1         5       1         4       wt_assert.eq (
  1821 IGNR      1         1       1         1       tl_delete_dbout_profiles(c_test_run_id);
  1823 IGNR      1         1       1         1       wt_assert.g_testcase := 'Calculate Percent Coverage Happy Path 2';
  1824 IGNR      1         1       1         1       l_rec.line         := 1;
  1825 IGNR      1         0       0         0       l_rec.status       := 'EXCL';
  1826 IGNR      1         2       2         2       l_rec.text         := 'Testing ' || l_rec.line;
  1827 IGNR      1         1       1         1       tl_insert_dbout_profiles(l_rec);
  1829 IGNR      1         0       0         0       l_rec.line         := 2;
  1830 IGNR      1         0       0         0       l_rec.status       := 'UNKN';
  1831 IGNR      1         2       2         2       l_rec.text         := 'Testing ' || l_rec.line;
  1832 IGNR      1         1       1         1       tl_insert_dbout_profiles(l_rec);
  1834 IGNR      1         0       0         0       l_rec.line         := 3;
  1835 IGNR      1         0       0         0       l_rec.status       := 'EXCL';
  1836 IGNR      1         1       1         1       l_rec.text         := 'Testing ' || l_rec.line;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1837 IGNR      1         0       0         0       tl_insert_dbout_profiles(l_rec);
  1838 IGNR      1         5       1         4       wt_assert.eq (
  1842 IGNR      1         0       0         0       tl_delete_dbout_profiles(c_test_run_id);
  1844 IGNR      1         1       1         1       wt_assert.g_testcase := 'Calculate Percent Coverage Sad Path';
  1845 IGNR      1         2       2         2       wt_assert.isnull (
  1848 IGNR      1         1       1         1       wt_assert.isnull (
  1852 IGNR      1         1       1         1       wt_assert.g_testcase := 'Calculate Percent Coverage Teardown';
  1853 IGNR      1         1       1         1       tl_delete_test_runs(c_test_run_id);
  1854 IGNR      1         2       2         2    end t_calc_pct_coverage;
  1859 EXEC      3         4       0         2 procedure delete_records
  1864 EXEC      3       331      62       150    select profiler_runid into l_profiler_runid
  1866 EXEC      1         0       0         0    delete_plsql_profiler_recs(l_profiler_runid);
  1867 EXEC      1       218     218       218    delete from wt_dbout_profiles
  1870 EXEC      2         0       0         0    when NO_DATA_FOUND
  1872 EXEC      2         1       0         1       return;
  1873 EXEC      3         3       1         1 end delete_records;
  1877 IGNR      0         5       5         5    procedure t_delete_records
  1879 IGNR      1         1       1         1       c_test_run_id  constant number := -98;
  1884 IGNR      1         1       1         1       wt_assert.g_testcase := 'Delete Records Setup';
  1885 IGNR      1         7       7         7       wt_assert.eqqueryvalue (
  1890 IGNR      1         4       4         4       wt_assert.eqqueryvalue (
  1895 IGNR      1         1       1         1       tl_insert_test_runs(c_test_run_id, 'Delete Records Test');
  1897 IGNR      1         0       0         0       l_rec.test_run_id  := c_test_run_id;
  1898 IGNR      1         0       0         0       l_rec.line         := 1;
  1899 IGNR      1         1       1         1       l_rec.status       := 'EXEC';
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1900 IGNR      1         0       0         0       l_rec.total_occur  := 1;
  1901 IGNR      1         0       0         0       l_rec.total_usecs  := 1;
  1902 IGNR      1         0       0         0       l_rec.min_usecs    := 1;
  1903 IGNR      1         0       0         0       l_rec.max_usecs    := 1;
  1904 IGNR      1         1       1         1       l_rec.text         := 'Testing';
  1905 IGNR      1         0       0         0       tl_insert_dbout_profiles(l_rec);
  1907 IGNR      1         0       0         0       wt_assert.g_testcase := 'Delete Records Happy Path 1';
  1908 IGNR      0         0       0         0       begin
  1909 IGNR      1         0       0         0          delete_records(c_test_run_id);
  1910 IGNR      1         6       6         6          l_err_stack := dbms_utility.format_error_stack     ||
  1912 IGNR      0         0       0         0       exception when others then
  1913 IGNR      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1915 IGNR      0         0       0         0       end;
  1917 IGNR      1         1       1         1       wt_assert.isnull (
  1920 IGNR      1         4       4         4       wt_assert.eqqueryvalue (
  1926 IGNR      1         0       0         0       wt_assert.g_testcase := 'Delete Records Sad Path 1';
  1928 IGNR      1         0       0         0          delete_records(-9876);
  1929 IGNR      1         3       3         3          l_err_stack := dbms_utility.format_error_stack     ||
  1931 IGNR      0         0       0         0       exception when others then
  1932 IGNR      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1934 IGNR      0         0       0         0       end;
  1936 IGNR      1         1       1         1       wt_assert.isnull (
  1939 IGNR      1         3       3         3       wt_assert.eqqueryvalue (
  1945 IGNR      1         1       1         1       wt_assert.g_testcase := 'Delete Records Sad Path 2';
  1947 IGNR      1         1       1         1          delete_records(NULL);
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1948 IGNR      1         2       2         2          l_err_stack := dbms_utility.format_error_stack     ||
  1950 IGNR      0         0       0         0       exception when others then
  1951 IGNR      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1953 IGNR      0         0       0         0       end;
  1955 IGNR      1         1       1         1       wt_assert.isnull (
  1958 IGNR      1         3       3         3       wt_assert.eqqueryvalue (
  1964 IGNR      1         0       0         0       wt_assert.g_testcase := 'Delete Records Teardown';
  1965 IGNR      1         0       0         0       tl_delete_test_runs(c_test_run_id);
  1966 IGNR      1         3       3         3    end t_delete_records;
  1973 IGNR      0         1       1         1    procedure WTPLSQL_RUN  --% WTPLSQL SET DBOUT "WT_PROFILER:PACKAGE BODY" %--
  1976 IGNR      1         0       0         0       t_get_error_msg;
  1977 IGNR      1         0       0         0       t_delete_profiler_recs;
  1978 IGNR      1         0       0         0       t_find_dbout;
  1979 IGNR      1         0       0         0       t_load_ignr_aa;
  1980 IGNR      1         0       0         0       t_insert_dbout_profile;
  1981 IGNR      1         0       0         0       t_initialize;
  1982 IGNR      1         0       0         0       t_finalize;
  1983 IGNR      1         0       0         0       t_trigger_offset;
  1984 IGNR      1         1       1         1       t_calc_pct_coverage;
  1985 IGNR      1         0       0         0       t_delete_records;
  1986 IGNR      1         1       1         1    end WTPLSQL_RUN;
  1991 EXCL      0         0       0         0 end wt_profiler;


    wtPLSQL 1.1.0 - Run ID 9: 09-Jun-2018 11:48:51 AM

  Test Results for WTP.WT_RESULT
        Total Testcases:        7       Total Assertions:       35
  Minimum Interval msec:        0      Failed Assertions:        0
  Average Interval msec:       19       Error Assertions:        0
  Maximum Interval msec:      655             Test Yield:   100.00%
   Total Run Time (sec):      0.7

  Code Coverage for PACKAGE BODY WTP.WT_RESULT
          Ignored Lines:      144   Total Profiled Lines:      185
         Excluded Lines:        2   Total Executed Lines:       36
  Minimum LineExec usec:        0     Not Executed Lines:        1
  Average LineExec usec:       22          Unknown Lines:        2
  Maximum LineExec usec:      271          Code Coverage:    97.30%
  Trigger Source Offset:        0

 - WTP.WT_RESULT Test Result Details (Test Run ID 9)
-----------------------------------------------------------
 ---- Test Case: Initialize Happy Path
 PASS  655ms l_results_recTEST.test_run_id. EQ - Expected "-99" and got "-99"
 PASS    1ms l_results_recTEST.result_seq. EQ - Expected "0" and got "0"
 PASS    0ms l_results_recTEST.executed_dtm. ISNOTNULL - Expected NOT NULL and got "09-JUN-2018 11:48:52.327000"
 PASS    0ms l_results_recTEST.interval_msecs. ISNULL - Expected NULL and got ""
 PASS    0ms l_results_recTEST.assertion. ISNULL - Expected NULL and got ""
 PASS    0ms l_results_recTEST.status. ISNULL - Expected NULL and got ""
 PASS    0ms l_results_recTEST.details. ISNULL - Expected NULL and got ""
 PASS    0ms l_results_recTEST.testcase. ISNULL - Expected NULL and got ""
 PASS    0ms l_results_recTEST.message. ISNULL - Expected NULL and got ""
 PASS    0ms l_results_ntTEST.COUNT. EQ - Expected "1" and got "1"
 PASS    0ms l_results_ntTEST(1).test_run_id. ISNULL - Expected NULL and got ""
 PASS    1ms Raises ORA-20009. RAISES/THROWS - Expected exception "%ORA-20009: "in_test_run_id" cannot be NULL%". Actual exception raised was "ORA-20009: "in_test_run_id" cannot be NULL". Exception raised by: "begin wt_result.initialize(NULL); end;".
 ---- Test Case: Finalize Happy Path
 PASS    2ms Before NULL Test Record Count. EQ - Expected "0" and got "0"
 PASS    1ms After NULL Test Record Count. EQ - Expected "0" and got "0"
 PASS    0ms l_results_recTEST.test_run_id. ISNULL - Expected NULL and got ""
 PASS    0ms l_results_ntTEST.COUNT. EQ - Expected "1" and got "1"
 PASS    0ms Record Count Test. EQ - Expected "1" and got "1"
 ---- Test Case: Ad Hoc Save Happy Path Setup
 PASS    0ms l_dbmsout_buff.COUNT - 1. ISNOTNULL - Expected NOT NULL and got "0"
 ---- Test Case: Ad Hoc Save Testing Happy Path
 PASS    0ms DBMS_OUTPUT Status. EQ - Expected "0" and got "0"
 PASS    0ms DBMS_OUTPUT Line. ISNOTNULL - Expected NOT NULL and got " ---- Test Case: Ad Hoc Save Testing Happy Path\n PASS t_save_testing Message. SELFTEST1 - t_save_testing Details"
 PASS    0ms Save Testing NULL Test DBMS_OUTPUT 3 Message. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: Ad Hoc Save Happy Path Teardown
 PASS    0ms l_dbmsout_buff.COUNT - 1. ISNOTNULL - Expected NOT NULL and got "0"
 ---- Test Case: Save Testing Happy Path
 PASS    0ms t_save_testing Testing Message. SELFTEST2 - t_save_testing Testing Details
 PASS    1ms g_results_nt.COUNT. EQ - Expected "24" and got "24"
 PASS    0ms g_results_nt(23).assetion. EQ - Expected "SELFTEST2" and got "SELFTEST2"
 PASS    0ms g_results_nt(23).status. EQ - Expected "PASS" and got "PASS"
 PASS    0ms g_results_nt(23).details. EQ - Expected "t_save_testing Testing Details" and got "t_save_testing Testing Details"
 PASS    0ms g_results_nt(23).testcase. EQ - Expected "Save Testing Happy Path" and got "Save Testing Happy Path"
 PASS    0ms g_results_nt(23).message. EQ - Expected "t_save_testing Testing Message" and got "t_save_testing Testing Message"
 PASS    0ms g_results_nt(23).interval_msecs. ISNOTNULL - Expected NOT NULL and got "0"
 PASS    0ms g_results_nt(23).executed_dtm. ISNOTNULL - Expected NOT NULL and got "09-JUN-2018 11:48:52.336000"
 PASS    0ms g_results_nt(23).result_seq. ISNOTNULL - Expected NOT NULL and got "23"
 ---- Test Case: Delete Records Happy Path
 PASS    1ms Before Insert Count. ISNOTNULL - Expected NOT NULL and got "0"
 PASS    1ms After Insert Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_results where test_run_id = -99
 PASS    1ms After Test Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_results where test_run_id = -99
 PASS    0ms After ROLLBACK Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_results where test_run_id = -99

 - WTP.WT_RESULT PACKAGE BODY Code Coverage Details (Test Run ID 9)
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
     1 EXCL      0         0       0         0 package body wt_result
     9 IGNR      0         0       0         0       g_skip_add  BOOLEAN := FALSE;
    22 EXEC      2        25      10        15 procedure initialize
    27 EXEC      2         1       1         1    if in_test_run_id is NULL
    29 EXEC      1        70      70        70       raise_application_error(-20009, '"in_test_run_id" cannot be NULL');
    31 EXEC      1         1       1         1    g_results_rec := l_results_recNULL;
    32 EXEC      1         0       0         0    g_results_rec.test_run_id  := in_test_run_id;
    33 EXEC      1         1       1         1    g_results_rec.result_seq   := 0;
    34 EXEC      1         7       3         4    g_results_rec.executed_dtm := systimestamp;
    35 EXEC      1         3       3         3    g_results_nt := results_nt_type(null);
    37 IGNR      1         0       0         0    g_skip_add := FALSE;
    39 EXEC      1         1       1         1 end initialize;
    43 IGNR      1        13      13        13    procedure t_initialize
    52 IGNR      1        11      11        11       l_results_ntSAVE  := g_results_nt;
    53 IGNR      1         1       1         1       l_results_recSAVE := g_results_rec;
    54 IGNR      1         0       0         0       g_results_rec     := l_results_recNULL;
    55 IGNR      1         1       1         1       initialize(-99);
    56 IGNR      1         1       1         1       l_results_recTEST := g_results_rec;
    57 IGNR      1         0       0         0       g_results_rec     := l_results_recSAVE;
    58 IGNR      1         2       2         2       l_results_ntTEST  := g_results_nt;
    59 IGNR      1         1       1         1       g_results_nt      := l_results_ntSAVE;
    61 IGNR      2         7       2         5       wt_assert.g_testcase := 'Initialize Happy Path';
    62 IGNR      1         6       6         6       wt_assert.eq (
    67 IGNR      1         6       6         6       wt_assert.eq (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
    71 IGNR      1        17      17        17       wt_assert.isnotnull (
    75 IGNR      1         1       1         1       wt_assert.isnull (
    78 IGNR      1         0       0         0       wt_assert.isnull (
    82 IGNR      1         1       1         1       wt_assert.isnull (
    85 IGNR      1         1       1         1       wt_assert.isnull (
    89 IGNR      1         1       1         1       wt_assert.isnull (
    92 IGNR      1         0       0         0       wt_assert.isnull (
    95 IGNR      1         5       5         5       wt_assert.eq (
   100 IGNR      1         2       2         2       wt_assert.isnull (
   103 IGNR      1         1       1         1       wt_assert.raises (
   107 IGNR      1         2       2         2    end t_initialize;
   114 EXEC      2       119      21        97 procedure finalize
   118 EXEC      2        30      13        17 begin
   119 EXEC      2         1       1         1    if g_results_rec.test_run_id IS NULL
   121 EXEC      1         9       9         9       return;
   124 EXEC      1       207     207       207    forall i in 1 .. g_results_nt.COUNT - 1
   125#NOTX#     0         0       0         0       insert into wt_results values g_results_nt(i);
   126 EXEC      1        87      87        87    COMMIT;
   127 EXEC      1         8       8         8    g_results_nt := results_nt_type(null);
   128 EXEC      1         1       1         1    g_results_rec := l_results_recNULL;
   129 EXEC      1         1       1         1    g_results_nt := results_nt_type(null);
   130 EXEC      1        14      14        14 end finalize;
   134 IGNR      1        14      14        14    procedure t_finalize
   148 IGNR      1         1       1         1       wt_assert.g_testcase := '   ';
   149 IGNR      1        17      17        17       l_results_ntSAVE     := g_results_nt;    -- Capture Original Values
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   150 IGNR      1         0       0         0       l_results_recSAVE    := g_results_rec;   -- Capture Original Values
   153 IGNR      1         0       0         0       g_results_rec  := l_results_recNULL;
   154 IGNR      1         0       0         0       g_results_rec.test_run_id    := -99;
   155 IGNR      1         0       0         0       g_results_rec.result_seq     := 1;
   156 IGNR      1         1       0         1       g_results_rec.executed_dtm   := systimestamp;
   157 IGNR      1         0       0         0       g_results_rec.interval_msecs := 99;
   159 IGNR      1         0       0         0       g_results_rec.assertion     := 'FINALTEST';
   160 IGNR      1         0       0         0       g_results_rec.status        := wt_assert.C_PASS;
   161 IGNR      1         1       1         1       g_results_rec.details       := 'This is a WT_RESULT.FINALIZE Test';
   162 IGNR      1         9       9         9       g_results_nt := results_nt_type(null);
   163 IGNR      1         1       1         1       g_results_nt(1) := g_results_rec;
   164 IGNR      1         2       2         2       g_results_nt.extend;  -- Finalize expects that last element to be NULL
   167 IGNR      1         1       1         1       g_results_rec.test_run_id   := NULL;
   168 IGNR      1       275     275       275       select count(*)
   172 IGNR      1         0       0         0       finalize;
   174 IGNR      1        87      87        87       select count(*)
   178 IGNR      1        56      56        56       rollback;    -- UNDO all database changes
   179 IGNR      1         1       1         1       g_results_rec.test_run_id   := -99;
   182 IGNR      1         0       0         0       l_test_runs_rec.id           := -99;
   183 IGNR      1         4       2         2       l_test_runs_rec.start_dtm    := systimestamp;
   184 IGNR      1         1       1         1       l_test_runs_rec.runner_name  := 'Finalize Test';
   185 IGNR      1         0       0         0       l_test_runs_rec.runner_owner := 'BOGUS';
   186 IGNR      1       375     375       375       insert into wt_test_runs values l_test_runs_rec;
   187 IGNR      1       168     168       168       commit;      -- Must commit because finalize is AUTONOMOUS TRANSACTION
   189 IGNR      1         0       0         0       finalize;    -- g_results_nt is still loaded with one element
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   190 IGNR      1         3       3         3       l_results_ntTEST  := g_results_nt;
   191 IGNR      1         1       1         1       l_results_recTEST := g_results_rec;
   192 IGNR      1       122     122       122       select count(*)
   196 IGNR      1       304     304       304       delete from wt_results where test_run_id = -99;
   197 IGNR      1       207     207       207       delete from wt_test_runs where id = -99;
   198 IGNR      1        91      91        91       commit;      -- UNDO all database changes
   200 IGNR      1         1       1         1       wt_assert.g_testcase := 'Finalize Happy Path';
   202 IGNR      1         3       3         3       g_results_rec := l_results_recSAVE;
   203 IGNR      1        16      16        16       g_results_nt  := l_results_ntSAVE;
   205 IGNR      1         9       9         9       wt_assert.eq (
   209 IGNR      1         2       2         2       wt_assert.eq (
   214 IGNR      1         1       1         1       wt_assert.isnull (
   217 IGNR      1         3       3         3       wt_assert.eq (
   221 IGNR      1         1       1         1       wt_assert.eq (
   225 IGNR      1         4       4         4    end t_finalize;
   230 UNKN      0       667       2       542 procedure save
   239 EXEC     37        10       0         1    if g_results_rec.test_run_id IS NULL
   241 EXEC      1        12      12        12       wt_text_report.ad_hoc_result
   247 EXEC      1         2       2         2       return;
   250 EXEC     36        78       1         5    l_current_tstamp := systimestamp;
   251 EXEC     36       339       5        28    g_results_rec.interval_msecs := extract(day from (
   254 EXEC     36         7       0         1    g_results_rec.executed_dtm  := l_current_tstamp;
   256 EXEC     36        16       0         1    g_results_rec.assertion     := in_assertion;
   257 EXEC     36         7       1         1    g_results_rec.status        := in_status;
   258 EXEC     36        41       1         3    g_results_rec.details       := substr(in_details,1,4000);
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   259 EXEC     36        22       1         1    g_results_rec.testcase      := substr(in_testcase,1,50);
   260 EXEC     36        71       0        61    g_results_rec.message       := substr(in_message,1,200);
   262 EXEC     36        18       1         1    g_results_rec.result_seq    := g_results_rec.result_seq + 1;
   263 EXEC     36        98       1         8    g_results_nt(g_results_nt.COUNT) := g_results_rec;
   264 EXEC     36        90       1         9    g_results_nt.extend;
   267 IGNR     36         8       0         1    if not g_skip_add then
   269 IGNR     35        28       1         2    wt_test_run_stat.add_result(g_results_rec);
   274 EXEC     35        55       1         4 end save;
   278 IGNR      0         9       9         9    procedure t_save_testing
   282 IGNR      1         3       3         3       l_dbmsout_buff   l_dbmsout_buff_type := l_dbmsout_buff_type(1);
   289 IGNR      1         1       1         1       wt_assert.g_testcase := 'Ad Hoc Save Happy Path Setup';
   291 IGNR      1         0       0         0       loop
   292 IGNR      1        42      42        42          DBMS_OUTPUT.GET_LINE (
   295 IGNR      1         1       1         1          exit when l_dbmsout_stat != 0;
   296 IGNR      0         0       0         0          l_dbmsout_buff(l_dbmsout_buff.COUNT) := l_dbmsout_line;
   297 IGNR      0         0       0         0          l_dbmsout_buff.extend;
   299 IGNR      1         2       2         2       wt_assert.isnotnull (
   303 IGNR      1         0       0         0       wt_assert.g_testcase := 'Ad Hoc Save Testing Happy Path';
   304 IGNR      1         0       0         0       l_test_run_id  := g_results_rec.test_run_id;
   305 IGNR      1         1       1         1       g_results_rec.test_run_id := NULL;
   306 IGNR      1         0       0         0       g_skip_add := TRUE;
   307 IGNR      1         0       0         0       wt_result.save (
   313 IGNR      1         0       0         0       g_skip_add := FALSE;
   314 IGNR      1         0       0         0       g_results_rec.test_run_id := l_test_run_id;
   316 IGNR      1         0       0         0       DBMS_OUTPUT.GET_LINE (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   319 IGNR      1         2       2         2       wt_assert.eq (
   324 IGNR      1         1       0         1       if wt_assert.last_pass
   326 IGNR      1         0       0         0          wt_assert.isnotnull (
   329 IGNR      1         8       8         8          wt_assert.this (
   334 IGNR      1         0       0         0          if not wt_assert.last_pass
   337 IGNR      0         0       0         0             DBMS_OUTPUT.PUT_LINE(l_dbmsout_line);
   338 IGNR      0         0       0         0          end if;
   341 IGNR      1         1       1         1       wt_assert.g_testcase := 'Ad Hoc Save Happy Path Teardown';
   343 IGNR      1         0       0         0       for i in 1 .. l_dbmsout_buff.COUNT - 1
   345 IGNR      0         0       0         0          DBMS_OUTPUT.PUT_LINE(l_dbmsout_buff(i));
   347 IGNR      1         1       1         1       wt_assert.isnotnull (
   351 IGNR      1         0       0         0       wt_assert.g_testcase := 'Save Testing Happy Path';
   352 IGNR      1         1       1         1       l_nt_count     := g_results_nt.COUNT;
   353 IGNR      1         1       1         1       g_skip_add := TRUE;
   354 IGNR      1         0       0         0       wt_result.save (
   360 IGNR      1         0       0         0       g_skip_add := FALSE;
   362 IGNR      1         5       5         5       wt_assert.eq (
   366 IGNR      1         1       0         1       if not wt_assert.last_pass
   368 IGNR      0         0       0         0          return;   -- Something went wrong, end this now.
   371 IGNR      1         3       3         3       wt_assert.eq (
   375 IGNR      1         2       2         2       wt_assert.eq (
   380 IGNR      1         2       2         2       wt_assert.eq (
   384 IGNR      1         2       2         2       wt_assert.eq (
   389 IGNR      1         2       2         2       wt_assert.eq (
   393 IGNR      1         4       4         4       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   397 IGNR      1        29      29        29       wt_assert.isnotnull (
   400 IGNR      1         3       3         3       wt_assert.isnotnull (
   406 IGNR      1         3       3         3    end t_save_testing;
   411 UNKN      0         1       1         1 procedure delete_records
   415 EXEC      1       271     271       271    delete from wt_results
   417 EXEC      1         1       1         1 end delete_records;
   421 IGNR      1         6       1         5    procedure t_delete_records
   429 IGNR      1         1       1         1       wt_assert.g_testcase := 'Delete Records Happy Path';
   430 IGNR      1       329     329       329       select count(*) into l_num_recs
   433 IGNR      1         6       6         6       wt_assert.isnotnull (
   437 IGNR      1         0       0         0       l_test_runs_rec.id           := -99;
   438 IGNR      1         3       1         2       l_test_runs_rec.start_dtm    := sysdate;
   439 IGNR      1         1       1         1       l_test_runs_rec.runner_name  := 'Delete Records Test';
   440 IGNR      1         1       1         1       l_test_runs_rec.runner_owner := 'BOGUS';
   441 IGNR      1       465     465       465       insert into wt_test_runs values l_test_runs_rec;
   442 IGNR      1         2       2         2       l_results_rec.test_run_id    := -99;
   444 IGNR      1         0       0         0       l_results_rec.result_seq     := 1;
   445 IGNR      1         3       1         2       l_results_rec.executed_dtm   := sysdate;
   446 IGNR      1         1       1         1       l_results_rec.interval_msecs := 99;
   447 IGNR      1         1       1         1       l_results_rec.assertion      := 'DELRECTEST';
   448 IGNR      1         1       1         1       l_results_rec.status         := wt_assert.C_PASS;
   449 IGNR      1         4       4         4       l_results_rec.details        := 'This is a WT_RESULT.DELETE_RECORDS Test';
   450 IGNR      1       275     275       275       insert into wt_results values l_results_rec;
   452 IGNR      1        11      11        11       wt_assert.eqqueryvalue (
   457 IGNR      1         1       1         1       delete_records(-99);
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   459 IGNR      1         5       5         5       wt_assert.eqqueryvalue (
   464 IGNR      1       319     319       319       rollback;
   465 IGNR      1         4       4         4       wt_assert.eqqueryvalue (
   470 IGNR      1         2       2         2    end t_delete_records;
   477 IGNR      0         1       1         1    procedure WTPLSQL_RUN  --% WTPLSQL SET DBOUT "WT_RESULT:PACKAGE BODY" %--
   481 IGNR      1         1       1         1       t_initialize;
   482 IGNR      1         1       1         1       t_finalize;
   483 IGNR      1         0       0         0       t_save_testing;
   484 IGNR      1         0       0         0       t_delete_records;
   485 IGNR      1         2       2         2    end WTPLSQL_RUN;
   490 EXCL      0         0       0         0 end wt_result;


    wtPLSQL 1.1.0 - Run ID 10: 09-Jun-2018 11:48:52 AM

  Test Results for WTP.WT_TEST_RUN_STAT
        Total Testcases:       12       Total Assertions:      108
  Minimum Interval msec:        0      Failed Assertions:        0
  Average Interval msec:        7       Error Assertions:        0
  Maximum Interval msec:      763             Test Yield:   100.00%
   Total Run Time (sec):      0.8

  Code Coverage for PACKAGE BODY WTP.WT_TEST_RUN_STAT
          Ignored Lines:      302   Total Profiled Lines:      402
         Excluded Lines:        2   Total Executed Lines:       94
  Minimum LineExec usec:        0     Not Executed Lines:        0
  Average LineExec usec:        8          Unknown Lines:        4
  Maximum LineExec usec:      398          Code Coverage:   100.00%
  Trigger Source Offset:        0

 - WTP.WT_TEST_RUN_STAT Test Result Details (Test Run ID 10)
-----------------------------------------------------------
 ---- Test Case: Initialize Happy Path 1 Setup
 PASS  763ms l_tc_aaTEST('TESTCASE1').test_run_id. EQ - Expected "-2" and got "-2"
 PASS    0ms l_recTEST.test_run_id. EQ - Expected "-1" and got "-1"
 ---- Test Case: Initialize Happy Path 1
 PASS    0ms l_tc_aaTEST.COUNT. EQ - Expected "0" and got "0"
 PASS    0ms l_recTEST.test_run_id. ISNULL - Expected NULL and got ""
 ---- Test Case: Add Result Testing
 PASS    0ms Add Result Sad Path 1. EQ - Expected "ORA-20010: Unknown Result status "ABC"" and got "ORA-20010: Unknown Result status "ABC""
 PASS    0ms l_recTEST.test_run_id. EQ - Expected "-10" and got "-10"
 PASS    1ms l_recTEST.asserts. EQ - Expected "3" and got "3"
 PASS    0ms l_recTEST.passes. EQ - Expected "1" and got "1"
 PASS    0ms l_recTEST.failures. EQ - Expected "1" and got "1"
 PASS    0ms l_recTEST.errors. EQ - Expected "1" and got "1"
 PASS    0ms l_recTEST.min_interval_msecs. EQ - Expected "10" and got "10"
 PASS    0ms l_recTEST.max_interval_msecs. EQ - Expected "30" and got "30"
 PASS    0ms l_recTEST.tot_interval_msecs. EQ - Expected "60" and got "60"
 PASS    0ms l_tc_aaTEST('TESTCASE1').test_run_id. EQ - Expected "-10" and got "-10"
 PASS    0ms l_tc_aaTEST('TESTCASE1').asserts. EQ - Expected "3" and got "3"
 PASS    0ms l_tc_aaTEST('TESTCASE1').passes. EQ - Expected "1" and got "1"
 PASS    0ms l_tc_aaTEST('TESTCASE1').failures. EQ - Expected "1" and got "1"
 PASS    0ms l_tc_aaTEST('TESTCASE1').errors. EQ - Expected "1" and got "1"
 PASS    0ms l_tc_aaTEST('TESTCASE1').min_interval_msecs. EQ - Expected "10" and got "10"
 PASS    0ms l_tc_aaTEST('TESTCASE1').max_interval_msecs. EQ - Expected "30" and got "30"
 PASS    0ms l_tc_aaTEST('TESTCASE1').tot_interval_msecs. EQ - Expected "60" and got "60"
 ---- Test Case: Add Profile Testing
 PASS    1ms l_recTEST.test_run_id. EQ - Expected "-20" and got "-20"
 PASS    0ms l_recTEST.profiled_lines. EQ - Expected "15" and got "15"
 PASS    0ms l_recTEST.min_executed_usecs. EQ - Expected "10" and got "10"
 PASS    0ms l_recTEST.max_executed_usecs. EQ - Expected "20" and got "20"
 PASS    0ms l_recTEST.tot_executed_usecs. EQ - Expected "150" and got "150"
 PASS    0ms l_recTEST.executed_lines. EQ - Expected "5" and got "5"
 PASS    0ms l_recTEST.ignored_lines. EQ - Expected "4" and got "4"
 PASS    0ms l_recTEST.notexec_lines. EQ - Expected "3" and got "3"
 PASS    0ms l_recTEST.excluded_lines. EQ - Expected "2" and got "2"
 PASS    0ms l_recTEST.unknown_lines. EQ - Expected "1" and got "1"
 PASS    0ms Add Result Sad Path 1. EQ - Expected "ORA-20011: Unknown Profile status "ABC"" and got "ORA-20011: Unknown Profile status "ABC""
 ---- Test Case: FINALIZE Happy Path Setup
 PASS    1ms Insert WT_TEST_RUNS Record. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into WT_TEST_RUNS (id, start_dtm, runner_owner, runner_name) values (-102, sysdate, USER, 'TESTRUNNER3')".
 ---- Test Case: FINALIZE Happy Path 1
 PASS    0ms Run Finalize for Happy Path 1. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms Retieve WT_TEST_RUN_STATS record. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms l_recTEST.test_run_id. EQ - Expected "-102" and got "-102"
 PASS    0ms l_recTEST.test_yield. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.asserts. EQ - Expected "0" and got "0"
 PASS    0ms l_recTEST.passes. EQ - Expected "0" and got "0"
 PASS    0ms l_recTEST.failures. EQ - Expected "0" and got "0"
 PASS    0ms l_recTEST.errors. EQ - Expected "0" and got "0"
 PASS    0ms l_recTEST.testcases. EQ - Expected "0" and got "0"
 PASS    0ms l_recTEST.min_interval_msecs. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.avg_interval_msecs. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.max_interval_msecs. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.tot_interval_msecs. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.code_coverage. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.profiled_lines. ISNULL - Expected NULL and got ""
 PASS    1ms l_recTEST.executed_lines. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.ignored_lines. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.excluded_lines. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.notexec_lines. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.unknown_lines. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.avg_executed_usecs. ISNULL - Expected NULL and got ""
 PASS    0ms There should be no WT_TESTCASE_STATS records. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from WT_TESTCASE_STATS where test_run_id = -102
 PASS    0ms Delete WT_TEST_RUN_STATS Record. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from WT_TEST_RUN_STATS where test_run_id = -102".
 PASS    1ms There should be no WT_TEST_RUN_STATS records. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from WT_TEST_RUN_STATS where test_run_id = -102
 ---- Test Case: FINALIZE Happy Path 2
 PASS    1ms Run Finalize for Happy Path 2. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms Retieve WT_TESTCASE_STATS record. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms l_tstat_rec.test_run_id. EQ - Expected "-102" and got "-102"
 PASS    0ms l_tstat_rec.testcase. EQ - Expected "TC2a" and got "TC2a"
 PASS    0ms l_tstat_rec.asserts. EQ - Expected "3" and got "3"
 PASS    0ms l_tstat_rec.passes. EQ - Expected "2" and got "2"
 PASS    0ms l_tstat_rec.failures. EQ - Expected "1" and got "1"
 PASS    0ms l_tstat_rec.errors. EQ - Expected "0" and got "0"
 PASS    0ms l_tstat_rec.test_yield. EQ - Expected ".667" and got ".667"
 PASS    0ms l_tstat_rec.avg_interval_msecs. EQ - Expected "100" and got "100"
 PASS    1ms Retieve WT_TESTCASE_STATS record. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms l_tstat_rec.test_run_id. EQ - Expected "-102" and got "-102"
 PASS    0ms l_tstat_rec.testcase. EQ - Expected "TC2b" and got "TC2b"
 PASS    0ms l_tstat_rec.asserts. EQ - Expected "3" and got "3"
 PASS    0ms l_tstat_rec.passes. EQ - Expected "2" and got "2"
 PASS    0ms l_tstat_rec.failures. EQ - Expected "1" and got "1"
 PASS    0ms l_tstat_rec.errors. EQ - Expected "0" and got "0"
 PASS    0ms l_tstat_rec.test_yield. EQ - Expected ".667" and got ".667"
 PASS    0ms l_tstat_rec.avg_interval_msecs. EQ - Expected "100" and got "100"
 PASS    0ms Retieve WT_TEST_RUN_STATS record. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms l_recTEST.test_run_id. EQ - Expected "-102" and got "-102"
 PASS    0ms l_recTEST.test_yield. EQ - Expected ".667" and got ".667"
 PASS    0ms l_recTEST.asserts. EQ - Expected "6" and got "6"
 PASS    0ms l_recTEST.passes. EQ - Expected "4" and got "4"
 PASS    0ms l_recTEST.failures. EQ - Expected "2" and got "2"
 PASS    0ms l_recTEST.errors. EQ - Expected "0" and got "0"
 PASS    0ms l_recTEST.testcases. EQ - Expected "2" and got "2"
 PASS    1ms l_recTEST.avg_interval_msecs. EQ - Expected "100" and got "100"
 PASS    0ms l_recTEST.code_coverage. EQ - Expected ".8" and got ".8"
 PASS    0ms l_recTEST.profiled_lines. EQ - Expected "20" and got "20"
 PASS    0ms l_recTEST.executed_lines. EQ - Expected "8" and got "8"
 PASS    0ms l_recTEST.ignored_lines. EQ - Expected "6" and got "6"
 PASS    0ms l_recTEST.excluded_lines. EQ - Expected "4" and got "4"
 PASS    0ms l_recTEST.notexec_lines. EQ - Expected "2" and got "2"
 PASS    0ms l_recTEST.unknown_lines. EQ - Expected "0" and got "0"
 PASS    0ms l_recTEST.avg_executed_usecs. EQ - Expected "200" and got "200"
 PASS    0ms Delete WT_TESTCASE_STATS Record. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from WT_TESTCASE_STATS where test_run_id = -102".
 PASS    1ms There should be no WT_TESTCASE_STATS records. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from WT_TESTCASE_STATS where test_run_id = -102
 PASS    0ms Delete WT_TEST_RUN_STATS Record. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from WT_TEST_RUN_STATS where test_run_id = -102".
 PASS    1ms There should be no WT_TEST_RUN_STATS records. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from WT_TEST_RUN_STATS where test_run_id = -102
 ---- Test Case: FINALIZE Sad Path 1
 PASS    0ms Run Finalize for Sad Path 1. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms l_recTEST.test_run_id. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.asserts. ISNULL - Expected NULL and got ""
 ---- Test Case: FINALIZE Happy Path Teardown
 PASS    0ms Delete WT_TEST_RUNS Record. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from WT_TEST_RUNS where id = -102".
 ---- Test Case: Delete Records Happy Path Setup
 PASS    1ms Insert WT_TEST_RUNS Record. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into WT_TEST_RUNS (id, start_dtm, runner_owner, runner_name) values (-100, sysdate, USER, 'TESTRUNNER2')".
 PASS    0ms Insert WT_TEST_RUN_STATS Record. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into WT_TEST_RUN_STATS (test_run_id) values (-100)".
 PASS    0ms Insert WT_TESTCASE_STATS Record. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into WT_TESTCASE_STATS (test_run_id, testcase) values (-100, 'TESTCASE2')".
 ---- Test Case: Delete Records Happy Path and Teardown
 PASS    1ms Delete Records with NULL ID. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "begin wt_test_run_stat.delete_records(-100); end;".
 PASS    1ms Delete WT_TEST_RUNS Record. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from WT_TEST_RUNS where id = -100".
 ---- Test Case: Delete Records Test Sad Paths
 PASS    0ms Delete Records with NULL ID. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "begin wt_test_run_stat.delete_records(null); end;".
 PASS    0ms Delete Records with Invalid ID. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "begin wt_test_run_stat.delete_records(-0.01); end;".

 - WTP.WT_TEST_RUN_STAT PACKAGE BODY Code Coverage Details (Test Run ID 10)
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
     1 EXCL      0         0       0         0 package body wt_test_run_stat
    22 EXEC      4        12       2         4 procedure initialize
    26 EXEC      4         2       1         1    g_rec := l_recNULL;
    27 EXEC      4        38       1        34    g_tc_aa.delete;
    28 EXEC      4        11       0        10 end initialize;
    32 IGNR      2        19      19        19    procedure t_initialize
    40 IGNR      2         6       1         5       wt_assert.g_testcase := 'Initialize Happy Path 1 Setup';
    41 IGNR      1         8       8         8       l_tc_aaTEST('TESTCASE1').test_run_id := -2;
    42 IGNR      1         0       0         0       l_recTEST.test_run_id := -1;
    43 IGNR      1         8       8         8       wt_assert.eq (
    47 IGNR      1         5       5         5       wt_assert.eq (
    52 IGNR      1         6       6         6       l_tc_aaSAVE := g_tc_aa;
    53 IGNR      1         1       1         1       l_recSAVE   := g_rec;
    54 IGNR      1         3       3         3       g_tc_aa     := l_tc_aaTEST;
    55 IGNR      1         1       1         1       g_rec       := l_recTEST;
    56 IGNR      1         0       0         0       initialize;
    57 IGNR      1         0       0         0       l_tc_aaTEST := g_tc_aa;
    58 IGNR      1         0       0         0       l_recTEST   := g_rec;
    59 IGNR      1         1       1         1       g_tc_aa     := l_tc_aaSAVE;
    60 IGNR      1         0       0         0       g_rec       := l_recSAVE;
    62 IGNR      1         1       1         1       wt_assert.g_testcase := 'Initialize Happy Path 1';
    63 IGNR      1         2       2         2       wt_assert.eq (
    67 IGNR      1         2       2         2       wt_assert.isnull (
    70 IGNR      1         2       2         2    end t_initialize;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
    75 UNKN      0       122       1        10 procedure add_result
    82 EXEC    112        16       0         1    case in_results_rec.status
    83 EXEC    112        35       0         4       when 'PASS' then
    84 EXEC    109        58       1         1          g_rec.passes := nvl(g_rec.passes,0) + 1;
    85 EXEC      3         0       0         0       when 'FAIL' then
    86 EXEC      1         1       1         1          g_rec.failures := nvl(g_rec.failures,0) + 1;
    87 EXEC      2         0       0         0       when 'ERR' then
    88 EXEC      1         0       0         0          g_rec.errors := nvl(g_rec.errors,0) + 1;
    90 EXEC      1        77      77        77          raise_application_error(-20010, 'Unknown Result status "' ||
    93 EXEC    111        24       0         1    g_rec.test_run_id := in_results_rec.test_run_id;
    94 EXEC    111        38       1         1    g_rec.asserts     := nvl(g_rec.asserts,0) + 1;
    95 EXEC    111        57       0         2    g_rec.min_interval_msecs := least(nvl(g_rec.min_interval_msecs,999999999)
    97 EXEC    111        33       0         1    g_rec.max_interval_msecs := greatest(nvl(g_rec.max_interval_msecs,0)
    99 EXEC    111        43       1         6    g_rec.tot_interval_msecs := nvl(g_rec.tot_interval_msecs,0) +
   101 EXEC    111        30       1         1    if in_results_rec.testcase is not null
   103 EXEC    111        22       0         1       tc := in_results_rec.testcase;
   104 EXEC    111       158       1         6       g_tc_aa(tc).testcase    := tc;
   105 EXEC    111        20       1         1       g_tc_aa(tc).test_run_id := in_results_rec.test_run_id;
   106 EXEC    111        33       0         1       g_tc_aa(tc).asserts     := nvl(g_tc_aa(tc).asserts,0) + 1;
   107 EXEC    111         0       0         0       case in_results_rec.status
   108 EXEC    111        18       1         1          when 'PASS' then
   109 EXEC    109        29       0         1             g_tc_aa(tc).passes := nvl(g_tc_aa(tc).passes,0) + 1;
   110 EXEC      2         0       0         0          when 'FAIL' then
   111 EXEC      1         1       1         1             g_tc_aa(tc).failures := nvl(g_tc_aa(tc).failures,0) + 1;
   112 EXEC      1         0       0         0          when 'ERR' then
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   113 EXEC      1         0       0         0             g_tc_aa(tc).errors := nvl(g_tc_aa(tc).errors,0) + 1;
   116 EXEC    111        41       1         5       g_tc_aa(tc).min_interval_msecs := least(nvl(g_tc_aa(tc).min_interval_msecs,999999999)
   118 EXEC    111        31       0         1       g_tc_aa(tc).max_interval_msecs := greatest(nvl(g_tc_aa(tc).max_interval_msecs,0)
   120 EXEC    111        37       1         1       g_tc_aa(tc).tot_interval_msecs := nvl(g_tc_aa(tc).tot_interval_msecs,0) +
   123 EXEC    111        31       0         1 end add_result;
   127 IGNR      1        11      11        11    procedure t_add_result
   145 IGNR      1         4       4         4       l_tc_aaSAVE := g_tc_aa;
   146 IGNR      1         0       0         0       l_recSAVE   := g_rec;
   147 IGNR      1         1       1         1       g_tc_aa     := l_tc_aaTEST;
   148 IGNR      1         1       1         1       g_rec       := l_recTEST;
   149 IGNR      1         0       0         0       l_resultTEST.test_run_id    := -10;
   150 IGNR      1         0       0         0       l_resultTEST.interval_msecs := 10;
   151 IGNR      1         0       0         0       l_resultTEST.status         := 'PASS';
   152 IGNR      1         0       0         0       l_resultTEST.testcase       := 'TESTCASE1';
   153 IGNR      1         0       0         0       add_result(l_resultTEST);
   155 IGNR      1         1       1         1       l_resultTEST.interval_msecs := 20;
   156 IGNR      1         0       0         0       l_resultTEST.status         := 'FAIL';
   157 IGNR      1         0       0         0       l_resultTEST.testcase       := 'TESTCASE1';
   158 IGNR      1         0       0         0       add_result(l_resultTEST);
   159 IGNR      1         0       0         0       l_resultTEST.interval_msecs := 30;
   160 IGNR      1         0       0         0       l_resultTEST.status         := 'ERR';
   161 IGNR      1         0       0         0       l_resultTEST.testcase       := 'TESTCASE1';
   162 IGNR      1         0       0         0       add_result(l_resultTEST);
   164 IGNR      1         0       0         0       l_resultTEST.interval_msecs := 40;
   165 IGNR      1         0       0         0       l_resultTEST.status         := 'ABC';
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   166 IGNR      1         0       0         0       l_resultTEST.testcase       := 'TESTCASE1';
   168 IGNR      1         0       0         0          add_result(l_resultTEST);
   169 IGNR      0         0       0         0          l_sqlerrm := SQLERRM;
   170 IGNR      1         0       0         0       exception when others then
   171 IGNR      1        91      91        91          l_sqlerrm := SQLERRM;
   172 IGNR      0         3       3         3       end;
   174 IGNR      1         4       4         4       l_tc_aaTEST := g_tc_aa;
   175 IGNR      1         1       1         1       l_recTEST   := g_rec;
   176 IGNR      1         2       2         2       g_tc_aa     := l_tc_aaSAVE;
   177 IGNR      1         0       0         0       g_rec       := l_recSAVE;
   178 IGNR      1         0       0         0       wt_assert.g_testcase := 'Add Result Testing';
   179 IGNR      1         2       2         2       wt_assert.eq (
   184 IGNR      1         3       3         3       wt_assert.eq (
   188 IGNR      1         3       3         3       wt_assert.eq (
   193 IGNR      1         2       2         2       wt_assert.eq (
   197 IGNR      1         2       2         2       wt_assert.eq (
   202 IGNR      1         1       1         1       wt_assert.eq (
   206 IGNR      1         2       2         2       wt_assert.eq (
   211 IGNR      1         2       2         2       wt_assert.eq (
   215 IGNR      1         2       2         2       wt_assert.eq (
   220 IGNR      1         4       4         4       wt_assert.eq (
   224 IGNR      1         2       2         2       wt_assert.eq (
   229 IGNR      1         2       2         2       wt_assert.eq (
   233 IGNR      1         2       2         2       wt_assert.eq (
   238 IGNR      1         2       2         2       wt_assert.eq (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   242 IGNR      1         2       2         2       wt_assert.eq (
   247 IGNR      1         2       2         2       wt_assert.eq (
   251 IGNR      1        61      61        61       wt_assert.eq (
   255 IGNR      1        15      15        15    end t_add_result;
   260 UNKN      0         5       0         1 procedure add_profile
   266 EXEC     16         2       0         1    case in_dbout_profiles_rec.status
   267 EXEC     16         3       0         1       when 'EXEC' then
   268 EXEC      5         1       0         1          g_rec.executed_lines := nvl(g_rec.executed_lines,0) + 1;
   270 EXEC      5         2       1         1          g_rec.min_executed_usecs := least(nvl(g_rec.min_executed_usecs,999999999)
   272 EXEC      5         4       0         1          g_rec.max_executed_usecs := greatest(nvl(g_rec.max_executed_usecs,0)
   274 EXEC      5         5       0         2          g_rec.tot_executed_usecs := nvl(g_rec.tot_executed_usecs,0) +
   277 EXEC     11         0       0         0       when 'IGNR' then
   278 EXEC      4         2       0         1          g_rec.ignored_lines := nvl(g_rec.ignored_lines,0) + 1;
   279 EXEC      7         0       0         0       when 'EXCL' then
   280 EXEC      2         1       1         1          g_rec.excluded_lines := nvl(g_rec.excluded_lines,0) + 1;
   281 EXEC      5         1       0         1       when 'NOTX' then
   282 EXEC      3         1       0         1          g_rec.notexec_lines := nvl(g_rec.notexec_lines,0) + 1;
   283 EXEC      2         0       0         0       when 'UNKN' then
   284 EXEC      1         1       1         1          g_rec.unknown_lines := nvl(g_rec.unknown_lines,0) + 1;
   286 EXEC      1        25      25        25          raise_application_error(-20011, 'Unknown Profile status "' ||
   289 EXEC     15         4       0         1    g_rec.test_run_id    := in_dbout_profiles_rec.test_run_id;
   290 EXEC     15         4       1         1    g_rec.profiled_lines := nvl(g_rec.profiled_lines,0) + 1;
   291 EXEC     15         1       0         1 end add_profile;
   295 IGNR      1         7       7         7    procedure t_add_profile
   311 IGNR      1         1       1         1       l_recSAVE   := g_rec;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   312 IGNR      1         1       1         1       g_rec       := l_recTEST;
   313 IGNR      1         1       1         1       l_profileTEST.test_run_id := -20;
   314 IGNR      1         0       0         0       l_profileTEST.min_usecs   := 10;
   315 IGNR      1         1       1         1       l_profileTEST.max_usecs   := 20;
   316 IGNR      1         0       0         0       l_profileTEST.total_usecs := 30;
   317 IGNR      1         0       0         0       l_profileTEST.total_occur := 1;
   318 IGNR      1         0       0         0       l_profileTEST.status := 'EXEC';
   319 IGNR      1         0       0         0       add_profile(l_profileTEST);
   320 IGNR      1         0       0         0       l_profileTEST.status := 'EXEC';
   321 IGNR      1         0       0         0       add_profile(l_profileTEST);
   323 IGNR      1         0       0         0       l_profileTEST.status := 'EXEC';
   324 IGNR      1         0       0         0       add_profile(l_profileTEST);
   325 IGNR      1         0       0         0       l_profileTEST.status := 'EXEC';
   326 IGNR      1         0       0         0       add_profile(l_profileTEST);
   327 IGNR      1         0       0         0       l_profileTEST.status := 'EXEC';
   328 IGNR      1         0       0         0       add_profile(l_profileTEST);
   329 IGNR      1         0       0         0       l_profileTEST.status := 'IGNR';
   330 IGNR      1         0       0         0       add_profile(l_profileTEST);
   331 IGNR      1         0       0         0       l_profileTEST.status := 'IGNR';
   332 IGNR      1         0       0         0       add_profile(l_profileTEST);
   334 IGNR      1         0       0         0       l_profileTEST.status := 'IGNR';
   335 IGNR      1         0       0         0       add_profile(l_profileTEST);
   336 IGNR      1         0       0         0       l_profileTEST.status := 'IGNR';
   337 IGNR      1         0       0         0       add_profile(l_profileTEST);
   338 IGNR      1         0       0         0       l_profileTEST.status := 'NOTX';
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   339 IGNR      1         1       1         1       add_profile(l_profileTEST);
   340 IGNR      1         0       0         0       l_profileTEST.status := 'NOTX';
   341 IGNR      1         0       0         0       add_profile(l_profileTEST);
   342 IGNR      1         1       1         1       l_profileTEST.status := 'NOTX';
   343 IGNR      1         0       0         0       add_profile(l_profileTEST);
   345 IGNR      1         0       0         0       l_profileTEST.status := 'EXCL';
   346 IGNR      1         0       0         0       add_profile(l_profileTEST);
   347 IGNR      1         1       1         1       l_profileTEST.status := 'EXCL';
   348 IGNR      1         0       0         0       add_profile(l_profileTEST);
   349 IGNR      1         0       0         0       l_profileTEST.status := 'UNKN';
   350 IGNR      1         0       0         0       add_profile(l_profileTEST);
   352 IGNR      1         0       0         0       l_profileTEST.status := 'ABC';
   354 IGNR      1         0       0         0          add_profile(l_profileTEST);
   355 IGNR      0         0       0         0          l_sqlerrm := SQLERRM;
   356 IGNR      1         0       0         0       exception when others then
   357 IGNR      1        50      50        50          l_sqlerrm := SQLERRM;
   358 IGNR      0         1       1         1       end;
   359 IGNR      1         1       1         1       l_recTEST := g_rec;
   360 IGNR      1         1       1         1       g_rec     := l_recSAVE;
   362 IGNR      1         1       1         1       wt_assert.g_testcase := 'Add Profile Testing';
   363 IGNR      1         4       4         4       wt_assert.eq (
   367 IGNR      1         2       2         2       wt_assert.eq (
   372 IGNR      1         2       2         2       wt_assert.eq (
   376 IGNR      1         2       2         2       wt_assert.eq (
   381 IGNR      1         2       2         2       wt_assert.eq (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   385 IGNR      1         2       2         2       wt_assert.eq (
   390 IGNR      1         2       2         2       wt_assert.eq (
   394 IGNR      1         2       2         2       wt_assert.eq (
   399 IGNR      1         2       2         2       wt_assert.eq (
   403 IGNR      1         2       2         2       wt_assert.eq (
   408 IGNR      1         0       0         0       wt_assert.eq (
   412 IGNR      1         1       1         1    end t_add_profile;
   417 UNKN      0         7       2         3 procedure finalize
   422 EXEC      3        36      11        14 begin
   423 EXEC      3         1       0         1    if g_rec.test_run_id is null
   425 EXEC      1         0       0         0       initialize;
   426 EXEC      1         6       6         6       return;
   428 EXEC      2         2       1         1    g_rec.testcases := g_tc_aa.COUNT;
   429 EXEC      2         2       1         1    g_rec.asserts   := nvl(g_rec.asserts ,0);
   430 EXEC      2         0       0         0    g_rec.passes    := nvl(g_rec.passes  ,0);
   431 EXEC      2         0       0         0    g_rec.failures  := nvl(g_rec.failures,0);
   432 EXEC      2         1       0         1    g_rec.errors    := nvl(g_rec.errors  ,0);
   433 EXEC      2         0       0         0    if g_rec.asserts != 0
   435 EXEC      1         3       3         3       g_rec.test_yield := round(g_rec.passes/g_rec.asserts, 3);
   436 EXEC      1         1       1         1       g_rec.avg_interval_msecs := round(g_rec.tot_interval_msecs/g_rec.asserts, 3);
   438 EXEC      2         1       0         1    if g_rec.profiled_lines is not null
   440 EXEC      1         1       1         1       g_rec.executed_lines  := nvl(g_rec.executed_lines ,0);
   441 EXEC      1         0       0         0       g_rec.ignored_lines   := nvl(g_rec.ignored_lines,0);
   442 EXEC      1         1       1         1       g_rec.excluded_lines  := nvl(g_rec.excluded_lines ,0);
   443 EXEC      1         0       0         0       g_rec.notexec_lines   := nvl(g_rec.notexec_lines  ,0);
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   444 EXEC      1         0       0         0       g_rec.unknown_lines   := nvl(g_rec.unknown_lines  ,0);
   445 EXEC      1         1       1         1       l_executable_lines    := g_rec.executed_lines + g_rec.notexec_lines;
   446 EXEC      1         0       0         0       if l_executable_lines != 0
   448 EXEC      1         0       0         0          g_rec.code_coverage := round(g_rec.executed_lines/l_executable_lines, 3);
   449 EXEC      1         1       1         1          g_rec.avg_executed_usecs := round(g_rec.tot_executed_usecs/l_executable_lines, 3);
   450 EXEC      1         0       0         0       end if;
   452 EXEC      2       311     155       157    insert into wt_test_run_stats values g_rec;
   453 EXEC      2         2       1         1    if g_rec.testcases > 0
   455 EXEC      1         4       4         4       tc := g_tc_aa.FIRST;
   456 EXEC      2         0       0         0       loop
   457 EXEC      2         3       1         2          g_tc_aa(tc).asserts  := nvl(g_tc_aa(tc).asserts ,0);
   458 EXEC      2         1       0         1          g_tc_aa(tc).passes   := nvl(g_tc_aa(tc).passes  ,0);
   459 EXEC      2         0       0         0          g_tc_aa(tc).failures := nvl(g_tc_aa(tc).failures,0);
   460 EXEC      2         0       0         0          g_tc_aa(tc).errors   := nvl(g_tc_aa(tc).errors  ,0);
   461 EXEC      2         0       0         0          if g_rec.asserts != 0
   463 EXEC      2         3       1         2             g_tc_aa(tc).test_yield := round(g_tc_aa(tc).passes /
   465 EXEC      2         1       0         1             g_tc_aa(tc).avg_interval_msecs := round(g_tc_aa(tc).tot_interval_msecs /
   468 EXEC      2       166      67        99          insert into wt_testcase_stats values g_tc_aa(tc);
   469 EXEC      2         5       2         3          exit when tc = g_tc_aa.LAST;
   470 EXEC      1         2       2         2          tc := g_tc_aa.NEXT(tc);
   473 EXEC      2       164      77        87    COMMIT;
   474 EXEC      2         0       0         0    initialize;
   475 EXEC      2        18       9        10 end finalize;
   479 IGNR      1        16      16        16    procedure t_finalize
   487 IGNR      1         0       0         0       l_test_run_id  number       := -102;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   488 IGNR      1         1       1         1       l_tc           varchar2(50) := 'TC2';
   492 IGNR      0         4       0         3       procedure run_finalize (in_msg_txt in varchar2) is begin
   493 IGNR      3        32      10        13          l_tc_aaSAVE := g_tc_aa;
   494 IGNR      3         3       1         1          l_recSAVE   := g_rec;
   495 IGNR      3        11       3         4          g_tc_aa     := l_tc_aaTEST;
   496 IGNR      3         3       1         1          g_rec       := l_recTEST;
   498 IGNR      3         1       1         1             finalize;
   499 IGNR      3         6       2         2             l_sqlerrm := SQLERRM;
   500 IGNR      0         0       0         0          exception when others then
   501 IGNR      0         0       0         0             l_sqlerrm := SQLERRM;
   502 IGNR      0         0       0         0          end;
   504 IGNR      3         2       0         1          l_tc_aaTEST := g_tc_aa;
   505 IGNR      3         0       0         0          l_recTEST   := g_rec;
   506 IGNR      3        18       5         9          g_tc_aa     := l_tc_aaSAVE;
   507 IGNR      3         2       1         1          g_rec       := l_recSAVE;
   508 IGNR      3         5       1         2          wt_assert.eq (
   512 IGNR      3         5       0         4       end run_finalize;
   515 IGNR      1         0       0         0       wt_assert.g_testcase := 'FINALIZE Happy Path Setup';
   516 IGNR      1         2       2         2       l_sql_txt := 'insert into WT_TEST_RUNS' ||
   519 IGNR      1         1       1         1       wt_assert.raises (
   523 IGNR      1       135     135       135       commit;
   525 IGNR      1         1       1         1       wt_assert.g_testcase  := 'FINALIZE Happy Path 1';
   526 IGNR      1         2       2         2       l_tc_aaTEST.delete;
   527 IGNR      1         1       1         1       l_recTEST := l_recNULL;
   528 IGNR      1         1       1         1       l_recTEST.test_run_id := l_test_run_id;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   529 IGNR      1         1       1         1       run_finalize('Run Finalize for Happy Path 1');  -- AUTONOMOUS COMMIT
   532 IGNR      1       211     211       211          select * into l_recTEST
   535 IGNR      1         3       3         3          l_sqlerrm := SQLERRM;
   536 IGNR      0         0       0         0       exception when others then
   537 IGNR      0         0       0         0          l_sqlerrm := SQLERRM;
   538 IGNR      0         0       0         0       end;
   540 IGNR      1         1       1         1       wt_assert.eq (
   544 IGNR      1         4       4         4       wt_assert.eq (
   549 IGNR      1         1       1         1       wt_assert.isnull (
   552 IGNR      1         3       3         3       wt_assert.eq (
   557 IGNR      1         1       1         1       wt_assert.eq (
   561 IGNR      1         2       2         2       wt_assert.eq (
   566 IGNR      1         1       1         1       wt_assert.eq (
   570 IGNR      1         2       2         2       wt_assert.eq (
   575 IGNR      1         0       0         0       wt_assert.isnull (
   578 IGNR      1         0       0         0       wt_assert.isnull (
   581 IGNR      1         1       1         1       wt_assert.isnull (
   585 IGNR      1         0       0         0       wt_assert.isnull (
   588 IGNR      1         0       0         0       wt_assert.isnull (
   591 IGNR      1         1       1         1       wt_assert.isnull (
   595 IGNR      1         0       0         0       wt_assert.isnull (
   598 IGNR      1         0       0         0       wt_assert.isnull (
   601 IGNR      1         1       1         1       wt_assert.isnull (
   605 IGNR      1         1       1         1       wt_assert.isnull (
   608 IGNR      1         1       1         1       wt_assert.isnull (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   611 IGNR      1         1       1         1       wt_assert.isnull (
   615 IGNR      1         5       5         5       wt_assert.eqqueryvalue (
   621 IGNR      1         3       3         3       wt_assert.raises (
   626 IGNR      1        96      96        96       commit;
   627 IGNR      1         5       5         5       wt_assert.eqqueryvalue (
   633 IGNR      1         1       1         1       wt_assert.g_testcase := 'FINALIZE Happy Path 2';
   634 IGNR      1         2       2         2       l_tc_aaTEST.delete;
   635 IGNR      1         5       5         5       l_tc_aaTEST(l_tc||'a').test_run_id        := l_test_run_id;
   636 IGNR      1         1       1         1       l_tc_aaTEST(l_tc||'a').testcase           := l_tc||'a';
   637 IGNR      1         1       1         1       l_tc_aaTEST(l_tc||'a').asserts            := 3;
   638 IGNR      1         1       1         1       l_tc_aaTEST(l_tc||'a').passes             := 2;
   639 IGNR      1         1       1         1       l_tc_aaTEST(l_tc||'a').failures           := 1;
   641 IGNR      1         0       0         0       l_tc_aaTEST(l_tc||'a').tot_interval_msecs := 300;
   643 IGNR      1         1       1         1       l_tc_aaTEST(l_tc||'b').test_run_id        := l_test_run_id;
   644 IGNR      1         0       0         0       l_tc_aaTEST(l_tc||'b').testcase           := l_tc||'b';
   645 IGNR      1         0       0         0       l_tc_aaTEST(l_tc||'b').asserts            := 3;
   646 IGNR      1         0       0         0       l_tc_aaTEST(l_tc||'b').passes             := 2;
   647 IGNR      1         1       1         1       l_tc_aaTEST(l_tc||'b').failures           := 1;
   649 IGNR      1         0       0         0       l_tc_aaTEST(l_tc||'b').tot_interval_msecs := 300;
   651 IGNR      1         1       1         1       l_recTEST := l_recNULL;
   652 IGNR      1         0       0         0       l_recTEST.test_run_id         := l_test_run_id;
   653 IGNR      1         0       0         0       l_recTEST.asserts             := 6;
   654 IGNR      1         0       0         0       l_recTEST.passes              := 4;
   655 IGNR      1         0       0         0       l_recTEST.failures            := 2;
   657 IGNR      1         0       0         0       l_recTEST.tot_interval_msecs  := 600;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   659 IGNR      1         0       0         0       l_recTEST.profiled_lines      := 20;
   660 IGNR      1         0       0         0       l_recTEST.executed_lines      := 8;
   661 IGNR      1         0       0         0       l_recTEST.ignored_lines       := 6;
   662 IGNR      1         1       1         1       l_recTEST.excluded_lines      := 4;
   663 IGNR      1         0       0         0       l_recTEST.notexec_lines       := 2;
   665 IGNR      1         0       0         0       l_recTEST.tot_executed_usecs  := 2000;
   666 IGNR      1         1       1         1       run_finalize('Run Finalize for Happy Path 2');  -- AUTONOMOUS COMMIT
   668 IGNR      0         1       1         1       begin
   669 IGNR      1       175     175       175          select * into l_tstat_rec
   673 IGNR      1         2       2         2          l_sqlerrm := SQLERRM;
   674 IGNR      0         0       0         0       exception when others then
   675 IGNR      0         0       0         0          l_sqlerrm := SQLERRM;
   676 IGNR      0         0       0         0       end;
   678 IGNR      1         2       2         2       wt_assert.eq (
   682 IGNR      1         3       3         3       wt_assert.eq (
   687 IGNR      1         1       1         1       wt_assert.eq (
   691 IGNR      1         2       2         2       wt_assert.eq (
   696 IGNR      1         2       2         2       wt_assert.eq (
   700 IGNR      1         2       2         2       wt_assert.eq (
   705 IGNR      1         2       2         2       wt_assert.eq (
   709 IGNR      1         2       2         2       wt_assert.eq (
   713 IGNR      1         3       3         3       wt_assert.eq (
   719 IGNR      1       202     202       202          select * into l_tstat_rec
   723 IGNR      1         1       1         1          l_sqlerrm := SQLERRM;
   724 IGNR      0         0       0         0       exception when others then
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   725 IGNR      0         0       0         0          l_sqlerrm := SQLERRM;
   726 IGNR      0         0       0         0       end;
   728 IGNR      1         2       2         2       wt_assert.eq (
   732 IGNR      1         1       1         1       wt_assert.eq (
   737 IGNR      1         1       1         1       wt_assert.eq (
   741 IGNR      1         2       2         2       wt_assert.eq (
   746 IGNR      1         2       2         2       wt_assert.eq (
   750 IGNR      1         1       1         1       wt_assert.eq (
   755 IGNR      1         1       1         1       wt_assert.eq (
   759 IGNR      1         1       1         1       wt_assert.eq (
   763 IGNR      1         2       2         2       wt_assert.eq (
   769 IGNR      1       101     101       101          select * into l_recTEST
   772 IGNR      1         1       1         1          l_sqlerrm := SQLERRM;
   773 IGNR      0         0       0         0       exception when others then
   774 IGNR      0         0       0         0          l_sqlerrm := SQLERRM;
   775 IGNR      0         0       0         0       end;
   777 IGNR      1         1       1         1       wt_assert.eq (
   781 IGNR      1         1       1         1       wt_assert.eq (
   786 IGNR      1         2       2         2       wt_assert.eq (
   790 IGNR      1         2       2         2       wt_assert.eq (
   795 IGNR      1         2       2         2       wt_assert.eq (
   799 IGNR      1         2       2         2       wt_assert.eq (
   804 IGNR      1         1       1         1       wt_assert.eq (
   808 IGNR      1        31      31        31       wt_assert.eq (
   813 IGNR      1         2       2         2       wt_assert.eq (
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   817 IGNR      1         2       2         2       wt_assert.eq (
   822 IGNR      1         2       2         2       wt_assert.eq (
   826 IGNR      1         2       2         2       wt_assert.eq (
   831 IGNR      1         1       1         1       wt_assert.eq (
   835 IGNR      1         2       2         2       wt_assert.eq (
   840 IGNR      1         2       2         2       wt_assert.eq (
   844 IGNR      1         2       2         2       wt_assert.eq (
   848 IGNR      1         2       2         2       wt_assert.eq (
   853 IGNR      1         7       7         7       wt_assert.raises (
   858 IGNR      1       386     386       386       commit;
   859 IGNR      1         8       8         8       wt_assert.eqqueryvalue (
   865 IGNR      1         4       4         4       wt_assert.raises (
   870 IGNR      1       137     137       137       commit;
   871 IGNR      1         5       5         5       wt_assert.eqqueryvalue (
   877 IGNR      1         1       1         1       wt_assert.g_testcase  := 'FINALIZE Sad Path 1';
   878 IGNR      1         1       1         1       l_tc_aaTEST.delete;
   879 IGNR      1         1       1         1       l_recTEST := l_recNULL;
   880 IGNR      1         1       1         1       l_recTEST.asserts := 2;
   881 IGNR      1         0       0         0       run_finalize('Run Finalize for Sad Path 1');  -- AUTONOMOUS COMMIT
   882 IGNR      1         1       1         1       wt_assert.isnull (
   885 IGNR      1         1       1         1       wt_assert.isnull (
   889 IGNR      1         0       0         0       wt_assert.g_testcase := 'FINALIZE Happy Path Teardown';
   890 IGNR      1         2       2         2       wt_assert.raises (
   895 IGNR      1       142     142       142       commit;
   896 IGNR      1         6       6         6    end t_finalize;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   901 UNKN      0         4       1         2 procedure delete_records
   905 EXEC      3       500      40       398    delete from wt_testcase_stats
   907 EXEC      3       216      27       147    delete from wt_test_run_stats
   909 EXEC      3         3       1         1 end delete_records;
   913 IGNR      0         3       3         3    procedure t_delete_records
   915 IGNR      1         0       0         0       l_test_run_id  number := -100;
   919 IGNR      1         0       0         0       wt_assert.g_testcase := 'Delete Records Happy Path Setup';
   920 IGNR      1         3       3         3       l_sql_txt := 'insert into WT_TEST_RUNS' ||
   923 IGNR      1         1       1         1       wt_assert.raises (
   928 IGNR      1         2       2         2       l_sql_txt := 'insert into WT_TEST_RUN_STATS (test_run_id) values (' ||
   930 IGNR      1         0       0         0       wt_assert.raises (
   934 IGNR      1         2       2         2       l_sql_txt := 'insert into WT_TESTCASE_STATS (test_run_id, testcase)' ||
   936 IGNR      1         1       1         1       wt_assert.raises (
   941 IGNR      1         1       1         1       wt_assert.g_testcase := 'Delete Records Happy Path and Teardown';
   942 IGNR      1         4       4         4       wt_assert.raises (
   947 IGNR      1         4       4         4       wt_assert.raises (
   952 IGNR      1         1       1         1       wt_assert.g_testcase := 'Delete Records Test Sad Paths';
   953 IGNR      1         1       1         1       wt_assert.raises (
   957 IGNR      1         0       0         0       wt_assert.raises (
   961 IGNR      1         0       0         0    end t_delete_records;
   968 IGNR      0         1       1         1    procedure WTPLSQL_RUN  --% WTPLSQL SET DBOUT "WT_TEST_RUN_STAT:PACKAGE BODY" %--
   971 IGNR      1         0       0         0       t_initialize;
   972 IGNR      1         0       0         0       t_add_result;
   973 IGNR      1         0       0         0       t_add_profile;
   974 IGNR      1         0       0         0       t_finalize;
Source               TotTime MinTime   MaxTime
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   975 IGNR      1         0       0         0       t_delete_records;
   976 IGNR      1         1       1         1    end WTPLSQL_RUN;
   981 EXCL      0         0       0         0 end wt_test_run_stat;



PL/SQL procedure successfully completed.

