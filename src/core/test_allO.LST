
    wtPLSQL 1.1.0 - Run ID 39: 21-Apr-2018 05:41:06 PM

  Test Results for WTP.WTPLSQL
       Total Testcases:        9      Total Assertions:       28
  Minimum Elapsed msec:        0     Failed Assertions:        0
  Average Elapsed msec:        1      Error Assertions:        0
  Maximum Elapsed msec:        9            Test Yield:   100.00%
  Total Run Time (sec):      0.0

WTP.WTPLSQL Details (Test Run ID 39)
----------------------------------------
 ---- Test Case: Show Version Happy Path
 PASS    9ms Test Existing Version. ISNOTNULL - Expected NOT NULL and got "1.1.0"
 PASS    0ms Test New Version. EQ - Expected "TESTING" and got "TESTING"
 PASS    1ms Return to Existing Version. EQ - Expected "1.1.0" and got "1.1.0"
 ---- Test Case: CHECK_RUNNER Sad Path 1
 PASS    0ms Null RUNNER_NAME. EQ - Expected "ORA-20001: RUNNER_NAME is null" and got "ORA-20001: RUNNER_NAME is null"
 ---- Test Case: CHECK_RUNNER Sad Path 2
 PASS    0ms Invalid RUNNER_NAME. EQ - Expected "ORA-20002: RUNNER_NAME "BOGUS" is not valid" and got "ORA-20002: RUNNER_NAME "BOGUS" is not valid"
 ---- Test Case: INSERT_TEST_RUN Happy Path
 PASS    2ms Number of Records. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_test_runs where id = 39
 PASS    1ms Records After Delete. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = 39
 ---- Test Case: TEST_ALL Happy Path
 PASS    2ms test_all_aa.EXISTS('WTPLSQL'). THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: DELETE_RUNS Happy Path 1
 PASS    1ms Number of Records Before Insert. ISNOTNULL - Expected NOT NULL and got "7"
 PASS    0ms Number of Records Before Insert <= 20. THIS - Expected "TRUE" and got "TRUE"
 PASS    1ms Number of Records After Insert. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_test_runs where id = 39
 PASS    3ms Number of Records After Delete. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = 39
 ---- Test Case: DELETE_RUNS Happy Path 2
 PASS    1ms Confirm number of records. EQQUERYVALUE - Expected "7" and got "7" for Query: select count(*) from wt_test_runs where runner_owner = 'WTP' and runner_name = 'WTPLSQL'
 PASS    2ms Check Added 20 records. EQQUERYVALUE - Expected "27" and got "27" for Query: select count(*) from wt_test_runs where runner_owner = 'WTP' and runner_name = 'WTPLSQL'
 PASS    5ms Check number of records reduced. EQQUERYVALUE - Expected "20" and got "20" for Query: select count(*) from wt_test_runs where runner_owner = 'WTP' and runner_name = 'WTPLSQL'
 PASS    2ms Confirm original number of records. EQQUERYVALUE - Expected "7" and got "7" for Query: select count(*) from wt_test_runs where runner_owner = 'WTP' and runner_name = 'WTPLSQL'
 ---- Test Case: DELETE_RUNS Sad Path 1
 PASS    0ms Delete Runs(-9995). ISNULL - Expected NULL and got ""
 ---- Test Case: TEST_RUNS_REC_AND_TABLE Happy Path
 PASS    0ms g_test_runs_rec.id. ISNOTNULL - Expected NOT NULL and got "39"
 PASS    0ms g_test_runs_rec.start_dtm. ISNOTNULL - Expected NOT NULL and got "21-APR-2018 17:41:06.611000"
 PASS    0ms g_test_runs_rec.runner_owner. ISNOTNULL - Expected NOT NULL and got "WTP"
 PASS    0ms g_test_runs_rec.runner_name. EQ - Expected "WTPLSQL" and got "WTPLSQL"
 PASS    0ms g_test_runs_rec.dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms g_test_runs_rec.dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms g_test_runs_rec.dbout_type. ISNULL - Expected NULL and got ""
 PASS    0ms g_test_runs_rec.profiler_runid. ISNULL - Expected NULL and got ""
 PASS    0ms g_test_runs_rec.end_dtm. ISNULL - Expected NULL and got ""
 PASS    1ms g_test_runs_rec.error_message. ISNULL - Expected NULL and got ""
 PASS    2ms TEST_RUNS Record for this TEST_RUN. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from WT_TEST_RUNS where id = '39'


    wtPLSQL 1.1.0 - Run ID 40: 21-Apr-2018 05:41:06 PM

  Test Results for WTP.WT_ASSERT
       Total Testcases:      149      Total Assertions:      401
  Minimum Elapsed msec:        0     Failed Assertions:        0
  Average Elapsed msec:        5      Error Assertions:        0
  Maximum Elapsed msec:      489            Test Yield:   100.00%
  Total Run Time (sec):      2.0

  Code Coverage for PACKAGE BODY WTP.WT_ASSERT
    Total Source Lines:     1452          Missed Lines:        0
  Minimum Elapsed usec:        0       Annotated Lines:     1098
  Average Elapsed usec:      416        Excluded Lines:        5
  Maximum Elapsed usec:    53321         Unknown Lines:       46
 Trigger Source Offset:        0         Code Coverage:   100.00%

WTP.WT_ASSERT Details (Test Run ID 40)
----------------------------------------
 ---- Test Case: BOOLEAN_TO_STATUS
 PASS  469ms Test for "TRUE" conversion. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms Test for "FALSE" conversion. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms Test for NULL. ISNULL - Expected NULL and got ""
 ---- Test Case: COMPARE_QUERIES Bad Query Test 1
 PASS    8ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "ORA-06550: line 2, column 60:\nPL/SQL: ORA-00942: table or view does not exist\nORA-06550: line 2, column 18:\nPL/SQL: SQL Statement ignored\nORA-06550: line 2, column 11:\nPLS-00341: declaration of cursor 'CUR' is incomplete or malformed\nORA-06550: line 3, column 8:\nPL/SQL: Item ignored\nORA-06550: line 6, column 19:\nPLS-00320: the declaration of the type of this expression is incomplete or malformed\nORA-06550: line 6, column 4:\nPL/SQL: SQL Statement ignored\nFAILURE of Compare Query: with check_query as (select bogus123 from bogus456), against_query as (select bogus987 from bogus654), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2;"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: COMPARE_QUERIES Bad Query Test 2
 PASS   54ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Comparison Query: with check_query as (select table_name from user_tables), against_query as (select tablespace_name from user_tables), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: NLS Settings
 PASS    1ms get_NLS_DATE_FORMAT 1. EQ - Expected "DD-MON-YYYY" and got "DD-MON-YYYY"
 PASS    0ms get_NLS_DATE_FORMAT 2. EQ - Expected "DD-MON-YYYY HH24:MI:SS" and got "DD-MON-YYYY HH24:MI:SS"
 PASS    0ms get_NLS_TIMESTAMP_FORMAT 2. EQ - Expected "DD-MON-YYYY" and got "DD-MON-YYYY"
 PASS    1ms get_NLS_TIMESTAMP_FORMAT 2. EQ - Expected "DD-MON-YYYY HH24:MI:SS.FF6" and got "DD-MON-YYYY HH24:MI:SS.FF6"
 PASS    0ms get_NLS_TIMESTAMP_TZ_FORMAT 2. EQ - Expected "DD-MON-YYYY" and got "DD-MON-YYYY"
 PASS    0ms get_NLS_TIMESTAMP_TZ_FORMAT 2. EQ - Expected "DD-MON-YYYY HH24:MI:SS.FF6 TZH:TZM" and got "DD-MON-YYYY HH24:MI:SS.FF6 TZH:TZM"
 ---- Test Case: Last Values Tests
 PASS    0ms Last Pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms Last Assert. EQ - Expected "EQ" and got "EQ"
 PASS    1ms Last MSG. EQ - Expected "Last Assert" and got "Last Assert"
 PASS    0ms Last Details. EQ - Expected "Expected "Last Assert" and got "Last Assert"" and got "Expected "Last Assert" and got "Last Assert""
 ---- Test Case: RESET_GLOBALS
 PASS    0ms g_testcase. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.last_pass. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.raise_exception. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_assert. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.last_msg. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.last_details. ISNULL - Expected NULL and got ""
 ---- Test Case: This Happy Path
 PASS    0ms Run Test. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "THIS" and got "THIS"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "Expected "TRUE" and got "TRUE"" and got "Expected "TRUE" and got "TRUE""
 ---- Test Case: This Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: This Sad Path 2
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: This Sad Path 3
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: EQ VARCHAR2 Happy Path 1
 PASS    0ms Run Test. EQ - Expected "X" and got "X"
 PASS    0ms g_rec.last_pass value. ISNOTNULL - Expected NOT NULL and got "TRUE"
 PASS    0ms g_rec.last_pass. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert value. ISNOTNULL - Expected NOT NULL and got "EQ"
 PASS    0ms g_rec.last_assert. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_msg value. ISNOTNULL - Expected NOT NULL and got "Run Test"
 PASS    1ms g_rec.last_msg. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "X" and got "X""
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ VARCHAR2 Happy Path 2
 PASS    0ms Run Test. EQ - Expected "X" and got "X"
 ---- Test Case: EQ VARCHAR2 Happy Path 3
 PASS    0ms Run Test. EQ - Expected "" and got ""
 ---- Test Case: EQ VARCHAR2 Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "X"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "Y"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ VARCHAR2 Sad Path 2
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ VARCHAR2 Sad Path 3
 PASS    0ms check_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "Y"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ VARCHAR2 Sad Path 4
 PASS    0ms check_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ VARCHAR2 Sad Path 5
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "X"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "Y"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ VARCHAR2 Sad Path 6
 PASS    0ms check_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "Y"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ ROWID Happy Path 1
 PASS    0ms Run Test. EQ - Expected "AAAFd1AAFAAAABSAA/" and got "AAAFd1AAFAAAABSAA/"
 ---- Test Case: EQ ROWID Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "AAAFd1AAFAAAABSAA/"
 PASS    1ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "AAAFd1AAFAAAABSAB/"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ LONG Happy Path 1
 PASS    0ms Run Test. EQ - Expected "0123456789ABCDEF0123456789ABCDEF" and got "0123456789ABCDEF0123456789ABCDEF"
 ---- Test Case: EQ LONG Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "0123456789ABCDEF0123456789ABCDEF"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "FEDCBA9876543210FEDCBA9876543210"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ RAW Happy Path 1
 PASS    0ms Run Test. EQ - Expected "2345" and got "2345"
 ---- Test Case: EQ RAW Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "2345"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "6789"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ LANG RAW Happy Path 1
 PASS    0ms Run Test. EQ - Expected "0123456789ABCDEF0123456789ABCDEF" and got "0123456789ABCDEF0123456789ABCDEF"
 ---- Test Case: EQ LONG RAW Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "0123456789ABCDEF0123456789ABCDEF"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "FEDCBA9876543210FEDCBA9876543210"
 PASS    0ms Sad Path 1. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ NVARCHAR2 Happy Path 1
 PASS    0ms Run Test. EQ - Expected "NCHAR1" and got "NCHAR1"
 ---- Test Case: EQ NVARCHAR2 Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "NCHAR1"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "NCHAR2"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BOOLEAN Happy Path 1
 PASS    0ms Run Test. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: EQ BOOLEAN Happy Path 2
 PASS    0ms Run Test. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: EQ BOOLEAN Happy Path 3
 PASS    0ms Run Test. EQ - Expected "" and got ""
 ---- Test Case: EQ BOOLEAN Happy Sad 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "FALSE"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "TRUE"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BOOLEAN Happy Sad 2
 PASS    1ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "FALSE"
 PASS    0ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BOOLEAN Happy Sad 3
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "FALSE"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "TRUE"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BOOLEAN Happy Sad 4
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "FALSE"
 PASS    0ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ NUMBER Happy Path 1
 PASS    0ms Run Test. EQ - Expected "4" and got "4"
 ---- Test Case: EQ NUMBER Happy Path 2
 PASS    0ms Run Test. EQ - Expected "9876543210987654321098765432109876543210" and got "9876543210987654321098765432109876543210"
 ---- Test Case: EQ NUMBER Happy Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "4"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "5"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ PLS_INTEGER Happy Path 1
 PASS    0ms Run Test. EQ - Expected "2" and got "2"
 ---- Test Case: EQ PLS_INTEGER Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "2"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "3"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ DATE Happy Path 1
 PASS    0ms Run Test. EQ - Expected "21-APR-2018 17:27:07" and got "21-APR-2018 17:27:07"
 ---- Test Case: EQ DATE Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "21-APR-2018 17:27:07"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "21-APR-2018 18:27:07"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ TIMSETAMP Happy Path 1
 PASS    0ms EQ TIMSETAMP Happy Path 1. EQ - Expected "21-APR-2018 17:27:07.956000" and got "21-APR-2018 17:27:07.956000"
 ---- Test Case: EQ TIMSETAMP Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "21-APR-2018 17:27:07.956000"
 PASS    1ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "21-APR-2018 18:27:07"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ TIMSETAMP WITH LOCAL TIME ZONE Happy Path 1
 PASS    0ms Run Test. EQ - Expected "21-APR-2018 17:27:07.956000 -05:00" and got "21-APR-2018 17:27:07.956000 -05:00"
 ---- Test Case: EQ TIMSETAMP WITH LOCAL TIME ZONE Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "21-APR-2018 17:27:07.956000"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "21-APR-2018 18:27:07"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ TIMSETAMP WITH TIME ZONE Happy Path 1
 PASS    0ms Run Test. EQ - Expected "21-APR-2018 17:27:07.956000 -05:00" and got "21-APR-2018 17:27:07.956000 -05:00"
 ---- Test Case: EQ TIMSETAMP WITH TIME ZONE Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "21-APR-2018 17:27:07.956000 -05:00"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "21-APR-2018 18:27:07"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ INTERVAL DAY TO SECOND Happy Path 1
 PASS    0ms Run Test. EQ - Expected "+01 01:01:01.001000" and got "+01 01:01:01.001000"
 ---- Test Case: EQ INTERVAL DAY TO SECOND Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "+01 01:01:01.001000"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "+02 02:02:02.002000"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ INTERVAL YEAR TO MONTH Happy Path 1
 PASS    0ms Run Test. EQ - Expected "+01-01" and got "+01-01"
 ---- Test Case: EQ INTERVAL YEAR TO MONTH Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "+01-01"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "+02-02"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ XMLTYPE Happy Path 1
 PASS   69ms Run Test. EQ - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;temp
lateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexNa
me=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   "
 PASS    0ms g_rec.last_pass value. ISNOTNULL - Expected NOT NULL and got "TRUE"
 PASS    0ms g_rec.last_pass. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms  g_rec.last_assert value. ISNOTNULL - Expected NOT NULL and got "EQ"
 PASS    1ms g_rec.last_assert. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_msg value. ISNOTNULL - Expected NOT NULL and got "Run Test"
 PASS    0ms g_rec.last_msg. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch
/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://
www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF0"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ XMLTYPE Sad Path 1
 PASS   54ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FP
DS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber>\n          </ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n          </ns1:referencedIDVID>\n        </ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:effectiveDate>2007-04-
15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:curr"
 PASS    1ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?><note>2</note>"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ XMLTYPE Sad Path 2
 PASS   71ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ CLOB Happy Path 1
 PASS    2ms Run Test. EQ - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=
awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s
=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J"
 PASS    1ms g_rec.last_pass value. ISNOTNULL - Expected NOT NULL and got "TRUE"
 PASS    0ms g_rec.last_pass. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert value. ISNOTNULL - Expected NOT NULL and got "EQ"
 PASS    0ms g_rec.last_assert. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_msg value. ISNOTNULL - Expected NOT NULL and got "Run Test"
 PASS    0ms g_rec.last_msg. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www
.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/htm
l" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ CLOB Happy Path 2
 PASS    2ms Run Test. EQ - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=
awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s
=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J"
 ---- Test Case: EQ CLOB Happy Path 3
 PASS    1ms Run Test. EQ - Expected "" and got ""
 ---- Test Case: EQ CLOB Sad Path 1
 PASS    3ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsea
rch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:effectiveDate>2007-04-15 00:00:0
0</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    1ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "This is another clob."
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ CLOB Sad Path 2
 PASS    2ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ CLOB Sad Path 3
 PASS    2ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsea
rch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:effectiveDate>2007-04-15 00:00:0
0</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    1ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ CLOB Sad Path 4
 PASS    2ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsea
rch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:effectiveDate>2007-04-15 00:00:0
0</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    1ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ NCLOB Happy Path 1
 PASS   10ms Run Test. EQ - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=
awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s
=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J"
 ---- Test Case: EQ NCLOB Happy Path 2
 PASS   20ms Run Test. EQ - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=
awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s
=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J"
 ---- Test Case: EQ NCLOB Happy Path 3
 PASS    1ms Run Test. EQ - Expected "" and got ""
 ---- Test Case: EQ NCLOB Sad Path 1
 PASS   16ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsea
rch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:effectiveDate>2007-04-15 00:00:0
0</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    1ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "This is another clob."
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ NCLOB Sad Path 2
 PASS    7ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ NCLOB Sad Path 3
 PASS   12ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsea
rch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:effectiveDate>2007-04-15 00:00:0
0</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    3ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ NCLOB Sad Path 4
 PASS   13ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsea
rch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:effectiveDate>2007-04-15 00:00:0
0</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    0ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BLOB Happy Path 1
 PASS    1ms Run Test. EQ - DBMS_LOB.COMPARE on BLOBs, compare_results: 0
 PASS    0ms g_rec.last_pass value. ISNOTNULL - Expected NOT NULL and got "TRUE"
 PASS    0ms g_rec.last_pass. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert value. ISNOTNULL - Expected NOT NULL and got "EQ"
 PASS    0ms g_rec.last_assert. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_msg value. ISNOTNULL - Expected NOT NULL and got "Run Test"
 PASS    0ms g_rec.last_msg. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "DBMS_LOB.COMPARE on BLOBs, compare_results: 0"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BLOB Happy Path 2
 PASS    0ms Run Test. EQ - DBMS_LOB.COMPARE on BLOBs, compare_results: 0
 ---- Test Case: EQ BLOB Happy Path 3
 PASS    0ms Run Test. EQ - DBMS_LOB.COMPARE on BLOBs, compare_results: -1
 ---- Test Case: EQ BLOB Sad Path 1
 PASS    1ms check_this_in value. ISNOTNULL - BLOB is NOT NULL
 PASS    0ms against_this_in value. ISNOTNULL - BLOB is NOT NULL
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BLOB Sad Path 2
 PASS    2ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BLOB Sad Path 3
 PASS    0ms check_this_in value. ISNOTNULL - BLOB is NOT NULL
 PASS    0ms against_this_in value. ISNULL - BLOB is NULL
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BLOB Sad Path 4
 PASS    0ms check_this_in value. ISNOTNULL - BLOB is NOT NULL
 PASS    0ms against_this_in value. ISNULL - BLOB is NULL
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNOTNULL VARCHAR2 Happy Path 1
 PASS    3ms Run Test. ISNOTNULL - Expected NOT NULL and got "X"
 PASS    0ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "ISNOTNULL" and got "ISNOTNULL"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "Expected NOT NULL and got "X"" and got "Expected NOT NULL and got "X""
 ---- Test Case: ISNOTNULL VARCHAR2 Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNOTNULL VARCHAR2 Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNOTNULL BOOLEAN Happy Path 1
 PASS    0ms Run Test. ISNOTNULL - Expected NOT NULL and got "TRUE"
 ---- Test Case: ISNOTNULL BOOLEAN Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNOTNULL BOOLEAN Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNOTNULL CLOB Happy Path 1
 PASS    1ms Run Test. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.
do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:effectiveDate>2007-04-15 00:00:00</ns1:effe
ctiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    1ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "ISNOTNULL" and got "ISNOTNULL"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" 
href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:
effectiveDate>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-1"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNOTNULL CLOB Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNOTNULL CLOB Sad Path 2
 PASS    1ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNOTNULL BLOB Happy Path 1
 PASS    0ms Run Test. ISNOTNULL - BLOB is NOT NULL
 PASS    0ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "ISNOTNULL" and got "ISNOTNULL"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "BLOB is NOT NULL" and got "BLOB is NOT NULL"
 ---- Test Case: ISNOTNULL BLOB Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNOTNULL BLOB Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNULL VARCHAR2 Happy Path 1
 PASS    0ms Run Test. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "ISNULL" and got "ISNULL"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "Expected NULL and got """ and got "Expected NULL and got """
 ---- Test Case: ISNULL VARCHAR2 Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNULL VARCHAR2 Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    1ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNULL BOOLEAN Happy Path 1
 PASS    0ms Run Test. ISNULL - Expected NULL and got ""
 ---- Test Case: ISNULL BOOLEAN Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNULL BOOLEAN Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNULL CLOB Happy Path 1
 PASS    0ms Run Test. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "ISNULL" and got "ISNULL"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "Expected NULL and got """ and got "Expected NULL and got """
 ---- Test Case: ISNULL CLOB Sad Path 1
 PASS    2ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNULL CLOB Sad Path 2
 PASS    1ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNULL BLOB Happy Path 1
 PASS    0ms Run Test. ISNULL - BLOB is NULL
 PASS    0ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "ISNULL" and got "ISNULL"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "BLOB is NULL" and got "BLOB is NULL"
 ---- Test Case: ISNULL BLOB Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNULL BLOB Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: Raises Tests Happy Path 1
 PASS    1ms RAISES Varchar2 Test. RAISES/THROWS - Expected exception "%PLS-00302: component 'BOGUS' must be declared%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "wt_assert.bogus".
 PASS    1ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "RAISES/THROWS" and got "RAISES/THROWS"
 PASS    0ms g_rec.last_msg. EQ - Expected "RAISES Varchar2 Test" and got "RAISES Varchar2 Test"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected exception "%PLS-00302: component 'BOGUS' must be declared%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "wt_assert.bogus"."
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: Raises Tests Happy Path 2
 PASS    1ms RAISES Number Test. RAISES/THROWS - Expected exception "%-00302%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "wt_assert.bogus".
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected exception "%-00302%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "wt_assert.bogus"."
 PASS    0ms THROWS Varchar2 Test. RAISES/THROWS - Expected exception "%PLS-00302: component 'BOGUS' must be declared%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "wt_assert.bogus".
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected exception "%PLS-00302: component 'BOGUS' must be declared%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "wt_assert.bogus"."
 PASS    2ms THROWS Number Test. RAISES/THROWS - Expected exception "%-00302%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "wt_assert.bogus".
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected exception "%-00302%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "wt_assert.bogus"."
 ---- Test Case: Raises Tests Sad Path 1
 PASS    1ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    1ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected exception "%Incorrect Exception%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "wt_assert.bogus". Error Stack: ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored\nORA-06512: at "WTP.WT_ASSERT", line 2253\n"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: Raises Tests Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details. EQ - Expected "Expected exception "%Incorrect Exception%". Actual exception raised was "ORA-0000: normal, successful completion". Exception raised by: "wt_assert.set_NLS_DATE_FORMAT". Error Stack: " and got "Expected exception "%Incorrect Exception%". Actual exception raised was "ORA-0000: normal, successful completion". Exception raised by: "wt_assert.set_NLS_DATE_FORMAT". Error Stack: "
 ---- Test Case: EQQUERYVALUE VARCHAR2 Happy Path 1
 PASS    0ms Run Test. EQQUERYVALUE - Expected "X" and got "X" for Query: select dummy from DUAL
 PASS    0ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "EQQUERYVALUE" and got "EQQUERYVALUE"
 PASS    1ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "Expected "X" and got "X" for Query: select dummy from DUAL" and got "Expected "X" and got "X" for Query: select dummy from DUAL"
 ---- Test Case: EQQUERYVALUE VARCHAR2 Happy Path 2
 PASS    0ms Run Test. EQQUERYVALUE - Expected "" and got "" for Query: select max(dummy) from DUAL where 0 = 1
 ---- Test Case: EQQUERYVALUE VARCHAR2 Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: EQQUERYVALUE VARCHAR2 Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE VARCHAR2 Sad Path 3
 PASS    1ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details. ISNOTNULL - Expected NOT NULL and got "Exception raised for Query: Garbage query that won't work\nORA-00900: invalid SQL statement\nORA-06512: at "WTP.WT_ASSERT", line 2435\n"
 PASS    0ms g_rec.last_details value. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE XMLTYPE Happy Path 1
 PASS   52ms Run Test. EQQUERYVALUE - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardful
l&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&a
mp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " for Query: select temp_xml from wt_test_data where id = 1
 PASS    0ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "EQQUERYVALUE" and got "EQQUERYVALUE"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch
/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://
www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF0"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE XMLTYPE Sad Path 1
 PASS   20ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "<?xml version="1.0" encoding="UTF-8"?><note>2</note>" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="
alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " for Query: select temp_xml from wt_test_data where id = 1"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE XMLTYPE Sad Path 2
 PASS   18ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE XMLTYPE Sad Path 3
 PASS    1ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details. ISNOTNULL - Expected NOT NULL and got "Exception raised for Query: Garbage query that won't work\nORA-00900: invalid SQL statement\nORA-06512: at "WTP.WT_ASSERT", line 2473\n"
 PASS    0ms g_rec.last_details value. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE CLOB Happy Path 1
 PASS    9ms Run Test. EQQUERYVALUE - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;
indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/s
earch.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" for Query: select temp_clob from wt_test_data where id = 1
 PASS    0ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "EQQUERYVALUE" and got "EQQUERYVALUE"
 PASS    1ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www
.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/htm
l" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE CLOB Happy Path 2
 PASS    0ms Run Test. EQQUERYVALUE - Expected "" and got "" for Query: select temp_clob from wt_test_data where 0 = 1
 ---- Test Case: EQQUERYVALUE CLOB Sad Path 1
 PASS    2ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "This is another clob." and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" ty
pe="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" for Query: select temp_clob from wt_test_data where id = 1"
 PASS    1ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE CLOB Sad Path 2
 PASS    2ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE CLOB Sad Path 3
 PASS    1ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details. ISNOTNULL - Expected NOT NULL and got "Exception raised for Query: Garbage query that won't work\nORA-00900: invalid SQL statement\nORA-06512: at "WTP.WT_ASSERT", line 2509\n"
 PASS    0ms g_rec.last_details value. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE BLOB Happy Path 1
 PASS    4ms Run Test. EQQUERYVALUE - DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_test_data where id = 1, compare_results: 0
 PASS    1ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "EQQUERYVALUE" and got "EQQUERYVALUE"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_test_data where id = 1, compare_results: 0" and got "DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_test_data where id = 1, compare_results: 0"
 ---- Test Case: EQQUERYVALUE BLOB Happy Path 2
 PASS    1ms Run Test. EQQUERYVALUE - DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_test_data where 0 = 1, compare_results: -1
 ---- Test Case: EQQUERYVALUE BLOB Sad Path 1
 PASS    1ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details. EQ - Expected "DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_test_data where id = 1, compare_results: -1" and got "DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_test_data where id = 1, compare_results: -1"
 ---- Test Case: EQQUERYVALUE BLOB Sad Path 2
 PASS    2ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE BLOB Sad Path 3
 PASS    1ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details. ISNOTNULL - Expected NOT NULL and got "Exception raised for Query: Garbage query that won't work\nORA-00900: invalid SQL statement\nORA-06512: at "WTP.WT_ASSERT", line 2548\n"
 PASS    0ms g_rec.last_details value. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERY Tests Happy Path 1
 PASS   74ms Run Test. EQQUERY - Comparison Query: with check_query as (select * from USER_TABLES), against_query as (select * from USER_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2
 PASS    1ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "EQQUERY" and got "EQQUERY"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Comparison Query: with check_query as (select * from USER_TABLES), against_query as (select * from USER_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2"
 PASS    0ms EQQUERY Tests Happy Path 1b g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERY Tests Sad Path 1
 PASS   38ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Comparison Query: with check_query as (select * from USER_TABLES), against_query as (select * from USER_TABLES where 0 = 1), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERY Tests Sad Path 2
 PASS   39ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERY Tests Sad Path 3
 PASS    3ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "ORA-06550: line 2, column 119:\nPL/SQL: ORA-01789: query block has incorrect number of result columns\nORA-06550: line 2, column 18:\nPL/SQL: SQL Statement ignored\nORA-06550: line 2, column 11:\nPLS-00341: declaration of cursor 'CUR' is incomplete or malformed\nORA-06550: line 3, column 8:\nPL/SQL: Item ignored\nORA-06550: line 6, column 19:\nPLS-00320: the declaration of the type of this expression is incomplete or malformed\nORA-06550: line 6, column 4:\nPL/SQL: SQL Statement ignored\nFAILURE of Compare Query: with check_query as (select * from USER_TABLES), against_query as (select * from ALL_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2;"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABLE Tests Happy Path 1
 PASS   71ms Run Test. EQTABLE - Comparison Query: with check_query as (select * from USER_TABLES), against_query as (select * from USER_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2
 PASS    0ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "EQTABLE" and got "EQTABLE"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Comparison Query: with check_query as (select * from USER_TABLES), against_query as (select * from USER_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABLE Tests Happy Path 2
 PASS   50ms Run Test. EQTABLE - Comparison Query: with check_query as (select * from ALL_TABLES where owner = 'WTP'), against_query as (select * from ALL_TABLES where owner = 'WTP'), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2
 ---- Test Case: EQTABLE Sad Path 1
 PASS  489ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Comparison Query: with check_query as (select * from ALL_TABLES where owner = 'WTP'), against_query as (select * from ALL_TABLES where 0 = 1), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABLE Sad Path 2
 PASS   24ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABLE Sad Path 3
 PASS    4ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "ORA-06550: line 2, column 119:\nPL/SQL: ORA-01789: query block has incorrect number of result columns\nORA-06550: line 2, column 18:\nPL/SQL: SQL Statement ignored\nORA-06550: line 2, column 11:\nPLS-00341: declaration of cursor 'CUR' is incomplete or malformed\nORA-06550: line 3, column 8:\nPL/SQL: Item ignored\nORA-06550: line 6, column 19:\nPLS-00320: the declaration of the type of this expression is incomplete or malformed\nORA-06550: line 6, column 4:\nPL/SQL: SQL Statement ignored\nFAILURE of Compare Query: with check_query as (select * from USER_TABLES), against_query as (select * from ALL_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2;"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABCOUNT Tests Happy Path 1
 PASS   45ms Run Test. EQTABCOUNT - Expected 8 rows from "ALL_TABLES" and got 8 rows from "ALL_TABLES"
 PASS    0ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "EQTABCOUNT" and got "EQTABCOUNT"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected 8 rows from "ALL_TABLES" and got 8 rows from "ALL_TABLES""
 PASS    1ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABCOUNT Tests Happy Path 2
 PASS   47ms Run Test. EQTABCOUNT - Expected 8 rows from "USER_TABLES" and got 8 rows from "ALL_TABLES"
 ---- Test Case: EQTABCOUNT Sad Path 1
 PASS   28ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected 8 rows from "ALL_TABLES" and got 0 rows from "ALL_TABLES""
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABCOUNT Sad Path 2
 PASS   24ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABCOUNT Sad Path 3
 PASS   38ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    1ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected 65 rows from "USER_TAB_COLUMNS" and got 8 rows from "USER_TABLES""
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABCOUNT Sad Path 4
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "ORA-00942: table or view does not exist\nFAILURE of Compare Query: select count(*) from BOGUS1;"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_details 2. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: OBJEXISTS Happy Path 1
 PASS    2ms Run Test. OBJEXISTS - Number of objects found for "SYS.DUAL" is 1
 PASS    0ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "OBJEXISTS" and got "OBJEXISTS"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "Number of objects found for "SYS.DUAL" is 1" and got "Number of objects found for "SYS.DUAL" is 1"
 ---- Test Case: OBJEXISTS Happy Path 2
 PASS    1ms Run Test. OBJEXISTS - Number of objects found for "SYS.DUAL"(TABLE) is 1
 ---- Test Case: OBJEXISTS Happy Path 3
 PASS    0ms Run Test. OBJEXISTS - Number of objects found for "SYS.DUAL" is 1
 ---- Test Case: OBJEXISTS Happy Path 4
 PASS    2ms Run Test. OBJEXISTS - Number of objects found for "DUAL" is 2
 ---- Test Case: OBJEXISTS Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details. EQ - Expected "Number of objects found for "JOE SMITH.BOGUS" is 0" and got "Number of objects found for "JOE SMITH.BOGUS" is 0"
 ---- Test Case: OBJEXISTS Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: OBJNOTEXISTS Happy Path 1
 PASS    0ms Run Test. OBJNOTEXISTS - Number of objects found for "BOGUS.THING123" is 0
 PASS    0ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "OBJNOTEXISTS" and got "OBJNOTEXISTS"
 PASS    1ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "Number of objects found for "BOGUS.THING123" is 0" and got "Number of objects found for "BOGUS.THING123" is 0"
 ---- Test Case: OBJNOTEXISTS Happy Path 2
 PASS    0ms Run Test. OBJNOTEXISTS - Number of objects found for "BOGUS.THING123"(PACKAGE) is 0
 ---- Test Case: OBJNOTEXISTS Happy Path 3
 PASS    0ms Run Test. OBJNOTEXISTS - Number of objects found for "BOGUS.THING123" is 0
 ---- Test Case: OBJNOTEXISTS Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details. EQ - Expected "Number of objects found for "SYS.DUAL" is 1" and got "Number of objects found for "SYS.DUAL" is 1"
 ---- Test Case: OBJNOTEXISTS Sad Path 2
 PASS    1ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"

WTP.WT_ASSERT PACKAGE BODY Code Coverage Details (Test Run ID 40)
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
     1 EXCL      0         0       0         0 package body wt_assert is
    14 ANNO      0         0       0         0       temp_rowid1 CONSTANT rowid          := chartorowid('AAAFd1AAFAAAABSAA/');
    15 ANNO      0         0       0         0       temp_rowid2 CONSTANT rowid          := chartorowid('AAAFd1AAFAAAABSAB/');
    16 ANNO      0         0       0         0       temp_long1  CONSTANT long           := hextoraw('0123456789ABCDEF0123456789ABCDEF');
    17 ANNO      0         0       0         0       temp_long2  CONSTANT long           := hextoraw('FEDCBA9876543210FEDCBA9876543210');
    18 ANNO      0         0       0         0       temp_raw1   CONSTANT raw(2)         := hextoraw('2345');
    19 ANNO      0         0       0         0       temp_raw2   CONSTANT raw(2)         := hextoraw('6789');
    20 ANNO      0         0       0         0       temp_lraw1  CONSTANT long raw       := hextoraw('0123456789ABCDEF0123456789ABCDEF');
    21 ANNO      0         0       0         0       temp_lraw2  CONSTANT long raw       := hextoraw('FEDCBA9876543210FEDCBA9876543210');
    23 ANNO      0         0       0         0       temp_blob2  CONSTANT BLOB           := hextoraw('FEDCBA9876543210FEDCBA9876543210');
    25 ANNO      0         0       0         0       temp_nc1    CONSTANT NVARCHAR2(12)  := 'NCHAR1';
    26 ANNO      0         0       0         0       temp_nc2    CONSTANT NVARCHAR2(12)  := 'NCHAR2';
    27 ANNO      0         0       0         0       temp_bool   CONSTANT boolean        := NULL;
    29 ANNO      0         0       0         0       temp_clob2  CONSTANT CLOB           := 'This is another clob.';
    31 ANNO      0         0       0         0       temp_nclob2 CONSTANT NCLOB          := 'This is another clob.';
    33 ANNO      0         0       0         0       temp_xml2   CONSTANT XMLTYPE        := xmltype('<?xml version="1.0" encoding="UTF-8"?><note>2</note>');
    35 ANNO      0         0       0         0       temp_pint1  CONSTANT pls_integer    := 2;
    36 ANNO      0         0       0         0       temp_pint2  CONSTANT pls_integer    := 3;
    37 ANNO      0         0       0         0       temp_date   CONSTANT date           := sysdate;
    38 ANNO      0         0       0         0       temp_tstmp  CONSTANT timestamp      := systimestamp;
    39 ANNO      0         0       0         0       temp_tstlzn CONSTANT timestamp with local time zone := systimestamp;
    40 ANNO      0         0       0         0       temp_tstzn  CONSTANT timestamp with time zone := systimestamp;
    41 ANNO      0         0       0         0       temp_intds1 CONSTANT interval day to second   := interval '+01 01:01:01.001' day to second;
    42 ANNO      0         0       0         0       temp_intds2 CONSTANT interval day to second   := interval '+02 02:02:02.002' day to second;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
    43 ANNO      0         0       0         0       temp_intym1 CONSTANT interval year to month   := interval '+01-01' year to month;
    44 ANNO      0         0       0         0       temp_intym2 CONSTANT interval year to month   := interval '+02-02' year to month;
    48 ANNO      0         0       0         0       wtplsql_skip_save boolean := FALSE;
    56 UNKN      0        59       0         1 function boolean_to_status
    61 EXEC    299        44       0         1    if in_boolean is null
    63 EXEC     12         2       0         1       return '';
    64 EXEC    287        38       0         1    elsif in_boolean
    66 EXEC    170        74       0        35       return 'TRUE';
    68 EXEC    117        37       0         1    return 'FALSE';
    69 EXEC    299        46       0         2 end boolean_to_status;
    73 ANNO      0         6       6         6    procedure t_boolean_to_status
    76 ANNO      1         3       3         3       wt_assert.g_testcase := 'BOOLEAN_TO_STATUS';
    78 ANNO      1         1       1         1       wt_assert.eq
    82 ANNO      1         2       1         1       wt_assert.eq
    86 ANNO      1         1       1         1       wt_assert.isnull
    89 ANNO      1         0       0         0    end t_boolean_to_status;
    94 UNKN      0       441       1         8 procedure process_assertion
   102 ANNO    490        89       0         4       if not wtplsql_skip_save then
   106 EXEC    401       175       1         2    wt_result.save
   108 UNKN      0       527       1         7       ,in_status         => case g_rec.last_pass
   109 UNKN      0        85       0         2                             when TRUE then C_PASS
   124 EXEC    490       148       1         3    if g_rec.raise_exception and not g_rec.last_pass
   126 EXEC     28      1548       1       115       raise_application_error(-20003, wt_text_report.format_test_result
   134 UNKN      0        81       0         2 end process_assertion;
   138 ANNO      0         1       1         1    procedure t_process_assertion
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   142 ANNO      1         1       1         1       g_testcase  := 'PROCESS_ASSERTION';
   143 ANNO      1         1       1         1       g_rec.last_assert     := 'THIS';
   144 ANNO      1         1       1         1       g_rec.last_pass       := FALSE;
   145 ANNO      1         0       0         0       g_rec.last_details    := 'Expected "PASS" and got "FAIL"';
   146 ANNO      1         0       0         0       g_rec.last_msg        := 'Process Assertion Forced Failure';
   147 ANNO      1         1       1         1       g_rec.raise_exception := TRUE;
   148 ANNO      1         0       0         0       wtplsql_skip_save  := TRUE;
   149 ANNO      1         0       0         0       process_assertion;  -- Should throw exception
   150 ANNO      0         0       0         0       wtplsql_skip_save  := FALSE;
   152 ANNO      1         0       0         0       when ASSERT_FAILURE_EXCEPTION then
   153 ANNO      1         1       1         1          wtplsql_skip_save := FALSE;
   154 ANNO      1         3       1         2    end t_process_assertion;
   159 EXEC     11        21       1         2 procedure compare_queries (
   168 EXEC     11        19       1         3    l_qry_txt := 'with check_query as (' || check_query_in   ||
   177 EXEC     11        18       1         8    l_exec_txt :=
   190 EXEC     11      9612      68      3196    execute immediate l_exec_txt using out l_ret_txt;
   191 EXEC      8        10       1         2    if l_ret_txt = 'FOUND'
   193 EXEC      5         9       1         2       g_rec.last_pass := FALSE; -- Some Difference Found
   195 EXEC      3         4       1         2       g_rec.last_pass := TRUE;  -- Nothing found, queries match
   198 EXEC      8        38       4         6    g_rec.last_details := 'Comparison Query: ' || l_qry_txt;
   200 EXEC      3         0       0         0    when OTHERS
   202 EXEC      3       187      54        74       g_rec.last_details := SQLERRM || CHR(10) ||
   204 EXEC      3         3       1         1       g_rec.last_pass    := FALSE;
   205 EXEC     11        21       1         4 end compare_queries;
   209 ANNO      0         4       4         4    procedure t_compare_queries
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   213 ANNO      1         1       1         1       wt_assert.g_testcase := 'COMPARE_QUERIES Bad Query Test 1';
   214 ANNO      1         1       1         1       compare_queries (
   217 ANNO      1         4       4         4       temp_rec := g_rec;
   218 ANNO      1         1       1         1       wt_assert.eq (
   222 ANNO      1         1       1         1       wt_assert.isnotnull(
   225 ANNO      1        10      10        10       wt_assert.this(
   230 ANNO      1         1       1         1       wt_assert.g_testcase := 'COMPARE_QUERIES Bad Query Test 2';
   231 ANNO      1         0       0         0       compare_queries (
   234 ANNO      1         5       5         5       temp_rec := g_rec;
   235 ANNO      1         1       1         1       wt_assert.eq (
   239 ANNO      1         1       1         1       wt_assert.isnotnull(
   242 ANNO      1         6       6         6       wt_assert.this(
   247 ANNO      1         0       0         0    end t_compare_queries;
   256 EXCL      0         0       0         0 function last_pass
   260 EXEC      1         1       1         1    return g_rec.last_pass;
   261 EXEC      1         0       0         0 end last_pass;
   263 UNKN      0         1       1         1 function last_assert
   267 EXEC      1         1       1         1    return g_rec.last_assert;
   268 EXEC      1         0       0         0 end last_assert;
   270 EXCL      0         0       0         0 function last_msg
   274 EXEC      1         0       0         0    return g_rec.last_msg;
   275 EXEC      1         0       0         0 end last_msg;
   277 UNKN      0         1       1         1 function last_details
   281 EXEC      1         0       0         0    return g_rec.last_details;
   282 EXEC      1         0       0         0 end last_details;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   286 ANNO      0         2       2         2    procedure t_last_values
   290 ANNO      1         0       0         0       wt_assert.g_testcase := 'Last Values Tests';
   291 ANNO      1         0       0         0       wt_assert.eq (
   296 ANNO      1         0       0         0       wt_assert.eq (
   302 ANNO      1         1       1         1       temp_rec := g_rec;
   303 ANNO      1         1       1         1       wt_assert.eq (
   308 ANNO      1         1       1         1       wt_assert.eq (
   313 ANNO      1         0       0         0    end t_last_values;
   318 UNKN      0         1       1         1 procedure reset_globals
   321 EXEC      1         0       0         0    g_testcase            := '';
   322 EXEC      1         0       0         0    g_rec.last_pass       := NULL;
   323 EXEC      1         0       0         0    g_rec.last_assert     := '';
   324 EXEC      1         0       0         0    g_rec.last_msg        := '';
   325 EXEC      1         1       1         1    g_rec.last_details    := '';
   326 EXEC      1         0       0         0    g_rec.raise_exception := FALSE;
   327 EXEC      1         0       0         0 end reset_globals;
   331 ANNO      0         1       1         1    procedure t_reset_globals
   334 ANNO      1         0       0         0       reset_globals;  -- Resets g_testcase
   335 ANNO      1         1       1         1       temp_rec         := g_rec;
   336 ANNO      1         0       0         0       temp_testcase    := g_testcase;
   338 ANNO      1         0       0         0       g_testcase       := 'RESET_GLOBALS';
   339 ANNO      1         1       1         1       wt_assert.isnull(
   342 ANNO      1         1       1         1       wt_assert.isnull
   345 ANNO      1         0       0         0       wt_assert.eq(
   349 ANNO      1         1       1         1       wt_assert.isnull
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   352 ANNO      1         0       0         0       wt_assert.isnull
   355 ANNO      1         0       0         0       wt_assert.isnull
   358 ANNO      1         0       0         0    end t_reset_globals;
   363 UNKN      0         4       2         2 function get_NLS_DATE_FORMAT
   368 EXEC      2       253      72       181    select value into l_format
   371 EXEC      2         4       1         3    return l_format;
   372 EXEC      2         1       0         1 end get_NLS_DATE_FORMAT;
   374 UNKN      0         2       1         1 procedure set_NLS_DATE_FORMAT
   378 EXEC      3       372      89       157    execute immediate 'alter session set NLS_DATE_FORMAT = ''' ||
   380 EXEC      3         2       1         1 end set_NLS_DATE_FORMAT;
   382 UNKN      0         2       1         1 function get_NLS_TIMESTAMP_FORMAT
   387 EXEC      2       191      71       120    select value into l_format
   390 EXEC      2         3       1         2    return l_format;
   391 EXEC      2         2       1         1 end get_NLS_TIMESTAMP_FORMAT;
   393 UNKN      0         3       1         2 procedure set_NLS_TIMESTAMP_FORMAT
   397 EXEC      2       292     141       151    execute immediate 'alter session set NLS_TIMESTAMP_FORMAT = ''' ||
   399 EXEC      2         0       0         0 end set_NLS_TIMESTAMP_FORMAT;
   401 UNKN      0         2       1         1 function get_NLS_TIMESTAMP_TZ_FORMAT
   406 EXEC      2       217      73       144    select value into l_format
   409 EXEC      2         2       1         1    return l_format;
   410 EXEC      2         3       1         2 end get_NLS_TIMESTAMP_TZ_FORMAT;
   412 UNKN      0         2       1         1 procedure set_NLS_TIMESTAMP_TZ_FORMAT
   416 EXEC      2       288     127       161    execute immediate 'alter session set NLS_TIMESTAMP_TZ_FORMAT = ''' ||
   418 EXEC      2         2       1         1 end set_NLS_TIMESTAMP_TZ_FORMAT;
   422 ANNO      0         3       3         3    procedure t_nls_settings
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   426 ANNO      1         0       0         0       wt_assert.g_testcase := 'NLS Settings';
   427 ANNO      1         0       0         0       set_NLS_DATE_FORMAT('DD-MON-YYYY');
   428 ANNO      1         1       1         1       wt_assert.eq
   432 ANNO      1         0       0         0       set_NLS_DATE_FORMAT;
   433 ANNO      1         0       0         0       wt_assert.eq
   437 ANNO      1         0       0         0       set_NLS_TIMESTAMP_FORMAT('DD-MON-YYYY');
   438 ANNO      1         0       0         0       wt_assert.eq
   442 ANNO      1         1       1         1       set_NLS_TIMESTAMP_FORMAT;
   444 ANNO      1         0       0         0       wt_assert.eq
   448 ANNO      1         0       0         0       set_NLS_TIMESTAMP_TZ_FORMAT('DD-MON-YYYY');
   449 ANNO      1         1       1         1       wt_assert.eq
   453 ANNO      1         1       1         1       set_NLS_TIMESTAMP_TZ_FORMAT;
   454 ANNO      1         2       1         1       wt_assert.eq
   458 ANNO      1         1       1         1    end t_nls_settings;
   467 UNKN      0        75       1         5 procedure this (
   474 EXEC     81        40       0         1    g_rec.last_assert  := 'THIS';
   475 EXEC     81        22       0         1    g_rec.last_msg     := msg_in;
   476 EXEC     81        29       0         2    g_rec.last_pass    := nvl(check_this_in, FALSE);
   477 EXEC     81        69       1         3    g_rec.last_details := 'Expected "TRUE" and got "' ||
   479 EXEC     81        20       0         1    g_rec.raise_exception := raise_exc_in;
   480 EXEC     81         8       0         1    process_assertion;
   481 EXEC     80        13       0         1 end this;
   485 ANNO      0         1       1         1    procedure t_this
   490 ANNO      1         1       1         1       wt_assert.g_testcase := 'This Happy Path';
   491 ANNO      1         0       0         0       wt_assert.this (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   494 ANNO      1         0       0         0       temp_rec := g_rec;
   495 ANNO      1         0       0         0       wt_assert.eq (
   499 ANNO      1         0       0         0       wt_assert.eq (
   503 ANNO      1         0       0         0       wt_assert.eq (
   507 ANNO      1         0       0         0       wt_assert.eq (
   512 ANNO      1         0       0         0       wt_assert.g_testcase := 'This Sad Path 1';
   513 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   514 ANNO      1         0       0         0       this (
   517 ANNO      1         1       1         1       temp_rec := g_rec;
   518 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   519 ANNO      1         0       0         0       wt_assert.eq (
   524 ANNO      1         1       1         1       wt_assert.g_testcase := 'This Sad Path 2';
   525 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   527 ANNO      1         0       0         0          this (
   531 ANNO      0         0       0         0          l_found_exception := FALSE;
   532 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
   533 ANNO      1         0       0         0          l_found_exception := TRUE;
   534 ANNO      0         1       1         1       end;
   535 ANNO      1         0       0         0       temp_rec := g_rec;
   536 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   537 ANNO      1         0       0         0       wt_assert.eq (
   541 ANNO      1         0       0         0       wt_assert.eq (
   546 ANNO      1         0       0         0       wt_assert.g_testcase := 'This Sad Path 3';
   547 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   548 ANNO      1         0       0         0       this (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   551 ANNO      1         0       0         0       temp_rec := g_rec;
   552 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   553 ANNO      1         0       0         0       wt_assert.eq (
   557 ANNO      1         1       1         1    end t_this;
   563 UNKN      0       157       1         2 procedure eq (
   571 EXEC    193        57       0         2    g_rec.last_assert  := 'EQ';
   572 EXEC    193        64       1         1    g_rec.last_msg     := msg_in;
   573 EXEC    193       237       0        33    g_rec.last_pass    := (   nvl(check_this_in = against_this_in, false)
   574 UNKN      0        16       1         2                            or (    check_this_in is null
   578 EXEC    193       418       1       119    g_rec.last_details := 'Expected "' || substr(against_this_in,1,1000) ||
   581 EXEC    193        33       0         2    g_rec.raise_exception := raise_exc_in;
   582 EXEC    193        25       0         1    process_assertion;
   583 EXEC    192        23       0         1 end eq;
   586 UNKN      0        92       2         4 procedure eq (
   594 EXEC     98        65       0         1    eq (msg_in           => msg_in
   599 EXEC     98        13       0         1 end eq;
   602 UNKN      0        25       7        11 procedure eq (
   610 EXEC      3         1       1         1    g_rec.last_assert  := 'EQ';
   611 EXEC      3         2       1         1    g_rec.last_msg     := msg_in;
   612 EXEC      3     72559       1     28212    g_rec.last_pass    := (xmltype.getclobval(check_this_in)  =
   614 EXEC      3    101667       9     53321    g_rec.last_details := 'Expected "' || substr(xmltype.getclobval(against_this_in),1,1000) ||
   617 EXEC      3         4       1         2    g_rec.raise_exception := raise_exc_in;
   618 EXEC      3         3       1         1    process_assertion;
   619 EXEC      2       128      63        65 end eq;
   622 UNKN      0       179       5        25 procedure eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   630 EXEC     14        16       1         3    g_rec.last_assert  := 'EQ';
   631 EXEC     14         7       1         1    g_rec.last_msg     := msg_in;
   632 EXEC     14      2503       0       607    g_rec.last_pass    := (   nvl(check_this_in = against_this_in, false)
   633 UNKN      0        14       1         3                            or (    check_this_in is null
   637 EXEC     14     16093     600      1997    g_rec.last_details := 'Expected "' || substr(against_this_in,1,1000) ||
   640 EXEC     14         8       0         2    g_rec.raise_exception := raise_exc_in;
   641 EXEC     14         8       0         1    process_assertion;
   642 EXEC     12       815      48       177 end eq;
   645 UNKN      0         8       0         2 procedure eq (
   654 EXEC      7         2       0         1    g_rec.last_assert  := 'EQ';
   655 EXEC      7         2       0         1    g_rec.last_msg     := msg_in;
   656 EXEC      7        79       0        71    compare_results    := nvl(DBMS_LOB.COMPARE(check_this_in, against_this_in),-1);
   657 EXEC      7         9       0         2    g_rec.last_pass    := (    (compare_results = 0)
   658 UNKN      0         6       0         2                            or (    check_this_in is null
   662 EXEC      7        62       1        46    g_rec.last_details := 'DBMS_LOB.COMPARE on BLOBs, compare_results: ' || compare_results;
   663 EXEC      7         2       1         1    g_rec.raise_exception := raise_exc_in;
   664 EXEC      7         1       0         1    process_assertion;
   665 EXEC      6         1       0         1 end eq;
   673 ANNO      0        25      25        25    procedure t_eq
   678 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ VARCHAR2 Happy Path 1';
   679 ANNO      1         0       0         0       eq (
   683 ANNO      1         0       0         0       temp_rec := g_rec;
   684 ANNO      1         0       0         0       wt_assert.isnotnull (
   687 ANNO      1         0       0         0       wt_assert.this (
   690 ANNO      1         1       1         1       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   693 ANNO      1         0       0         0       wt_assert.this (
   696 ANNO      1         0       0         0       wt_assert.isnotnull (
   699 ANNO      1         0       0         0       wt_assert.this (
   702 ANNO      1         1       1         1       wt_assert.isnotnull (
   705 ANNO      1         0       0         0       wt_assert.this (
   709 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ VARCHAR2 Happy Path 2';
   710 ANNO      1         0       0         0       eq (
   715 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ VARCHAR2 Happy Path 3';
   716 ANNO      1         0       0         0       eq (
   722 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 1';
   723 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   724 ANNO      1         0       0         0       eq (
   728 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   729 ANNO      1         1       1         1       temp_rec := g_rec;
   730 ANNO      1         0       0         0       wt_assert.isnotnull (
   733 ANNO      1         0       0         0       wt_assert.isnotnull (
   736 ANNO      1         1       1         1       wt_assert.this (
   740 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 2';
   741 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   743 ANNO      1         1       1         1          eq (
   748 ANNO      0         0       0         0          l_found_exception := FALSE;
   749 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
   750 ANNO      1         0       0         0          l_found_exception := TRUE;
   751 ANNO      0         2       2         2       end;
   752 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   753 ANNO      1         1       1         1       temp_rec := g_rec;
   754 ANNO      1         1       1         1       wt_assert.this (
   757 ANNO      1         0       0         0       wt_assert.eq (
   762 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 3';
   763 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   764 ANNO      1         1       1         1       eq (
   768 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   769 ANNO      1         1       1         1       temp_rec := g_rec;
   770 ANNO      1         0       0         0       wt_assert.isnull (
   773 ANNO      1         0       0         0       wt_assert.isnotnull (
   776 ANNO      1         0       0         0       wt_assert.this (
   780 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 4';
   781 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   782 ANNO      1         0       0         0       eq (
   786 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   787 ANNO      1         1       1         1       temp_rec := g_rec;
   788 ANNO      1         0       0         0       wt_assert.isnull (
   791 ANNO      1         0       0         0       wt_assert.isnull (
   794 ANNO      1         1       1         1       wt_assert.this (
   798 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 5';
   799 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   800 ANNO      1         1       1         1       eq (
   805 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   806 ANNO      1         0       0         0       temp_rec := g_rec;
   807 ANNO      1         1       1         1       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   810 ANNO      1         0       0         0       wt_assert.isnotnull (
   813 ANNO      1         1       1         1       wt_assert.this (
   817 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 6';
   818 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   819 ANNO      1         0       0         0       eq (
   824 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   825 ANNO      1         0       0         0       temp_rec := g_rec;
   826 ANNO      1         1       1         1       wt_assert.isnull (
   829 ANNO      1         1       1         1       wt_assert.isnotnull (
   832 ANNO      1         0       0         0       wt_assert.this (
   837 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ ROWID Happy Path 1';
   838 ANNO      1         0       0         0       eq (
   843 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ ROWID Sad Path 1';
   844 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   845 ANNO      1         0       0         0       eq (
   849 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   850 ANNO      1         1       1         1       temp_rec := g_rec;
   851 ANNO      1         0       0         0       wt_assert.isnotnull (
   854 ANNO      1         0       0         0       wt_assert.isnotnull (
   857 ANNO      1         1       1         1       wt_assert.this (
   862 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ LONG Happy Path 1';
   863 ANNO      1         1       1         1       eq (
   868 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ LONG Sad Path 1';
   869 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   870 ANNO      1         1       1         1       eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   874 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   875 ANNO      1         0       0         0       temp_rec := g_rec;
   876 ANNO      1         0       0         0       wt_assert.isnotnull (
   879 ANNO      1         1       1         1       wt_assert.isnotnull (
   882 ANNO      1         1       1         1       wt_assert.this (
   887 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ RAW Happy Path 1';
   888 ANNO      1         1       1         1       eq (
   893 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ RAW Sad Path 1';
   894 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   895 ANNO      1         1       1         1       eq (
   899 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   900 ANNO      1         1       1         1       temp_rec := g_rec;
   901 ANNO      1         1       1         1       wt_assert.isnotnull (
   904 ANNO      1         0       0         0       wt_assert.isnotnull (
   907 ANNO      1         0       0         0       wt_assert.this (
   912 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ LANG RAW Happy Path 1';
   913 ANNO      1         1       1         1       eq (
   919 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ LANG RAW Happy Path 1';
   920 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   921 ANNO      1         1       1         1       eq (
   926 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ LONG RAW Sad Path 1';
   927 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
   928 ANNO      1         0       0         0       temp_rec := g_rec;
   929 ANNO      1         0       0         0       wt_assert.isnotnull (
   932 ANNO      1         1       1         1       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   935 ANNO      1         0       0         0       wt_assert.this (
   940 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NVARCHAR2 Happy Path 1';
   941 ANNO      1         6       6         6       eq (
   946 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NVARCHAR2 Sad Path 1';
   947 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   948 ANNO      1         2       2         2       eq (
   952 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   953 ANNO      1         1       1         1       temp_rec := g_rec;
   954 ANNO      1         1       1         1       wt_assert.isnotnull (
   957 ANNO      1         2       2         2       wt_assert.isnotnull (
   960 ANNO      1         0       0         0       wt_assert.this (
   964 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BOOLEAN Happy Path 1';
   965 ANNO      1         0       0         0       eq (
   969 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BOOLEAN Happy Path 2';
   970 ANNO      1         1       1         1       eq (
   975 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ BOOLEAN Happy Path 3';
   976 ANNO      1         1       1         1       eq (
   982 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ BOOLEAN Happy Sad 1';
   983 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   984 ANNO      1         0       0         0       eq (
   988 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   989 ANNO      1         0       0         0       temp_rec := g_rec;
   990 ANNO      1         0       0         0       wt_assert.isnotnull (
   993 ANNO      1         0       0         0       wt_assert.isnotnull (
   996 ANNO      1         0       0         0       wt_assert.this (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1000 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BOOLEAN Happy Sad 2';
  1001 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1002 ANNO      1         0       0         0       eq (
  1006 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1007 ANNO      1         0       0         0       temp_rec := g_rec;
  1008 ANNO      1         1       1         1       wt_assert.isnotnull (
  1011 ANNO      1         0       0         0       wt_assert.isnull (
  1014 ANNO      1         0       0         0       wt_assert.this (
  1018 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BOOLEAN Happy Sad 3';
  1019 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1020 ANNO      1         0       0         0       eq (
  1025 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1026 ANNO      1         0       0         0       temp_rec := g_rec;
  1027 ANNO      1         0       0         0       wt_assert.isnotnull (
  1030 ANNO      1         1       1         1       wt_assert.isnotnull (
  1033 ANNO      1         0       0         0       wt_assert.this (
  1037 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BOOLEAN Happy Sad 4';
  1038 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1039 ANNO      1         0       0         0       eq (
  1044 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1045 ANNO      1         1       1         1       temp_rec := g_rec;
  1046 ANNO      1         0       0         0       wt_assert.isnotnull (
  1049 ANNO      1         0       0         0       wt_assert.isnull (
  1052 ANNO      1         0       0         0       wt_assert.this (
  1056 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ NUMBER Happy Path 1';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1057 ANNO      1         4       4         4       eq (
  1061 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NUMBER Happy Path 2';
  1062 ANNO      1         3       3         3       eq (
  1067 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NUMBER Happy Path 1';
  1068 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1069 ANNO      1         1       1         1       eq (
  1073 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1074 ANNO      1         1       1         1       temp_rec := g_rec;
  1075 ANNO      1         1       1         1       wt_assert.isnotnull (
  1078 ANNO      1         1       1         1       wt_assert.isnotnull (
  1081 ANNO      1         1       1         1       wt_assert.this (
  1086 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ PLS_INTEGER Happy Path 1';
  1087 ANNO      1         1       1         1       eq (
  1091 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1093 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ PLS_INTEGER Sad Path 1';
  1094 ANNO      1         1       1         1       eq (
  1098 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1099 ANNO      1         0       0         0       temp_rec := g_rec;
  1100 ANNO      1         1       1         1       wt_assert.isnotnull (
  1103 ANNO      1         1       1         1       wt_assert.isnotnull (
  1106 ANNO      1         0       0         0       wt_assert.this (
  1110 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ DATE Happy Path 1';
  1111 ANNO      1        13      13        13       eq (
  1116 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ DATE Sad Path 1';
  1117 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1118 ANNO      1         8       8         8       eq (
  1122 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1123 ANNO      1         1       1         1       temp_rec := g_rec;
  1124 ANNO      1         2       2         2       wt_assert.isnotnull (
  1127 ANNO      1         5       5         5       wt_assert.isnotnull (
  1130 ANNO      1         0       0         0       wt_assert.this (
  1135 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ TIMSETAMP Happy Path 1';
  1136 ANNO      1         8       8         8       eq (
  1141 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ TIMSETAMP Sad Path 1';
  1142 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1143 ANNO      1         7       7         7       eq (
  1147 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1148 ANNO      1         0       0         0       temp_rec := g_rec;
  1149 ANNO      1         2       2         2       wt_assert.isnotnull (
  1152 ANNO      1         5       5         5       wt_assert.isnotnull (
  1155 ANNO      1         0       0         0       wt_assert.this (
  1160 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ TIMSETAMP WITH LOCAL TIME ZONE Happy Path 1';
  1161 ANNO      1         5       5         5       eq (
  1166 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ TIMSETAMP WITH LOCAL TIME ZONE Sad Path 1';
  1167 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1168 ANNO      1        17      17        17       eq (
  1172 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1173 ANNO      1         1       1         1       temp_rec := g_rec;
  1174 ANNO      1         3       3         3       wt_assert.isnotnull (
  1177 ANNO      1         5       5         5       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1180 ANNO      1         0       0         0       wt_assert.this (
  1185 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ TIMSETAMP WITH TIME ZONE Happy Path 1';
  1186 ANNO      1         4       4         4       eq (
  1191 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ TIMSETAMP WITH TIME ZONE Sad Path 1';
  1192 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1193 ANNO      1         6       6         6       eq (
  1197 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  1198 ANNO      1         1       1         1       temp_rec := g_rec;
  1199 ANNO      1         2       2         2       wt_assert.isnotnull (
  1202 ANNO      1         7       7         7       wt_assert.isnotnull (
  1205 ANNO      1         0       0         0       wt_assert.this (
  1210 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ INTERVAL DAY TO SECOND Happy Path 1';
  1211 ANNO      1         3       3         3       eq (
  1216 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ INTERVAL DAY TO SECOND Sad Path 1';
  1217 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1218 ANNO      1         2       2         2       eq (
  1222 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1223 ANNO      1         1       1         1       temp_rec := g_rec;
  1224 ANNO      1         0       0         0       wt_assert.isnotnull (
  1227 ANNO      1         1       1         1       wt_assert.isnotnull (
  1230 ANNO      1         1       1         1       wt_assert.this (
  1235 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ INTERVAL YEAR TO MONTH Happy Path 1';
  1236 ANNO      1         1       1         1       eq (
  1241 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ INTERVAL YEAR TO MONTH Sad Path 1';
  1242 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1243 ANNO      1         1       1         1       eq (
  1247 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1248 ANNO      1         1       1         1       temp_rec := g_rec;
  1249 ANNO      1         0       0         0       wt_assert.isnotnull (
  1252 ANNO      1         1       1         1       wt_assert.isnotnull (
  1255 ANNO      1         0       0         0       wt_assert.this (
  1259 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ XMLTYPE Happy Path 1';
  1260 ANNO      1         0       0         0       eq (
  1264 ANNO      1         5       5         5       temp_rec := g_rec;
  1265 ANNO      1         0       0         0       wt_assert.isnotnull (
  1268 ANNO      1         1       1         1       wt_assert.this (
  1271 ANNO      1         0       0         0       wt_assert.isnotnull (
  1274 ANNO      1         1       1         1       wt_assert.this (
  1277 ANNO      1         0       0         0       wt_assert.isnotnull (
  1280 ANNO      1         1       1         1       wt_assert.this (
  1283 ANNO      1         0       0         0       wt_assert.isnotnull (
  1286 ANNO      1        47      47        47       wt_assert.this (
  1291 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ XMLTYPE Sad Path 1';
  1292 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1293 ANNO      1         0       0         0       eq (
  1297 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1298 ANNO      1         5       5         5       temp_rec := g_rec;
  1299 ANNO      1         7       1         6       wt_assert.isnotnull (
  1302 ANNO      1         4       0         4       wt_assert.isnotnull (
  1305 ANNO      1         2       2         2       wt_assert.this (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1309 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ XMLTYPE Sad Path 2';
  1310 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  1311 ANNO      0         0       0         0       begin
  1312 ANNO      1         1       1         1          eq (
  1317 ANNO      0         0       0         0          l_found_exception := FALSE;
  1318 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1319 ANNO      1         1       1         1          l_found_exception := TRUE;
  1320 ANNO      0         1       1         1       end;
  1321 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1322 ANNO      1         5       5         5       temp_rec := g_rec;
  1323 ANNO      1         3       3         3       wt_assert.this (
  1326 ANNO      1         0       0         0       wt_assert.eq (
  1331 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ CLOB Happy Path 1';
  1332 ANNO      1         0       0         0       eq (
  1336 ANNO      1         2       2         2       temp_rec := g_rec;
  1337 ANNO      1         0       0         0       wt_assert.isnotnull (
  1340 ANNO      1         1       1         1       wt_assert.this (
  1343 ANNO      1         0       0         0       wt_assert.isnotnull (
  1346 ANNO      1         1       1         1       wt_assert.this (
  1349 ANNO      1         0       0         0       wt_assert.isnotnull (
  1352 ANNO      1         0       0         0       wt_assert.this (
  1355 ANNO      1         0       0         0       wt_assert.isnotnull (
  1358 ANNO      1        33      33        33       wt_assert.this (
  1363 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ CLOB Happy Path 2';
  1364 ANNO      1         0       0         0       eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1370 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ CLOB Happy Path 3';
  1371 ANNO      1         0       0         0       eq (
  1377 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ CLOB Sad Path 1';
  1378 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  1379 ANNO      1         1       1         1       eq (
  1383 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1384 ANNO      1         1       1         1       temp_rec := g_rec;
  1385 ANNO      1         0       0         0       wt_assert.isnotnull (
  1388 ANNO      1         0       0         0       wt_assert.isnotnull (
  1391 ANNO      1         1       1         1       wt_assert.this (
  1395 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ CLOB Sad Path 2';
  1396 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1398 ANNO      1         0       0         0          eq (
  1403 ANNO      0         0       0         0          l_found_exception := FALSE;
  1404 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1405 ANNO      1         0       0         0          l_found_exception := TRUE;
  1406 ANNO      0         1       1         1       end;
  1407 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1408 ANNO      1         2       2         2       temp_rec := g_rec;
  1409 ANNO      1         1       1         1       wt_assert.this (
  1412 ANNO      1         0       0         0       wt_assert.eq (
  1417 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ CLOB Sad Path 3';
  1418 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1419 ANNO      1         1       1         1       eq (
  1423 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1424 ANNO      1         2       2         2       temp_rec := g_rec;
  1425 ANNO      1         1       1         1       wt_assert.isnotnull (
  1428 ANNO      1         1       1         1       wt_assert.isnull (
  1431 ANNO      1         1       1         1       wt_assert.this (
  1435 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ CLOB Sad Path 4';
  1436 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1437 ANNO      1         1       1         1       eq (
  1442 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1443 ANNO      1         1       1         1       temp_rec := g_rec;
  1444 ANNO      1         0       0         0       wt_assert.isnotnull (
  1447 ANNO      1         1       1         1       wt_assert.isnull (
  1450 ANNO      1         0       0         0       wt_assert.this (
  1454 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NCLOB Happy Path 1';
  1455 ANNO      1      8980    8980      8980       eq (
  1460 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ NCLOB Happy Path 2';
  1461 ANNO      1     18065   18065     18065       eq (
  1467 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ NCLOB Happy Path 3';
  1468 ANNO      1         2       2         2       eq (
  1474 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NCLOB Sad Path 1';
  1475 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1476 ANNO      1      5513    5513      5513       eq (
  1480 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1481 ANNO      1         5       5         5       temp_rec := g_rec;
  1482 ANNO      1      8481    8481      8481       wt_assert.isnotnull (
  1485 ANNO      1       136     136       136       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1488 ANNO      1         3       3         3       wt_assert.this (
  1492 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NCLOB Sad Path 2';
  1493 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1494 ANNO      0         1       1         1       begin
  1495 ANNO      1      5843    5843      5843          eq (
  1500 ANNO      0         0       0         0          l_found_exception := FALSE;
  1501 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1502 ANNO      1         1       1         1          l_found_exception := TRUE;
  1503 ANNO      0         2       2         2       end;
  1504 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1505 ANNO      1         5       5         5       temp_rec := g_rec;
  1506 ANNO      1         1       1         1       wt_assert.this (
  1509 ANNO      1         0       0         0       wt_assert.eq (
  1514 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NCLOB Sad Path 3';
  1515 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1516 ANNO      1      4539    4539      4539       eq (
  1520 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  1521 ANNO      1         4       4         4       temp_rec := g_rec;
  1522 ANNO      1      5851    5851      5851       wt_assert.isnotnull (
  1525 ANNO      1        19      19        19       wt_assert.isnull (
  1528 ANNO      1         3       3         3       wt_assert.this (
  1532 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NCLOB Sad Path 4';
  1533 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1534 ANNO      1      6515    6515      6515       eq (
  1539 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1540 ANNO      1         5       5         5       temp_rec := g_rec;
  1541 ANNO      1      4454    4454      4454       wt_assert.isnotnull (
  1544 ANNO      1         2       2         2       wt_assert.isnull (
  1547 ANNO      1         2       2         2       wt_assert.this (
  1551 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ BLOB Happy Path 1';
  1552 ANNO      1         1       1         1       eq (
  1556 ANNO      1         1       1         1       temp_rec := g_rec;
  1557 ANNO      1         1       1         1       wt_assert.isnotnull (
  1560 ANNO      1         0       0         0       wt_assert.this (
  1563 ANNO      1         0       0         0       wt_assert.isnotnull (
  1566 ANNO      1         1       1         1       wt_assert.this (
  1569 ANNO      1         0       0         0       wt_assert.isnotnull (
  1572 ANNO      1         0       0         0       wt_assert.this (
  1575 ANNO      1         0       0         0       wt_assert.isnotnull (
  1578 ANNO      1         0       0         0       wt_assert.this (
  1583 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BLOB Happy Path 2';
  1584 ANNO      1         0       0         0       eq (
  1590 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BLOB Happy Path 3';
  1591 ANNO      1         0       0         0       eq (
  1597 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ BLOB Sad Path 1';
  1598 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1599 ANNO      1         0       0         0       eq (
  1603 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1604 ANNO      1         2       2         2       temp_rec := g_rec;
  1605 ANNO      1         0       0         0       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1608 ANNO      1         0       0         0       wt_assert.isnotnull (
  1611 ANNO      1         0       0         0       wt_assert.this (
  1615 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BLOB Sad Path 2';
  1616 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  1618 ANNO      1         1       1         1          eq (
  1623 ANNO      0         0       0         0          l_found_exception := FALSE;
  1624 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1625 ANNO      1         0       0         0          l_found_exception := TRUE;
  1626 ANNO      0         1       1         1       end;
  1627 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1628 ANNO      1         3       3         3       temp_rec := g_rec;
  1629 ANNO      1         1       1         1       wt_assert.this (
  1632 ANNO      1         1       1         1       wt_assert.eq (
  1637 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BLOB Sad Path 3';
  1638 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1639 ANNO      1         0       0         0       eq (
  1643 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1644 ANNO      1         1       1         1       temp_rec := g_rec;
  1645 ANNO      1         0       0         0       wt_assert.isnotnull (
  1648 ANNO      1         0       0         0       wt_assert.isnull (
  1651 ANNO      1         1       1         1       wt_assert.this (
  1655 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BLOB Sad Path 4';
  1656 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1657 ANNO      1         0       0         0       eq (
  1662 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1663 ANNO      1         1       1         1       temp_rec := g_rec;
  1664 ANNO      1         0       0         0       wt_assert.isnotnull (
  1667 ANNO      1         1       1         1       wt_assert.isnull (
  1670 ANNO      1         0       0         0       wt_assert.this (
  1673 ANNO      1      2416    2416      2416    end t_eq;
  1683 UNKN      0        59       1         2 procedure isnotnull (
  1690 EXEC     86        51       0        21    g_rec.last_assert  := 'ISNOTNULL';
  1691 EXEC     86        20       0         1    g_rec.last_msg     := msg_in;
  1692 EXEC     86        32       1         1    g_rec.last_pass    := (check_this_in is not null);
  1693 EXEC     86       224       1        30    g_rec.last_details := 'Expected NOT NULL and got "' ||
  1695 EXEC     86        17       0         1    g_rec.raise_exception := raise_exc_in;
  1696 EXEC     86         9       0         1    process_assertion;
  1697 EXEC     84        15       0         1 end isnotnull;
  1700 UNKN      0         8       1         1 procedure isnotnull (
  1707 EXEC     13         2       0         1    isnotnull (msg_in        => msg_in
  1711 EXEC     12         2       0         1 end isnotnull;
  1714 UNKN      0       147       5        28 procedure isnotnull (
  1721 EXEC     13        14       0         3    g_rec.last_assert  := 'ISNOTNULL';
  1722 EXEC     13         6       1         1    g_rec.last_msg     := msg_in;
  1723 EXEC     13         5       0         1    g_rec.last_pass    := (check_this_in is not null);
  1724 EXEC     13     15832     345      7809    g_rec.last_details := 'Expected NOT NULL and got "' ||
  1726 EXEC     13         9       1         1    g_rec.raise_exception := raise_exc_in;
  1727 EXEC     13         8       0         1    process_assertion;
  1728 EXEC     12       780      49       134 end isnotnull;
  1731 UNKN      0         1       0         1 procedure isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1738 EXEC      7         4       0         1    g_rec.last_assert  := 'ISNOTNULL';
  1739 EXEC      7         5       1         1    g_rec.last_msg     := msg_in;
  1740 EXEC      7         0       0         0    g_rec.last_pass    := (check_this_in is not null);
  1741 EXEC      7         0       0         0    if g_rec.last_pass
  1743 EXEC      5         1       0         1       g_rec.last_details := 'BLOB is NOT NULL';
  1745 EXEC      2         0       0         0       g_rec.last_details := 'BLOB is NULL';
  1747 EXEC      7         4       0         1    g_rec.raise_exception := raise_exc_in;
  1748 EXEC      7         1       1         1    process_assertion;
  1749 EXEC      6         1       1         1 end isnotnull;
  1753 ANNO      0        13      13        13    procedure t_isnotnull
  1758 ANNO      1         2       2         2       wt_assert.g_testcase := 'ISNOTNULL VARCHAR2 Happy Path 1';
  1759 ANNO      1         0       0         0       isnotnull (
  1762 ANNO      1         1       1         1       temp_rec := g_rec;
  1763 ANNO      1         1       1         1       wt_assert.eq (
  1767 ANNO      1         1       1         1       wt_assert.eq (
  1771 ANNO      1         1       1         1       wt_assert.eq (
  1775 ANNO      1         1       1         1       wt_assert.eq (
  1780 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL VARCHAR2 Sad Path 1';
  1781 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1782 ANNO      1         0       0         0       isnotnull (
  1785 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  1786 ANNO      1         0       0         0       wt_assert.eq (
  1791 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL VARCHAR2 Sad Path 2';
  1792 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1794 ANNO      1         1       1         1          isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1798 ANNO      0         0       0         0          l_found_exception := FALSE;
  1799 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1800 ANNO      1         0       0         0          l_found_exception := TRUE;
  1801 ANNO      0         1       1         1       end;
  1802 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  1803 ANNO      1         0       0         0       wt_assert.eq (
  1807 ANNO      1         0       0         0       wt_assert.eq (
  1812 ANNO      1         1       1         1       wt_assert.g_testcase := 'ISNOTNULL BOOLEAN Happy Path 1';
  1813 ANNO      1         0       0         0       isnotnull (
  1817 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL BOOLEAN Sad Path 1';
  1818 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  1819 ANNO      1         0       0         0       isnotnull (
  1822 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1823 ANNO      1         0       0         0       wt_assert.eq (
  1828 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL BOOLEAN Sad Path 2';
  1829 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1831 ANNO      1         1       1         1          isnotnull (
  1835 ANNO      0         0       0         0          l_found_exception := FALSE;
  1836 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1837 ANNO      1         0       0         0          l_found_exception := TRUE;
  1838 ANNO      0         1       1         1       end;
  1839 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1840 ANNO      1         0       0         0       wt_assert.eq (
  1844 ANNO      1         0       0         0       wt_assert.eq (
  1849 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL CLOB Happy Path 1';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1850 ANNO      1         0       0         0       isnotnull (
  1853 ANNO      1         2       2         2       temp_rec := g_rec;
  1854 ANNO      1         1       1         1       wt_assert.eq (
  1858 ANNO      1         0       0         0       wt_assert.eq (
  1862 ANNO      1         0       0         0       wt_assert.eq (
  1866 ANNO      1         0       0         0       wt_assert.isnotnull (
  1869 ANNO      1        16      16        16       wt_assert.this (
  1874 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL CLOB Sad Path 1';
  1875 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  1876 ANNO      1         0       0         0       isnotnull (
  1879 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1880 ANNO      1         0       0         0       wt_assert.eq (
  1885 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL CLOB Sad Path 2';
  1886 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1888 ANNO      1         0       0         0          isnotnull (
  1892 ANNO      0         0       0         0          l_found_exception := FALSE;
  1893 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1894 ANNO      1         0       0         0          l_found_exception := TRUE;
  1895 ANNO      0         1       1         1       end;
  1896 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1897 ANNO      1         0       0         0       wt_assert.eq (
  1901 ANNO      1         0       0         0       wt_assert.eq (
  1906 ANNO      1         1       1         1       wt_assert.g_testcase := 'ISNOTNULL BLOB Happy Path 1';
  1907 ANNO      1         0       0         0       isnotnull (
  1910 ANNO      1         0       0         0       temp_rec := g_rec;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1911 ANNO      1         0       0         0       wt_assert.eq (
  1915 ANNO      1         1       1         1       wt_assert.eq (
  1919 ANNO      1         0       0         0       wt_assert.eq (
  1923 ANNO      1         0       0         0       wt_assert.eq (
  1928 ANNO      1         1       1         1       wt_assert.g_testcase := 'ISNOTNULL BLOB Sad Path 1';
  1929 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1930 ANNO      1         0       0         0       isnotnull (
  1933 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1934 ANNO      1         1       1         1       wt_assert.eq (
  1939 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL BLOB Sad Path 2';
  1940 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  1942 ANNO      1         0       0         0          isnotnull (
  1946 ANNO      0         0       0         0          l_found_exception := FALSE;
  1947 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1948 ANNO      1         0       0         0          l_found_exception := TRUE;
  1949 ANNO      0         0       0         0       end;
  1950 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1951 ANNO      1         0       0         0       wt_assert.eq (
  1955 ANNO      1         0       0         0       wt_assert.eq (
  1959 ANNO      1         2       2         2    end t_isnotnull;
  1965 UNKN      0        12       0         1 procedure isnull (
  1972 EXEC     18        10       0         1    g_rec.last_assert  := 'ISNULL';
  1973 EXEC     18         2       0         1    g_rec.last_msg     := msg_in;
  1974 EXEC     18         3       1         1    g_rec.last_pass    := (check_this_in is null);
  1975 EXEC     18        14       1         1    g_rec.last_details := 'Expected NULL and got "' ||
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1977 EXEC     18         4       0         1    g_rec.raise_exception := raise_exc_in;
  1978 EXEC     18         4       0         1    process_assertion;
  1979 EXEC     16         2       0         1 end isnull;
  1982 UNKN      0         5       1         1 procedure isnull (
  1989 EXEC      6         1       0         1    isnull (msg_in        => msg_in
  1993 EXEC      5         0       0         0 end isnull;
  1996 UNKN      0        50       4        14 procedure isnull (
  2003 EXEC      7         7       1         2    g_rec.last_assert  := 'ISNULL';
  2004 EXEC      7         3       0         1    g_rec.last_msg     := msg_in;
  2005 EXEC      7         3       0         1    g_rec.last_pass    := (check_this_in is null);
  2006 EXEC      7      5819     328      2420    g_rec.last_details := 'Expected NULL and got "' ||
  2008 EXEC      7         6       0         2    g_rec.raise_exception := raise_exc_in;
  2009 EXEC      7         2       0         1    process_assertion;
  2010 EXEC      6       324      51        62 end isnull;
  2013 UNKN      0         1       0         1 procedure isnull (
  2020 EXEC      5         0       0         0    g_rec.last_assert  := 'ISNULL';
  2021 EXEC      5         1       0         1    g_rec.last_msg     := msg_in;
  2022 EXEC      5         2       1         1    g_rec.last_pass    := (check_this_in is null);
  2023 EXEC      5         0       0         0    if g_rec.last_pass
  2025 EXEC      3         1       0         1       g_rec.last_details := 'BLOB is NULL';
  2027 EXEC      2         1       0         1       g_rec.last_details := 'BLOB is NOT NULL';
  2029 EXEC      5         1       0         1    g_rec.raise_exception := raise_exc_in;
  2030 EXEC      5         1       0         1    process_assertion;
  2031 EXEC      4         1       0         1 end isnull;
  2035 ANNO      0         6       6         6    procedure t_isnull
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2040 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL VARCHAR2 Happy Path 1';
  2041 ANNO      1         1       1         1       isnull (
  2044 ANNO      1         1       1         1       temp_rec := g_rec;
  2045 ANNO      1         0       0         0       wt_assert.eq (
  2049 ANNO      1         0       0         0       wt_assert.eq (
  2053 ANNO      1         0       0         0       wt_assert.eq (
  2057 ANNO      1         0       0         0       wt_assert.eq (
  2062 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL VARCHAR2 Sad Path 1';
  2063 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2064 ANNO      1         0       0         0       isnull (
  2067 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2068 ANNO      1         0       0         0       wt_assert.eq (
  2073 ANNO      1         1       1         1       wt_assert.g_testcase := 'ISNULL VARCHAR2 Sad Path 2';
  2074 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2076 ANNO      1         0       0         0          isnull (
  2080 ANNO      0         0       0         0          l_found_exception := FALSE;
  2081 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2082 ANNO      1         0       0         0          l_found_exception := TRUE;
  2083 ANNO      0         1       1         1       end;
  2084 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2085 ANNO      1         0       0         0       wt_assert.eq (
  2089 ANNO      1         1       1         1       wt_assert.eq (
  2094 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL BOOLEAN Happy Path 1';
  2095 ANNO      1         0       0         0       isnull (
  2099 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL BOOLEAN Sad Path 1';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2100 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2101 ANNO      1         0       0         0       isnull (
  2104 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2105 ANNO      1         0       0         0       wt_assert.eq (
  2110 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL BOOLEAN Sad Path 2';
  2111 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2113 ANNO      1         1       1         1          isnull (
  2117 ANNO      0         0       0         0          l_found_exception := FALSE;
  2118 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2119 ANNO      1         0       0         0          l_found_exception := TRUE;
  2120 ANNO      0         1       1         1       end;
  2121 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2122 ANNO      1         0       0         0       wt_assert.eq (
  2126 ANNO      1         0       0         0       wt_assert.eq (
  2131 ANNO      1         1       1         1       wt_assert.g_testcase := 'ISNULL CLOB Happy Path 1';
  2132 ANNO      1         0       0         0       isnull (
  2135 ANNO      1         2       2         2       temp_rec := g_rec;
  2136 ANNO      1         1       1         1       wt_assert.eq (
  2140 ANNO      1         0       0         0       wt_assert.eq (
  2144 ANNO      1         0       0         0       wt_assert.eq (
  2148 ANNO      1         1       1         1       wt_assert.eq (
  2153 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL CLOB Sad Path 1';
  2154 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  2155 ANNO      1         0       0         0       isnull (
  2158 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2159 ANNO      1         0       0         0       wt_assert.eq (
  2164 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL CLOB Sad Path 2';
  2165 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2167 ANNO      1         1       1         1          isnull (
  2171 ANNO      0         0       0         0          l_found_exception := FALSE;
  2172 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2173 ANNO      1         0       0         0          l_found_exception := TRUE;
  2174 ANNO      0         1       1         1       end;
  2175 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2176 ANNO      1         1       1         1       wt_assert.eq (
  2180 ANNO      1         0       0         0       wt_assert.eq (
  2185 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL BLOB Happy Path 1';
  2186 ANNO      1         1       1         1       isnull (
  2189 ANNO      1         1       1         1       temp_rec := g_rec;
  2190 ANNO      1         0       0         0       wt_assert.eq (
  2194 ANNO      1         1       1         1       wt_assert.eq (
  2198 ANNO      1         0       0         0       wt_assert.eq (
  2202 ANNO      1         0       0         0       wt_assert.eq (
  2207 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL BLOB Sad Path 1';
  2208 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2209 ANNO      1         0       0         0       isnull (
  2212 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2213 ANNO      1         0       0         0       wt_assert.eq (
  2218 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL BLOB Sad Path 2';
  2219 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2221 ANNO      1         0       0         0          isnull (
  2225 ANNO      0         0       0         0          l_found_exception := FALSE;
  2226 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2227 ANNO      1         0       0         0          l_found_exception := TRUE;
  2228 ANNO      0         1       1         1       end;
  2229 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2230 ANNO      1         0       0         0       wt_assert.eq (
  2234 ANNO      1         0       0         0       wt_assert.eq (
  2238 ANNO      1         1       1         1    end t_isnull;
  2244 EXEC      6        15       1         4 procedure raises (
  2253 EXEC      6      5244     166      1516       execute immediate 'begin ' || check_call_in || '; end;';
  2254 EXEC      1         2       2         2       l_sqlerrm := SQLERRM;
  2255 EXEC      5         0       0         0    exception when OTHERS then
  2256 EXEC      5       182      24        46       l_sqlerrm := SQLERRM;
  2257 EXEC      5       217      28        86       l_errstack := substr(dbms_utility.format_error_stack  ||
  2260 UNKN      0         2       1         1    end;
  2262 EXEC      6         4       0         1    g_rec.last_assert  := 'RAISES/THROWS';
  2263 EXEC      6         2       0         1    g_rec.last_msg     := msg_in;
  2264 EXEC      6        28       3         7    if l_sqlerrm like '%' || against_exc_in || '%'
  2266 EXEC      4         1       1         1       g_rec.last_pass := TRUE;
  2268 EXEC      2         2       1         1       g_rec.last_pass := FALSE;
  2270 EXEC      6         7       1         2    g_rec.last_details := 'Expected exception "%'           || against_exc_in ||
  2273 EXEC      6         1       0         1    if not g_rec.last_pass
  2275 EXEC      2         8       2         6       g_rec.last_details := 
  2278 EXEC      6         4       0         1    process_assertion;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2279 EXEC      6        14       1         5 end raises;
  2281 UNKN      0         1       0         1 procedure raises (
  2287 EXEC      2        13       5         8    raises (
  2291 EXEC      2         1       1         1 end raises;
  2293 UNKN      0         1       1         1 procedure throws (
  2299 EXEC      1         0       0         0    raises (
  2303 EXEC      1         0       0         0 end throws;
  2305 EXCL      0         0       0         0 procedure throws (
  2311 EXEC      1         0       0         0    raises (
  2315 EXEC      1         1       1         1 end throws;
  2319 ANNO      0         1       1         1    procedure t_raises
  2323 ANNO      1         1       1         1       wt_assert.g_testcase := 'Raises Tests Happy Path 1';
  2324 ANNO      1         0       0         0       raises (
  2328 ANNO      1         1       1         1       temp_rec := g_rec;
  2329 ANNO      1         1       1         1       wt_assert.eq (
  2333 ANNO      1         0       0         0       wt_assert.eq (
  2337 ANNO      1         1       1         1       wt_assert.eq (
  2341 ANNO      1         1       1         1       wt_assert.isnotnull (
  2344 ANNO      1         5       5         5       wt_assert.this (
  2350 ANNO      1         0       0         0       wt_assert.g_testcase := 'Raises Tests Happy Path 2';
  2351 ANNO      1         0       0         0       raises (
  2355 ANNO      1         1       1         1       temp_rec := g_rec;
  2356 ANNO      1         1       1         1       wt_assert.isnotnull (
  2359 ANNO      1         0       0         0       throws (
  2363 ANNO      1         1       1         1       temp_rec := g_rec;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2364 ANNO      1         0       0         0       wt_assert.isnotnull (
  2367 ANNO      1         0       0         0       throws (
  2371 ANNO      1         2       2         2       temp_rec := g_rec;
  2372 ANNO      1         0       0         0       wt_assert.isnotnull (
  2376 ANNO      1         0       0         0       wt_assert.g_testcase := 'Raises Tests Sad Path 1';
  2377 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2378 ANNO      1         1       1         1       raises (
  2382 ANNO      1         4       4         4       temp_rec := g_rec;
  2383 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2384 ANNO      1         1       1         1       wt_assert.eq (
  2388 ANNO      1         0       0         0       wt_assert.isnotnull (
  2391 ANNO      1         6       6         6       wt_assert.this (
  2397 ANNO      1         0       0         0       wt_assert.g_testcase := 'Raises Tests Sad Path 2';
  2398 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2399 ANNO      1         0       0         0       raises (
  2403 ANNO      1         2       2         2       temp_rec := g_rec;
  2404 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2405 ANNO      1         0       0         0       wt_assert.eq (
  2409 ANNO      1         2       2         2       wt_assert.eq (
  2415 ANNO      1         1       1         1    end t_raises;
  2421 EXEC      6        11       0         3 procedure eqqueryvalue (
  2433 EXEC      6         1       0         1    g_rec.last_assert     := 'EQQUERYVALUE';
  2434 EXEC      6         4       1         1    g_rec.last_msg        := msg_in;
  2435 EXEC      6       754      46       307    open l_rc for check_query_in;
  2436 EXEC      5       303      30        99    fetch l_rc into l_rc_buff;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2437 EXEC      5        99      10        38    close l_rc;
  2438 EXEC      5         7       0         2    g_rec.last_pass    := (   l_rc_buff = against_value_in
  2439 UNKN      0         3       1         2                           or (    l_rc_buff is null
  2442 EXEC      5        25       5         5    g_rec.last_details := 'Expected "' || substr(against_value_in,1,1000) ||
  2445 EXEC      5         2       1         1    g_rec.raise_exception := raise_exc_in;
  2446 EXEC      5         1       0         1    process_assertion;
  2447 EXEC      2         0       0         0 exception when others then
  2448 EXEC      2       134      55        79    l_errstack := substr(dbms_utility.format_error_stack ||
  2450 EXEC      2         5       2         3    g_rec.last_details := 'Exception raised for Query: ' ||
  2453 EXEC      2         0       0         0    g_rec.last_pass    := FALSE;
  2454 EXEC      2         0       0         0    g_rec.raise_exception := raise_exc_in;
  2455 EXEC      2         1       0         1    process_assertion;
  2456 EXEC      5        28       2        20 end eqqueryvalue;
  2459 EXEC      4        40      10        10 procedure eqqueryvalue (
  2471 EXEC      4         1       0         1    g_rec.last_assert  := 'EQQUERYVALUE';
  2472 EXEC      4         1       1         1    g_rec.last_msg     := msg_in;
  2473 EXEC      4       762     115       335    open l_rc for check_query_in;
  2474 EXEC      3       522     167       187    fetch l_rc into l_rc_buff;
  2475 EXEC      3        82      21        31    close l_rc;
  2476 EXEC      3     51087       1     34666    g_rec.last_pass    := (xmltype.getclobval(l_rc_buff)       =
  2478 EXEC      3     32415       8      8510    g_rec.last_details := 'Expected "' || substr(xmltype.getclobval(against_value_in),1,1000) ||
  2481 EXEC      3         3       1         1    g_rec.raise_exception := raise_exc_in;
  2482 EXEC      3         3       1         1    process_assertion;
  2483 EXEC      2         0       0         0 exception when others then
  2484 EXEC      2       128      43        85    l_errstack := substr(dbms_utility.format_error_stack ||
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2486 EXEC      2         5       2         3    g_rec.last_details := 'Exception raised for Query: ' ||
  2489 EXEC      2         1       1         1    g_rec.last_pass    := FALSE;
  2490 EXEC      2         0       0         0    g_rec.raise_exception := raise_exc_in;
  2491 EXEC      2         2       1         1    process_assertion;
  2492 EXEC      3       178       1        71 end eqqueryvalue;
  2495 EXEC      4        33       1         9 procedure eqqueryvalue (
  2507 EXEC      4         1       0         1    g_rec.last_assert  := 'EQQUERYVALUE';
  2508 EXEC      4         1       0         1    g_rec.last_msg     := msg_in;
  2509 EXEC      4       629      64       362    open l_rc for check_query_in;
  2510 EXEC      3       171      40        75    fetch l_rc into l_rc_buff;
  2511 EXEC      3        47      10        26    close l_rc;
  2512 EXEC      3      7978       1      6756    g_rec.last_pass    := (   l_rc_buff = against_value_in
  2513 UNKN      0         2       1         1                           or (    l_rc_buff is null
  2516 EXEC      3      5402    1559      2185    g_rec.last_details := 'Expected "' || substr(against_value_in,1,1000) ||
  2519 EXEC      3         2       1         1    g_rec.raise_exception := raise_exc_in;
  2520 EXEC      3         3       1         1    process_assertion;
  2521 EXEC      2         0       0         0 exception when others then
  2522 EXEC      2       222      51       171    l_errstack := substr(dbms_utility.format_error_stack ||
  2524 EXEC      2         5       2         3    g_rec.last_details := 'Exception raised for Query: ' ||
  2527 EXEC      2         0       0         0    g_rec.last_pass    := FALSE;
  2528 EXEC      2         0       0         0    g_rec.raise_exception := raise_exc_in;
  2529 EXEC      2         1       1         1    process_assertion;
  2530 EXEC      3       139       1        58 end eqqueryvalue;
  2533 EXEC      5       178       2        90 procedure eqqueryvalue (
  2546 EXEC      5         3       0         1    g_rec.last_assert  := 'EQQUERYVALUE';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2547 EXEC      5         0       0         0    g_rec.last_msg     := msg_in;
  2548 EXEC      5      1148      80       438    open l_rc for check_query_in;
  2549 EXEC      4       320      68       107    fetch l_rc into l_rc_buff;
  2550 EXEC      4       105      11        39    close l_rc;
  2551 EXEC      4        20       1         6    compare_results    := nvl(DBMS_LOB.COMPARE(l_rc_buff, against_value_in),-1);
  2552 EXEC      4        13       1         3    g_rec.last_pass    := (   (compare_results = 0)
  2553 UNKN      0         4       1         2                           or (    l_rc_buff is null
  2556 EXEC      4        40       8        14    g_rec.last_details := 'DBMS_LOB.COMPARE between BLOB and Query: ' ||
  2559 EXEC      4         0       0         0    g_rec.raise_exception := raise_exc_in;
  2560 EXEC      4         3       0         1    process_assertion;
  2561 EXEC      2         0       0         0 exception when others then
  2562 EXEC      2       159      77        82    l_errstack := substr(dbms_utility.format_error_stack ||
  2564 EXEC      2         5       2         3    g_rec.last_details := 'Exception raised for Query: ' ||
  2567 EXEC      2         0       0         0    g_rec.last_pass    := FALSE;
  2568 EXEC      2         1       1         1    g_rec.raise_exception := raise_exc_in;
  2569 EXEC      2         0       0         0    process_assertion;
  2570 EXEC      4        44      22        22 end eqqueryvalue;
  2574 ANNO      0         7       7         7    procedure t_eqqueryvalue
  2579 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE VARCHAR2 Happy Path 1';
  2580 ANNO      1         0       0         0       eqqueryvalue (
  2585 ANNO      1         0       0         0       temp_rec := g_rec;
  2586 ANNO      1         0       0         0       wt_assert.eq (
  2590 ANNO      1         0       0         0       wt_assert.eq (
  2594 ANNO      1         0       0         0       wt_assert.eq (
  2598 ANNO      1         0       0         0       wt_assert.eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2603 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE VARCHAR2 Happy Path 2';
  2604 ANNO      1         1       1         1       eqqueryvalue (
  2610 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE VARCHAR2 Sad Path 1';
  2611 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  2612 ANNO      1         0       0         0       eqqueryvalue (
  2616 ANNO      1         2       2         2       temp_rec := g_rec;
  2617 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2618 ANNO      1         0       0         0       wt_assert.eq (
  2623 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE VARCHAR2 Sad Path 2';
  2624 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2626 ANNO      1         0       0         0          eqqueryvalue (
  2631 ANNO      0         0       0         0          l_found_exception := FALSE;
  2632 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2633 ANNO      1         1       1         1          l_found_exception := TRUE;
  2634 ANNO      0         1       1         1       end;
  2635 ANNO      1         1       1         1       temp_rec := g_rec;
  2636 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2637 ANNO      1         1       1         1       wt_assert.eq (
  2641 ANNO      1         1       1         1       wt_assert.eq (
  2646 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE VARCHAR2 Sad Path 3';
  2647 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2648 ANNO      1         1       1         1       eqqueryvalue (
  2652 ANNO      1         3       3         3       temp_rec := g_rec;
  2653 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2654 ANNO      1         0       0         0       wt_assert.eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2658 ANNO      1         0       0         0       wt_assert.isnotnull (
  2661 ANNO      1         6       6         6       wt_assert.this (
  2667 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE XMLTYPE Happy Path 1';
  2668 ANNO      1         0       0         0       eqqueryvalue (
  2672 ANNO      1         3       3         3       temp_rec := g_rec;
  2673 ANNO      1         1       1         1       wt_assert.eq (
  2677 ANNO      1         0       0         0       wt_assert.eq (
  2681 ANNO      1         0       0         0       wt_assert.eq (
  2685 ANNO      1         0       0         0       wt_assert.isnotnull (
  2688 ANNO      1        17      17        17       wt_assert.this (
  2693 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE XMLTYPE Sad Path 1';
  2694 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2695 ANNO      1         0       0         0       eqqueryvalue (
  2699 ANNO      1         5       5         5       temp_rec := g_rec;
  2700 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  2701 ANNO      1         0       0         0       wt_assert.eq (
  2705 ANNO      1         0       0         0       wt_assert.isnotnull (
  2708 ANNO      1        13      13        13       wt_assert.this (
  2714 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE XMLTYPE Sad Path 2';
  2715 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2717 ANNO      1         0       0         0          eqqueryvalue (
  2722 ANNO      0         0       0         0          l_found_exception := FALSE;
  2723 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2724 ANNO      1         1       1         1          l_found_exception := TRUE;
  2725 ANNO      0         2       2         2       end;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2726 ANNO      1         5       5         5       temp_rec := g_rec;
  2727 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2728 ANNO      1         0       0         0       wt_assert.eq (
  2732 ANNO      1         0       0         0       wt_assert.eq (
  2737 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE XMLTYPE Sad Path 3';
  2738 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2739 ANNO      1         0       0         0       eqqueryvalue (
  2743 ANNO      1         2       2         2       temp_rec := g_rec;
  2744 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2745 ANNO      1         0       0         0       wt_assert.eq (
  2749 ANNO      1         1       1         1       wt_assert.isnotnull (
  2752 ANNO      1         7       7         7       wt_assert.this (
  2758 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE CLOB Happy Path 1';
  2759 ANNO      1         0       0         0       eqqueryvalue (
  2764 ANNO      1         5       5         5       temp_rec := g_rec;
  2765 ANNO      1         0       0         0       wt_assert.eq (
  2769 ANNO      1         1       1         1       wt_assert.eq (
  2773 ANNO      1         0       0         0       wt_assert.eq (
  2777 ANNO      1         0       0         0       wt_assert.isnotnull (
  2780 ANNO      1        17      17        17       wt_assert.this (
  2785 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE CLOB Happy Path 2';
  2786 ANNO      1         1       1         1       eqqueryvalue (
  2791 ANNO      1         0       0         0       temp_rec := g_rec;
  2793 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE CLOB Sad Path 1';
  2794 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2795 ANNO      1         0       0         0       eqqueryvalue (
  2799 ANNO      1         2       2         2       temp_rec := g_rec;
  2800 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2801 ANNO      1         0       0         0       wt_assert.eq (
  2805 ANNO      1         0       0         0       wt_assert.isnotnull (
  2808 ANNO      1        10      10        10       wt_assert.this (
  2814 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE CLOB Sad Path 2';
  2815 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  2817 ANNO      1         0       0         0          eqqueryvalue (
  2822 ANNO      0         0       0         0          l_found_exception := FALSE;
  2823 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2824 ANNO      1         0       0         0          l_found_exception := TRUE;
  2825 ANNO      0         2       2         2       end;
  2826 ANNO      1         3       3         3       temp_rec := g_rec;
  2827 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2828 ANNO      1         1       1         1       wt_assert.eq (
  2832 ANNO      1         0       0         0       wt_assert.eq (
  2837 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE CLOB Sad Path 3';
  2838 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2839 ANNO      1         0       0         0       eqqueryvalue (
  2843 ANNO      1         2       2         2       temp_rec := g_rec;
  2844 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2845 ANNO      1         1       1         1       wt_assert.eq (
  2849 ANNO      1         0       0         0       wt_assert.isnotnull (
  2852 ANNO      1         9       9         9       wt_assert.this (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2858 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE BLOB Happy Path 1';
  2859 ANNO      1         0       0         0       eqqueryvalue (
  2864 ANNO      1         3       3         3       temp_rec := g_rec;
  2865 ANNO      1         1       1         1       wt_assert.eq (
  2869 ANNO      1         0       0         0       wt_assert.eq (
  2873 ANNO      1         0       0         0       wt_assert.eq (
  2877 ANNO      1         1       1         1       wt_assert.eq (
  2883 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE BLOB Happy Path 2';
  2884 ANNO      1         1       1         1       eqqueryvalue (
  2890 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE BLOB Sad Path 1';
  2891 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2892 ANNO      1         0       0         0       eqqueryvalue (
  2896 ANNO      1         4       4         4       temp_rec := g_rec;
  2897 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2898 ANNO      1         1       1         1       wt_assert.eq (
  2902 ANNO      1         1       1         1       wt_assert.eq (
  2908 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE BLOB Sad Path 2';
  2909 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  2911 ANNO      1         1       1         1          eqqueryvalue (
  2916 ANNO      0         0       0         0          l_found_exception := FALSE;
  2917 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2918 ANNO      1         1       1         1          l_found_exception := TRUE;
  2919 ANNO      0         1       1         1       end;
  2920 ANNO      1         2       2         2       temp_rec := g_rec;
  2921 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2922 ANNO      1         1       1         1       wt_assert.eq (
  2926 ANNO      1         0       0         0       wt_assert.eq (
  2931 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE BLOB Sad Path 3';
  2932 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2933 ANNO      1         1       1         1       eqqueryvalue (
  2937 ANNO      1         1       1         1       temp_rec := g_rec;
  2938 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2939 ANNO      1         0       0         0       wt_assert.eq (
  2943 ANNO      1         0       0         0       wt_assert.isnotnull (
  2946 ANNO      1         7       7         7       wt_assert.this (
  2951 ANNO      1         2       2         2    end t_eqqueryvalue;
  2956 UNKN      0         1       0         1 procedure eqquery (
  2963 EXEC      4         2       0         1    g_rec.last_assert  := 'EQQUERY';
  2964 EXEC      4         1       0         1    g_rec.last_msg     := msg_in;
  2965 EXEC      4         1       1         1    compare_queries(check_query_in, against_query_in);
  2966 EXEC      4         1       0         1    g_rec.raise_exception := raise_exc_in;
  2967 EXEC      4         3       0         1    process_assertion;
  2968 EXEC      3        87       0        86 end eqquery;
  2972 ANNO      0         1       1         1    procedure t_eqquery
  2977 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERY Tests Happy Path 1';
  2978 ANNO      1         0       0         0       wt_assert.eqquery (
  2982 ANNO      1        12      12        12       temp_rec := g_rec;
  2983 ANNO      1         1       1         1       wt_assert.eq (
  2987 ANNO      1         0       0         0       wt_assert.eq (
  2991 ANNO      1         0       0         0       wt_assert.eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2995 ANNO      1         0       0         0       wt_assert.isnotnull (
  2998 ANNO      1         3       3         3       wt_assert.this (
  3003 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERY Tests Sad Path 1';
  3004 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3005 ANNO      1         0       0         0       eqquery (
  3009 ANNO      1         5       5         5       temp_rec := g_rec;
  3010 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3011 ANNO      1         1       1         1       wt_assert.eq (
  3015 ANNO      1         1       1         1       wt_assert.isnotnull (
  3018 ANNO      1         3       3         3       wt_assert.this (
  3023 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERY Tests Sad Path 2';
  3024 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3026 ANNO      1         0       0         0          eqquery (
  3031 ANNO      0         0       0         0          l_found_exception := FALSE;
  3032 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  3033 ANNO      1         0       0         0          l_found_exception := TRUE;
  3034 ANNO      0         1       1         1       end;
  3035 ANNO      1         4       4         4       temp_rec := g_rec;
  3036 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3037 ANNO      1         1       1         1       wt_assert.eq (
  3041 ANNO      1         0       0         0       wt_assert.eq (
  3046 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERY Tests Sad Path 3';
  3047 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3048 ANNO      1         1       1         1       eqquery (
  3052 ANNO      1         4       4         4       temp_rec := g_rec;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3053 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3054 ANNO      1         0       0         0       wt_assert.eq (
  3058 ANNO      1         1       1         1       wt_assert.isnotnull (
  3061 ANNO      1        10      10        10       wt_assert.this (
  3065 ANNO      1         0       0         0    end t_eqquery;
  3070 UNKN      0         6       1         2 procedure eqtable (
  3078 EXEC      5         3       1         1    l_check_query    varchar2(16000) := 'select * from ' || check_this_in;
  3079 EXEC      5         2       0         1    l_against_query  varchar2(16000) := 'select * from ' || against_this_in;
  3081 EXEC      5         3       0         1    g_rec.last_assert  := 'EQTABLE';
  3082 EXEC      5         2       0         1    g_rec.last_msg     := msg_in;
  3083 EXEC      5         1       0         1    if check_where_in is not null
  3085 EXEC      3         2       1         1       l_check_query := l_check_query || ' where ' || check_where_in;
  3087 EXEC      3         1       0         1    if against_where_in is not null
  3089 EXEC      3         0       0         0       l_against_query := l_against_query || ' where ' || against_where_in;
  3091 EXEC      5         1       0         1    compare_queries(l_check_query, l_against_query);
  3092 EXEC      5         1       1         1    g_rec.raise_exception := raise_exc_in;
  3093 EXEC      5         4       1         1    process_assertion;
  3094 EXEC      4         1       1         1 end eqtable;
  3098 ANNO      0         4       4         4    procedure t_eqtable
  3103 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQTABLE Tests Happy Path 1';
  3104 ANNO      1         0       0         0       wt_assert.eqtable (
  3110 ANNO      1         1       1         1       temp_rec := g_rec;
  3111 ANNO      1         0       0         0       wt_assert.eq (
  3115 ANNO      1         1       1         1       wt_assert.eq (
  3119 ANNO      1         0       0         0       wt_assert.eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3123 ANNO      1         1       1         1       wt_assert.isnotnull (
  3126 ANNO      1         3       3         3       wt_assert.this (
  3131 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQTABLE Tests Happy Path 2';
  3132 ANNO      1         7       1         4       eqtable (
  3139 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQTABLE Sad Path 1';
  3140 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3141 ANNO      1         3       1         2       eqtable (
  3147 ANNO      1         4       4         4       temp_rec := g_rec;
  3148 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3149 ANNO      1         1       1         1       wt_assert.eq (
  3153 ANNO      1         0       0         0       wt_assert.isnotnull (
  3156 ANNO      1         7       7         7       wt_assert.this (
  3161 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQTABLE Sad Path 2';
  3162 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  3163 ANNO      0         1       1         1       begin
  3164 ANNO      1         3       1         2          eqtable (
  3171 ANNO      0         0       0         0          l_found_exception := FALSE;
  3172 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  3173 ANNO      1         0       0         0          l_found_exception := TRUE;
  3174 ANNO      0         1       1         1       end;
  3175 ANNO      1         5       5         5       temp_rec := g_rec;
  3176 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3177 ANNO      1         0       0         0       wt_assert.eq (
  3181 ANNO      1         1       1         1       wt_assert.eq (
  3186 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQTABLE Sad Path 3';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3187 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3188 ANNO      1         1       1         1       eqtable (
  3192 ANNO      1         5       5         5       temp_rec := g_rec;
  3193 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3194 ANNO      1         1       1         1       wt_assert.eq (
  3198 ANNO      1         1       1         1       wt_assert.isnotnull (
  3201 ANNO      1        10      10        10       wt_assert.this (
  3205 ANNO      1         2       2         2    end t_eqtable;
  3210 UNKN      0         6       1         1 procedure eqtabcount (
  3218 EXEC      6         6       1         1    l_query      varchar2(16000) := 'select count(*) from ' || check_this_in;
  3222 EXEC     11        24       0         5    procedure l_run_query is
  3226 EXEC     11      2044     105       463       open l_rc for l_query;
  3227 EXEC     10    179884    1235     28522       fetch l_rc into l_cnt;
  3228 EXEC     10       448      37        54       close l_rc;
  3229 EXEC     10        16       1         3       l_success := TRUE;
  3231 EXEC      1         0       0         0       when OTHERS
  3233 EXEC      1        78      78        78          g_rec.last_details := SQLERRM || CHR(10) ||
  3235 EXEC      1         1       1         1          g_rec.last_pass    := FALSE;
  3236 EXEC      1         0       0         0          l_success      := FALSE;
  3237 EXEC      1         0       0         0          g_rec.raise_exception := raise_exc_in;
  3238 EXEC      1         1       1         1          process_assertion;
  3239 EXEC     11        50       1        15    end l_run_query;
  3241 EXEC      6         3       1         1    g_rec.last_assert  := 'EQTABCOUNT';
  3242 EXEC      6         2       1         1    g_rec.last_msg     := msg_in;
  3244 EXEC      6         0       0         0    l_query := 'select count(*) from ' || check_this_in;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3245 EXEC      6         1       0         1    if check_where_in is not null
  3247 EXEC      4         4       1         1       l_query := l_query || ' where ' || check_where_in;
  3249 EXEC      6         1       1         1    l_run_query;
  3250 EXEC      7         3       0         1    if NOT l_success then return; end if;
  3251 EXEC      5         4       1         1    l_check_cnt := l_cnt;
  3253 EXEC      5        24       4         6    l_query := 'select count(*) from ' || against_this_in;
  3254 EXEC      5         3       0         1    if against_where_in is not null
  3256 EXEC      3         5       1         2       l_query := l_query || ' where ' || against_where_in;
  3258 EXEC      5         5       1         1    l_run_query;
  3259 EXEC      5         4       1         1    if NOT l_success then return; end if;
  3260 EXEC      5        12       2         3    g_rec.last_pass    := (l_check_cnt = l_cnt);
  3262 EXEC      5        52      10        11    g_rec.last_details := 'Expected ' || l_cnt       || ' rows from "' || against_this_in ||
  3265 EXEC      5         1       1         1    g_rec.raise_exception := raise_exc_in;
  3266 EXEC      5         5       1         1    process_assertion;
  3267 EXEC      4         1       0         1 end eqtabcount;
  3271 ANNO      0         4       4         4    procedure t_eqtabcount
  3276 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQTABCOUNT Tests Happy Path 1';
  3277 ANNO      1         5       1         3       eqtabcount (
  3283 ANNO      1         1       1         1       temp_rec := g_rec;
  3284 ANNO      1         1       1         1       wt_assert.eq (
  3288 ANNO      1         0       0         0       wt_assert.eq (
  3292 ANNO      1         1       1         1       wt_assert.eq (
  3296 ANNO      1         1       1         1       wt_assert.isnotnull (
  3299 ANNO      1         8       8         8       wt_assert.this (
  3305 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQTABCOUNT Tests Happy Path 2';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3306 ANNO      1         3       1         2       eqtabcount (
  3313 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQTABCOUNT Sad Path 1';
  3314 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3315 ANNO      1         4       1         3       eqtabcount (
  3321 ANNO      1         5       5         5       temp_rec := g_rec;
  3322 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  3323 ANNO      1         0       0         0       wt_assert.eq (
  3327 ANNO      1         1       1         1       wt_assert.isnotnull (
  3330 ANNO      1         7       7         7       wt_assert.this (
  3336 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQTABCOUNT Sad Path 2';
  3337 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3339 ANNO      1         2       1         1          eqtabcount (
  3346 ANNO      0         0       0         0          l_found_exception := FALSE;
  3347 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  3348 ANNO      1         1       1         1          l_found_exception := TRUE;
  3349 ANNO      0         1       1         1       end;
  3350 ANNO      1         5       5         5       temp_rec := g_rec;
  3351 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3352 ANNO      1         0       0         0       wt_assert.eq (
  3356 ANNO      1         0       0         0       wt_assert.eq (
  3361 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQTABCOUNT Sad Path 3';
  3362 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3363 ANNO      1         1       1         1       eqtabcount (
  3367 ANNO      1         5       5         5       temp_rec := g_rec;
  3368 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3369 ANNO      1         0       0         0       wt_assert.eq (
  3373 ANNO      1         0       0         0       wt_assert.isnotnull (
  3376 ANNO      1         6       6         6       wt_assert.this (
  3381 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQTABCOUNT Sad Path 4';
  3382 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3383 ANNO      1         1       1         1       eqtabcount (
  3387 ANNO      1         1       1         1       temp_rec := g_rec;
  3388 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3389 ANNO      1         1       1         1       wt_assert.eq (
  3393 ANNO      1         1       1         1       wt_assert.isnotnull (
  3396 ANNO      1         2       2         2       wt_assert.this (
  3400 ANNO      1         2       2         2       wt_assert.this (
  3404 ANNO      1         1       1         1    end t_eqtabcount;
  3409 EXEC      6         7       0         1 procedure objexists (
  3418 EXEC      6         1       0         1    g_rec.last_assert  := 'OBJEXISTS';
  3419 EXEC      6         0       0         0    g_rec.last_msg     := msg_in;
  3420 EXEC      6      3842     118      1261    select count(*) into l_num_objects
  3427 EXEC      6        14       1         2    g_rec.last_pass    := case l_num_objects when 0 then FALSE else TRUE end;
  3428 EXEC      6         4       0         1    g_rec.last_details := 'Number of objects found for "' ||
  3429 UNKN      0        15       0         4                          case when obj_owner_in is null then ''
  3432 UNKN      0        20       2         4                          case when obj_type_in is null then ''
  3435 EXEC      6         0       0         0    g_rec.raise_exception := raise_exc_in;
  3436 EXEC      6         3       0         1    process_assertion;
  3437 EXEC      5         3       1         1 end objexists;
  3440 UNKN      0         2       1         1 procedure objexists (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3446 EXEC      2         4       1         3    l_pos    number := instr(check_this_in, '.');
  3448 EXEC      2         5       2         3    objexists(msg_in       => msg_in
  3451 EXEC      2         0       0         0 end objexists;
  3455 ANNO      0         2       2         2    procedure t_object_exists
  3460 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJEXISTS Happy Path 1';
  3461 ANNO      1         0       0         0       objexists (
  3465 ANNO      1         1       1         1       temp_rec := g_rec;
  3466 ANNO      1         0       0         0       wt_assert.eq (
  3470 ANNO      1         1       1         1       wt_assert.eq (
  3474 ANNO      1         0       0         0       wt_assert.eq (
  3478 ANNO      1         1       1         1       wt_assert.eq (
  3483 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJEXISTS Happy Path 2';
  3484 ANNO      1         0       0         0       objexists (
  3490 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJEXISTS Happy Path 3';
  3491 ANNO      1         0       0         0       objexists (
  3495 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJEXISTS Happy Path 4';
  3496 ANNO      1         0       0         0       objexists (
  3500 ANNO      1         1       1         1       wt_assert.g_testcase := 'OBJEXISTS Sad Path 1';
  3501 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  3502 ANNO      1         1       1         1       objexists (
  3506 ANNO      1         2       2         2       temp_rec := g_rec;
  3507 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3508 ANNO      1         0       0         0       wt_assert.eq (
  3512 ANNO      1         0       0         0       wt_assert.eq (
  3517 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJEXISTS Sad Path 2';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3518 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3520 ANNO      1         1       1         1          objexists (
  3525 ANNO      0         0       0         0          l_found_exception := FALSE;
  3526 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  3527 ANNO      1         0       0         0          l_found_exception := TRUE;
  3528 ANNO      0         1       1         1       end;
  3529 ANNO      1         2       2         2       temp_rec := g_rec;
  3530 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3531 ANNO      1         0       0         0       wt_assert.eq (
  3535 ANNO      1         0       0         0       wt_assert.eq (
  3539 ANNO      1         0       0         0    end t_object_exists;
  3544 EXEC      5         4       0         1 procedure objnotexists (
  3553 EXEC      5         2       0         1    g_rec.last_assert  := 'OBJNOTEXISTS';
  3554 EXEC      5         1       0         1    g_rec.last_msg     := msg_in;
  3555 EXEC      5       880     121       243    select count(*) into l_num_objects
  3562 EXEC      5         6       0         1    g_rec.last_pass    := case l_num_objects when 0 then TRUE else FALSE end;
  3563 EXEC      5         0       0         0    g_rec.last_details := 'Number of objects found for "' ||
  3564 UNKN      0         8       0         3                          case when obj_owner_in is null then ''
  3567 UNKN      0        10       1         2                          case when obj_type_in is null then ''
  3570 EXEC      5         1       0         1    g_rec.raise_exception := raise_exc_in;
  3571 EXEC      5         0       0         0    process_assertion;
  3572 EXEC      4         3       1         1 end objnotexists;
  3575 UNKN      0         1       1         1 procedure objnotexists (
  3581 EXEC      1         2       2         2    l_pos    number := instr(check_this_in, '.');
  3583 EXEC      1         3       3         3    objnotexists(msg_in       => msg_in
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3586 EXEC      1         0       0         0 end objnotexists;
  3590 ANNO      0         2       2         2    procedure t_object_not_exists
  3595 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJNOTEXISTS Happy Path 1';
  3596 ANNO      1         0       0         0       objnotexists (
  3600 ANNO      1         1       1         1       temp_rec := g_rec;
  3601 ANNO      1         0       0         0       wt_assert.eq (
  3605 ANNO      1         0       0         0       wt_assert.eq (
  3609 ANNO      1         1       1         1       wt_assert.eq (
  3613 ANNO      1         0       0         0       wt_assert.eq (
  3618 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJNOTEXISTS Happy Path 2';
  3619 ANNO      1         0       0         0       objnotexists (
  3625 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJNOTEXISTS Happy Path 3';
  3626 ANNO      1         1       1         1       objnotexists (
  3630 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJNOTEXISTS Sad Path 1';
  3631 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3632 ANNO      1         0       0         0       objnotexists (
  3636 ANNO      1         2       2         2       temp_rec := g_rec;
  3637 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3638 ANNO      1         1       1         1       wt_assert.eq (
  3642 ANNO      1         0       0         0       wt_assert.eq (
  3647 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJNOTEXISTS Sad Path 2';
  3648 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3650 ANNO      1         0       0         0          objnotexists (
  3655 ANNO      0         0       0         0          l_found_exception := FALSE;
  3656 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3657 ANNO      1         0       0         0          l_found_exception := TRUE;
  3658 ANNO      0         0       0         0       end;
  3659 ANNO      1         1       1         1       temp_rec := g_rec;
  3660 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  3661 ANNO      1         0       0         0       wt_assert.eq (
  3665 ANNO      1         0       0         0       wt_assert.eq (
  3669 ANNO      1         0       0         0    end t_object_not_exists;
  3678 ANNO      0         9       9         9    procedure WTPLSQL_RUN  --% WTPLSQL SET DBOUT "WT_ASSERT" %--
  3681 ANNO      1       710     710       710       select temp_clob,  temp_nclob,  temp_xml,  temp_blob
  3684 ANNO      1         1       1         1       t_boolean_to_status;
  3685 ANNO      1         1       1         1       t_process_assertion;
  3686 ANNO      1         0       0         0       t_compare_queries;
  3687 ANNO      1         0       0         0       t_nls_settings;
  3688 ANNO      1         0       0         0       t_last_values;
  3689 ANNO      1         0       0         0       t_reset_globals;
  3690 ANNO      1         0       0         0       t_this;
  3691 ANNO      1         1       1         1       t_eq;
  3692 ANNO      1         1       1         1       t_isnotnull;
  3693 ANNO      1         0       0         0       t_isnull;
  3694 ANNO      1         0       0         0       t_raises;
  3695 ANNO      1         0       0         0       t_eqqueryvalue;
  3696 ANNO      1         0       0         0       t_eqquery;
  3697 ANNO      1         0       0         0       t_eqtable;
  3698 ANNO      1         1       1         1       t_eqtabcount;
  3699 ANNO      1         0       0         0       t_object_exists;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3700 ANNO      1         0       0         0       t_object_not_exists;
  3701 ANNO      1         1       1         1    end WTPLSQL_RUN;
  3706 EXCL      0         0       0         0 end wt_assert;


    wtPLSQL 1.1.0 - Run ID 41: 21-Apr-2018 05:41:10 PM

  Test Results for WTP.WT_PROFILER
       Total Testcases:       39      Total Assertions:      252
  Minimum Elapsed msec:        0     Failed Assertions:        0
  Average Elapsed msec:        2      Error Assertions:        0
  Maximum Elapsed msec:       52            Test Yield:   100.00%
  Total Run Time (sec):      0.6

  Code Coverage for PACKAGE BODY WTP.WT_PROFILER
    Total Source Lines:      701          Missed Lines:        3
  Minimum Elapsed usec:        0       Annotated Lines:      554
  Average Elapsed usec:      115        Excluded Lines:        2
  Maximum Elapsed usec:    14373         Unknown Lines:       11
 Trigger Source Offset:        0         Code Coverage:    97.76%

WTP.WT_PROFILER Details (Test Run ID 41)
----------------------------------------
 ---- Test Case: Get Error Messages
 PASS   37ms ERROR_PARAM Test 1. ISNOTNULL - Expected NOT NULL and got "DBMS_PROFILER Error: A subprogram was called with an incorrect parameter."
 PASS    0ms ERROR_PARAM Test 2. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms ERROR_IO Test 1. ISNOTNULL - Expected NOT NULL and got "DBMS_PROFILER Error: Data flush operation failed. Check whether the profiler tables have been created, are accessible, and that there is adequate space."
 PASS    0ms ERROR_IO Test 2. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms ERROR_VERSION Test 1. ISNOTNULL - Expected NOT NULL and got "DBMS_PROFILER Error: There is a mismatch between package and database implementation. Oracle returns this error if an incorrect version of the DBMS_PROFILER package is installed, and if the version of the profiler package cannot work with this database version."
 PASS    0ms ERROR_VERSION Test 2. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms Unknown Error Test 1. ISNOTNULL - Expected NOT NULL and got "DBMS_PROFILER Error: Unknown error number -9999"
 PASS    0ms Unknown Error Test 2. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: Delete PL/SQL Profiler Records Happy Path 1
 PASS    1ms delete_plsql_profiler_recs(-99) 1. ISNULL - Expected NULL and got ""
 PASS    0ms Number of plsql_profiler_runs (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_runs where runid = -99
 PASS    1ms Number of plsql_profiler_units (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_units where runid = -99
 PASS    0ms Number of plsql_profiler_data (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_data where runid = -99
 ---- Test Case: Delete PL/SQL Profiler Records Happy Path 2
 PASS    1ms insert plsql_profiler_runs (-99). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms insert plsql_profiler_units (-99). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms insert plsql_profiler_data (RUNID: -99). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms Number of plsql_profiler_runs (-99). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_runs where runid = -99
 PASS    0ms Number of plsql_profiler_units (-99). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_units where runid = -99
 PASS    0ms Number of plsql_profiler_data (-99). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_data where runid = -99
 PASS    4ms delete_plsql_profiler_recs(-99) 2. ISNULL - Expected NULL and got ""
 PASS    0ms Number of plsql_profiler_runs (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_runs where runid = -99
 PASS    0ms Number of plsql_profiler_units (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_units where runid = -99
 PASS    1ms Number of plsql_profiler_data (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_data where runid = -99
 ---- Test Case: Find DBOUT Setup
 PASS   18ms Compile package WT_PROFILE_FIND_DBOUT. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS   15ms Compile package WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_FIND_DBOUT package. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE) is 1
 PASS    0ms g_rec.dbout_owner. EQ - Expected "WTP" and got "WTP"
 PASS    0ms g_rec.dbout_name. EQ - Expected "WT_PROFILER" and got "WT_PROFILER"
 PASS    0ms g_rec.dbout_type. EQ - Expected "PACKAGE BODY" and got "PACKAGE BODY"
 PASS    0ms g_rec.error_message. ISNULL - Expected NULL and got ""
 ---- Test Case: Find DBOUT Happy Path 1
 PASS   15ms Compile package body WT_PROFILE_FIND_DBOUT. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms Compile package body WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_FIND_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE BODY) is 1
 PASS    0ms g_rec.dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_type. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.error_message. ISNULL - Expected NULL and got ""
 ---- Test Case: Find DBOUT Happy Path 2
 PASS   28ms Compile package body WT_PROFILE_FIND_DBOUT. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms Compile package body WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    3ms WT_PROFILE_FIND_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE BODY) is 1
 PASS    6ms g_rec.dbout_owner. EQ - Expected "WTP" and got "WTP"
 PASS    0ms g_rec.dbout_name. EQ - Expected "WT_PROFILE_FIND_DBOUT" and got "WT_PROFILE_FIND_DBOUT"
 PASS    0ms g_rec.dbout_type. EQ - Expected "PACKAGE BODY" and got "PACKAGE BODY"
 PASS    0ms g_rec.error_message. ISNULL - Expected NULL and got ""
 ---- Test Case: Find DBOUT Happy Path 3
 PASS   23ms Compile package body WT_PROFILE_FIND_DBOUT. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms Compile package body WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_FIND_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE BODY) is 1
 PASS    1ms g_rec.dbout_owner. EQ - Expected "WTP" and got "WTP"
 PASS    0ms g_rec.dbout_name. EQ - Expected "WT_PROFILE_FIND_DBOUT" and got "WT_PROFILE_FIND_DBOUT"
 PASS    0ms g_rec.dbout_type. EQ - Expected "PACKAGE BODY" and got "PACKAGE BODY"
 PASS    0ms g_rec.error_message. ISNULL - Expected NULL and got ""
 ---- Test Case: Find DBOUT Sad Path 1
 PASS   27ms Compile package body WT_PROFILE_FIND_DBOUT. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms Compile package body WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_FIND_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE BODY) is 1
 PASS    2ms g_rec.dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_type. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.error_message. EQ - Expected "Unable to find Database Object "BOGUS1". " and got "Unable to find Database Object "BOGUS1". "
 ---- Test Case: Find DBOUT Teardown
 PASS   52ms Drop package WT_PROFILE_FIND_DBOUT. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms WT_PROFILE_FIND_DBOUT package. OBJNOTEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE) is 0
 ---- Test Case: Load Anno Setup
 PASS    0ms Number of ANNO_AA elements. ISNOTNULL - Expected NOT NULL and got "0"
 PASS   15ms Compile package WT_PROFILE_LOAD_ANNO. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms Compile package WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_LOAD_ANNO package. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE) is 1
 ---- Test Case: Load Anno Happy Path 1
 PASS   25ms Compile package body WT_PROFILE_LOAD_ANNO. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS    1ms l_annoTest.COUNT. EQ - Expected "0" and got "0"
 ---- Test Case: Load Anno Happy Path 2
 PASS   33ms Compile package body WT_PROFILE_LOAD_ANNO. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS    3ms l_annoTest.COUNT. EQ - Expected "3" and got "3"
 PASS    0ms l_annoTest.exists(3). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(4). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(5). EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: Load Anno Happy Path 3
 PASS   18ms Compile package body WT_PROFILE_LOAD_ANNO. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS    1ms l_annoTest.COUNT. EQ - Expected "3" and got "3"
 PASS    0ms l_annoTest.exists(4). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(5). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(6). EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: Load Anno Happy Path 4
 PASS   22ms Compile package body WT_PROFILE_LOAD_ANNO. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS    1ms l_annoTest.COUNT. EQ - Expected "6" and got "6"
 PASS    0ms l_annoTest.exists(4). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(5). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(6). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(8). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(9). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(10). EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: Load Anno Sad Path 1
 PASS   19ms Compile package body WT_PROFILE_LOAD_ANNO. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS    0ms l_annoTest.COUNT. EQ - Expected "0" and got "0"
 ---- Test Case: Load Anno Sad Path 2
 PASS   17ms Compile package body WT_PROFILE_LOAD_ANNO. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS    0ms l_annoTest.COUNT. EQ - Expected "3" and got "3"
 PASS    1ms l_annoTest.exists(4). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(5). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(6). EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: Load Anno Sad Path 3
 PASS   19ms Compile package body WT_PROFILE_LOAD_ANNO. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS    1ms l_annoTest.COUNT. EQ - Expected "5" and got "5"
 PASS    0ms l_annoTest.exists(4). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(5). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(6). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(7). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(8). EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: Load Anno Teardown
 PASS   20ms Drop package WT_PROFILE_LOAD_ANNO. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms WT_PROFILE_LOAD_ANNO package. OBJNOTEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE) is 0
 PASS    0ms Number of ANNO_AA elements. ISNOTNULL - Expected NOT NULL and got "0"
 ---- Test Case: Insert DBOUT Profile Setup
 PASS   12ms Compile package WT_PROFILE_INSERT_DBOUT. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms Compile package WT_PROFILE_INSERT_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_INSERT_DBOUT package. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_INSERT_DBOUT"(PACKAGE) is 1
 PASS   11ms Compile package body WT_PROFILE_INSERT_DBOUT. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms Compile package body WT_PROFILE_INSERT_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_INSERT_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_INSERT_DBOUT"(PACKAGE BODY) is 1
 PASS    1ms insert plsql_profiler_runs (-97). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms insert plsql_profiler_units (-97). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms insert plsql_profiler_data (RUNID: -97). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms Number of plsql_profiler_runs (-97). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_runs where runid = -97
 PASS    0ms Number of plsql_profiler_units (-97). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_units where runid = -97
 PASS    0ms Number of plsql_profiler_data (-97). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_data where runid = -97
 PASS    1ms Insert wt_test_runs (-97). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_test_runs (-97) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_test_runs where id = -97
 PASS    1ms insert UNIT 1 into plsql_profiler_units. ISNULL - Expected NULL and got ""
 PASS    1ms Number of UNIT 1 plsql_profiler_units. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_units where runid = -97 and unit_number = 1
 PASS    3ms insert plsql_profiler_data (LINE#: 1). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms insert plsql_profiler_data (LINE#: 2). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms insert plsql_profiler_data (LINE#: 3). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms insert plsql_profiler_data (LINE#: 5). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms insert plsql_profiler_data (LINE#: 7). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms insert plsql_profiler_data (LINE#: 8). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    2ms Number of UNIT 1 plsql_profiler_data. EQQUERYVALUE - Expected "6" and got "6" for Query: select count(*) from plsql_profiler_data where runid = -97 and unit_number = 1
 ---- Test Case: Insert DBOUT Profile Happy Path
 PASS    4ms SQLERRM. ISNULL - Expected NULL and got ""
 PASS    0ms wt_dbout_profiles line 1, column STATUS. EQQUERYVALUE - Expected "EXCL" and got "EXCL" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 1
 PASS    0ms wt_dbout_profiles line 1, column TEXT. EQQUERYVALUE - Expected "package body WT_PROFILE_INSERT_DBOUT is\n" and got "package body WT_PROFILE_INSERT_DBOUT is\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 1
 PASS    0ms wt_dbout_profiles line 2, column STATUS. EQQUERYVALUE - Expected "UNKN" and got "UNKN" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 2
 PASS    0ms wt_dbout_profiles line 2, column TEXT. EQQUERYVALUE - Expected "begin\n" and got "begin\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 2
 PASS    1ms wt_dbout_profiles line 3, column STATUS. EQQUERYVALUE - Expected "EXEC" and got "EXEC" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 3
 PASS    0ms wt_dbout_profiles line 3, column TEXT. EQQUERYVALUE - Expected "  l_junk := 1;\n" and got "  l_junk := 1;\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 3
 PASS    0ms wt_dbout_profiles line 5, column STATUS. EQQUERYVALUE - Expected "ANNO" and got "ANNO" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 5
 PASS    1ms wt_dbout_profiles line 5, column TEXT. EQQUERYVALUE - Expected "  l_junk := 2;\n" and got "  l_junk := 2;\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 5
 PASS    0ms wt_dbout_profiles line 7, column STATUS. EQQUERYVALUE - Expected "EXEC" and got "EXEC" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 7
 PASS    0ms wt_dbout_profiles line 7, column TEXT. EQQUERYVALUE - Expected "  l_junk := 3;\n" and got "  l_junk := 3;\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 7
 PASS    0ms wt_dbout_profiles line 8, column STATUS. EQQUERYVALUE - Expected "EXCL" and got "EXCL" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 8
 PASS    1ms wt_dbout_profiles line 8, column TEXT. EQQUERYVALUE - Expected "end WT_PROFILE_INSERT_DBOUT;" and got "end WT_PROFILE_INSERT_DBOUT;" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 8
 ---- Test Case: Insert DBOUT Profile Teardown
 PASS    1ms Delete wt_dbout_profiles (-97). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_dbout_profiles (-97) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -97
 PASS    0ms Delete wt_test_runs (-97). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms wt_test_runs (-97) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = -97
 PASS    0ms delete plsql_profiler_data (-97). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms delete plsql_profiler_units (-97). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms delete plsql_profiler_runs (-97). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms Number of plsql_profiler_runs (-97). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_runs where runid = -97
 PASS    0ms Number of plsql_profiler_units (-97). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_units where runid = -97
 PASS    0ms Number of plsql_profiler_data (-97). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_data where runid = -97
 PASS   23ms Drop package WT_PROFILE_INSERT_DBOUT. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms WT_PROFILE_INSERT_DBOUT package. OBJNOTEXISTS - Number of objects found for "WTP.WT_PROFILE_INSERT_DBOUT"(PACKAGE) is 0
 ---- Test Case: Insert DBOUT Profile Setup
 PASS   16ms Compile package WT_PROFILE_INITIALIZE. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms Compile package WT_PROFILE_INITIALIZE Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_INITIALIZE package. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_INITIALIZE"(PACKAGE) is 1
 ---- Test Case: Initialize Test HAPPY Path 1
 PASS   15ms Compile package body WT_PROFILE_INITIALIZE. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms Compile package body WT_PROFILE_INITIALIZE Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_INITIALIZE package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_INITIALIZE"(PACKAGE BODY) is 1
 PASS    1ms OUT dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms OUT dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms OUT dbout_type. ISNULL - Expected NULL and got ""
 PASS    0ms OUT prof_runid. ISNULL - Expected NULL and got ""
 PASS    0ms OUT trigger_offset. ISNULL - Expected NULL and got ""
 PASS    0ms OUT error_message. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_type. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.prof_runid. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.trigger_offset. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.error_message. ISNULL - Expected NULL and got ""
 ---- Test Case: Initialize Test HAPPY Path 2
 PASS   18ms Compile package body WT_PROFILE_INITIALIZE. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms Compile package body WT_PROFILE_INITIALIZE Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_INITIALIZE package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_INITIALIZE"(PACKAGE BODY) is 1
 PASS    4ms OUT dbout_owner. EQ - Expected "WTP" and got "WTP"
 PASS    0ms OUT dbout_name. EQ - Expected "WT_PROFILE_INITIALIZE" and got "WT_PROFILE_INITIALIZE"
 PASS    0ms OUT dbout_type. EQ - Expected "PACKAGE BODY" and got "PACKAGE BODY"
 PASS    0ms OUT prof_runid. ISNOTNULL - Expected NOT NULL and got "33"
 PASS    0ms OUT trigger_offset. EQ - Expected "0" and got "0"
 PASS    0ms OUT error_message. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_owner. EQ - Expected "WTP" and got "WTP"
 PASS    1ms g_rec.dbout_name. EQ - Expected "WT_PROFILE_INITIALIZE" and got "WT_PROFILE_INITIALIZE"
 PASS    0ms g_rec.dbout_type. EQ - Expected "PACKAGE BODY" and got "PACKAGE BODY"
 PASS    0ms g_rec.prof_runid. ISNOTNULL - Expected NOT NULL and got "33"
 PASS    0ms g_rec.trigger_offset. EQ - Expected "0" and got "0"
 PASS    0ms g_rec.error_message. ISNULL - Expected NULL and got ""
 ---- Test Case: Initialize Test Sad Path 1
 PASS    0ms SQLERRM. EQ - Expected "ORA-20004: i_test_run_id is null" and got "ORA-20004: i_test_run_id is null"
 ---- Test Case: Finalize Happy Path 1
 PASS    0ms g_rec.dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms SQLERRM. ISNULL - Expected NULL and got ""
 ---- Test Case: Finalize Happy Path 2
 PASS    0ms g_rec.dbout_owner. ISNOTNULL - Expected NOT NULL and got "WTP"
 PASS    0ms g_rec.dbout_name. ISNOTNULL - Expected NOT NULL and got "WT_PROFILER"
 PASS    0ms g_rec.dbout_type. ISNOTNULL - Expected NOT NULL and got "PACKAGE BODY"
 PASS    0ms g_rec.prof_runid. ISNOTNULL - Expected NOT NULL and got "33"
 PASS    0ms g_rec.trigger_offset. ISNOTNULL - Expected NOT NULL and got "0"
 PASS    0ms g_rec.error_message. ISNULL - Expected NULL and got ""
 PASS    1ms SQLERRM. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_type. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.prof_runid. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.trigger_offset. ISNULL - Expected NULL and got ""
 ---- Test Case: Finalize Sad Path 1
 PASS    0ms SQLERRM. EQ - Expected "ORA-20000: g_rec.test_run_id is null" and got "ORA-20000: g_rec.test_run_id is null"
 ---- Test Case: Trigger Offset Happy Path
 PASS    4ms Trigger Test. EQ - Expected "3" and got "3"
 PASS    0ms Package Test. EQ - Expected "0" and got "0"
 ---- Test Case: Trigger Offset Sad Path
 PASS    0ms Non Existent Object. EQ - Expected "0" and got "0"
 ---- Test Case: Calculate Percentage Offset Setup
 PASS    1ms Insert wt_test_runs (-95). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms wt_test_runs (-95) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_test_runs where id = -95
 ---- Test Case: Calculate Percentage Offset Happy Path 1
 PASS    0ms Insert wt_dbout_profiles (-95,1). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms wt_dbout_profiles (-95,1) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 1
 PASS    0ms Insert wt_dbout_profiles (-95,2). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_dbout_profiles (-95,2) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 2
 PASS    1ms Insert wt_dbout_profiles (-95,3). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_dbout_profiles (-95,3) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 3
 PASS    0ms Main Test. EQ - Expected "66.67" and got "66.67"
 PASS    1ms Delete wt_dbout_profiles (-95). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_dbout_profiles (-95) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95
 ---- Test Case: Calculate Percentage Offset Happy Path 2
 PASS    0ms Insert wt_dbout_profiles (-95,1). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms wt_dbout_profiles (-95,1) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 1
 PASS    0ms Insert wt_dbout_profiles (-95,2). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_dbout_profiles (-95,2) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 2
 PASS    0ms Insert wt_dbout_profiles (-95,3). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms wt_dbout_profiles (-95,3) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 3
 PASS    0ms Main Test. EQ - Expected "-1" and got "-1"
 PASS    0ms Delete wt_dbout_profiles (-95). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_dbout_profiles (-95) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95
 ---- Test Case: Calculate Percentage Offset Sad Path
 PASS    0ms Missing Test Run ID. ISNULL - Expected NULL and got ""
 PASS    1ms NULL Test Run ID. ISNULL - Expected NULL and got ""
 ---- Test Case: Calculate Percentage Offset Teardown
 PASS    0ms Delete wt_test_runs (-95). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_test_runs (-95) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = -95
 ---- Test Case: Delete Records Setup
 PASS    0ms wt_test_runs Count 0. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = -98
 PASS    1ms wt_dbout_profiles Count 0. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -98
 PASS    0ms Insert wt_test_runs (-98). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_test_runs (-98) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_test_runs where id = -98
 PASS    1ms Insert wt_dbout_profiles (-98,1). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_dbout_profiles (-98,1) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -98 and line = 1
 ---- Test Case: Delete Records Happy Path 1
 PASS    0ms SQLERRM. ISNULL - Expected NULL and got ""
 PASS    1ms wt_dbout_profiles Count 2. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -98
 ---- Test Case: Delete Records Sad Path 1
 PASS    0ms SQLERRM. ISNULL - Expected NULL and got ""
 PASS    0ms wt_dbout_profiles Count 2. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -98
 ---- Test Case: Delete Records Sad Path 2
 PASS    0ms SQLERRM. ISNULL - Expected NULL and got ""
 PASS    0ms wt_dbout_profiles Count 2. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -98
 ---- Test Case: Delete Records Teardown
 PASS    1ms Delete wt_test_runs (-98). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_test_runs (-98) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = -98

WTP.WT_PROFILER PACKAGE BODY Code Coverage Details (Test Run ID 41)
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
     1 EXCL      0         0       0         0 package body wt_profiler
    29 ANNO      0         0       0         0    g_skip_this  boolean := FALSE;
    31 ANNO      0       154       4        30    procedure compile_db_object
    37 ANNO     18         9       0         2       l_errtxt   varchar2(32000) := '';
    41 ANNO     18     14374     647      1698          execute immediate 'create or replace ' ||
    44 ANNO     18        88       4         6          l_sqlerrm := SQLERRM;
    45 ANNO      0         0       0         0       exception when others then
    46 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
    47 ANNO      0         0       0         0       end;
    48 ANNO     18       197       8        17       wt_assert.eq
    53 ANNO     36     19715      14     14373       for buff in (select * from user_errors
    59 ANNO      0         0       0         0          l_errtxt := l_errtxt || buff.line || ', ' ||
    62 ANNO     18       101       3        14       wt_assert.isnull
    66 ANNO     18       207       1        18       wt_assert.objexists (
    71 ANNO     18        76       1        36    end compile_db_object;
    73 ANNO      0         6       2         2    procedure drop_db_object
    81 ANNO      3      3269     673      1301          execute immediate
    83 ANNO      3        13       4         5          l_sqlerrm := SQLERRM;
    84 ANNO      0         0       0         0       exception when others then
    85 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
    86 ANNO      0         0       0         0       end;
    87 ANNO      3        32      10        11       wt_assert.eq
    91 ANNO      3        29       2         8       wt_assert.objnotexists (
    96 ANNO      3         2       1         1    end drop_db_object;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
    98 ANNO      0         6       1         2    procedure count_plsql_profiler_records
   104 ANNO      5        23       4         5       wt_assert.eqqueryvalue
   109 ANNO      5        19       3         5       wt_assert.eqqueryvalue
   114 ANNO      5        18       3         4       wt_assert.eqqueryvalue
   119 ANNO      5         0       0         0    end count_plsql_profiler_records;
   121 ANNO      0         4       2         2    procedure insert_plsql_profiler_records
   128 ANNO      2       740     263       476          insert into plsql_profiler_runs (runid)
   130 ANNO      2       224     100       124          commit;
   131 ANNO      2         3       1         2          l_sqlerrm := SQLERRM;
   132 ANNO      0         0       0         0       exception when others then
   133 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
   134 ANNO      0         0       0         0       end;
   135 ANNO      2        11       5         6       wt_assert.eq (
   141 ANNO      2       843     201       642          insert into plsql_profiler_units (runid,    unit_number, total_time)
   143 ANNO      2       331      71       260          commit;
   144 ANNO      2         4       2         2          l_sqlerrm := SQLERRM;
   145 ANNO      0         0       0         0       exception when others then
   146 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
   147 ANNO      0         0       0         0       end;
   148 ANNO      2        14       4        10       wt_assert.eq (
   154 ANNO      2       527     188       338          insert into plsql_profiler_data (runid,    unit_number, line#)
   156 ANNO      2       408      72       336          commit;
   157 ANNO      2         5       1         4          l_sqlerrm := SQLERRM;
   158 ANNO      0         0       0         0       exception when others then
   159 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   160 ANNO      0         0       0         0       end;
   161 ANNO      2        15       4        11       wt_assert.eq (
   165 ANNO      2         2       1         1    end insert_plsql_profiler_records;
   167 ANNO      0         3       3         3    procedure delete_plsql_profiler_records
   174 ANNO      1       114     114       114          delete from plsql_profiler_data
   176 ANNO      1        50      50        50          commit;
   177 ANNO      1         2       2         2          l_sqlerrm := SQLERRM;
   178 ANNO      0         0       0         0       exception when others then
   179 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
   180 ANNO      0         0       0         0       end;
   181 ANNO      1         4       4         4       wt_assert.eq (
   187 ANNO      1        89      89        89          delete from plsql_profiler_units
   189 ANNO      1        46      46        46          commit;
   190 ANNO      1        60      60        60          l_sqlerrm := SQLERRM;
   191 ANNO      0         0       0         0       exception when others then
   192 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
   193 ANNO      0         0       0         0       end;
   194 ANNO      1         6       6         6       wt_assert.eq (
   200 ANNO      1       113     113       113          delete from plsql_profiler_runs
   202 ANNO      1        49      49        49          commit;
   203 ANNO      1         1       1         1          l_sqlerrm := SQLERRM;
   204 ANNO      0         0       0         0       exception when others then
   205 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
   206 ANNO      0         0       0         0       end;
   207 ANNO      1         4       4         4       wt_assert.eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   211 ANNO      1        40      40        40       COMMIT;
   212 ANNO      1         0       0         0    end delete_plsql_profiler_records;
   214 ANNO      0         6       2         2    procedure insert_test_runs
   222 ANNO      3      1313     195       563          insert into wt_test_runs
   226 ANNO      3         6       1         3          l_sqlerrm := SQLERRM;
   227 ANNO      3       680      91       419          commit;
   228 ANNO      0         0       0         0       exception when others then
   229 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
   230 ANNO      0         0       0         0       end;
   232 ANNO      3        25       5        11       wt_assert.eq (
   236 ANNO      3        13       3         5       wt_assert.eqqueryvalue (
   241 ANNO      3         2       0         1    end insert_test_runs;
   243 ANNO      0         4       1         2    procedure delete_test_runs
   250 ANNO      3       672     136       279          delete from wt_test_runs where id = in_test_run_id;
   251 ANNO      3         4       1         2          l_sqlerrm := SQLERRM;
   252 ANNO      3       396      79       223          commit;
   253 ANNO      0         0       0         0       exception when others then
   254 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
   255 ANNO      0         0       0         0       end;
   256 ANNO      3        46       5        35       wt_assert.eq (
   260 ANNO      3        11       3         4       wt_assert.eqqueryvalue (
   265 ANNO      3         1       0         1    end delete_test_runs;
   267 ANNO      0         9       1         2    procedure insert_dbout_profiles
   274 ANNO      7      1199     107       374          insert into wt_dbout_profiles values in_rec;
   275 ANNO      7         9       1         2          l_sqlerrm := SQLERRM;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   276 ANNO      7       576      75       102          commit;
   277 ANNO      0         0       0         0       exception when others then
   278 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
   279 ANNO      0         0       0         0       end;
   281 ANNO      7        32       4         6       wt_assert.eq (
   286 ANNO      7        32       4         5       wt_assert.eqqueryvalue (
   293 ANNO      7         6       1         1    end insert_dbout_profiles;
   295 ANNO      0         6       2         2    procedure delete_dbout_profiles
   302 ANNO      3       946     204       453          delete from wt_dbout_profiles where test_run_id = in_test_run_id;
   303 ANNO      3         4       1         2          l_sqlerrm := SQLERRM;
   304 ANNO      3       325      92       141          commit;
   305 ANNO      0         0       0         0       exception when others then
   306 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
   307 ANNO      0         0       0         0       end;
   309 ANNO      3        18       4         9       wt_assert.eq (
   313 ANNO      3        14       4         6       wt_assert.eqqueryvalue (
   318 ANNO      3         2       0         1    end delete_dbout_profiles;
   325 UNKN      0         7       0         2 function get_error_msg
   329 EXEC      8         2       0         1    l_msg_prefix  varchar2(50) := 'DBMS_PROFILER Error: ';
   331 EXEC      8         0       0         0    case retnum_in
   332 EXEC     10        11       0         5    when dbms_profiler.error_param then return l_msg_prefix ||
   334 EXEC      8         2       0         1    when dbms_profiler.error_io then return l_msg_prefix ||
   338 EXEC      6         4       0         2    when dbms_profiler.error_version then return l_msg_prefix ||
   343 EXEC      2         6       1         5    else return l_msg_prefix ||
   346 EXEC      8         5       0         2 end get_error_msg;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   350 ANNO      0         4       4         4    procedure t_get_error_msg
   354 ANNO      2        15       1        14       wt_assert.g_testcase := 'Get Error Messages';
   355 ANNO      1         3       1         2       wt_assert.isnotnull (
   358 ANNO      1        24       1        23       wt_assert.this (
   362 ANNO      1         1       1         1       wt_assert.isnotnull (
   365 ANNO      1         7       7         7       wt_assert.this (
   369 ANNO      1         2       1         1       wt_assert.isnotnull (
   372 ANNO      1        27       1        26       wt_assert.this (
   376 ANNO      1         1       1         1       wt_assert.isnotnull (
   379 ANNO      1         6       6         6       wt_assert.this (
   383 ANNO      1         2       2         2    end t_get_error_msg;
   388 UNKN      0         4       1         1 procedure delete_plsql_profiler_recs
   392 EXEC      4        76      13        25 begin
   393 EXEC      4      1163     106       513    delete from plsql_profiler_data
   395 EXEC      4       539      59       234    delete from plsql_profiler_units
   397 EXEC      4       530      47       270    delete from plsql_profiler_runs
   399 EXEC      4      2600      44      2342    COMMIT;
   400 EXEC      4        58      10        26 end delete_plsql_profiler_recs;
   404 ANNO      0         2       2         2    procedure t_delete_profiler_recs
   406 ANNO      1         0       0         0       c_test_run_id   constant number := -99;
   410 ANNO      1         0       0         0       wt_assert.g_testcase := 'Delete PL/SQL Profiler Records Happy Path 1';
   412 ANNO      1         0       0         0          delete_plsql_profiler_recs(c_test_run_id);  -- Should run without error
   413 ANNO      1        58      58        58          l_err_stack := dbms_utility.format_error_stack     ||
   415 ANNO      0         0       0         0       exception when others then
   416 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   418 ANNO      0         0       0         0       end;
   419 ANNO      1         9       9         9       wt_assert.isnull (
   422 ANNO      1         1       1         1       count_plsql_profiler_records(c_test_run_id, 0);
   424 ANNO      1         0       0         0       wt_assert.g_testcase := 'Delete PL/SQL Profiler Records Happy Path 2';
   425 ANNO      1         1       1         1       insert_plsql_profiler_records(c_test_run_id);
   426 ANNO      1         0       0         0       count_plsql_profiler_records(c_test_run_id, 1);
   428 ANNO      1         1       1         1          delete_plsql_profiler_recs(c_test_run_id);  -- Should run without error
   429 ANNO      1        11      11        11          l_err_stack := dbms_utility.format_error_stack     ||
   431 ANNO      0         0       0         0       exception when others then
   432 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
   434 ANNO      0         0       0         0       end;
   435 ANNO      1        16      16        16       wt_assert.isnull (
   438 ANNO      1         0       0         0       count_plsql_profiler_records(c_test_run_id, 0);
   439 ANNO      1         1       1         1    end t_delete_profiler_recs;
   444 UNKN      0        17       2         4 procedure find_dbout
   447 EXEC      6         2       0         1    C_HEAD_RE CONSTANT varchar2(30) := '--% WTPLSQL SET DBOUT "';
   448 EXEC      6         0       0         0    C_MAIN_RE CONSTANT varchar2(30) := '[[:alnum:]._$#]+';
   449 EXEC      6         4       1         1    C_TAIL_RE CONSTANT varchar2(30) := '" %--';
   464 UNKN      0         1       0         1    cursor c_annotation is
   465 EXEC      6       887      85       314       select regexp_substr(src.text, C_HEAD_RE||C_MAIN_RE||C_TAIL_RE)  TEXT
   471 UNKN      0         5       1         1        order by src.line;
   475 EXEC      6         1       1         1    open c_annotation;
   476 EXEC      6      1584     205       327    fetch c_annotation into l_target;
   477 EXEC      6         6       1         1    if c_annotation%NOTFOUND
   479 EXEC      2        18       2        16       close c_annotation;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   480 EXEC      2         4       1         3       return;
   482 EXEC      4       137      27        52    close c_annotation;
   484 EXEC      4       114      26        30    l_target := regexp_replace(SRCSTR      => l_target
   490 EXEC      4        45       8        15    l_target := regexp_replace(SRCSTR      => l_target
   496 EXEC      4        17       4         5    l_pos := instr(l_target,'.');
   498 EXEC      4      3001     351      1030       select obj.owner
   521 EXEC      1         0       0         0    exception when NO_DATA_FOUND
   523 EXEC      1         7       7         7       g_rec.error_message := 'Unable to find Database Object "' ||
   525 UNKN      0         1       1         1    end;
   526 EXEC      4        37       3        20 end find_dbout;
   530 ANNO      1         4       4         4    procedure t_find_dbout
   535 ANNO      1         1       1         1       l_pname      varchar2(128) := 'WT_PROFILE_FIND_DBOUT';
   536 ANNO      0         3       1         1       procedure run_find_dbout is begin
   537 ANNO      4         8       1         3          l_recSAVE := g_rec;
   538 ANNO      4         3       1         1          g_rec := l_recNULL;
   539 ANNO      4         3       1         1          find_dbout(l_pname);
   540 ANNO      4        17       2         7          l_recTEST := g_rec;
   541 ANNO      4         3       1         1          g_rec := l_recSAVE;
   542 ANNO      4         1       0         1       end run_find_dbout;
   545 ANNO      1         1       1         1       wt_assert.g_testcase := 'Find DBOUT Setup';
   546 ANNO      1         1       1         1       compile_db_object
   550 ANNO      1         1       1         1       l_recTEST := g_rec;
   551 ANNO      1         2       1         1       wt_assert.eq
   555 ANNO      1         1       1         1       wt_assert.eq
   559 ANNO      1         1       1         1       wt_assert.eq
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   563 ANNO      1         1       1         1       wt_assert.isnull
   567 ANNO      1         1       1         1       wt_assert.g_testcase := 'Find DBOUT Happy Path 1';
   568 ANNO      1         4       4         4       compile_db_object
   572 ANNO      1         1       1         1       run_find_dbout;
   573 ANNO      1         3       3         3       wt_assert.isnull
   576 ANNO      1         1       1         1       wt_assert.isnull
   579 ANNO      1         1       1         1       wt_assert.isnull
   582 ANNO      1         1       1         1       wt_assert.isnull
   586 ANNO      1         0       0         0       wt_assert.g_testcase := 'Find DBOUT Happy Path 2';
   587 ANNO      1         6       6         6       compile_db_object
   594 ANNO      1         1       1         1       run_find_dbout;
   595 ANNO      1        11       5         6       wt_assert.eq
   599 ANNO      1         1       1         1       wt_assert.eq
   603 ANNO      1         1       1         1       wt_assert.eq
   607 ANNO      1         1       1         1       wt_assert.isnull
   611 ANNO      1         1       1         1       wt_assert.g_testcase := 'Find DBOUT Happy Path 3';
   612 ANNO      1         8       1         7       compile_db_object
   620 ANNO      1         1       1         1       run_find_dbout;
   621 ANNO      1         5       2         3       wt_assert.eq
   625 ANNO      1         1       1         1       wt_assert.eq
   629 ANNO      1         0       0         0       wt_assert.eq
   633 ANNO      1         1       1         1       wt_assert.isnull
   637 ANNO      1         1       1         1       wt_assert.g_testcase := 'Find DBOUT Sad Path 1';
   638 ANNO      1      1830    1830      1830       compile_db_object
   645 ANNO      1         0       0         0       run_find_dbout;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   646 ANNO      1         3       3         3       wt_assert.isnull
   649 ANNO      1         1       1         1       wt_assert.isnull
   652 ANNO      1         0       0         0       wt_assert.isnull
   655 ANNO      1         1       1         1       wt_assert.eq
   660 ANNO      1         0       0         0       wt_assert.g_testcase := 'Find DBOUT Teardown';
   661 ANNO      1         0       0         0       drop_db_object(l_pname, 'package');
   662 ANNO      1         3       3         3    end t_find_dbout;
   667 EXEC      8        37       3         6 procedure load_anno_aa
   669 UNKN      0         4       1         1    cursor c_find_begin is
   670 EXEC      8       928      97       149       select line
   677 ANNO      0         4       1         1        order by line;
   679 ANNO      0         3       0         1    cursor c_find_end (in_line in number, in_col in number) is
   680 ANNO      8       738      48       112       with q1 as (
   697 UNKN      0         3       0         1             ,col;
   700 EXEC      8         9       1         2    anno_aa.delete;
   701 EXEC      8         4       1         1    open c_find_begin;
   702 EXEC     16         0       0         0    loop
   703 EXEC     16      1541      16       203       fetch c_find_begin into buff_find_begin;
   704 EXEC     16        14       0         2       exit when c_find_begin%NOTFOUND;
   705 EXEC      8         3       0         1       open c_find_end (buff_find_begin.line, buff_find_begin.col);
   706 EXEC      8       801      81       118       fetch c_find_end into buff_find_end;
   707 EXEC      8         5       1         1       if c_find_end%NOTFOUND
   709 EXEC      2      1584     205      1378          select max(line)
   716 EXEC      8       197       6        53       close c_find_end;
   717 EXEC     34        33       0         8       for i in buff_find_begin.line + g_rec.trigger_offset ..
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   720 EXEC     26        48       1         7          anno_aa(i) := 'X';
   723 EXEC      8        97       9        20    close c_find_begin;
   724 EXEC      8        19       1         6 end load_anno_aa;
   728 ANNO      1         8       8         8    procedure t_load_anno_aa
   733 ANNO      1         0       0         0       l_pname      varchar2(128) := 'WT_PROFILE_LOAD_ANNO';
   735 ANNO      0        10       1         2       procedure run_load_anno is begin
   736 ANNO      7        13       1         3          l_recSAVE  := g_rec;
   737 ANNO      7        19       2         4          l_annoSAVE := anno_aa;
   738 ANNO      7        11       1         2          anno_aa.delete;
   739 ANNO      7        11       0         2          g_rec.dbout_owner    := USER;
   740 ANNO      7         5       1         1          g_rec.dbout_name     := l_pname;
   741 ANNO      7         3       1         1          g_rec.dbout_type     := 'PACKAGE BODY';
   742 ANNO      7         3       0         1          g_rec.trigger_offset := 0;
   743 ANNO      7         1       0         1          load_anno_aa;
   744 ANNO      7        40       1        13          l_annoTEST := anno_aa;
   745 ANNO      7        15       3         4          anno_aa := l_annoSAVE;
   746 ANNO      7        12       1         4          g_rec   := l_recSAVE;
   747 ANNO      7         4       1         1       end run_load_anno;
   750 ANNO      1         1       1         1       wt_assert.g_testcase := 'Load Anno Setup';
   751 ANNO      1         5       5         5       wt_assert.isnotnull
   754 ANNO      1         1       1         1       compile_db_object
   759 ANNO      1         1       1         1       wt_assert.g_testcase := 'Load Anno Happy Path 1';
   760 ANNO      1         6       6         6       compile_db_object
   764 ANNO      1         0       0         0       run_load_anno;
   765 ANNO      1         7       7         7       wt_assert.eq
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   770 ANNO      1         0       0         0       wt_assert.g_testcase := 'Load Anno Happy Path 2';
   771 ANNO      1         5       5         5       compile_db_object
   779 ANNO      1         0       0         0       run_load_anno;
   780 ANNO      1        13      13        13       wt_assert.eq
   784 ANNO      4         0       0         0       for i in 3 .. 5
   786 ANNO      3        11       2         6          wt_assert.eq
   792 ANNO      1         0       0         0       wt_assert.g_testcase := 'Load Anno Happy Path 3';
   793 ANNO      1         8       8         8       compile_db_object
   803 ANNO      1         0       0         0       run_load_anno;
   804 ANNO      1         5       5         5       wt_assert.eq
   808 ANNO      4         1       0         1       for i in 4 .. 6
   810 ANNO      3        10       2         5          wt_assert.eq
   816 ANNO      1         0       0         0       wt_assert.g_testcase := 'Load Anno Happy Path 4';
   817 ANNO      1         6       6         6       compile_db_object
   830 ANNO      1         0       0         0       run_load_anno;
   831 ANNO      1         6       6         6       wt_assert.eq
   835 ANNO      4         1       0         1       for i in 4 .. 6
   837 ANNO      3        10       2         5          wt_assert.eq
   842 ANNO      3         2       1         1       for i in 8 .. 10
   844 ANNO      3         8       2         3          wt_assert.eq
   850 ANNO      1         0       0         0       wt_assert.g_testcase := 'Load Anno Sad Path 1';
   851 ANNO      1         3       3         3       compile_db_object
   858 ANNO      1         0       0         0       run_load_anno;
   859 ANNO      1         4       4         4       wt_assert.eq
   864 ANNO      1         0       0         0       wt_assert.g_testcase := 'Load Anno Sad Path 2';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   865 ANNO      1         5       5         5       compile_db_object
   877 ANNO      1         0       0         0       run_load_anno;
   878 ANNO      1         5       5         5       wt_assert.eq
   882 ANNO      4         0       0         0       for i in 4 .. 6
   884 ANNO      3        10       2         5          wt_assert.eq
   890 ANNO      1         1       1         1       wt_assert.g_testcase := 'Load Anno Sad Path 3';
   891 ANNO      1         5       5         5       compile_db_object
   903 ANNO      1         0       0         0       run_load_anno;
   904 ANNO      1         6       6         6       wt_assert.eq
   908 ANNO      6         2       0         1       for i in 4 .. 8
   910 ANNO      5        13       2         5          wt_assert.eq
   916 ANNO      1         1       1         1       wt_assert.g_testcase := 'Load Anno Teardown';
   917 ANNO      1         1       1         1       drop_db_object(l_pname, 'package');
   918 ANNO      1         3       3         3       wt_assert.isnotnull
   921 ANNO      1         4       4         4    end t_load_anno_aa;
   926 EXEC      1        10       1         9 procedure insert_dbout_profile
   931 UNKN      0        16       2         4    procedure l_set_status is begin
   932 EXEC      6        14       2         3       if anno_aa.EXISTS(prof_rec.line)
   935 EXEC      1         1       1         1          prof_rec.status := 'ANNO';
   936 EXEC      1         1       1         1          return;
   938 EXEC      5         2       0         1       if prof_rec.total_occur > 0
   941 EXEC      2         1       0         1          prof_rec.status := 'EXEC';
   942 EXEC      2         1       0         1          return;
   944 EXEC      3         0       0         0       if    prof_rec.total_occur = 0
   948 EXEC      2        45      16        29          if regexp_like(prof_rec.text, '^[[:space:]]*' ||
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   953 EXEC      1         1       1         1             prof_rec.status := 'EXCL';
   956 EXEC      1         0       0         0             prof_rec.status := 'NOTX';
   958 EXEC      2         5       2         3          return;
   961 EXEC      1         1       1         1       prof_rec.status := 'UNKN';
   962 EXEC      1         1       1         1    end l_set_status;
   963 EXEC      1        15      15        15 begin
   964 EXEC      1         0       0         0    prof_rec.test_run_id := g_rec.test_run_id;
   965 EXEC      1         0       0         0    load_anno_aa;
   966 EXEC      3       558       1       440    for buf1 in (
   967#NOTX#     0         0       0         0       select src.line
   987 EXEC      6         6       1         1       prof_rec.line        := buf1.line;
   988 EXEC      6         3       1         1       prof_rec.total_occur := buf1.total_occur;
   989 EXEC      6         0       0         0       prof_rec.total_time  := buf1.total_time;
   990 EXEC      6         1       0         1       prof_rec.min_time    := buf1.min_time;
   991 EXEC      6         1       0         1       prof_rec.max_time    := buf1.max_time;
   992 EXEC      6         7       1         2       prof_rec.text        := buf1.text;
   993 EXEC      6         2       1         1       prof_rec.status      := NULL;
   994 EXEC      6         2       0         1       l_set_status;
   995 EXEC      6         1       0         1       l_max_line := buf1.line;
   996 EXEC      6       757      74       361       insert into wt_dbout_profiles values prof_rec;
   999 EXEC      1       191     191       191    update wt_dbout_profiles
  1005 EXEC      1       157     157       157    COMMIT;
  1008 EXEC      1         5       5         5    anno_aa.delete;
  1009 EXEC      1         1       1         1    delete_plsql_profiler_recs(g_rec.prof_runid);
  1010 EXEC      1         8       8         8 end insert_dbout_profile;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1014 ANNO      1         6       6         6    procedure t_insert_dbout_profile
  1020 ANNO      1         0       0         0       c_test_run_id  constant number := -97;
  1021 ANNO      1         1       1         1       l_pname        varchar2(128) := 'WT_PROFILE_INSERT_DBOUT';
  1024 ANNO      0         7       1         2       procedure insert_plsql_profiler_data
  1030 ANNO      6         3       0         1          data_rec.line#       := in_line#;
  1031 ANNO      6         2       1         1          data_rec.total_occur := in_total_occur;
  1032 ANNO      6         3       0         1          data_rec.total_time  := in_total_time;
  1034 ANNO      6      3154      95      2405             insert into plsql_profiler_data values data_rec;
  1035 ANNO      6      1322      77       574             commit;
  1036 ANNO      6        14       1         6             l_sqlerrm := SQLERRM;
  1037 ANNO      0         0       0         0          exception when others then
  1038 ANNO      0         0       0         0             l_sqlerrm := SQLERRM;
  1039 ANNO      0         0       0         0          end;
  1040 ANNO      6        42       3        15          wt_assert.eq (
  1044 ANNO      6         5       0         1       end insert_plsql_profiler_data;
  1045 ANNO      0        13       1         2       procedure test_dbout_profiler
  1051 ANNO     12        46       3         7          wt_assert.eqqueryvalue
  1059 ANNO     12         4       0         1       end test_dbout_profiler;
  1062 ANNO      1         1       1         1       wt_assert.g_testcase := 'Insert DBOUT Profile Setup';
  1063 ANNO      1         1       1         1       compile_db_object
  1067 ANNO      1         8       8         8       compile_db_object
  1077 ANNO      1         0       0         0       insert_plsql_profiler_records(c_test_run_id);
  1078 ANNO      1         1       1         1       count_plsql_profiler_records(c_test_run_id, 1);
  1079 ANNO      1         0       0         0       insert_test_runs(c_test_run_id, 'Insert DBOUT Test');
  1081 ANNO      1         1       1         1       units_rec.runid        := c_test_run_id;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1082 ANNO      1         0       0         0       units_rec.unit_number  := 1;
  1083 ANNO      1         2       0         2       units_rec.unit_owner   := USER;
  1084 ANNO      1         1       1         1       units_rec.unit_name    := l_pname;
  1085 ANNO      1         1       1         1       units_rec.unit_type    := 'PACKAGE BODY';
  1086 ANNO      1         1       1         1       units_rec.total_time   := 0;
  1088 ANNO      1       498     498       498          insert into plsql_profiler_units values units_rec;
  1089 ANNO      1        85      85        85          commit;
  1090 ANNO      1         6       6         6          l_err_stack := dbms_utility.format_error_stack     ||
  1092 ANNO      0         0       0         0       exception when others then
  1093 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1095 ANNO      0         0       0         0       end;
  1096 ANNO      1         2       2         2       wt_assert.isnull (
  1099 ANNO      1        39      39        39       wt_assert.eqqueryvalue
  1106 ANNO      1         0       0         0       data_rec.runid       := c_test_run_id;
  1107 ANNO      1         0       0         0       data_rec.unit_number := 1;
  1108 ANNO      1         0       0         0       data_rec.min_time    := 0;
  1109 ANNO      1         0       0         0       data_rec.max_time    := 1;
  1110 ANNO      1         0       0         0       insert_plsql_profiler_data(1, 0, 0);
  1111 ANNO      1         2       2         2       insert_plsql_profiler_data(2, 0, 1);
  1112 ANNO      1         0       0         0       insert_plsql_profiler_data(3, 1, 1);
  1113 ANNO      1         0       0         0       insert_plsql_profiler_data(5, 1, 1);
  1114 ANNO      1         0       0         0       insert_plsql_profiler_data(7, 1, 1);
  1115 ANNO      1         0       0         0       insert_plsql_profiler_data(8, 0, 0);
  1116 ANNO      1         8       8         8       wt_assert.eqqueryvalue
  1123 ANNO      1         1       1         1       wt_assert.g_testcase := 'Insert DBOUT Profile Happy Path';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1124 ANNO      1         1       1         1       l_recSAVE := g_rec;
  1125 ANNO      1         0       0         0       g_rec.test_run_id     := c_test_run_id;
  1126 ANNO      1         1       0         1       g_rec.dbout_owner     := USER;
  1127 ANNO      1         1       1         1       g_rec.dbout_name      := l_pname;
  1128 ANNO      1         1       1         1       g_rec.dbout_type      := 'PACKAGE BODY';
  1129 ANNO      1         2       2         2       g_rec.prof_runid      := c_test_run_id;
  1130 ANNO      1         1       1         1       g_rec.trigger_offset  := 0;
  1131 ANNO      1         1       1         1       g_rec.error_message   := '';
  1133 ANNO      1         0       0         0          insert_dbout_profile;
  1134 ANNO      1         6       6         6          l_err_stack := dbms_utility.format_error_stack     ||
  1136 ANNO      0         0       0         0       exception when others then
  1137 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1139 ANNO      0         0       0         0       end;
  1140 ANNO      1         4       4         4       g_rec := l_recSAVE;
  1141 ANNO      1         4       4         4       wt_assert.isnull (
  1145 ANNO      1         1       1         1       test_dbout_profiler(1, 'STATUS', 'EXCL');
  1146 ANNO      1         3       3         3       test_dbout_profiler(1, 'TEXT',   'package body WT_PROFILE_INSERT_DBOUT is' || CHR(10));
  1147 ANNO      1         0       0         0       test_dbout_profiler(2, 'STATUS', 'UNKN');
  1148 ANNO      1         2       2         2       test_dbout_profiler(2, 'TEXT',   'begin' || CHR(10));
  1149 ANNO      1         0       0         0       test_dbout_profiler(3, 'STATUS', 'EXEC');
  1150 ANNO      1         1       1         1       test_dbout_profiler(3, 'TEXT',   '  l_junk := 1;' || CHR(10));
  1151 ANNO      1         1       1         1       test_dbout_profiler(5, 'STATUS', 'ANNO');
  1152 ANNO      1         2       2         2       test_dbout_profiler(5, 'TEXT',   '  l_junk := 2;' || CHR(10));
  1153 ANNO      1         0       0         0       test_dbout_profiler(7, 'STATUS', 'EXEC');
  1154 ANNO      1         2       2         2       test_dbout_profiler(7, 'TEXT',   '  l_junk := 3;' || CHR(10));
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1155 ANNO      1         0       0         0       test_dbout_profiler(8, 'STATUS', 'EXCL');
  1156 ANNO      1         0       0         0       test_dbout_profiler(8, 'TEXT',   'end WT_PROFILE_INSERT_DBOUT;');
  1158 ANNO      1         0       0         0       wt_assert.g_testcase := 'Insert DBOUT Profile Teardown';
  1159 ANNO      1         0       0         0       delete_dbout_profiles(c_test_run_id);
  1160 ANNO      1         0       0         0       delete_test_runs(c_test_run_id);
  1161 ANNO      1         0       0         0       delete_plsql_profiler_records(c_test_run_id);
  1162 ANNO      1         1       1         1       count_plsql_profiler_records(c_test_run_id, 0);
  1163 ANNO      1         0       0         0       drop_db_object(l_pname, 'package');
  1164 ANNO      1         3       3         3    end t_insert_dbout_profile;
  1174 EXEC      3         9       3         3 procedure initialize
  1187 EXEC      3         2       1         1    out_dbout_owner     := '';
  1188 EXEC      3         0       0         0    out_dbout_name      := '';
  1189 EXEC      3         0       0         0    out_dbout_type      := '';
  1190 EXEC      3         1       0         1    out_trigger_offset  := NULL;
  1191 EXEC      3         0       0         0    out_profiler_runid  := NULL;
  1192 EXEC      3         0       0         0    out_error_message   := '';
  1193 EXEC      3         1       0         1    g_rec := l_rec_NULL;
  1194 EXEC      3         0       0         0    if in_test_run_id is null
  1196 EXEC      1        69      69        69       raise_application_error  (-20004, 'i_test_run_id is null');
  1198 EXEC      2         1       0         1    g_rec.test_run_id := in_test_run_id;
  1199 EXEC      2         1       0         1    find_dbout(in_pkg_name => in_runner_name);
  1200 EXEC      2         3       1         2    if g_rec.dbout_name is null
  1202 EXEC      1         0       0         0       return;
  1204 EXEC      1         2       2         2    out_dbout_owner    := g_rec.dbout_owner;
  1205 EXEC      1         1       1         1    out_dbout_name     := g_rec.dbout_name;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1206 EXEC      1         1       1         1    out_dbout_type     := g_rec.dbout_type;
  1207 EXEC      1         0       0         0    out_error_message  := g_rec.error_message;
  1208 EXEC      1         2       1         1    g_rec.trigger_offset := wt_profiler.trigger_offset
  1212 EXEC      1         0       0         0    out_trigger_offset := g_rec.trigger_offset;
  1213 EXEC      1         3       0         3    l_retnum := dbms_profiler.INTERNAL_VERSION_CHECK;
  1214 EXEC      1         1       1         1    if l_retnum <> 0 then
  1217 ANNO      0         0       0         0       raise_application_error(-20005,
  1222 EXEC      1        22       0        16    l_retnum := dbms_profiler.START_PROFILER(run_number => g_rec.prof_runid);
  1223 EXEC      2         1       0         1    if l_retnum <> 0 then
  1225 ANNO      0         0       0         0       raise_application_error(-20006,
  1229 EXEC      2         3       0         3    out_profiler_runid := g_rec.prof_runid;
  1230 EXEC      2         8       0         8 end initialize;
  1234 ANNO      0        11      11        11    procedure t_initialize
  1236 ANNO      1         1       1         1       c_test_run_id   constant number := -96;
  1237 ANNO      1         1       1         1       l_pname         varchar2(128) := 'WT_PROFILE_INITIALIZE';
  1244 ANNO      1         2       2         2       wt_assert.g_testcase := 'Insert DBOUT Profile Setup';
  1245 ANNO      1         0       0         0       compile_db_object
  1250 ANNO      1         0       0         0       wt_assert.g_testcase := 'Initialize Test HAPPY Path 1';
  1251 ANNO      1         5       5         5       compile_db_object
  1257 ANNO      1         1       1         1       l_recSAVE := g_rec;
  1258 ANNO      1         5       2         3       initialize
  1267 ANNO      1         1       1         1       l_recTEST := g_rec;
  1268 ANNO      1         0       0         0       g_rec := l_recSAVE;
  1270 ANNO      1         2       2         2       wt_assert.isnull (
  1273 ANNO      1         1       1         1       wt_assert.isnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1276 ANNO      1         0       0         0       wt_assert.isnull (
  1279 ANNO      1         1       1         1       wt_assert.isnull (
  1282 ANNO      1         1       1         1       wt_assert.isnull (
  1285 ANNO      1         1       1         1       wt_assert.isnull (
  1289 ANNO      1         1       1         1       wt_assert.isnull (
  1292 ANNO      1         0       0         0       wt_assert.isnull (
  1295 ANNO      1         0       0         0       wt_assert.isnull (
  1298 ANNO      1         1       1         1       wt_assert.isnull (
  1301 ANNO      1         1       1         1       wt_assert.isnull (
  1304 ANNO      1         1       1         1       wt_assert.isnull (
  1308 ANNO      1         1       1         1       wt_assert.g_testcase := 'Initialize Test HAPPY Path 2';
  1309 ANNO      1         3       3         3       compile_db_object
  1316 ANNO      1         1       1         1       l_recSAVE := g_rec;
  1317 ANNO      1         3       1         2       initialize
  1326 ANNO      1         2       2         2       l_recTEST := g_rec;
  1327 ANNO      1         1       1         1       g_rec := l_recSAVE;
  1329 ANNO      1         4       1         3       wt_assert.eq (
  1333 ANNO      1         1       1         1       wt_assert.eq (
  1337 ANNO      1         0       0         0       wt_assert.eq (
  1341 ANNO      1         4       4         4       wt_assert.isnotnull (
  1344 ANNO      1         1       1         1       wt_assert.eq (
  1348 ANNO      1         1       1         1       wt_assert.isnull (
  1352 ANNO      1         1       1         1       wt_assert.eq (
  1356 ANNO      1         1       1         1       wt_assert.eq (
  1360 ANNO      1         0       0         0       wt_assert.eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1364 ANNO      1         2       2         2       wt_assert.isnotnull (
  1367 ANNO      1         1       1         1       wt_assert.eq (
  1371 ANNO      1         1       1         1       wt_assert.isnull (
  1375 ANNO      1         1       1         1       wt_assert.g_testcase := 'Initialize Test Sad Path 1';
  1376 ANNO      1         1       1         1       l_recSAVE := g_rec;
  1377 ANNO      0         1       1         1       begin
  1378 ANNO      1         1       1         1          initialize
  1387 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
  1388 ANNO      1         0       0         0       exception when others then
  1389 ANNO      1       176     176       176          l_sqlerrm := SQLERRM;
  1390 ANNO      0         2       2         2       end;
  1391 ANNO      1         2       2         2       l_recTEST := g_rec;
  1392 ANNO      1         1       1         1       g_rec := l_recSAVE;
  1393 ANNO      1         2       2         2       wt_assert.eq (
  1397 ANNO      1         2       2         2    end t_initialize;
  1404 EXEC      4         7       1         3 procedure finalize
  1408 EXEC      4         2       1         1    if g_rec.dbout_name is null
  1410 EXEC      1         0       0         0       return;
  1412 EXEC      3         1       1         1    if g_rec.test_run_id is null
  1414 EXEC      1        21      21        21       raise_application_error (-20000, 'g_rec.test_run_id is null');
  1418 ANNO      0         1       1         1       if not g_skip_this
  1422 ANNO      1         2       2         2    dbms_profiler.STOP_PROFILER;
  1423 ANNO      0         0       0         0    insert_dbout_profile;
  1428 EXEC      1         0       0         0    g_rec := l_rec_NULL;
  1429 EXEC      1         0       0         0 end finalize;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1433 ANNO      1         6       1         5    procedure t_finalize
  1441 ANNO      1         2       2         2       wt_assert.g_testcase := 'Finalize Happy Path 1';
  1442 ANNO      1         1       1         1       l_recSAVE := g_rec;
  1443 ANNO      1         1       1         1       g_rec.dbout_name := '';
  1444 ANNO      1         1       1         1       wt_assert.isnull (
  1448 ANNO      1         0       0         0          finalize;
  1449 ANNO      1         5       5         5          l_err_stack := dbms_utility.format_error_stack     ||
  1451 ANNO      0         0       0         0       exception when others then
  1452 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1454 ANNO      0         0       0         0       end;
  1455 ANNO      1         1       1         1       g_rec := l_recSAVE;
  1456 ANNO      1         0       0         0       wt_assert.isnull (
  1460 ANNO      1         0       0         0       wt_assert.g_testcase := 'Finalize Happy Path 2';
  1461 ANNO      1         0       0         0       wt_assert.isnotnull (
  1464 ANNO      1         1       1         1       wt_assert.isnotnull (
  1467 ANNO      1         1       1         1       wt_assert.isnotnull (
  1470 ANNO      1         3       3         3       wt_assert.isnotnull (
  1473 ANNO      1         1       1         1       wt_assert.isnotnull (
  1476 ANNO      1         1       1         1       wt_assert.isnull (
  1480 ANNO      1         0       0         0       l_recSAVE := g_rec;
  1481 ANNO      1         0       0         0       g_skip_this := TRUE;
  1483 ANNO      1         0       0         0          finalize;
  1484 ANNO      1         2       2         2          l_err_stack := dbms_utility.format_error_stack     ||
  1486 ANNO      0         0       0         0       exception when others then
  1487 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1489 ANNO      0         0       0         0       end;
  1490 ANNO      1         0       0         0       g_skip_this := FALSE;
  1491 ANNO      1         0       0         0       l_recTEST := g_rec;
  1492 ANNO      1         0       0         0       g_rec := l_recSAVE;
  1493 ANNO      1         1       1         1       wt_assert.isnull (
  1497 ANNO      1         1       1         1       wt_assert.isnull (
  1500 ANNO      1         1       1         1       wt_assert.isnull (
  1503 ANNO      1         1       1         1       wt_assert.isnull (
  1506 ANNO      1         1       1         1       wt_assert.isnull (
  1509 ANNO      1         1       1         1       wt_assert.isnull (
  1513 ANNO      1         0       0         0       wt_assert.g_testcase := 'Finalize Sad Path 1';
  1514 ANNO      1         1       1         1       l_recSAVE := g_rec;
  1515 ANNO      1         0       0         0       g_rec.dbout_name  := 'BOGUS1';
  1516 ANNO      1         0       0         0       g_rec.test_run_id := NULL;
  1518 ANNO      1         0       0         0          finalize;
  1519 ANNO      1         0       0         0       exception when others then
  1520 ANNO      1        19      19        19          l_sqlerrm := SQLERRM;
  1521 ANNO      0         1       1         1       end;
  1522 ANNO      1         1       1         1       g_rec := l_recSAVE;
  1523 ANNO      1         1       1         1       wt_assert.eq (
  1527 ANNO      1         0       0         0    end t_finalize;
  1533 UNKN      0        28       2        12 function trigger_offset
  1540 EXEC      4         1       0         1    if dbout_type_in != 'TRIGGER'
  1542 EXEC      2         1       0         1       return 0;
  1544 EXEC      4      1877       1      1643    for buff in (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1545#NOTX#     0         0       0         0       select line, text from all_source
  1551 EXEC      4      1855       5      1654       if regexp_instr(buff.text,
  1563 EXEC      1        82       4        78          return buff.line - 1;
  1566 EXEC      1         0       0         0    return 0;
  1567 EXEC      4        16       3        13 end trigger_offset;
  1571 ANNO      0         2       2         2    procedure t_trigger_offset
  1575 ANNO      1         0       0         0       wt_assert.g_testcase := 'Trigger Offset Happy Path';
  1576 ANNO      1        35      35        35       wt_assert.eq (
  1582 ANNO      1         5       4         4       wt_assert.eq (
  1589 ANNO      1         1       1         1       wt_assert.g_testcase := 'Trigger Offset Sad Path';
  1590 ANNO      1         6       6         6       wt_assert.eq (
  1596 ANNO      1         2       2         2    end t_trigger_offset;
  1601 UNKN      0        18       3         6 function calc_pct_coverage
  1606 EXEC      8       666       2       358    for buff in (
  1612 EXEC      4         3       0         2       if buff.hits + buff.misses = 0
  1614 EXEC      1        21       1        14          return -1;
  1616 EXEC      3         8       1         5          return round(100 * buff.hits / (buff.hits + buff.misses),2);
  1619#NOTX#     0         0       0         0    return null;
  1620 EXEC      4         7       1         2 END calc_pct_coverage;
  1624 ANNO      0         4       4         4    procedure t_calc_pct_coverage
  1626 ANNO      1         1       1         1       c_test_run_id  constant number := -95;
  1630 ANNO      1         1       1         1       wt_assert.g_testcase := 'Calculate Percentage Offset Setup';
  1631 ANNO      1         1       1         1       insert_test_runs(c_test_run_id, 'Calculate Offset Test');
  1632 ANNO      1         1       1         1       l_rec.test_run_id  := c_test_run_id;
  1633 ANNO      1         0       0         0       l_rec.total_occur  := 1;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1634 ANNO      1         0       0         0       l_rec.total_time   := 1;
  1635 ANNO      1         0       0         0       l_rec.min_time     := 1;
  1636 ANNO      1         0       0         0       l_rec.max_time     := 1;
  1638 ANNO      1         1       1         1       wt_assert.g_testcase := 'Calculate Percentage Offset Happy Path 1';
  1639 ANNO      1         0       0         0       l_rec.line         := 1;
  1640 ANNO      1         0       0         0       l_rec.status       := 'EXEC';
  1641 ANNO      1         4       4         4       l_rec.text         := 'Testing ' || l_rec.line;
  1642 ANNO      1         0       0         0       insert_dbout_profiles(l_rec);
  1644 ANNO      1         1       1         1       l_rec.line         := 2;
  1645 ANNO      1         0       0         0       l_rec.status       := 'NOTX';
  1646 ANNO      1         2       2         2       l_rec.text         := 'Testing ' || l_rec.line;
  1647 ANNO      1         1       1         1       insert_dbout_profiles(l_rec);
  1649 ANNO      1         1       1         1       l_rec.line         := 3;
  1650 ANNO      1         1       1         1       l_rec.status       := 'EXEC';
  1651 ANNO      1         2       2         2       l_rec.text         := 'Testing ' || l_rec.line;
  1652 ANNO      1         1       1         1       insert_dbout_profiles(l_rec);
  1653 ANNO      1         5       1         4       wt_assert.eq (
  1657 ANNO      1         0       0         0       delete_dbout_profiles(c_test_run_id);
  1659 ANNO      1         0       0         0       wt_assert.g_testcase := 'Calculate Percentage Offset Happy Path 2';
  1661 ANNO      1         1       1         1       l_rec.line         := 1;
  1662 ANNO      1         1       1         1       l_rec.status       := 'EXCL';
  1663 ANNO      1         2       2         2       l_rec.text         := 'Testing ' || l_rec.line;
  1664 ANNO      1         0       0         0       insert_dbout_profiles(l_rec);
  1666 ANNO      1         0       0         0       l_rec.line         := 2;
  1667 ANNO      1         0       0         0       l_rec.status       := 'UNKN';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1668 ANNO      1         2       2         2       l_rec.text         := 'Testing ' || l_rec.line;
  1669 ANNO      1         1       1         1       insert_dbout_profiles(l_rec);
  1671 ANNO      1         0       0         0       l_rec.line         := 3;
  1672 ANNO      1         0       0         0       l_rec.status       := 'EXCL';
  1673 ANNO      1         2       2         2       l_rec.text         := 'Testing ' || l_rec.line;
  1674 ANNO      1         1       1         1       insert_dbout_profiles(l_rec);
  1675 ANNO      1         4       4         4       wt_assert.eq (
  1679 ANNO      1         0       0         0       delete_dbout_profiles(c_test_run_id);
  1681 ANNO      1         0       0         0       wt_assert.g_testcase := 'Calculate Percentage Offset Sad Path';
  1682 ANNO      1         2       2         2       wt_assert.isnull (
  1685 ANNO      1         2       2         2       wt_assert.isnull (
  1689 ANNO      1         0       0         0       wt_assert.g_testcase := 'Calculate Percentage Offset Teardown';
  1690 ANNO      1         1       1         1       delete_test_runs(c_test_run_id);
  1691 ANNO      1         2       2         2    end t_calc_pct_coverage;
  1696 EXEC      3         3       0         1 procedure delete_records
  1701 EXEC      3       353      64       161    select profiler_runid into l_profiler_runid
  1703 EXEC      1         1       1         1    delete_plsql_profiler_recs(l_profiler_runid);
  1704 EXEC      1       157     157       157    delete from wt_dbout_profiles
  1707 EXEC      2         0       0         0    when NO_DATA_FOUND
  1709 EXEC      2         1       0         1       return;
  1710 EXEC      3         3       1         1 end delete_records;
  1714 ANNO      0         4       4         4    procedure t_delete_records
  1716 ANNO      1         0       0         0       c_test_run_id  constant number := -98;
  1721 ANNO      1         1       1         1       wt_assert.g_testcase := 'Delete Records Setup';
  1722 ANNO      1         5       5         5       wt_assert.eqqueryvalue (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1727 ANNO      1         4       4         4       wt_assert.eqqueryvalue (
  1732 ANNO      1         1       1         1       insert_test_runs(c_test_run_id, 'Delete Records Test');
  1734 ANNO      1         1       1         1       l_rec.test_run_id  := c_test_run_id;
  1735 ANNO      1         0       0         0       l_rec.line         := 1;
  1736 ANNO      1         1       1         1       l_rec.status       := 'EXEC';
  1737 ANNO      1         0       0         0       l_rec.total_occur  := 1;
  1738 ANNO      1         0       0         0       l_rec.total_time   := 1;
  1739 ANNO      1         0       0         0       l_rec.min_time     := 1;
  1740 ANNO      1         0       0         0       l_rec.max_time     := 1;
  1741 ANNO      1         1       1         1       l_rec.text         := 'Testing';
  1742 ANNO      1         0       0         0       insert_dbout_profiles(l_rec);
  1744 ANNO      1         0       0         0       wt_assert.g_testcase := 'Delete Records Happy Path 1';
  1745 ANNO      0         0       0         0       begin
  1746 ANNO      1         1       1         1          delete_records(c_test_run_id);
  1747 ANNO      1         6       6         6          l_err_stack := dbms_utility.format_error_stack     ||
  1749 ANNO      0         0       0         0       exception when others then
  1750 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1752 ANNO      0         0       0         0       end;
  1753 ANNO      1         2       2         2       wt_assert.isnull (
  1756 ANNO      1         4       4         4       wt_assert.eqqueryvalue (
  1762 ANNO      1         1       1         1       wt_assert.g_testcase := 'Delete Records Sad Path 1';
  1764 ANNO      1         1       1         1          delete_records(-9876);
  1765 ANNO      1         2       2         2          l_err_stack := dbms_utility.format_error_stack     ||
  1767 ANNO      0         0       0         0       exception when others then
  1768 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1770 ANNO      0         0       0         0       end;
  1771 ANNO      1         2       2         2       wt_assert.isnull (
  1774 ANNO      1         2       2         2       wt_assert.eqqueryvalue (
  1780 ANNO      1         1       1         1       wt_assert.g_testcase := 'Delete Records Sad Path 2';
  1782 ANNO      1         0       0         0          delete_records(NULL);
  1783 ANNO      1         2       2         2          l_err_stack := dbms_utility.format_error_stack     ||
  1785 ANNO      0         0       0         0       exception when others then
  1786 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1788 ANNO      0         0       0         0       end;
  1789 ANNO      1         1       1         1       wt_assert.isnull (
  1792 ANNO      1         2       2         2       wt_assert.eqqueryvalue (
  1798 ANNO      1         0       0         0       wt_assert.g_testcase := 'Delete Records Teardown';
  1799 ANNO      1         1       1         1       delete_test_runs(c_test_run_id);
  1800 ANNO      1         1       1         1    end t_delete_records;
  1807 ANNO      0         0       0         0    procedure WTPLSQL_RUN  --% WTPLSQL SET DBOUT "WT_PROFILER" %--
  1810 ANNO      1         1       1         1       t_get_error_msg;
  1811 ANNO      1         1       1         1       t_delete_profiler_recs;
  1812 ANNO      1         0       0         0       t_find_dbout;
  1813 ANNO      1         0       0         0       t_load_anno_aa;
  1814 ANNO      1         0       0         0       t_insert_dbout_profile;
  1815 ANNO      1         0       0         0       t_initialize;
  1816 ANNO      1         0       0         0       t_finalize;
  1817 ANNO      1         0       0         0       t_trigger_offset;
  1818 ANNO      1         1       1         1       t_calc_pct_coverage;
  1819 ANNO      1         1       1         1       t_delete_records;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1820 ANNO      1         2       2         2    end WTPLSQL_RUN;
  1825 EXCL      0         0       0         0 end wt_profiler;


    wtPLSQL 1.1.0 - Run ID 42: 21-Apr-2018 05:41:11 PM

  Test Results for WTP.WT_RESULT
       Total Testcases:        7      Total Assertions:       36
  Minimum Elapsed msec:        0     Failed Assertions:        0
  Average Elapsed msec:        1      Error Assertions:        0
  Maximum Elapsed msec:       21            Test Yield:   100.00%
  Total Run Time (sec):      0.0

  Code Coverage for PACKAGE BODY WTP.WT_RESULT
    Total Source Lines:      177          Missed Lines:        0
  Minimum Elapsed usec:        0       Annotated Lines:      136
  Average Elapsed usec:       31        Excluded Lines:        2
  Maximum Elapsed usec:     1058         Unknown Lines:        3
 Trigger Source Offset:        0         Code Coverage:   100.00%

WTP.WT_RESULT Details (Test Run ID 42)
----------------------------------------
 ---- Test Case: Initialize Happy Path
 PASS   21ms g_results_rec.test_run_id. EQ - Expected "-99" and got "-99"
 PASS    0ms g_results_rec.result_seq. EQ - Expected "0" and got "0"
 PASS    0ms g_results_rec.executed_dtm. ISNOTNULL - Expected NOT NULL and got "21-APR-2018 17:41:11.120000"
 PASS    0ms g_results_rec.elapsed_msecs. ISNULL - Expected NULL and got ""
 PASS    0ms g_results_rec.assertion. ISNULL - Expected NULL and got ""
 PASS    0ms g_results_rec.status. ISNULL - Expected NULL and got ""
 PASS    0ms g_results_rec.details. ISNULL - Expected NULL and got ""
 PASS    0ms g_results_rec.testcase. ISNULL - Expected NULL and got ""
 PASS    0ms g_results_rec.message. ISNULL - Expected NULL and got ""
 PASS    0ms g_results_nt.COUNT. EQ - Expected "1" and got "1"
 PASS    0ms g_results_nt(1).test_run_id. ISNULL - Expected NULL and got ""
 PASS    1ms Raises ORA-20009. RAISES/THROWS - Expected exception "%ORA-20009: "in_test_run_id" cannot be NULL%". Actual exception raised was "ORA-20009: "in_test_run_id" cannot be NULL". Exception raised by: "wt_result.initialize(NULL)".
 ---- Test Case: Finalize Happy Path
 PASS    2ms Before NULL Test Record Count. EQ - Expected "0" and got "0"
 PASS    0ms After NULL Test Record Count. EQ - Expected "0" and got "0"
 PASS    0ms g_results_rec.test_run_id. ISNULL - Expected NULL and got ""
 PASS    0ms g_results_nt.COUNT. EQ - Expected "1" and got "1"
 PASS    0ms Record Count Test. EQ - Expected "1" and got "1"
 ---- Test Case: Ad Hoc Save Happy Path Setup
 PASS    0ms l_dbmsout_buff.COUNT - 1. ISNOTNULL - Expected NOT NULL and got "0"
 ---- Test Case: Ad Hoc Save Testing Happy Path
 PASS    1ms DBMS_OUTPUT Status. EQ - Expected "0" and got "0"
 PASS    0ms DBMS_OUTPUT Line. ISNOTNULL - Expected NOT NULL and got " ---- Test Case: Ad Hoc Save Testing Happy Path\n PASS t_save_testing Message. SELFTEST1 - t_save_testing Details"
 PASS    0ms Save Testing NULL Test DBMS_OUTPUT 3 Message. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: Ad Hoc Save Happy Path Teardown
 PASS    0ms l_dbmsout_buff.COUNT - 1. ISNOTNULL - Expected NOT NULL and got "0"
 ---- Test Case: Save Testing Happy Path
 PASS    0ms t_save_testing Testing Message. SELFTEST2 - t_save_testing Testing Details
 PASS    0ms g_results_nt.COUNT. EQ - Expected "24" and got "24"
 PASS    0ms g_results_nt(23).assetion. EQ - Expected "SELFTEST2" and got "SELFTEST2"
 PASS    0ms g_results_nt(23).status. EQ - Expected "PASS" and got "PASS"
 PASS    0ms g_results_nt(23).details. EQ - Expected "t_save_testing Testing Details" and got "t_save_testing Testing Details"
 PASS    0ms g_results_nt(23).testcase. EQ - Expected "Save Testing Happy Path" and got "Save Testing Happy Path"
 PASS    0ms g_results_nt(23).message. EQ - Expected "t_save_testing Testing Message" and got "t_save_testing Testing Message"
 PASS    0ms g_results_nt(23).elapsed_msecs. ISNOTNULL - Expected NOT NULL and got "0"
 PASS    0ms g_results_nt(23).executed_dtm. ISNOTNULL - Expected NOT NULL and got "21-APR-2018 17:41:11.126000"
 PASS    0ms g_results_nt(23).result_seq. ISNOTNULL - Expected NOT NULL and got "23"
 ---- Test Case: Delete Records Happy Path
 PASS    0ms Before Insert Count. ISNOTNULL - Expected NOT NULL and got "0"
 PASS    2ms After Insert Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_results where test_run_id = -99
 PASS    1ms After Test Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_results where test_run_id = -99
 PASS    0ms After ROLLBACK Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_results where test_run_id = -99

WTP.WT_RESULT PACKAGE BODY Code Coverage Details (Test Run ID 42)
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
     1 EXCL      0         0       0         0 package body wt_result
    19 EXEC      2        44      11        32 procedure initialize
    24 EXEC      2         1       0         1    if in_test_run_id is NULL
    26 EXEC      1        66      66        66       raise_application_error(-20009, '"in_test_run_id" cannot be NULL');
    28 EXEC      1         1       1         1    g_results_rec := l_results_recNULL;
    29 EXEC      1         1       1         1    g_results_rec.test_run_id  := in_test_run_id;
    30 EXEC      1         0       0         0    g_results_rec.result_seq   := 0;
    31 EXEC      1         7       3         4    g_results_rec.executed_dtm := systimestamp;
    32 EXEC      1         3       3         3    g_results_nt := results_nt_type(null);
    33 EXEC      1         2       2         2 end initialize;
    37 ANNO      1        18      18        18    procedure t_initialize
    45 ANNO      1        14      14        14       l_results_ntSAVE  := g_results_nt;
    46 ANNO      1         1       1         1       l_results_recSAVE := g_results_rec;
    47 ANNO      1         0       0         0       g_results_rec     := l_results_recNULL;
    48 ANNO      1         1       1         1       initialize(-99);
    49 ANNO      1         0       0         0       l_results_recTEST := g_results_rec;
    50 ANNO      1         1       1         1       g_results_rec     := l_results_recSAVE;
    51 ANNO      1         2       2         2       l_results_ntTEST  := g_results_nt;
    52 ANNO      1         1       1         1       g_results_nt      := l_results_ntSAVE;
    54 ANNO      2        20       1        19       wt_assert.g_testcase := 'Initialize Happy Path';
    55 ANNO      1         9       9         9       wt_assert.eq (
    59 ANNO      1         3       3         3       wt_assert.eq (
    63 ANNO      1        16      16        16       wt_assert.isnotnull (
    66 ANNO      1         1       1         1       wt_assert.isnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
    69 ANNO      1         1       1         1       wt_assert.isnull (
    73 ANNO      1         0       0         0       wt_assert.isnull (
    76 ANNO      1         0       0         0       wt_assert.isnull (
    79 ANNO      1         1       1         1       wt_assert.isnull (
    82 ANNO      1         0       0         0       wt_assert.isnull (
    85 ANNO      1         2       2         2       wt_assert.eq (
    90 ANNO      1         2       2         2       wt_assert.isnull (
    93 ANNO      1         1       1         1       wt_assert.raises (
    97 ANNO      1         2       2         2    end t_initialize;
   104 EXEC      2        23      10        13 procedure finalize
   108 EXEC      2        22       8        14 begin
   109 EXEC      2         2       1         1    if g_results_rec.test_run_id IS NULL
   111 EXEC      1         8       8         8       return;
   114 EXEC      1       193     193       193    forall i in 1 .. g_results_nt.COUNT - 1
   115 UNKN      0         1       1         1       insert into wt_results values g_results_nt(i);
   116 EXEC      1        79      79        79    COMMIT;
   117 EXEC      1         5       5         5    g_results_nt := results_nt_type(null);
   118 EXEC      1         0       0         0    g_results_rec := l_results_recNULL;
   119 EXEC      1         1       1         1    g_results_nt := results_nt_type(null);
   120 EXEC      1        10      10        10 end finalize;
   124 ANNO      1        13      13        13    procedure t_finalize
   136 ANNO      1         1       1         1       wt_assert.g_testcase := '   ';
   137 ANNO      1        15      15        15       l_results_ntSAVE     := g_results_nt;    -- Capture Original Values
   138 ANNO      1         1       1         1       l_results_recSAVE    := g_results_rec;   -- Capture Original Values
   141 ANNO      1         0       0         0       g_results_rec  := l_results_recNULL;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   142 ANNO      1         1       1         1       g_results_rec.test_run_id   := -99;
   143 ANNO      1         0       0         0       g_results_rec.result_seq    := 1;
   144 ANNO      1         2       1         1       g_results_rec.executed_dtm  := systimestamp;
   145 ANNO      1         0       0         0       g_results_rec.elapsed_msecs := 99;
   146 ANNO      1         0       0         0       g_results_rec.assertion     := 'FINALTEST';
   147 ANNO      1         0       0         0       g_results_rec.status        := wt_assert.C_PASS;
   148 ANNO      1         0       0         0       g_results_rec.details       := 'This is a WT_RESULT.FINALIZE Test';
   149 ANNO      1         8       8         8       g_results_nt := results_nt_type(null);
   150 ANNO      1         2       2         2       g_results_nt(1) := g_results_rec;
   151 ANNO      1         1       1         1       g_results_nt.extend;  -- Finalize expects that last element to be NULL
   154 ANNO      1         0       0         0       g_results_rec.test_run_id   := NULL;
   155 ANNO      1       216     216       216       select count(*)
   159 ANNO      1         0       0         0       finalize;
   160 ANNO      1        80      80        80       select count(*)
   164 ANNO      1        52      52        52       rollback;    -- UNDO all database changes
   165 ANNO      1         0       0         0       g_results_rec.test_run_id   := -99;
   168 ANNO      1         0       0         0       l_test_runs_rec.id           := -99;
   169 ANNO      1         3       1         2       l_test_runs_rec.start_dtm    := systimestamp;
   170 ANNO      1         1       1         1       l_test_runs_rec.runner_name  := 'Finalize Test';
   171 ANNO      1         1       1         1       l_test_runs_rec.runner_owner := 'BOGUS';
   172 ANNO      1       295     295       295       insert into wt_test_runs values l_test_runs_rec;
   173 ANNO      1       128     128       128       commit;      -- Must commit because finalize is AUTONOMOUS TRANSACTION
   174 ANNO      1         1       1         1       finalize;    -- g_results_nt is still loaded with one element
   175 ANNO      1         2       2         2       l_results_ntTEST  := g_results_nt;
   176 ANNO      1         0       0         0       l_results_recTEST := g_results_rec;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   177 ANNO      1        97      97        97       select count(*)
   181 ANNO      1       396     396       396       delete from wt_results where test_run_id = -99;
   182 ANNO      1       211     211       211       delete from wt_test_runs where id = -99;
   183 ANNO      1       101     101       101       commit;      -- UNDO all database changes
   185 ANNO      1         2       2         2       wt_assert.g_testcase := 'Finalize Happy Path';
   187 ANNO      1         4       4         4       g_results_rec := l_results_recSAVE;
   188 ANNO      1        17      17        17       g_results_nt  := l_results_ntSAVE;
   189 ANNO      1         9       9         9       wt_assert.eq (
   193 ANNO      1         2       2         2       wt_assert.eq (
   197 ANNO      1         1       1         1       wt_assert.isnull (
   200 ANNO      1         2       2         2       wt_assert.eq (
   204 ANNO      1         2       2         2       wt_assert.eq (
   208 ANNO      1         4       4         4    end t_finalize;
   213 UNKN      0       115       2         8 procedure save
   222 EXEC     37        11       1         1    if g_results_rec.test_run_id IS NULL
   224 EXEC      1        12      12        12       wt_text_report.ad_hoc_result
   230 EXEC      1         2       2         2       return;
   233 EXEC     36        49       1         3    l_current_tstamp := systimestamp;
   234 EXEC     36       322       4        43    g_results_rec.elapsed_msecs := extract(day from (
   237 EXEC     36        11       0         1    g_results_rec.executed_dtm  := l_current_tstamp;
   239 EXEC     36        12       1         1    g_results_rec.assertion     := in_assertion;
   240 EXEC     36        10       0         1    g_results_rec.status        := in_status;
   241 EXEC     36        37       1         4    g_results_rec.details       := substr(in_details,1,4000);
   242 EXEC     36        14       0         1    g_results_rec.testcase      := substr(in_testcase,1,50);
   243 EXEC     36        19       0         1    g_results_rec.message       := substr(in_message,1,200);
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   245 EXEC     36        13       1         2    g_results_rec.result_seq    := g_results_rec.result_seq + 1;
   246 EXEC     36        79       1         7    g_results_nt(g_results_nt.COUNT) := g_results_rec;
   247 EXEC     36        68       1         7    g_results_nt.extend;
   248 EXEC     36        52       1         4 end save;
   252 ANNO      0         9       9         9    procedure t_save_testing
   255 ANNO      1         5       5         5       l_dbmsout_buff   l_dbmsout_buff_type := l_dbmsout_buff_type(1);
   262 ANNO      1         1       1         1       wt_assert.g_testcase := 'Ad Hoc Save Happy Path Setup';
   264 ANNO      1         0       0         0       loop
   265 ANNO      1        44      44        44          DBMS_OUTPUT.GET_LINE (
   268 ANNO      1         1       1         1          exit when l_dbmsout_stat != 0;
   269 ANNO      0         0       0         0          l_dbmsout_buff(l_dbmsout_buff.COUNT) := l_dbmsout_line;
   270 ANNO      0         0       0         0          l_dbmsout_buff.extend;
   272 ANNO      1         3       3         3       wt_assert.isnotnull (
   276 ANNO      1         0       0         0       wt_assert.g_testcase := 'Ad Hoc Save Testing Happy Path';
   277 ANNO      1         1       1         1       l_test_run_id  := g_results_rec.test_run_id;
   278 ANNO      1         0       0         0       g_results_rec.test_run_id := NULL;
   279 ANNO      1         0       0         0       wt_result.save (
   285 ANNO      1         1       1         1       g_results_rec.test_run_id := l_test_run_id;
   286 ANNO      1         5       1         4       DBMS_OUTPUT.GET_LINE (
   290 ANNO      1         2       2         2       wt_assert.eq (
   294 ANNO      1         2       0         2       if not wt_assert.last_pass
   296 ANNO      0         0       0         0          return;  -- DBMS_OUPUT.GET_LINE failes. End this now.
   298 ANNO      1         0       0         0       wt_assert.isnotnull (
   301 ANNO      1         6       6         6       wt_assert.this (
   305 ANNO      1         1       0         1       if not wt_assert.last_pass
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   308 ANNO      0         0       0         0          DBMS_OUTPUT.PUT_LINE(l_dbmsout_line);
   309 ANNO      0         0       0         0          return;
   312 ANNO      1         0       0         0       wt_assert.g_testcase := 'Ad Hoc Save Happy Path Teardown';
   314 ANNO      1         1       1         1       for i in 1 .. l_dbmsout_buff.COUNT - 1
   316 ANNO      0         0       0         0          DBMS_OUTPUT.PUT_LINE(l_dbmsout_buff(i));
   318 ANNO      1         1       1         1       wt_assert.isnotnull (
   322 ANNO      1         1       1         1       wt_assert.g_testcase := 'Save Testing Happy Path';
   323 ANNO      1         1       1         1       l_nt_count     := g_results_nt.COUNT;
   324 ANNO      1         0       0         0       wt_result.save (
   330 ANNO      1         2       2         2       wt_assert.eq (
   334 ANNO      1         0       0         0       if not wt_assert.last_pass
   339 ANNO      1         2       2         2       wt_assert.eq (
   343 ANNO      1         2       2         2       wt_assert.eq (
   347 ANNO      1         2       2         2       wt_assert.eq (
   351 ANNO      1         1       1         1       wt_assert.eq (
   356 ANNO      1         2       2         2       wt_assert.eq (
   360 ANNO      1         2       2         2       wt_assert.isnotnull (
   363 ANNO      1        15      15        15       wt_assert.isnotnull (
   366 ANNO      1         4       4         4       wt_assert.isnotnull (
   372 ANNO      1         1       1         1    end t_save_testing;
   377 UNKN      0         2       2         2 procedure delete_records
   381 EXEC      1       396     396       396    delete from wt_results
   383 EXEC      1         1       1         1 end delete_records;
   387 ANNO      1         4       0         4    procedure t_delete_records
   394 ANNO      1         0       0         0       wt_assert.g_testcase := 'Delete Records Happy Path';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   395 ANNO      1       154     154       154       select count(*) into l_num_recs
   398 ANNO      1         2       2         2       wt_assert.isnotnull (
   402 ANNO      1         1       1         1       l_test_runs_rec.id           := -99;
   403 ANNO      1         2       1         1       l_test_runs_rec.start_dtm    := sysdate;
   404 ANNO      1         0       0         0       l_test_runs_rec.runner_name  := 'Delete Records Test';
   405 ANNO      1         1       1         1       l_test_runs_rec.runner_owner := 'BOGUS';
   406 ANNO      1       293     293       293       insert into wt_test_runs values l_test_runs_rec;
   407 ANNO      1         0       0         0       l_results_rec.test_run_id   := -99;
   408 ANNO      1         0       0         0       l_results_rec.result_seq    := 1;
   409 ANNO      1         3       1         2       l_results_rec.executed_dtm  := sysdate;
   410 ANNO      1         0       0         0       l_results_rec.elapsed_msecs := 99;
   411 ANNO      1         1       1         1       l_results_rec.assertion     := 'DELRECTEST';
   412 ANNO      1         1       1         1       l_results_rec.status        := wt_assert.C_PASS;
   413 ANNO      1         4       4         4       l_results_rec.details       := 'This is a WT_RESULT.DELETE_RECORDS Test';
   414 ANNO      1      1058    1058      1058       insert into wt_results values l_results_rec;
   416 ANNO      1        12      12        12       wt_assert.eqqueryvalue (
   421 ANNO      1         0       0         0       delete_records(-99);
   422 ANNO      1         5       5         5       wt_assert.eqqueryvalue (
   427 ANNO      1       378     378       378       rollback;
   428 ANNO      1         5       5         5       wt_assert.eqqueryvalue (
   433 ANNO      1         1       1         1    end t_delete_records;
   440 ANNO      0         6       6         6    procedure WTPLSQL_RUN  --% WTPLSQL SET DBOUT "WT_RESULT" %--
   443 ANNO      1         0       0         0       t_initialize;
   444 ANNO      1         0       0         0       t_finalize;
   445 ANNO      1         0       0         0       t_save_testing;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   446 ANNO      1         0       0         0       t_delete_records;
   447 ANNO      1         1       1         1    end WTPLSQL_RUN;
   452 EXCL      0         0       0         0 end wt_result;



PL/SQL procedure successfully completed.

