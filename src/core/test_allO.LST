
    wtPLSQL 1.1.0 - Run ID 421: 20-May-2018 03:39:54 PM

  Test Results for WTP.WTPLSQL
       Total Testcases:       10      Total Assertions:       34
  Minimum Elapsed msec:        0     Failed Assertions:        0
  Average Elapsed msec:        4      Error Assertions:        0
  Maximum Elapsed msec:       86            Test Yield:   100.00%
  Total Run Time (sec):      0.2

 - WTP.WTPLSQL Test Result Details (Test Run ID 421)
-----------------------------------------------------------
 ---- Test Case: Show Version Happy Path
 PASS   14ms Test Existing Version. ISNOTNULL - Expected NOT NULL and got "1.1.0"
 PASS    1ms Test New Version. EQ - Expected "TESTING" and got "TESTING"
 PASS    1ms Return to Existing Version. EQ - Expected "1.1.0" and got "1.1.0"
 ---- Test Case: CHECK_RUNNER Sad Path 1
 PASS    1ms Null RUNNER_NAME. EQ - Expected "ORA-20001: RUNNER_NAME is null" and got "ORA-20001: RUNNER_NAME is null"
 ---- Test Case: CHECK_RUNNER Sad Path 2
 PASS    5ms Invalid RUNNER_NAME. EQ - Expected "ORA-20002: RUNNER_NAME "BOGUS.WTPLSQL_RUN" is not valid" and got "ORA-20002: RUNNER_NAME "BOGUS.WTPLSQL_RUN" is not valid"
 ---- Test Case: INSERT_TEST_RUN Happy Path 1
 PASS    5ms Number of Records. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_test_runs where id = 421
 PASS    2ms Records After Delete. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = 421
 ---- Test Case: INSERT_TEST_RUN Sad Path 1
 PASS    0ms l_dbmsout_buff.COUNT - 1. ISNOTNULL - Expected NOT NULL and got "0"
 PASS    3ms Number of Records should stay the same. EQQUERYVALUE - Expected "144" and got "144" for Query: select count(*) from wt_test_runs
 PASS    0ms DBMS_OUTPUT Status. EQ - Expected "0" and got "0"
 PASS    0ms DBMS_OUTPUT Line. ISNOTNULL - Expected NOT NULL and got "ORA-01400: cannot insert NULL into ("WTP"."WT_TEST_RUNS"."START_DTM")\nORA-06512: at "WTP.WTPLSQL", line 106\n"
 PASS    0ms Confirm DBMS_OUTPUT Line text. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms l_dbmsout_buff.COUNT - 1. ISNOTNULL - Expected NOT NULL and got "0"
 ---- Test Case: TEST_ALL Happy Path
 PASS    6ms test_all_aa.EXISTS('WTPLSQL'). THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: DELETE_RUNS Happy Path 1
 PASS    4ms Number of Records Before Insert. ISNOTNULL - Expected NOT NULL and got "20"
 PASS    0ms Number of Records Before Insert <= 20. THIS - Expected "TRUE" and got "TRUE"
 PASS    1ms Number of Records After Insert. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_test_runs where id = 421
 PASS    3ms Number of Records After Delete. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = 421
 ---- Test Case: DELETE_RUNS Happy Path 2
 PASS    0ms Confirm number of records. EQQUERYVALUE - Expected "20" and got "20" for Query: select count(*) from wt_test_runs where runner_owner = 'WTP' and runner_name = 'WTPLSQL'
 PASS    8ms Check Added 20 records. EQQUERYVALUE - Expected "40" and got "40" for Query: select count(*) from wt_test_runs where runner_owner = 'WTP' and runner_name = 'WTPLSQL'
 PASS   86ms Check number of records reduced. EQQUERYVALUE - Expected "20" and got "20" for Query: select count(*) from wt_test_runs where runner_owner = 'WTP' and runner_name = 'WTPLSQL'
 PASS    0ms Confirm original number of records. EQQUERYVALUE - Expected "20" and got "20" for Query: select count(*) from wt_test_runs where runner_owner = 'WTP' and runner_name = 'WTPLSQL'
 ---- Test Case: DELETE_RUNS Sad Path 1
 PASS    1ms Delete Runs(-9995). ISNULL - Expected NULL and got ""
 ---- Test Case: TEST_RUNS_REC_AND_TABLE Happy Path
 PASS    0ms g_test_runs_rec.id. ISNOTNULL - Expected NOT NULL and got "421"
 PASS    0ms g_test_runs_rec.start_dtm. ISNOTNULL - Expected NOT NULL and got "20-MAY-18 03.39.54.339000 PM"
 PASS    0ms g_test_runs_rec.runner_owner. ISNOTNULL - Expected NOT NULL and got "WTP"
 PASS    0ms g_test_runs_rec.runner_name. EQ - Expected "WTPLSQL" and got "WTPLSQL"
 PASS    0ms g_test_runs_rec.dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms g_test_runs_rec.dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms g_test_runs_rec.dbout_type. ISNULL - Expected NULL and got ""
 PASS    0ms g_test_runs_rec.profiler_runid. ISNULL - Expected NULL and got ""
 PASS    0ms g_test_runs_rec.end_dtm. ISNULL - Expected NULL and got ""
 PASS    0ms g_test_runs_rec.error_message. ISNULL - Expected NULL and got ""
 PASS    2ms TEST_RUNS Record for this TEST_RUN. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from WT_TEST_RUNS where id = '421'


    wtPLSQL 1.1.0 - Run ID 422: 20-May-2018 03:39:54 PM

  Test Results for WTP.WT_ASSERT
       Total Testcases:      150      Total Assertions:      404
  Minimum Elapsed msec:        0     Failed Assertions:        0
  Average Elapsed msec:        7      Error Assertions:        0
  Maximum Elapsed msec:     1134            Test Yield:   100.00%
  Total Run Time (sec):      2.9

  Code Coverage for PACKAGE BODY WTP.WT_ASSERT
       Annotated Lines:     1103  Total Profiled Lines:     1464
        Excluded Lines:        6  Total Executed Lines:      309
  Minimum Elapsed usec:        0    Not Executed Lines:        0
  Average Elapsed usec:      483         Unknown Lines:       46
  Maximum Elapsed usec:   332876         Code Coverage:   100.00%
 Trigger Source Offset:        0

 - WTP.WT_ASSERT Test Result Details (Test Run ID 422)
-----------------------------------------------------------
 ---- Test Case: BOOLEAN_TO_STATUS
 PASS 1134ms Test for "TRUE" conversion. EQ - Expected "TRUE" and got "TRUE"
 PASS    6ms Test for "FALSE" conversion. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms Test for NULL. ISNULL - Expected NULL and got ""
 ---- Test Case: COMPARE_QUERIES Bad Query Test 1
 PASS    4ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "ORA-06550: line 2, column 60:\nPL/SQL: ORA-00942: table or view does not exist\nORA-06550: line 2, column 18:\nPL/SQL: SQL Statement ignored\nORA-06550: line 2, column 11:\nPLS-00341: declaration of cursor 'CUR' is incomplete or malformed\nORA-06550: line 3, column 8:\nPL/SQL: Item ignored\nORA-06550: line 6, column 19:\nPLS-00320: the declaration of the type of this expression is incomplete or malformed\nORA-06550: line 6, column 4:\nPL/SQL: SQL Statement ignored\nFAILURE of Compare Query: with check_query as (select bogus123 from bogus456), against_query as (select bogus987 from bogus654), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2;"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: COMPARE_QUERIES Bad Query Test 2
 PASS   71ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Comparison Query: with check_query as (select table_name from user_tables), against_query as (select tablespace_name from user_tables), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: NLS Settings
 PASS    0ms get_NLS_DATE_FORMAT 1. EQ - Expected "DD-MON-YYYY" and got "DD-MON-YYYY"
 PASS    1ms get_NLS_DATE_FORMAT 2. EQ - Expected "DD-MON-YYYY HH24:MI:SS" and got "DD-MON-YYYY HH24:MI:SS"
 PASS    0ms get_NLS_TIMESTAMP_FORMAT 2. EQ - Expected "DD-MON-YYYY" and got "DD-MON-YYYY"
 PASS    0ms get_NLS_TIMESTAMP_FORMAT 2. EQ - Expected "DD-MON-YYYY HH24:MI:SS.FF6" and got "DD-MON-YYYY HH24:MI:SS.FF6"
 PASS    1ms get_NLS_TIMESTAMP_TZ_FORMAT 2. EQ - Expected "DD-MON-YYYY" and got "DD-MON-YYYY"
 PASS    0ms get_NLS_TIMESTAMP_TZ_FORMAT 2. EQ - Expected "DD-MON-YYYY HH24:MI:SS.FF6 TZH:TZM" and got "DD-MON-YYYY HH24:MI:SS.FF6 TZH:TZM"
 ---- Test Case: Last Values Tests
 PASS    0ms Last Pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms Last Assert. EQ - Expected "EQ" and got "EQ"
 PASS    0ms Last MSG. EQ - Expected "Last Assert" and got "Last Assert"
 PASS    0ms Last Details. EQ - Expected "Expected "Last Assert" and got "Last Assert"" and got "Expected "Last Assert" and got "Last Assert""
 ---- Test Case: RESET_GLOBALS
 PASS    0ms temp_testcase. ISNULL - Expected NULL and got ""
 PASS    0ms temp_rec.last_pass. ISNULL - Expected NULL and got ""
 PASS    0ms temp_rec.raise_exception. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_assert. ISNULL - Expected NULL and got ""
 PASS    0ms temp_rec.last_msg. ISNULL - Expected NULL and got ""
 PASS    0ms temp_rec.last_details. ISNULL - Expected NULL and got ""
 ---- Test Case: This Happy Path
 PASS    0ms Run Test. THIS - Expected "TRUE" and got "TRUE"
 PASS    1ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "THIS" and got "THIS"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details. EQ - Expected "Expected "TRUE" and got "TRUE"" and got "Expected "TRUE" and got "TRUE""
 ---- Test Case: This Sad Path 1
 PASS    0ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: This Sad Path 2
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: This Sad Path 3
 PASS    0ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: EQ VARCHAR2 Happy Path 1
 PASS    0ms Run Test. EQ - Expected "X" and got "X"
 PASS    0ms temp_rec.last_pass value. ISNOTNULL - Expected NOT NULL and got "TRUE"
 PASS    0ms temp_rec.last_pass. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert value. ISNOTNULL - Expected NOT NULL and got "EQ"
 PASS    1ms temp_rec.last_assert. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_msg value. ISNOTNULL - Expected NOT NULL and got "Run Test"
 PASS    0ms temp_rec.last_msg. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "X" and got "X""
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ VARCHAR2 Happy Path 2
 PASS    0ms Run Test. EQ - Expected "X" and got "X"
 ---- Test Case: EQ VARCHAR2 Happy Path 3
 PASS    0ms Run Test. EQ - Expected "" and got ""
 ---- Test Case: EQ VARCHAR2 Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "X"
 PASS    1ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "Y"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ VARCHAR2 Sad Path 2
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ VARCHAR2 Sad Path 3
 PASS    0ms check_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "Y"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ VARCHAR2 Sad Path 4
 PASS    0ms check_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ VARCHAR2 Sad Path 5
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "X"
 PASS    1ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "Y"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ VARCHAR2 Sad Path 6
 PASS    0ms check_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "Y"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ ROWID Happy Path 1
 PASS    0ms Run Test. EQ - Expected "AAAFd1AAFAAAABSAA/" and got "AAAFd1AAFAAAABSAA/"
 ---- Test Case: EQ ROWID Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "AAAFd1AAFAAAABSAA/"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "AAAFd1AAFAAAABSAB/"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ LONG Happy Path 1
 PASS    1ms Run Test. EQ - Expected "0123456789ABCDEF0123456789ABCDEF" and got "0123456789ABCDEF0123456789ABCDEF"
 ---- Test Case: EQ LONG Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "0123456789ABCDEF0123456789ABCDEF"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "FEDCBA9876543210FEDCBA9876543210"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ RAW Happy Path 1
 PASS    0ms Run Test. EQ - Expected "2345" and got "2345"
 ---- Test Case: EQ RAW Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "2345"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "6789"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ LANG RAW Happy Path 1
 PASS    0ms Run Test. EQ - Expected "0123456789ABCDEF0123456789ABCDEF" and got "0123456789ABCDEF0123456789ABCDEF"
 ---- Test Case: EQ LONG RAW Sad Path 1
 PASS    1ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "0123456789ABCDEF0123456789ABCDEF"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "FEDCBA9876543210FEDCBA9876543210"
 PASS    0ms Sad Path 1. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ NVARCHAR2 Happy Path 1
 PASS    0ms Run Test. EQ - Expected "NCHAR1" and got "NCHAR1"
 ---- Test Case: EQ NVARCHAR2 Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "NCHAR1"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "NCHAR2"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BOOLEAN Happy Path 1
 PASS    0ms Run Test. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: EQ BOOLEAN Happy Path 2
 PASS    0ms Run Test. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: EQ BOOLEAN Happy Path 3
 PASS    0ms Run Test. EQ - Expected "" and got ""
 ---- Test Case: EQ BOOLEAN Happy Sad 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "FALSE"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "TRUE"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BOOLEAN Happy Sad 2
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "FALSE"
 PASS    0ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BOOLEAN Happy Sad 3
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "FALSE"
 PASS    1ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "TRUE"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BOOLEAN Happy Sad 4
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "FALSE"
 PASS    0ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ NUMBER Happy Path 1
 PASS    0ms Run Test. EQ - Expected "4" and got "4"
 ---- Test Case: EQ NUMBER Happy Path 2
 PASS    0ms Run Test. EQ - Expected "9876543210987654321098765432109876543210" and got "9876543210987654321098765432109876543210"
 ---- Test Case: EQ NUMBER Happy Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "4"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "5"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ PLS_INTEGER Happy Path 1
 PASS    0ms Run Test. EQ - Expected "2" and got "2"
 ---- Test Case: EQ PLS_INTEGER Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "2"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "3"
 PASS    1ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ DATE Happy Path 1
 PASS    0ms Run Test. EQ - Expected "20-MAY-2018 15:39:54" and got "20-MAY-2018 15:39:54"
 ---- Test Case: EQ DATE Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "20-MAY-2018 15:39:54"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "20-MAY-2018 16:39:54"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ TIMSETAMP Happy Path 1
 PASS    0ms EQ TIMSETAMP Happy Path 1. EQ - Expected "20-MAY-2018 15:39:54.368000" and got "20-MAY-2018 15:39:54.368000"
 ---- Test Case: EQ TIMSETAMP Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "20-MAY-2018 15:39:54.368000"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "20-MAY-2018 16:39:54"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ TIMSETAMP WITH LOCAL TIME ZONE Happy Path 1
 PASS    0ms Run Test. EQ - Expected "20-MAY-2018 15:39:54.368000 -05:00" and got "20-MAY-2018 15:39:54.368000 -05:00"
 ---- Test Case: EQ TIMSETAMP WITH LOCAL TIME ZONE Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "20-MAY-2018 15:39:54.368000"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "20-MAY-2018 16:39:54"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ TIMSETAMP WITH TIME ZONE Happy Path 1
 PASS    0ms Run Test. EQ - Expected "20-MAY-2018 15:39:54.368000 -05:00" and got "20-MAY-2018 15:39:54.368000 -05:00"
 ---- Test Case: EQ TIMSETAMP WITH TIME ZONE Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "20-MAY-2018 15:39:54.368000 -05:00"
 PASS    1ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "20-MAY-2018 16:39:54"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ INTERVAL DAY TO SECOND Happy Path 1
 PASS    0ms Run Test. EQ - Expected "+01 01:01:01.001000" and got "+01 01:01:01.001000"
 ---- Test Case: EQ INTERVAL DAY TO SECOND Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "+01 01:01:01.001000"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "+02 02:02:02.002000"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ INTERVAL YEAR TO MONTH Happy Path 1
 PASS    0ms Run Test. EQ - Expected "+01-01" and got "+01-01"
 ---- Test Case: EQ INTERVAL YEAR TO MONTH Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "+01-01"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "+02-02"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ XMLTYPE Happy Path 1
 PASS   66ms Run Test. EQ - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=
awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/e
zsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   "
 PASS    0ms temp_rec.last_pass value. ISNOTNULL - Expected NOT NULL and got "TRUE"
 PASS    0ms temp_rec.last_pass. THIS - Expected "TRUE" and got "TRUE"
 PASS    1ms  g_rec.last_assert value. ISNOTNULL - Expected NOT NULL and got "EQ"
 PASS    0ms temp_rec.last_assert. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_msg value. ISNOTNULL - Expected NOT NULL and got "Run Test"
 PASS    0ms temp_rec.last_msg. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://
www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alt
ernate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF0"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ XMLTYPE Sad Path 1
 PASS   32ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsea
rch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber>\n          </ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n          </ns1:referencedIDVID>\n        </ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n 
         <ns1:effectiveDate>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:curr"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?><note>2</note>"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ XMLTYPE Sad Path 2
 PASS   23ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ CLOB Happy Path 1
 PASS    2ms Run Test. EQ - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=F
PDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https
://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J"
 PASS    0ms temp_rec.last_pass value. ISNOTNULL - Expected NOT NULL and got "TRUE"
 PASS    1ms temp_rec.last_pass. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert value. ISNOTNULL - Expected NOT NULL and got "EQ"
 PASS    0ms temp_rec.last_assert. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_msg value. ISNOTNULL - Expected NOT NULL and got "Run Test"
 PASS    0ms temp_rec.last_msg. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/ht
ml" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n 
   <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ CLOB Happy Path 2
 PASS    4ms Run Test. EQ - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=F
PDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https
://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J"
 ---- Test Case: EQ CLOB Happy Path 3
 PASS    1ms Run Test. EQ - Expected "" and got ""
 ---- Test Case: EQ CLOB Sad Path 1
 PASS    4ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://
www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <
ns1:effectiveDate>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    1ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "This is another clob."
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ CLOB Sad Path 2
 PASS    2ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 PASS    1ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ CLOB Sad Path 3
 PASS    2ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://
www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <
ns1:effectiveDate>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    0ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    1ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ CLOB Sad Path 4
 PASS    3ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://
www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <
ns1:effectiveDate>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    0ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    1ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ NCLOB Happy Path 1
 PASS   20ms Run Test. EQ - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=F
PDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https
://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J"
 ---- Test Case: EQ NCLOB Happy Path 2
 PASS   17ms Run Test. EQ - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=F
PDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https
://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J"
 ---- Test Case: EQ NCLOB Happy Path 3
 PASS    1ms Run Test. EQ - Expected "" and got ""
 ---- Test Case: EQ NCLOB Sad Path 1
 PASS   18ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://
www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <
ns1:effectiveDate>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    1ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "This is another clob."
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ NCLOB Sad Path 2
 PASS   15ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ NCLOB Sad Path 3
 PASS   14ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://
www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <
ns1:effectiveDate>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    1ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ NCLOB Sad Path 4
 PASS   12ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://
www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <
ns1:effectiveDate>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    1ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BLOB Happy Path 1
 PASS    0ms Run Test. EQ - DBMS_LOB.COMPARE on BLOBs, compare_results: 0
 PASS    0ms temp_rec.last_pass value. ISNOTNULL - Expected NOT NULL and got "TRUE"
 PASS    0ms temp_rec.last_pass. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert value. ISNOTNULL - Expected NOT NULL and got "EQ"
 PASS    0ms temp_rec.last_assert. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_msg value. ISNOTNULL - Expected NOT NULL and got "Run Test"
 PASS    0ms temp_rec.last_msg. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "DBMS_LOB.COMPARE on BLOBs, compare_results: 0"
 PASS    1ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BLOB Happy Path 2
 PASS    0ms Run Test. EQ - DBMS_LOB.COMPARE on BLOBs, compare_results: 0
 ---- Test Case: EQ BLOB Happy Path 3
 PASS    0ms Run Test. EQ - DBMS_LOB.COMPARE on BLOBs, compare_results: -1
 ---- Test Case: EQ BLOB Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - BLOB is NOT NULL
 PASS    1ms against_this_in value. ISNOTNULL - BLOB is NOT NULL
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BLOB Sad Path 2
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BLOB Sad Path 3
 PASS    0ms check_this_in value. ISNOTNULL - BLOB is NOT NULL
 PASS    1ms against_this_in value. ISNULL - BLOB is NULL
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BLOB Sad Path 4
 PASS    0ms check_this_in value. ISNOTNULL - BLOB is NOT NULL
 PASS    0ms against_this_in value. ISNULL - BLOB is NULL
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNOTNULL VARCHAR2 Happy Path 1
 PASS    1ms Run Test. ISNOTNULL - Expected NOT NULL and got "X"
 PASS    0ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    1ms temp_rec.last_assert. EQ - Expected "ISNOTNULL" and got "ISNOTNULL"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details. EQ - Expected "Expected NOT NULL and got "X"" and got "Expected NOT NULL and got "X""
 ---- Test Case: ISNOTNULL VARCHAR2 Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNOTNULL VARCHAR2 Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNOTNULL BOOLEAN Happy Path 1
 PASS    0ms Run Test. ISNOTNULL - Expected NOT NULL and got "TRUE"
 ---- Test Case: ISNOTNULL BOOLEAN Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNOTNULL BOOLEAN Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNOTNULL CLOB Happy Path 1
 PASS    2ms Run Test. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.go
v/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:effecti
veDate>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    0ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "ISNOTNULL" and got "ISNOTNULL"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alterna
te" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:
00:00</ns1:signedDate>\n          <ns1:effectiveDate>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-1"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNOTNULL CLOB Sad Path 1
 PASS    1ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNOTNULL CLOB Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNOTNULL BLOB Happy Path 1
 PASS    0ms Run Test. ISNOTNULL - BLOB is NOT NULL
 PASS    0ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "ISNOTNULL" and got "ISNOTNULL"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details. EQ - Expected "BLOB is NOT NULL" and got "BLOB is NOT NULL"
 ---- Test Case: ISNOTNULL BLOB Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNOTNULL BLOB Sad Path 2
 PASS    1ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNULL VARCHAR2 Happy Path 1
 PASS    0ms Run Test. ISNULL - Expected NULL and got ""
 PASS    0ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "ISNULL" and got "ISNULL"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details. EQ - Expected "Expected NULL and got """ and got "Expected NULL and got """
 ---- Test Case: ISNULL VARCHAR2 Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNULL VARCHAR2 Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNULL BOOLEAN Happy Path 1
 PASS    0ms Run Test. ISNULL - Expected NULL and got ""
 ---- Test Case: ISNULL BOOLEAN Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNULL BOOLEAN Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNULL CLOB Happy Path 1
 PASS    1ms Run Test. ISNULL - Expected NULL and got ""
 PASS    0ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "ISNULL" and got "ISNULL"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details. EQ - Expected "Expected NULL and got """ and got "Expected NULL and got """
 ---- Test Case: ISNULL CLOB Sad Path 1
 PASS    3ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNULL CLOB Sad Path 2
 PASS    8ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNULL BLOB Happy Path 1
 PASS    0ms Run Test. ISNULL - BLOB is NULL
 PASS    0ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "ISNULL" and got "ISNULL"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details. EQ - Expected "BLOB is NULL" and got "BLOB is NULL"
 ---- Test Case: ISNULL BLOB Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNULL BLOB Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: Raises Tests Happy Path 1
 PASS    2ms RAISES Varchar2 Test. RAISES/THROWS - Expected exception "%PLS-00302: component 'BOGUS' must be declared%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;".
 PASS    0ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "RAISES/THROWS" and got "RAISES/THROWS"
 PASS    0ms temp_rec.last_msg. EQ - Expected "RAISES Varchar2 Test" and got "RAISES Varchar2 Test"
 PASS    0ms temp_rec.last_details. EQ - Expected "Expected exception "%PLS-00302: component 'BOGUS' must be declared%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;"." and got "Expected exception "%PLS-00302: component 'BOGUS' must be declared%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;"."
 ---- Test Case: Raises Tests Happy Path 2
 PASS    1ms RAISES Number Test. RAISES/THROWS - Expected exception "%-00302%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;".
 PASS    0ms temp_rec.last_details value. EQ - Expected "Expected exception "%-00302%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;"." and got "Expected exception "%-00302%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;"."
 PASS    1ms THROWS Varchar2 Test. RAISES/THROWS - Expected exception "%PLS-00302: component 'BOGUS' must be declared%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;".
 PASS    0ms temp_rec.last_details value. EQ - Expected "Expected exception "%PLS-00302: component 'BOGUS' must be declared%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;"." and got "Expected exception "%PLS-00302: component 'BOGUS' must be declared%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;"."
 PASS    1ms THROWS Number Test. RAISES/THROWS - Expected exception "%-00302%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;".
 PASS    0ms temp_rec.last_details value. EQ - Expected "Expected exception "%-00302%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;"." and got "Expected exception "%-00302%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;"."
 ---- Test Case: Raises Tests Happy Path 3
 PASS    0ms RAISES Varchar2 No Error. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "begin wt_assert.set_NLS_DATE_FORMAT(wt_assert.get_NLS_DATE_FORMAT); end;".
 PASS    0ms temp_rec.last_details value. EQ - Expected "No exception was expected. Exception raised was "". Exception raised by: "begin wt_assert.set_NLS_DATE_FORMAT(wt_assert.get_NLS_DATE_FORMAT); end;"." and got "No exception was expected. Exception raised was "". Exception raised by: "begin wt_assert.set_NLS_DATE_FORMAT(wt_assert.get_NLS_DATE_FORMAT); end;"."
 PASS    1ms RAISES Number No Error. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "begin wt_assert.set_NLS_DATE_FORMAT(wt_assert.get_NLS_DATE_FORMAT); end;".
 PASS    0ms temp_rec.last_details value. EQ - Expected "No exception was expected. Exception raised was "". Exception raised by: "begin wt_assert.set_NLS_DATE_FORMAT(wt_assert.get_NLS_DATE_FORMAT); end;"." and got "No exception was expected. Exception raised was "". Exception raised by: "begin wt_assert.set_NLS_DATE_FORMAT(wt_assert.get_NLS_DATE_FORMAT); end;"."
 ---- Test Case: Raises Tests Sad Path 1
 PASS    1ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected exception "%Incorrect Exception%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;". Error Stack: ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored\nORA-06512: at "WTP.WT_ASSERT", line 2326\n"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: Raises Tests Sad Path 2
 PASS    0ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details. EQ - Expected "Expected exception "%Incorrect Exception%". No exception was raised by: "begin wt_assert.set_NLS_DATE_FORMAT; end;". Error Stack: " and got "Expected exception "%Incorrect Exception%". No exception was raised by: "begin wt_assert.set_NLS_DATE_FORMAT; end;". Error Stack: "
 ---- Test Case: EQQUERYVALUE VARCHAR2 Happy Path 1
 PASS    0ms Run Test. EQQUERYVALUE - Expected "X" and got "X" for Query: select dummy from DUAL
 PASS    1ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "EQQUERYVALUE" and got "EQQUERYVALUE"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details. EQ - Expected "Expected "X" and got "X" for Query: select dummy from DUAL" and got "Expected "X" and got "X" for Query: select dummy from DUAL"
 ---- Test Case: EQQUERYVALUE VARCHAR2 Happy Path 2
 PASS    0ms Run Test. EQQUERYVALUE - Expected "" and got "" for Query: select max(dummy) from DUAL where 0 = 1
 ---- Test Case: EQQUERYVALUE VARCHAR2 Sad Path 1
 PASS    0ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: EQQUERYVALUE VARCHAR2 Sad Path 2
 PASS    0ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE VARCHAR2 Sad Path 3
 PASS    1ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details. ISNOTNULL - Expected NOT NULL and got "Exception raised for Query: Garbage query that won't work\nORA-00900: invalid SQL statement\nORA-06512: at "WTP.WT_ASSERT", line 2586\n"
 PASS    0ms temp_rec.last_details value. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE XMLTYPE Happy Path 1
 PASS   67ms Run Test. EQQUERYVALUE - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;
indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.
fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " for Query: select temp_xml from wt_self_test where id = 1
 PASS    1ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "EQQUERYVALUE" and got "EQQUERYVALUE"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://
www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alt
ernate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF0"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE XMLTYPE Sad Path 1
 PASS   22ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "<?xml version="1.0" encoding="UTF-8"?><note>2</note>" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></ti
tle>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " for Query: select temp_xml from wt_self_test where id = 1"
 PASS    1ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE XMLTYPE Sad Path 2
 PASS   32ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    1ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE XMLTYPE Sad Path 3
 PASS    0ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details. ISNOTNULL - Expected NOT NULL and got "Exception raised for Query: Garbage query that won't work\nORA-00900: invalid SQL statement\nORA-06512: at "WTP.WT_ASSERT", line 2624\n"
 PASS    0ms temp_rec.last_details value. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE CLOB Happy Path 1
 PASS   15ms Run Test. EQQUERYVALUE - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/sea
rch.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" h
ref="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" for Query: select temp_clob from wt_self_test where id = 1
 PASS    1ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "EQQUERYVALUE" and got "EQQUERYVALUE"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/ht
ml" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n 
   <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE CLOB Happy Path 2
 PASS    0ms Run Test. EQQUERYVALUE - Expected "" and got "" for Query: select temp_clob from wt_self_test where 0 = 1
 ---- Test Case: EQQUERYVALUE CLOB Sad Path 1
 PASS    3ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "This is another clob." and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <li
nk rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" for Query: select temp_clob from wt_self_test where id = 1"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE CLOB Sad Path 2
 PASS    3ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE CLOB Sad Path 3
 PASS    0ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details. ISNOTNULL - Expected NOT NULL and got "Exception raised for Query: Garbage query that won't work\nORA-00900: invalid SQL statement\nORA-06512: at "WTP.WT_ASSERT", line 2660\n"
 PASS    1ms temp_rec.last_details value. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE BLOB Happy Path 1
 PASS    9ms Run Test. EQQUERYVALUE - DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_self_test where id = 1, compare_results: 0
 PASS    0ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "EQQUERYVALUE" and got "EQQUERYVALUE"
 PASS    1ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details. EQ - Expected "DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_self_test where id = 1, compare_results: 0" and got "DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_self_test where id = 1, compare_results: 0"
 ---- Test Case: EQQUERYVALUE BLOB Happy Path 2
 PASS    0ms Run Test. EQQUERYVALUE - DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_self_test where 0 = 1, compare_results: -1
 ---- Test Case: EQQUERYVALUE BLOB Sad Path 1
 PASS    1ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details. EQ - Expected "DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_self_test where id = 1, compare_results: -1" and got "DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_self_test where id = 1, compare_results: -1"
 ---- Test Case: EQQUERYVALUE BLOB Sad Path 2
 PASS    1ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE BLOB Sad Path 3
 PASS    1ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details. ISNOTNULL - Expected NOT NULL and got "Exception raised for Query: Garbage query that won't work\nORA-00900: invalid SQL statement\nORA-06512: at "WTP.WT_ASSERT", line 2699\n"
 PASS    0ms temp_rec.last_details value. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERY Tests Happy Path 1
 PASS  116ms Run Test. EQQUERY - Comparison Query: with check_query as (select * from USER_TABLES), against_query as (select * from USER_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2
 PASS    0ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "EQQUERY" and got "EQQUERY"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Comparison Query: with check_query as (select * from USER_TABLES), against_query as (select * from USER_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2"
 PASS    0ms EQQUERY Tests Happy Path 1b g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERY Tests Sad Path 1
 PASS   72ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Comparison Query: with check_query as (select * from USER_TABLES), against_query as (select * from USER_TABLES where 0 = 1), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERY Tests Sad Path 2
 PASS   47ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERY Tests Sad Path 3
 PASS    3ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "ORA-06550: line 2, column 119:\nPL/SQL: ORA-01789: query block has incorrect number of result columns\nORA-06550: line 2, column 18:\nPL/SQL: SQL Statement ignored\nORA-06550: line 2, column 11:\nPLS-00341: declaration of cursor 'CUR' is incomplete or malformed\nORA-06550: line 3, column 8:\nPL/SQL: Item ignored\nORA-06550: line 6, column 19:\nPLS-00320: the declaration of the type of this expression is incomplete or malformed\nORA-06550: line 6, column 4:\nPL/SQL: SQL Statement ignored\nFAILURE of Compare Query: with check_query as (select * from USER_TABLES), against_query as (select * from ALL_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2;"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABLE Tests Happy Path 1
 PASS  107ms Run Test. EQTABLE - Comparison Query: with check_query as (select * from USER_TABLES), against_query as (select * from USER_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2
 PASS    0ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "EQTABLE" and got "EQTABLE"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Comparison Query: with check_query as (select * from USER_TABLES), against_query as (select * from USER_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABLE Tests Happy Path 2
 PASS   72ms Run Test. EQTABLE - Comparison Query: with check_query as (select * from ALL_TABLES where owner = 'WTP'), against_query as (select * from ALL_TABLES where owner = 'WTP'), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2
 ---- Test Case: EQTABLE Sad Path 1
 PASS   67ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Comparison Query: with check_query as (select * from ALL_TABLES where owner = 'WTP'), against_query as (select * from ALL_TABLES where 0 = 1), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2"
 PASS    1ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABLE Sad Path 2
 PASS   27ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABLE Sad Path 3
 PASS    3ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "ORA-06550: line 2, column 119:\nPL/SQL: ORA-01789: query block has incorrect number of result columns\nORA-06550: line 2, column 18:\nPL/SQL: SQL Statement ignored\nORA-06550: line 2, column 11:\nPLS-00341: declaration of cursor 'CUR' is incomplete or malformed\nORA-06550: line 3, column 8:\nPL/SQL: Item ignored\nORA-06550: line 6, column 19:\nPLS-00320: the declaration of the type of this expression is incomplete or malformed\nORA-06550: line 6, column 4:\nPL/SQL: SQL Statement ignored\nFAILURE of Compare Query: with check_query as (select * from USER_TABLES), against_query as (select * from ALL_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2;"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABCOUNT Tests Happy Path 1
 PASS   62ms Run Test. EQTABCOUNT - Expected 10 rows from "ALL_TABLES" and got 10 rows from "ALL_TABLES"
 PASS    1ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "EQTABCOUNT" and got "EQTABCOUNT"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected 10 rows from "ALL_TABLES" and got 10 rows from "ALL_TABLES""
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABCOUNT Tests Happy Path 2
 PASS   60ms Run Test. EQTABCOUNT - Expected 10 rows from "USER_TABLES" and got 10 rows from "ALL_TABLES"
 ---- Test Case: EQTABCOUNT Sad Path 1
 PASS   67ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected 10 rows from "ALL_TABLES" and got 0 rows from "ALL_TABLES""
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABCOUNT Sad Path 2
 PASS  342ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABCOUNT Sad Path 3
 PASS   92ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected 98 rows from "USER_TAB_COLUMNS" and got 10 rows from "USER_TABLES""
 PASS    2ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABCOUNT Sad Path 4
 PASS    1ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "ORA-00942: table or view does not exist\nFAILURE of Compare Query: select count(*) from BOGUS1;"
 PASS    0ms temp_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_details 2. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: OBJEXISTS Happy Path 1
 PASS    3ms Run Test. OBJEXISTS - Number of objects found for "SYS.DUAL" is 1
 PASS    0ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "OBJEXISTS" and got "OBJEXISTS"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details. EQ - Expected "Number of objects found for "SYS.DUAL" is 1" and got "Number of objects found for "SYS.DUAL" is 1"
 ---- Test Case: OBJEXISTS Happy Path 2
 PASS    1ms Run Test. OBJEXISTS - Number of objects found for "SYS.DUAL"(TABLE) is 1
 ---- Test Case: OBJEXISTS Happy Path 3
 PASS    0ms Run Test. OBJEXISTS - Number of objects found for "SYS.DUAL" is 1
 ---- Test Case: OBJEXISTS Happy Path 4
 PASS    1ms Run Test. OBJEXISTS - Number of objects found for "DUAL" is 2
 ---- Test Case: OBJEXISTS Sad Path 1
 PASS    0ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details. EQ - Expected "Number of objects found for "JOE SMITH.BOGUS" is 0" and got "Number of objects found for "JOE SMITH.BOGUS" is 0"
 ---- Test Case: OBJEXISTS Sad Path 2
 PASS    1ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: OBJNOTEXISTS Happy Path 1
 PASS    0ms Run Test. OBJNOTEXISTS - Number of objects found for "BOGUS.THING123" is 0
 PASS    0ms temp_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms temp_rec.last_assert. EQ - Expected "OBJNOTEXISTS" and got "OBJNOTEXISTS"
 PASS    0ms temp_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms temp_rec.last_details. EQ - Expected "Number of objects found for "BOGUS.THING123" is 0" and got "Number of objects found for "BOGUS.THING123" is 0"
 ---- Test Case: OBJNOTEXISTS Happy Path 2
 PASS    1ms Run Test. OBJNOTEXISTS - Number of objects found for "BOGUS.THING123"(PACKAGE) is 0
 ---- Test Case: OBJNOTEXISTS Happy Path 3
 PASS    0ms Run Test. OBJNOTEXISTS - Number of objects found for "BOGUS.THING123" is 0
 ---- Test Case: OBJNOTEXISTS Sad Path 1
 PASS    0ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms temp_rec.last_details. EQ - Expected "Number of objects found for "SYS.DUAL" is 1" and got "Number of objects found for "SYS.DUAL" is 1"
 ---- Test Case: OBJNOTEXISTS Sad Path 2
 PASS    1ms temp_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"

 - WTP.WT_ASSERT PACKAGE BODY Code Coverage Details (Test Run ID 422)
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
     1 EXCL      0         0       0         0 package body wt_assert is
    13 ANNO      0         0       0         0       temp_rowid1 CONSTANT rowid          := chartorowid('AAAFd1AAFAAAABSAA/');
    14 ANNO      0         0       0         0       temp_rowid2 CONSTANT rowid          := chartorowid('AAAFd1AAFAAAABSAB/');
    15 ANNO      0         0       0         0       temp_long1  CONSTANT long           := hextoraw('0123456789ABCDEF0123456789ABCDEF');
    16 ANNO      0         0       0         0       temp_long2  CONSTANT long           := hextoraw('FEDCBA9876543210FEDCBA9876543210');
    17 ANNO      0         0       0         0       temp_raw1   CONSTANT raw(2)         := hextoraw('2345');
    18 ANNO      0         0       0         0       temp_raw2   CONSTANT raw(2)         := hextoraw('6789');
    19 ANNO      0         0       0         0       temp_lraw1  CONSTANT long raw       := hextoraw('0123456789ABCDEF0123456789ABCDEF');
    20 ANNO      0         0       0         0       temp_lraw2  CONSTANT long raw       := hextoraw('FEDCBA9876543210FEDCBA9876543210');
    22 ANNO      0         0       0         0       temp_blob2  CONSTANT BLOB           := hextoraw('FEDCBA9876543210FEDCBA9876543210');
    24 ANNO      0         0       0         0       temp_nc1    CONSTANT NVARCHAR2(12)  := 'NCHAR1';
    25 ANNO      0         0       0         0       temp_nc2    CONSTANT NVARCHAR2(12)  := 'NCHAR2';
    26 ANNO      0         0       0         0       temp_bool   CONSTANT boolean        := NULL;
    28 ANNO      0         0       0         0       temp_clob2  CONSTANT CLOB           := 'This is another clob.';
    30 ANNO      0         0       0         0       temp_nclob2 CONSTANT NCLOB          := 'This is another clob.';
    32 ANNO      0         0       0         0       temp_xml2   CONSTANT XMLTYPE        := xmltype('<?xml version="1.0" encoding="UTF-8"?><note>2</note>');
    34 ANNO      0         0       0         0       temp_pint1  CONSTANT pls_integer    := 2;
    35 ANNO      0         0       0         0       temp_pint2  CONSTANT pls_integer    := 3;
    36 ANNO      0         0       0         0       temp_date   CONSTANT date           := sysdate;
    37 ANNO      0         0       0         0       temp_tstmp  CONSTANT timestamp      := systimestamp;
    38 ANNO      0         0       0         0       temp_tstlzn CONSTANT timestamp with local time zone := systimestamp;
    39 ANNO      0         0       0         0       temp_tstzn  CONSTANT timestamp with time zone := systimestamp;
    40 ANNO      0         0       0         0       temp_intds1 CONSTANT interval day to second   := interval '+01 01:01:01.001' day to second;
    41 ANNO      0         0       0         0       temp_intds2 CONSTANT interval day to second   := interval '+02 02:02:02.002' day to second;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
    42 ANNO      0         0       0         0       temp_intym1 CONSTANT interval year to month   := interval '+01-01' year to month;
    43 ANNO      0         0       0         0       temp_intym2 CONSTANT interval year to month   := interval '+02-02' year to month;
    47 ANNO      0         0       0         0       wtplsql_skip_save boolean := FALSE;
    55 UNKN      0        48       0         1 function boolean_to_status
    60 EXEC    298        41       0         1    if in_boolean is null
    62 EXEC     12         1       0         1       return '';
    63 EXEC    286        33       0         1    elsif in_boolean
    65 EXEC    169        42       0         6       return 'TRUE';
    67 EXEC    117        34       0         2    return 'FALSE';
    68 EXEC    298        48       0         2 end boolean_to_status;
    72 ANNO      0         7       7         7    procedure t_boolean_to_status
    75 ANNO      1         2       2         2       wt_assert.g_testcase := 'BOOLEAN_TO_STATUS';
    77 ANNO      1         1       0         1       wt_assert.eq
    81 ANNO      1         2       1         1       wt_assert.eq
    86 ANNO      1         0       0         0       wt_assert.isnull
    89 ANNO      1         0       0         0    end t_boolean_to_status;
    94 UNKN      0       433       1        12 procedure process_assertion
    99 ANNO    493        89       0         2    if not wtplsql_skip_save then
   101 EXEC    404       145       1         2    wt_result.save
   103 UNKN      0       532       1        49       ,in_status         => case g_rec.last_pass
   104 UNKN      0       112       0        19                             when TRUE then C_PASS
   114 EXEC    493       132       1         2    if g_rec.raise_exception and not g_rec.last_pass
   116 EXEC     28      1769       1       249       raise_application_error(-20003, wt_text_report.format_test_result
   124 UNKN      0       104       0         2 end process_assertion;
   128 ANNO      0         1       1         1    procedure t_process_assertion
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   132 ANNO      1         1       1         1       g_testcase  := 'PROCESS_ASSERTION';
   133 ANNO      1         0       0         0       g_rec.last_assert     := 'THIS';
   134 ANNO      1         1       1         1       g_rec.last_pass       := FALSE;
   135 ANNO      1         0       0         0       g_rec.last_details    := 'Expected "PASS" and got "FAIL"';
   136 ANNO      1         0       0         0       g_rec.last_msg        := 'Process Assertion Forced Failure';
   137 ANNO      1         0       0         0       g_rec.raise_exception := TRUE;
   138 ANNO      1         0       0         0       wtplsql_skip_save  := TRUE;
   139 ANNO      1         0       0         0       process_assertion;  -- Should throw exception
   140 ANNO      0         0       0         0       wtplsql_skip_save  := FALSE;
   143 ANNO      1         0       0         0       when ASSERT_FAILURE_EXCEPTION then
   144 ANNO      1         0       0         0          wtplsql_skip_save := FALSE;
   145 ANNO      1         1       0         1    end t_process_assertion;
   150 EXEC     11        17       1         2 procedure compare_queries (
   159 EXEC     11        22       1         3    l_qry_txt := 'with check_query as (' || check_query_in   ||
   168 EXEC     11        12       1         3    l_exec_txt :=
   181 EXEC     11      8840      65      2696    execute immediate l_exec_txt using out l_ret_txt;
   182 EXEC      8        10       1         2    if l_ret_txt = 'FOUND'
   184 EXEC      5         7       1         2       g_rec.last_pass := FALSE; -- Some Difference Found
   186 EXEC      3         5       1         2       g_rec.last_pass := TRUE;  -- Nothing found, queries match
   189 EXEC      8        40       4         6    g_rec.last_details := 'Comparison Query: ' || l_qry_txt;
   191 EXEC      3         0       0         0    when OTHERS
   193 EXEC      3       220      50       113       g_rec.last_details := SQLERRM || CHR(10) ||
   195 EXEC      3         3       1         1       g_rec.last_pass    := FALSE;
   196 EXEC     11        23       2         4 end compare_queries;
   200 ANNO      0         1       1         1    procedure t_compare_queries
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   204 ANNO      1         0       0         0       wt_assert.g_testcase := 'COMPARE_QUERIES Bad Query Test 1';
   205 ANNO      1         0       0         0       compare_queries (
   208 ANNO      1         5       5         5       temp_rec := g_rec;
   209 ANNO      1         2       2         2       wt_assert.eq (
   214 ANNO      1         1       1         1       wt_assert.isnotnull(
   217 ANNO      1         9       9         9       wt_assert.this(
   222 ANNO      1         0       0         0       wt_assert.g_testcase := 'COMPARE_QUERIES Bad Query Test 2';
   223 ANNO      1         0       0         0       compare_queries (
   226 ANNO      1         4       4         4       temp_rec := g_rec;
   227 ANNO      1         1       1         1       wt_assert.eq (
   232 ANNO      1         1       1         1       wt_assert.isnotnull(
   235 ANNO      1         6       6         6       wt_assert.this(
   240 ANNO      1         0       0         0    end t_compare_queries;
   249 UNKN      0         1       1         1 function last_pass
   253 EXEC      1         1       1         1    return g_rec.last_pass;
   254 EXEC      1         0       0         0 end last_pass;
   256 UNKN      0         1       1         1 function last_assert
   260 EXEC      1         1       1         1    return g_rec.last_assert;
   261 EXEC      1         0       0         0 end last_assert;
   263 UNKN      0         1       1         1 function last_msg
   267 EXEC      1         1       1         1    return g_rec.last_msg;
   268 EXEC      1         0       0         0 end last_msg;
   270 EXCL      0         0       0         0 function last_details
   274 EXEC      1         0       0         0    return g_rec.last_details;
   275 EXEC      1         0       0         0 end last_details;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   279 ANNO      0         1       1         1    procedure t_last_values
   283 ANNO      1         0       0         0       wt_assert.g_testcase := 'Last Values Tests';
   284 ANNO      1         0       0         0       wt_assert.eq (
   289 ANNO      1         0       0         0       wt_assert.eq (
   295 ANNO      1         0       0         0       temp_rec := g_rec;
   296 ANNO      1         1       1         1       wt_assert.eq (
   301 ANNO      1         1       1         1       wt_assert.eq (
   306 ANNO      1         1       1         1    end t_last_values;
   311 EXCL      0         0       0         0 procedure reset_globals
   314 EXEC      1         0       0         0    g_testcase            := '';
   315 EXEC      1         0       0         0    g_rec.last_pass       := NULL;
   316 EXEC      1         0       0         0    g_rec.last_assert     := '';
   317 EXEC      1         1       1         1    g_rec.last_msg        := '';
   318 EXEC      1         0       0         0    g_rec.last_details    := '';
   319 EXEC      1         0       0         0    g_rec.raise_exception := FALSE;
   320 EXEC      1         0       0         0 end reset_globals;
   324 ANNO      0         0       0         0    procedure t_reset_globals
   327 ANNO      1         0       0         0       reset_globals;  -- Resets g_testcase
   328 ANNO      1         0       0         0       temp_rec         := g_rec;
   329 ANNO      1         0       0         0       temp_testcase    := g_testcase;
   331 ANNO      1         0       0         0       g_testcase       := 'RESET_GLOBALS';
   332 ANNO      1         0       0         0       wt_assert.isnull(
   335 ANNO      1         0       0         0       wt_assert.isnull
   339 ANNO      1         1       1         1       wt_assert.eq(
   343 ANNO      1         0       0         0       wt_assert.isnull
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   347 ANNO      1         1       1         1       wt_assert.isnull
   350 ANNO      1         0       0         0       wt_assert.isnull
   353 ANNO      1         0       0         0    end t_reset_globals;
   358 UNKN      0         4       1         1 function get_NLS_DATE_FORMAT
   363 EXEC      4       611      72       230    select value into l_format
   366 EXEC      4         8       0         4    return l_format;
   367 EXEC      4         4       1         1 end get_NLS_DATE_FORMAT;
   369 UNKN      0         4       1         1 procedure set_NLS_DATE_FORMAT
   373 EXEC      5       556      79       160    execute immediate 'alter session set NLS_DATE_FORMAT = ''' ||
   375 EXEC      5         4       1         1 end set_NLS_DATE_FORMAT;
   377 UNKN      0         2       1         1 function get_NLS_TIMESTAMP_FORMAT
   382 EXEC      2       191      68       123    select value into l_format
   385 EXEC      2         3       1         2    return l_format;
   386 EXEC      2         1       1         1 end get_NLS_TIMESTAMP_FORMAT;
   388 UNKN      0         2       1         1 procedure set_NLS_TIMESTAMP_FORMAT
   392 EXEC      2       286     142       144    execute immediate 'alter session set NLS_TIMESTAMP_FORMAT = ''' ||
   394 EXEC      2         3       1         2 end set_NLS_TIMESTAMP_FORMAT;
   396 UNKN      0         4       2         2 function get_NLS_TIMESTAMP_TZ_FORMAT
   401 EXEC      2       188      68       120    select value into l_format
   404 EXEC      2         3       1         2    return l_format;
   405 EXEC      2         1       1         1 end get_NLS_TIMESTAMP_TZ_FORMAT;
   407 UNKN      0         2       1         1 procedure set_NLS_TIMESTAMP_TZ_FORMAT
   411 EXEC      2       273     124       149    execute immediate 'alter session set NLS_TIMESTAMP_TZ_FORMAT = ''' ||
   413 EXEC      2         1       1         1 end set_NLS_TIMESTAMP_TZ_FORMAT;
   417 ANNO      0         2       2         2    procedure t_nls_settings
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   421 ANNO      1         1       1         1       wt_assert.g_testcase := 'NLS Settings';
   422 ANNO      1         1       1         1       set_NLS_DATE_FORMAT('DD-MON-YYYY');
   423 ANNO      1         1       0         1       wt_assert.eq
   427 ANNO      1         1       1         1       set_NLS_DATE_FORMAT;
   429 ANNO      1         1       1         1       wt_assert.eq
   433 ANNO      1         1       1         1       set_NLS_TIMESTAMP_FORMAT('DD-MON-YYYY');
   434 ANNO      1         0       0         0       wt_assert.eq
   438 ANNO      1         0       0         0       set_NLS_TIMESTAMP_FORMAT;
   440 ANNO      1         0       0         0       wt_assert.eq
   444 ANNO      1         1       1         1       set_NLS_TIMESTAMP_TZ_FORMAT('DD-MON-YYYY');
   446 ANNO      1         0       0         0       wt_assert.eq
   450 ANNO      1         1       1         1       set_NLS_TIMESTAMP_TZ_FORMAT;
   451 ANNO      1         1       1         1       wt_assert.eq
   455 ANNO      1         1       1         1    end t_nls_settings;
   464 UNKN      0        65       0         5 procedure this (
   471 EXEC     80        36       0         2    g_rec.last_assert  := 'THIS';
   472 EXEC     80        91       0        64    g_rec.last_msg     := msg_in;
   473 EXEC     80        14       0         2    g_rec.last_pass    := nvl(check_this_in, FALSE);
   474 EXEC     80        98       1         4    g_rec.last_details := 'Expected "TRUE" and got "' ||
   476 EXEC     80        12       0         1    g_rec.raise_exception := raise_exc_in;
   477 EXEC     80        10       0         1    process_assertion;
   478 EXEC     79        14       0         1 end this;
   482 ANNO      0         1       1         1    procedure t_this
   487 ANNO      1         0       0         0       wt_assert.g_testcase := 'This Happy Path';
   488 ANNO      1         0       0         0       wt_assert.this (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   491 ANNO      1         0       0         0       temp_rec := g_rec;
   492 ANNO      1         0       0         0       wt_assert.eq (
   497 ANNO      1         0       0         0       wt_assert.eq (
   501 ANNO      1         0       0         0       wt_assert.eq (
   505 ANNO      1         0       0         0       wt_assert.eq (
   510 ANNO      1         0       0         0       wt_assert.g_testcase := 'This Sad Path 1';
   511 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   512 ANNO      1         0       0         0       this (
   515 ANNO      1         0       0         0       temp_rec := g_rec;
   516 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   517 ANNO      1         1       1         1       wt_assert.eq (
   522 ANNO      1         0       0         0       wt_assert.g_testcase := 'This Sad Path 2';
   523 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   525 ANNO      1         0       0         0          this (
   529 ANNO      0         0       0         0          l_found_exception := FALSE;
   530 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
   531 ANNO      1         0       0         0          l_found_exception := TRUE;
   532 ANNO      0         1       1         1       end;
   534 ANNO      1         1       1         1       temp_rec := g_rec;
   535 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   536 ANNO      1         1       1         1       wt_assert.eq (
   540 ANNO      1         1       1         1       wt_assert.eq (
   545 ANNO      1         0       0         0       wt_assert.g_testcase := 'This Sad Path 3';
   546 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   547 ANNO      1         1       1         1       this (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   550 ANNO      1         1       1         1       temp_rec := g_rec;
   551 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   552 ANNO      1         0       0         0       wt_assert.eq (
   556 ANNO      1         0       0         0    end t_this;
   562 UNKN      0       158       0        15 procedure eq (
   570 EXEC    199        71       1         1    g_rec.last_assert  := 'EQ';
   571 EXEC    199        57       0         1    g_rec.last_msg     := msg_in;
   572 EXEC    199       402       0       204    g_rec.last_pass    := (   nvl(check_this_in = against_this_in, false)
   573 UNKN      0        13       1         1                            or (    check_this_in is null
   577 EXEC    199       383       1        52    g_rec.last_details := 'Expected "' || substr(against_this_in,1,1000) ||
   580 EXEC    199        50       0        23    g_rec.raise_exception := raise_exc_in;
   581 EXEC    199        21       0         1    process_assertion;
   582 EXEC    198        28       0         1 end eq;
   585 UNKN      0        88       1         5 procedure eq (
   593 EXEC     98        67       0         1    eq (msg_in           => msg_in
   598 EXEC     98        13       0         1 end eq;
   601 UNKN      0        53       6        39 procedure eq (
   609 EXEC      3         2       1         1    g_rec.last_assert  := 'EQ';
   610 EXEC      3         1       0         1    g_rec.last_msg     := msg_in;
   611 EXEC      3     58987       1     38224    g_rec.last_pass    := (xmltype.getclobval(check_this_in)  =
   613 EXEC      3     40918       6     13811    g_rec.last_details := 'Expected "' || substr(xmltype.getclobval(against_this_in),1,1000) ||
   616 EXEC      3         3       1         1    g_rec.raise_exception := raise_exc_in;
   617 EXEC      3         4       1         2    process_assertion;
   618 EXEC      2       250      67       183 end eq;
   621 UNKN      0       382       6       192 procedure eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   629 EXEC     14        23       1         4    g_rec.last_assert  := 'EQ';
   630 EXEC     14         7       0         1    g_rec.last_msg     := msg_in;
   631 EXEC     14      3909       0      1623    g_rec.last_pass    := (   nvl(check_this_in = against_this_in, false)
   632 UNKN      0        18       2         3                            or (    check_this_in is null
   636 EXEC     14     23738     613      5738    g_rec.last_details := 'Expected "' || substr(against_this_in,1,1000) ||
   639 EXEC     14         9       0         2    g_rec.raise_exception := raise_exc_in;
   640 EXEC     14         8       0         1    process_assertion;
   641 EXEC     12      1113      69       227 end eq;
   644 UNKN      0         7       1         2 procedure eq (
   653 EXEC      7        48       0        45    g_rec.last_assert  := 'EQ';
   654 EXEC      7         1       0         1    g_rec.last_msg     := msg_in;
   655 EXEC      7        79       0        70    compare_results    := nvl(DBMS_LOB.COMPARE(check_this_in, against_this_in),-1);
   656 EXEC      7         4       0         1    g_rec.last_pass    := (    (compare_results = 0)
   657 UNKN      0         6       1         2                            or (    check_this_in is null
   661 EXEC      7        18       2         4    g_rec.last_details := 'DBMS_LOB.COMPARE on BLOBs, compare_results: ' || compare_results;
   662 EXEC      7         0       0         0    g_rec.raise_exception := raise_exc_in;
   663 EXEC      7         3       1         1    process_assertion;
   664 EXEC      6         1       0         1 end eq;
   672 ANNO      0        23      23        23    procedure t_eq
   677 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ VARCHAR2 Happy Path 1';
   678 ANNO      1         0       0         0       eq (
   682 ANNO      1         0       0         0       temp_rec := g_rec;
   684 ANNO      1         0       0         0       wt_assert.isnotnull (
   687 ANNO      1         1       1         1       wt_assert.this (
   691 ANNO      1         1       1         1       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   694 ANNO      1         1       1         1       wt_assert.this (
   698 ANNO      1         0       0         0       wt_assert.isnotnull (
   701 ANNO      1         0       0         0       wt_assert.this (
   705 ANNO      1         1       1         1       wt_assert.isnotnull (
   708 ANNO      1         1       1         1       wt_assert.this (
   712 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ VARCHAR2 Happy Path 2';
   713 ANNO      1         0       0         0       eq (
   718 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ VARCHAR2 Happy Path 3';
   719 ANNO      1         0       0         0       eq (
   725 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 1';
   726 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   727 ANNO      1         1       1         1       eq (
   731 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   732 ANNO      1         2       2         2       temp_rec := g_rec;
   734 ANNO      1         0       0         0       wt_assert.isnotnull (
   737 ANNO      1         0       0         0       wt_assert.isnotnull (
   740 ANNO      1         1       1         1       wt_assert.this (
   744 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 2';
   745 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   747 ANNO      1         1       1         1          eq (
   752 ANNO      0         0       0         0          l_found_exception := FALSE;
   753 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
   754 ANNO      1         0       0         0          l_found_exception := TRUE;
   755 ANNO      0         2       2         2       end;
   757 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   758 ANNO      1         1       1         1       temp_rec := g_rec;
   759 ANNO      1         0       0         0       wt_assert.this (
   762 ANNO      1         0       0         0       wt_assert.eq (
   767 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 3';
   768 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   769 ANNO      1         1       1         1       eq (
   773 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   774 ANNO      1         0       0         0       temp_rec := g_rec;
   776 ANNO      1         0       0         0       wt_assert.isnull (
   779 ANNO      1         1       1         1       wt_assert.isnotnull (
   782 ANNO      1         0       0         0       wt_assert.this (
   786 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 4';
   787 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   788 ANNO      1         0       0         0       eq (
   792 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   793 ANNO      1         0       0         0       temp_rec := g_rec;
   795 ANNO      1         0       0         0       wt_assert.isnull (
   798 ANNO      1         0       0         0       wt_assert.isnull (
   801 ANNO      1         1       1         1       wt_assert.this (
   805 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 5';
   806 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   807 ANNO      1         0       0         0       eq (
   812 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   813 ANNO      1         1       1         1       temp_rec := g_rec;
   815 ANNO      1         0       0         0       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   818 ANNO      1         0       0         0       wt_assert.isnotnull (
   821 ANNO      1         1       1         1       wt_assert.this (
   825 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 6';
   826 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   827 ANNO      1         0       0         0       eq (
   832 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   833 ANNO      1         0       0         0       temp_rec := g_rec;
   835 ANNO      1         0       0         0       wt_assert.isnull (
   838 ANNO      1         0       0         0       wt_assert.isnotnull (
   841 ANNO      1         0       0         0       wt_assert.this (
   846 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ ROWID Happy Path 1';
   847 ANNO      1         0       0         0       eq (
   852 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ ROWID Sad Path 1';
   853 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   854 ANNO      1         1       1         1       eq (
   858 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   859 ANNO      1         1       1         1       temp_rec := g_rec;
   861 ANNO      1         0       0         0       wt_assert.isnotnull (
   864 ANNO      1         1       1         1       wt_assert.isnotnull (
   867 ANNO      1         1       1         1       wt_assert.this (
   872 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ LONG Happy Path 1';
   873 ANNO      1         1       1         1       eq (
   878 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ LONG Sad Path 1';
   879 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
   880 ANNO      1         0       0         0       eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   884 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   885 ANNO      1         1       1         1       temp_rec := g_rec;
   887 ANNO      1         0       0         0       wt_assert.isnotnull (
   890 ANNO      1         0       0         0       wt_assert.isnotnull (
   893 ANNO      1         0       0         0       wt_assert.this (
   898 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ RAW Happy Path 1';
   899 ANNO      1         2       2         2       eq (
   904 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ RAW Sad Path 1';
   905 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
   906 ANNO      1         1       1         1       eq (
   910 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   911 ANNO      1         0       0         0       temp_rec := g_rec;
   913 ANNO      1         0       0         0       wt_assert.isnotnull (
   916 ANNO      1         1       1         1       wt_assert.isnotnull (
   919 ANNO      1         0       0         0       wt_assert.this (
   924 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ LANG RAW Happy Path 1';
   925 ANNO      1         2       2         2       eq (
   931 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ LANG RAW Happy Path 1';
   932 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   933 ANNO      1         2       2         2       eq (
   938 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ LONG RAW Sad Path 1';
   939 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   940 ANNO      1         1       1         1       temp_rec := g_rec;
   941 ANNO      1         0       0         0       wt_assert.isnotnull (
   945 ANNO      1         0       0         0       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   948 ANNO      1         1       1         1       wt_assert.this (
   953 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NVARCHAR2 Happy Path 1';
   954 ANNO      1        10      10        10       eq (
   959 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NVARCHAR2 Sad Path 1';
   960 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   961 ANNO      1         3       3         3       eq (
   965 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   966 ANNO      1         0       0         0       temp_rec := g_rec;
   968 ANNO      1         1       1         1       wt_assert.isnotnull (
   971 ANNO      1         2       2         2       wt_assert.isnotnull (
   974 ANNO      1         0       0         0       wt_assert.this (
   978 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BOOLEAN Happy Path 1';
   979 ANNO      1         0       0         0       eq (
   983 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BOOLEAN Happy Path 2';
   984 ANNO      1         1       1         1       eq (
   990 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BOOLEAN Happy Path 3';
   991 ANNO      1         0       0         0       eq (
   997 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BOOLEAN Happy Sad 1';
   998 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   999 ANNO      1         1       1         1       eq (
  1003 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1004 ANNO      1         0       0         0       temp_rec := g_rec;
  1006 ANNO      1         0       0         0       wt_assert.isnotnull (
  1009 ANNO      1         0       0         0       wt_assert.isnotnull (
  1012 ANNO      1         0       0         0       wt_assert.this (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1016 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ BOOLEAN Happy Sad 2';
  1017 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1018 ANNO      1         0       0         0       eq (
  1022 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1023 ANNO      1         1       1         1       temp_rec := g_rec;
  1025 ANNO      1         0       0         0       wt_assert.isnotnull (
  1028 ANNO      1         1       1         1       wt_assert.isnull (
  1031 ANNO      1         1       1         1       wt_assert.this (
  1035 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BOOLEAN Happy Sad 3';
  1036 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1037 ANNO      1         0       0         0       eq (
  1042 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1043 ANNO      1         0       0         0       temp_rec := g_rec;
  1045 ANNO      1         0       0         0       wt_assert.isnotnull (
  1048 ANNO      1         1       1         1       wt_assert.isnotnull (
  1051 ANNO      1         0       0         0       wt_assert.this (
  1055 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ BOOLEAN Happy Sad 4';
  1056 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1057 ANNO      1         0       0         0       eq (
  1062 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1063 ANNO      1         0       0         0       temp_rec := g_rec;
  1065 ANNO      1         0       0         0       wt_assert.isnotnull (
  1068 ANNO      1         1       1         1       wt_assert.isnull (
  1071 ANNO      1         1       1         1       wt_assert.this (
  1075 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ NUMBER Happy Path 1';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1076 ANNO      1         5       5         5       eq (
  1080 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NUMBER Happy Path 2';
  1081 ANNO      1         3       3         3       eq (
  1086 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NUMBER Happy Path 1';
  1087 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1088 ANNO      1         2       2         2       eq (
  1092 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1093 ANNO      1         1       1         1       temp_rec := g_rec;
  1095 ANNO      1         1       1         1       wt_assert.isnotnull (
  1098 ANNO      1         1       1         1       wt_assert.isnotnull (
  1101 ANNO      1         1       1         1       wt_assert.this (
  1106 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ PLS_INTEGER Happy Path 1';
  1107 ANNO      1         1       1         1       eq (
  1111 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1113 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ PLS_INTEGER Sad Path 1';
  1114 ANNO      1         2       2         2       eq (
  1118 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1119 ANNO      1         1       1         1       temp_rec := g_rec;
  1121 ANNO      1         1       1         1       wt_assert.isnotnull (
  1124 ANNO      1         1       1         1       wt_assert.isnotnull (
  1127 ANNO      1         1       1         1       wt_assert.this (
  1131 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ DATE Happy Path 1';
  1132 ANNO      1        15      15        15       eq (
  1137 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ DATE Sad Path 1';
  1138 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1139 ANNO      1         8       8         8       eq (
  1143 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1144 ANNO      1         0       0         0       temp_rec := g_rec;
  1146 ANNO      1         2       2         2       wt_assert.isnotnull (
  1149 ANNO      1         5       5         5       wt_assert.isnotnull (
  1152 ANNO      1         1       1         1       wt_assert.this (
  1157 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ TIMSETAMP Happy Path 1';
  1158 ANNO      1         8       8         8       eq (
  1163 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ TIMSETAMP Sad Path 1';
  1164 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1165 ANNO      1         8       8         8       eq (
  1169 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1170 ANNO      1         0       0         0       temp_rec := g_rec;
  1172 ANNO      1         2       2         2       wt_assert.isnotnull (
  1175 ANNO      1         5       5         5       wt_assert.isnotnull (
  1178 ANNO      1         0       0         0       wt_assert.this (
  1183 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ TIMSETAMP WITH LOCAL TIME ZONE Happy Path 1';
  1184 ANNO      1         6       6         6       eq (
  1189 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ TIMSETAMP WITH LOCAL TIME ZONE Sad Path 1';
  1190 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1191 ANNO      1        17      17        17       eq (
  1195 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1196 ANNO      1         1       1         1       temp_rec := g_rec;
  1198 ANNO      1         3       3         3       wt_assert.isnotnull (
  1201 ANNO      1         5       5         5       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1204 ANNO      1         0       0         0       wt_assert.this (
  1209 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ TIMSETAMP WITH TIME ZONE Happy Path 1';
  1210 ANNO      1         4       4         4       eq (
  1215 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ TIMSETAMP WITH TIME ZONE Sad Path 1';
  1216 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1217 ANNO      1         8       8         8       eq (
  1221 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1222 ANNO      1         1       1         1       temp_rec := g_rec;
  1224 ANNO      1         3       3         3       wt_assert.isnotnull (
  1227 ANNO      1         5       5         5       wt_assert.isnotnull (
  1230 ANNO      1         1       1         1       wt_assert.this (
  1235 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ INTERVAL DAY TO SECOND Happy Path 1';
  1236 ANNO      1         4       4         4       eq (
  1241 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ INTERVAL DAY TO SECOND Sad Path 1';
  1242 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1243 ANNO      1         2       2         2       eq (
  1247 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1248 ANNO      1         0       0         0       temp_rec := g_rec;
  1250 ANNO      1         0       0         0       wt_assert.isnotnull (
  1253 ANNO      1         2       2         2       wt_assert.isnotnull (
  1256 ANNO      1         0       0         0       wt_assert.this (
  1261 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ INTERVAL YEAR TO MONTH Happy Path 1';
  1262 ANNO      1         3       3         3       eq (
  1267 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ INTERVAL YEAR TO MONTH Sad Path 1';
  1268 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1269 ANNO      1         2       2         2       eq (
  1273 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  1274 ANNO      1         1       1         1       temp_rec := g_rec;
  1276 ANNO      1         1       1         1       wt_assert.isnotnull (
  1279 ANNO      1         1       1         1       wt_assert.isnotnull (
  1282 ANNO      1         0       0         0       wt_assert.this (
  1286 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ XMLTYPE Happy Path 1';
  1287 ANNO      1         0       0         0       eq (
  1291 ANNO      1         4       4         4       temp_rec := g_rec;
  1293 ANNO      1         1       1         1       wt_assert.isnotnull (
  1296 ANNO      1         1       1         1       wt_assert.this (
  1300 ANNO      1         1       1         1       wt_assert.isnotnull (
  1303 ANNO      1         0       0         0       wt_assert.this (
  1307 ANNO      1         0       0         0       wt_assert.isnotnull (
  1310 ANNO      1         1       1         1       wt_assert.this (
  1314 ANNO      1         0       0         0       wt_assert.isnotnull (
  1317 ANNO      1        17      17        17       wt_assert.this (
  1322 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ XMLTYPE Sad Path 1';
  1323 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1324 ANNO      1         0       0         0       eq (
  1328 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1329 ANNO      1         5       5         5       temp_rec := g_rec;
  1331 ANNO      1         6       1         5       wt_assert.isnotnull (
  1334 ANNO      1         4       0         4       wt_assert.isnotnull (
  1337 ANNO      1         2       2         2       wt_assert.this (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1341 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ XMLTYPE Sad Path 2';
  1342 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1343 ANNO      0         0       0         0       begin
  1344 ANNO      1         1       1         1          eq (
  1349 ANNO      0         0       0         0          l_found_exception := FALSE;
  1350 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1351 ANNO      1         0       0         0          l_found_exception := TRUE;
  1352 ANNO      0         2       2         2       end;
  1354 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1355 ANNO      1         4       4         4       temp_rec := g_rec;
  1356 ANNO      1         1       1         1       wt_assert.this (
  1359 ANNO      1         1       1         1       wt_assert.eq (
  1364 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ CLOB Happy Path 1';
  1365 ANNO      1         0       0         0       eq (
  1369 ANNO      1         2       2         2       temp_rec := g_rec;
  1371 ANNO      1         1       1         1       wt_assert.isnotnull (
  1374 ANNO      1         0       0         0       wt_assert.this (
  1378 ANNO      1         1       1         1       wt_assert.isnotnull (
  1381 ANNO      1         1       1         1       wt_assert.this (
  1385 ANNO      1         0       0         0       wt_assert.isnotnull (
  1388 ANNO      1         1       1         1       wt_assert.this (
  1392 ANNO      1         0       0         0       wt_assert.isnotnull (
  1395 ANNO      1        17      17        17       wt_assert.this (
  1400 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ CLOB Happy Path 2';
  1401 ANNO      1         0       0         0       eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1407 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ CLOB Happy Path 3';
  1408 ANNO      1         1       1         1       eq (
  1414 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ CLOB Sad Path 1';
  1415 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1416 ANNO      1         1       1         1       eq (
  1420 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1421 ANNO      1         5       5         5       temp_rec := g_rec;
  1423 ANNO      1         0       0         0       wt_assert.isnotnull (
  1426 ANNO      1         0       0         0       wt_assert.isnotnull (
  1429 ANNO      1         2       2         2       wt_assert.this (
  1433 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ CLOB Sad Path 2';
  1434 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1436 ANNO      1         0       0         0          eq (
  1441 ANNO      0         0       0         0          l_found_exception := FALSE;
  1442 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1443 ANNO      1         1       1         1          l_found_exception := TRUE;
  1444 ANNO      0         2       2         2       end;
  1446 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1447 ANNO      1         2       2         2       temp_rec := g_rec;
  1448 ANNO      1         1       1         1       wt_assert.this (
  1451 ANNO      1         0       0         0       wt_assert.eq (
  1456 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ CLOB Sad Path 3';
  1457 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1458 ANNO      1         0       0         0       eq (
  1462 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1463 ANNO      1         2       2         2       temp_rec := g_rec;
  1465 ANNO      1         1       1         1       wt_assert.isnotnull (
  1468 ANNO      1         1       1         1       wt_assert.isnull (
  1471 ANNO      1         0       0         0       wt_assert.this (
  1475 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ CLOB Sad Path 4';
  1476 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1477 ANNO      1         0       0         0       eq (
  1482 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1483 ANNO      1         2       2         2       temp_rec := g_rec;
  1485 ANNO      1         1       1         1       wt_assert.isnotnull (
  1488 ANNO      1         1       1         1       wt_assert.isnull (
  1491 ANNO      1         2       2         2       wt_assert.this (
  1495 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NCLOB Happy Path 1';
  1496 ANNO      1     12879   12879     12879       eq (
  1501 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ NCLOB Happy Path 2';
  1502 ANNO      1     14745   14745     14745       eq (
  1508 ANNO      1         2       2         2       wt_assert.g_testcase := 'EQ NCLOB Happy Path 3';
  1509 ANNO      1         2       2         2       eq (
  1515 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ NCLOB Sad Path 1';
  1516 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1517 ANNO      1      6619    6619      6619       eq (
  1521 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1522 ANNO      1         5       5         5       temp_rec := g_rec;
  1524 ANNO      1      9191    9191      9191       wt_assert.isnotnull (
  1527 ANNO      1       131     131       131       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1530 ANNO      1         1       1         1       wt_assert.this (
  1534 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ NCLOB Sad Path 2';
  1535 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1536 ANNO      0         0       0         0       begin
  1537 ANNO      1     12963   12963     12963          eq (
  1542 ANNO      0         0       0         0          l_found_exception := FALSE;
  1543 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1544 ANNO      1         0       0         0          l_found_exception := TRUE;
  1545 ANNO      0         2       2         2       end;
  1547 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1548 ANNO      1         4       4         4       temp_rec := g_rec;
  1549 ANNO      1         1       1         1       wt_assert.this (
  1552 ANNO      1         1       1         1       wt_assert.eq (
  1557 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ NCLOB Sad Path 3';
  1558 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  1559 ANNO      1      5062    5062      5062       eq (
  1563 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1564 ANNO      1         4       4         4       temp_rec := g_rec;
  1566 ANNO      1      7602    7602      7602       wt_assert.isnotnull (
  1569 ANNO      1       401     401       401       wt_assert.isnull (
  1572 ANNO      1         2       2         2       wt_assert.this (
  1576 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NCLOB Sad Path 4';
  1577 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1578 ANNO      1      4951    4951      4951       eq (
  1583 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1584 ANNO      1         4       4         4       temp_rec := g_rec;
  1586 ANNO      1      5176    5176      5176       wt_assert.isnotnull (
  1589 ANNO      1        20      20        20       wt_assert.isnull (
  1592 ANNO      1         1       1         1       wt_assert.this (
  1596 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BLOB Happy Path 1';
  1597 ANNO      1         0       0         0       eq (
  1601 ANNO      1         1       1         1       temp_rec := g_rec;
  1603 ANNO      1         0       0         0       wt_assert.isnotnull (
  1606 ANNO      1         1       1         1       wt_assert.this (
  1610 ANNO      1         0       0         0       wt_assert.isnotnull (
  1613 ANNO      1         0       0         0       wt_assert.this (
  1617 ANNO      1         1       1         1       wt_assert.isnotnull (
  1620 ANNO      1         1       1         1       wt_assert.this (
  1624 ANNO      1         0       0         0       wt_assert.isnotnull (
  1627 ANNO      1         1       1         1       wt_assert.this (
  1632 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ BLOB Happy Path 2';
  1633 ANNO      1         1       1         1       eq (
  1639 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BLOB Happy Path 3';
  1640 ANNO      1         1       1         1       eq (
  1646 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BLOB Sad Path 1';
  1647 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1648 ANNO      1         0       0         0       eq (
  1652 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1653 ANNO      1         2       2         2       temp_rec := g_rec;
  1655 ANNO      1         0       0         0       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1658 ANNO      1         1       1         1       wt_assert.isnotnull (
  1661 ANNO      1         1       1         1       wt_assert.this (
  1665 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BLOB Sad Path 2';
  1666 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  1668 ANNO      1         0       0         0          eq (
  1673 ANNO      0         0       0         0          l_found_exception := FALSE;
  1674 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1675 ANNO      1         0       0         0          l_found_exception := TRUE;
  1676 ANNO      0         1       1         1       end;
  1678 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1679 ANNO      1         1       1         1       temp_rec := g_rec;
  1680 ANNO      1         0       0         0       wt_assert.this (
  1683 ANNO      1         0       0         0       wt_assert.eq (
  1688 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BLOB Sad Path 3';
  1689 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1690 ANNO      1         1       1         1       eq (
  1694 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1695 ANNO      1         1       1         1       temp_rec := g_rec;
  1697 ANNO      1         0       0         0       wt_assert.isnotnull (
  1700 ANNO      1         0       0         0       wt_assert.isnull (
  1703 ANNO      1         1       1         1       wt_assert.this (
  1707 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BLOB Sad Path 4';
  1708 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1709 ANNO      1         0       0         0       eq (
  1714 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1715 ANNO      1         1       1         1       temp_rec := g_rec;
  1717 ANNO      1         0       0         0       wt_assert.isnotnull (
  1720 ANNO      1         0       0         0       wt_assert.isnull (
  1723 ANNO      1         1       1         1       wt_assert.this (
  1726 ANNO      1      1599    1599      1599    end t_eq;
  1736 UNKN      0        49       0         1 procedure isnotnull (
  1743 EXEC     82        22       1         1    g_rec.last_assert  := 'ISNOTNULL';
  1744 EXEC     82        22       0         1    g_rec.last_msg     := msg_in;
  1745 EXEC     82        29       1         2    g_rec.last_pass    := (check_this_in is not null);
  1746 EXEC     82       185       1        17    g_rec.last_details := 'Expected NOT NULL and got "' ||
  1748 EXEC     82        17       0         1    g_rec.raise_exception := raise_exc_in;
  1749 EXEC     82         4       0         1    process_assertion;
  1750 EXEC     80        22       0         1 end isnotnull;
  1753 UNKN      0        11       0         2 procedure isnotnull (
  1760 EXEC     13         1       0         1    isnotnull (msg_in        => msg_in
  1764 EXEC     12         0       0         0 end isnotnull;
  1767 UNKN      0       159       5        29 procedure isnotnull (
  1774 EXEC     13        19       0         4    g_rec.last_assert  := 'ISNOTNULL';
  1775 EXEC     13         5       1         1    g_rec.last_msg     := msg_in;
  1776 EXEC     13         5       0         1    g_rec.last_pass    := (check_this_in is not null);
  1777 EXEC     13     18331     340      9226    g_rec.last_details := 'Expected NOT NULL and got "' ||
  1779 EXEC     13         8       0         1    g_rec.raise_exception := raise_exc_in;
  1780 EXEC     13         6       0         1    process_assertion;
  1781 EXEC     12       735      54        66 end isnotnull;
  1784 UNKN      0         2       1         1 procedure isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1791 EXEC      7         3       0         1    g_rec.last_assert  := 'ISNOTNULL';
  1792 EXEC      7         3       1         1    g_rec.last_msg     := msg_in;
  1793 EXEC      7         1       0         1    g_rec.last_pass    := (check_this_in is not null);
  1794 EXEC      7         0       0         0    if g_rec.last_pass
  1796 EXEC      5         2       1         1       g_rec.last_details := 'BLOB is NOT NULL';
  1798 EXEC      2         2       1         1       g_rec.last_details := 'BLOB is NULL';
  1800 EXEC      7         1       0         1    g_rec.raise_exception := raise_exc_in;
  1801 EXEC      7         2       1         1    process_assertion;
  1802 EXEC      6         3       1         1 end isnotnull;
  1806 ANNO      0        10      10        10    procedure t_isnotnull
  1811 ANNO      1         1       1         1       wt_assert.g_testcase := 'ISNOTNULL VARCHAR2 Happy Path 1';
  1812 ANNO      1         0       0         0       isnotnull (
  1815 ANNO      1         1       1         1       temp_rec := g_rec;
  1817 ANNO      1         0       0         0       wt_assert.eq (
  1821 ANNO      1         1       1         1       wt_assert.eq (
  1826 ANNO      1         0       0         0       wt_assert.eq (
  1830 ANNO      1         0       0         0       wt_assert.eq (
  1835 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL VARCHAR2 Sad Path 1';
  1836 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1837 ANNO      1         1       1         1       isnotnull (
  1840 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1841 ANNO      1         0       0         0       wt_assert.eq (
  1846 ANNO      1         1       1         1       wt_assert.g_testcase := 'ISNOTNULL VARCHAR2 Sad Path 2';
  1847 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1849 ANNO      1         1       1         1          isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1853 ANNO      0         0       0         0          l_found_exception := FALSE;
  1854 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1855 ANNO      1         0       0         0          l_found_exception := TRUE;
  1856 ANNO      0         1       1         1       end;
  1858 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1859 ANNO      1         0       0         0       wt_assert.eq (
  1863 ANNO      1         0       0         0       wt_assert.eq (
  1868 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL BOOLEAN Happy Path 1';
  1869 ANNO      1         0       0         0       isnotnull (
  1873 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL BOOLEAN Sad Path 1';
  1874 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1875 ANNO      1         0       0         0       isnotnull (
  1878 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1879 ANNO      1         1       1         1       wt_assert.eq (
  1884 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL BOOLEAN Sad Path 2';
  1885 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1887 ANNO      1         1       1         1          isnotnull (
  1891 ANNO      0         0       0         0          l_found_exception := FALSE;
  1892 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1893 ANNO      1         0       0         0          l_found_exception := TRUE;
  1894 ANNO      0         1       1         1       end;
  1896 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1897 ANNO      1         1       1         1       wt_assert.eq (
  1901 ANNO      1         0       0         0       wt_assert.eq (
  1906 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL CLOB Happy Path 1';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1907 ANNO      1         0       0         0       isnotnull (
  1910 ANNO      1         2       2         2       temp_rec := g_rec;
  1912 ANNO      1         1       1         1       wt_assert.eq (
  1916 ANNO      1         1       1         1       wt_assert.eq (
  1921 ANNO      1         0       0         0       wt_assert.eq (
  1925 ANNO      1         1       1         1       wt_assert.isnotnull (
  1928 ANNO      1        16      16        16       wt_assert.this (
  1933 ANNO      1         1       1         1       wt_assert.g_testcase := 'ISNOTNULL CLOB Sad Path 1';
  1934 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1935 ANNO      1         0       0         0       isnotnull (
  1938 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  1939 ANNO      1         0       0         0       wt_assert.eq (
  1944 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL CLOB Sad Path 2';
  1945 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1947 ANNO      1         0       0         0          isnotnull (
  1951 ANNO      0         0       0         0          l_found_exception := FALSE;
  1952 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1953 ANNO      1         1       1         1          l_found_exception := TRUE;
  1954 ANNO      0         1       1         1       end;
  1956 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1957 ANNO      1         0       0         0       wt_assert.eq (
  1961 ANNO      1         0       0         0       wt_assert.eq (
  1966 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL BLOB Happy Path 1';
  1967 ANNO      1         1       1         1       isnotnull (
  1970 ANNO      1         1       1         1       temp_rec := g_rec;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1972 ANNO      1         0       0         0       wt_assert.eq (
  1976 ANNO      1         0       0         0       wt_assert.eq (
  1981 ANNO      1         0       0         0       wt_assert.eq (
  1985 ANNO      1         0       0         0       wt_assert.eq (
  1990 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL BLOB Sad Path 1';
  1991 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  1992 ANNO      1         0       0         0       isnotnull (
  1995 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1996 ANNO      1         1       1         1       wt_assert.eq (
  2001 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL BLOB Sad Path 2';
  2002 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2004 ANNO      1         0       0         0          isnotnull (
  2008 ANNO      0         0       0         0          l_found_exception := FALSE;
  2009 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2010 ANNO      1         0       0         0          l_found_exception := TRUE;
  2011 ANNO      0         1       1         1       end;
  2013 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2014 ANNO      1         0       0         0       wt_assert.eq (
  2018 ANNO      1         0       0         0       wt_assert.eq (
  2022 ANNO      1         2       2         2    end t_isnotnull;
  2028 UNKN      0         7       0         1 procedure isnull (
  2035 EXEC     18         9       1         1    g_rec.last_assert  := 'ISNULL';
  2036 EXEC     18         2       0         1    g_rec.last_msg     := msg_in;
  2037 EXEC     18         5       1         1    g_rec.last_pass    := (check_this_in is null);
  2038 EXEC     18        18       1         2    g_rec.last_details := 'Expected NULL and got "' ||
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2040 EXEC     18         3       0         1    g_rec.raise_exception := raise_exc_in;
  2041 EXEC     18         3       0         1    process_assertion;
  2042 EXEC     16         2       0         1 end isnull;
  2045 UNKN      0         5       1         1 procedure isnull (
  2052 EXEC      6         1       0         1    isnull (msg_in        => msg_in
  2056 EXEC      5         1       0         1 end isnull;
  2059 UNKN      0        61       4        16 procedure isnull (
  2066 EXEC      7         7       1         1    g_rec.last_assert  := 'ISNULL';
  2067 EXEC      7         4       0         1    g_rec.last_msg     := msg_in;
  2068 EXEC      7         6       1         1    g_rec.last_pass    := (check_this_in is null);
  2069 EXEC      7     10117     334      5868    g_rec.last_details := 'Expected NULL and got "' ||
  2071 EXEC      7         6       1         2    g_rec.raise_exception := raise_exc_in;
  2072 EXEC      7         5       1         1    process_assertion;
  2073 EXEC      6       430      58       114 end isnull;
  2076 UNKN      0         2       0         1 procedure isnull (
  2083 EXEC      5         1       0         1    g_rec.last_assert  := 'ISNULL';
  2084 EXEC      5         5       1         1    g_rec.last_msg     := msg_in;
  2085 EXEC      5         1       0         1    g_rec.last_pass    := (check_this_in is null);
  2086 EXEC      5         1       0         1    if g_rec.last_pass
  2088 EXEC      3         1       1         1       g_rec.last_details := 'BLOB is NULL';
  2090 EXEC      2         2       1         1       g_rec.last_details := 'BLOB is NOT NULL';
  2092 EXEC      5         0       0         0    g_rec.raise_exception := raise_exc_in;
  2093 EXEC      5         1       0         1    process_assertion;
  2094 EXEC      4         0       0         0 end isnull;
  2098 ANNO      0         5       5         5    procedure t_isnull
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2103 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL VARCHAR2 Happy Path 1';
  2104 ANNO      1         0       0         0       isnull (
  2107 ANNO      1         0       0         0       temp_rec := g_rec;
  2109 ANNO      1         0       0         0       wt_assert.eq (
  2113 ANNO      1         1       1         1       wt_assert.eq (
  2118 ANNO      1         1       1         1       wt_assert.eq (
  2122 ANNO      1         0       0         0       wt_assert.eq (
  2127 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL VARCHAR2 Sad Path 1';
  2128 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  2129 ANNO      1         0       0         0       isnull (
  2132 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2133 ANNO      1         0       0         0       wt_assert.eq (
  2138 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL VARCHAR2 Sad Path 2';
  2139 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2141 ANNO      1         0       0         0          isnull (
  2145 ANNO      0         0       0         0          l_found_exception := FALSE;
  2146 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2147 ANNO      1         0       0         0          l_found_exception := TRUE;
  2148 ANNO      0         0       0         0       end;
  2149 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2151 ANNO      1         0       0         0       wt_assert.eq (
  2155 ANNO      1         0       0         0       wt_assert.eq (
  2160 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL BOOLEAN Happy Path 1';
  2161 ANNO      1         1       1         1       isnull (
  2165 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL BOOLEAN Sad Path 1';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2166 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  2167 ANNO      1         0       0         0       isnull (
  2170 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2171 ANNO      1         0       0         0       wt_assert.eq (
  2176 ANNO      1         1       1         1       wt_assert.g_testcase := 'ISNULL BOOLEAN Sad Path 2';
  2177 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2179 ANNO      1         0       0         0          isnull (
  2183 ANNO      0         0       0         0          l_found_exception := FALSE;
  2184 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2185 ANNO      1         0       0         0          l_found_exception := TRUE;
  2186 ANNO      0         1       1         1       end;
  2187 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2189 ANNO      1         0       0         0       wt_assert.eq (
  2193 ANNO      1         0       0         0       wt_assert.eq (
  2198 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL CLOB Happy Path 1';
  2199 ANNO      1         0       0         0       isnull (
  2202 ANNO      1         3       3         3       temp_rec := g_rec;
  2204 ANNO      1         1       1         1       wt_assert.eq (
  2208 ANNO      1         0       0         0       wt_assert.eq (
  2213 ANNO      1         1       1         1       wt_assert.eq (
  2217 ANNO      1         0       0         0       wt_assert.eq (
  2222 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL CLOB Sad Path 1';
  2223 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2224 ANNO      1         0       0         0       isnull (
  2227 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2228 ANNO      1         0       0         0       wt_assert.eq (
  2233 ANNO      1         1       1         1       wt_assert.g_testcase := 'ISNULL CLOB Sad Path 2';
  2234 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2236 ANNO      1         1       1         1          isnull (
  2240 ANNO      0         0       0         0          l_found_exception := FALSE;
  2241 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2242 ANNO      1         0       0         0          l_found_exception := TRUE;
  2243 ANNO      0         2       2         2       end;
  2245 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2246 ANNO      1         1       1         1       wt_assert.eq (
  2250 ANNO      1         1       1         1       wt_assert.eq (
  2255 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL BLOB Happy Path 1';
  2256 ANNO      1         0       0         0       isnull (
  2259 ANNO      1         1       1         1       temp_rec := g_rec;
  2261 ANNO      1         0       0         0       wt_assert.eq (
  2265 ANNO      1         1       1         1       wt_assert.eq (
  2270 ANNO      1         1       1         1       wt_assert.eq (
  2274 ANNO      1         0       0         0       wt_assert.eq (
  2279 ANNO      1         1       1         1       wt_assert.g_testcase := 'ISNULL BLOB Sad Path 1';
  2280 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2281 ANNO      1         0       0         0       isnull (
  2284 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2285 ANNO      1         1       1         1       wt_assert.eq (
  2290 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL BLOB Sad Path 2';
  2291 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2293 ANNO      1         0       0         0          isnull (
  2297 ANNO      0         0       0         0          l_found_exception := FALSE;
  2298 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2299 ANNO      1         1       1         1          l_found_exception := TRUE;
  2300 ANNO      0         1       1         1       end;
  2302 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2303 ANNO      1         0       0         0       wt_assert.eq (
  2307 ANNO      1         0       0         0       wt_assert.eq (
  2311 ANNO      1         3       3         3    end t_isnull;
  2317 EXEC      8        18       0         5 procedure raises (
  2326 EXEC      8      4502       0      1402       execute immediate check_call_in;
  2327 EXEC      5         0       0         0    exception when OTHERS then
  2328 EXEC      5       163      27        35       l_sqlerrm := SQLERRM;
  2329 EXEC      5       204      29        87       l_errstack := substr(dbms_utility.format_error_stack  ||
  2332 UNKN      0         2       0         1    end;
  2334 EXEC      8         6       0         1    g_rec.last_assert  := 'RAISES/THROWS';
  2335 EXEC      8         2       0         1    g_rec.last_msg     := msg_in;
  2336 EXEC      8         4       0         1    if against_exc_in is null AND l_sqlerrm is null
  2339 EXEC      2         0       0         0       g_rec.last_pass := TRUE;
  2340 UNKN      0         3       0         1    elsif against_exc_in is null OR l_sqlerrm is null
  2344 EXEC      1         1       1         1       g_rec.last_pass := FALSE;
  2347 EXEC      5        23       3         7       g_rec.last_pass := l_sqlerrm like '%' || against_exc_in || '%';
  2349 EXEC      8         3       0         1    if against_exc_in is null
  2351 EXEC      2         2       1         1       g_rec.last_details := 'No exception was expected' ||
  2354 EXEC      6         0       0         0    elsif l_sqlerrm is null
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2356 EXEC      1         2       2         2       g_rec.last_details := 'Expected exception "%'           || against_exc_in ||
  2359 EXEC      5         5       1         1       g_rec.last_details := 'Expected exception "%'           || against_exc_in ||
  2363 EXEC      8         1       0         1    if not g_rec.last_pass
  2365 EXEC      2         7       3         4       g_rec.last_details := 
  2368 EXEC      8         4       1         1    process_assertion;
  2369 EXEC      8        13       1         3 end raises;
  2371 UNKN      0         3       1         1 procedure raises (
  2377 EXEC      3         0       0         0    if against_exc_in is null
  2379 EXEC      1         0       0         0       raises (
  2384 EXEC      2        63       4        59       raises (
  2389 EXEC      3         2       1         1 end raises;
  2391 EXCL      0         0       0         0 procedure throws (
  2397 EXEC      1         0       0         0    raises (
  2401 EXEC      1         0       0         0 end throws;
  2403 EXCL      0         0       0         0 procedure throws (
  2409 EXEC      1         0       0         0    raises (
  2413 EXEC      1         0       0         0 end throws;
  2417 ANNO      0         2       2         2    procedure t_raises
  2421 ANNO      1         0       0         0       wt_assert.g_testcase := 'Raises Tests Happy Path 1';
  2422 ANNO      1         0       0         0       raises (
  2426 ANNO      1         2       2         2       temp_rec := g_rec;
  2428 ANNO      1         0       0         0       wt_assert.eq (
  2432 ANNO      1         0       0         0       wt_assert.eq (
  2437 ANNO      1         1       1         1       wt_assert.eq (
  2441 ANNO      1         5       5         5       wt_assert.eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2451 ANNO      1         0       0         0       wt_assert.g_testcase := 'Raises Tests Happy Path 2';
  2452 ANNO      1         0       0         0       raises (
  2456 ANNO      1         1       1         1       temp_rec := g_rec;
  2457 ANNO      1         2       2         2       wt_assert.eq (
  2468 ANNO      1         0       0         0       throws (
  2472 ANNO      1         1       1         1       temp_rec := g_rec;
  2473 ANNO      1         2       2         2       wt_assert.eq (
  2484 ANNO      1         0       0         0       throws (
  2488 ANNO      1         1       1         1       temp_rec := g_rec;
  2489 ANNO      1         2       2         2       wt_assert.eq (
  2500 ANNO      1         1       1         1       wt_assert.g_testcase := 'Raises Tests Happy Path 3';
  2501 ANNO      1         0       0         0       raises (
  2505 ANNO      1         0       0         0       temp_rec := g_rec;
  2506 ANNO      1         1       1         1       wt_assert.eq (
  2513 ANNO      1         0       0         0       raises (
  2517 ANNO      1         1       1         1       temp_rec := g_rec;
  2518 ANNO      1         1       1         1       wt_assert.eq (
  2525 ANNO      1         1       1         1       wt_assert.g_testcase := 'Raises Tests Sad Path 1';
  2526 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2527 ANNO      1         0       0         0       raises (
  2531 ANNO      1         2       2         2       temp_rec := g_rec;
  2532 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2534 ANNO      1         0       0         0       wt_assert.eq (
  2538 ANNO      1         1       1         1       wt_assert.isnotnull (
  2541 ANNO      1         6       6         6       wt_assert.this (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2547 ANNO      1         0       0         0       wt_assert.g_testcase := 'Raises Tests Sad Path 2';
  2548 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2549 ANNO      1         1       1         1       raises (
  2553 ANNO      1         1       1         1       temp_rec := g_rec;
  2554 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2556 ANNO      1         1       1         1       wt_assert.eq (
  2560 ANNO      1         1       1         1       wt_assert.eq (
  2566 ANNO      1         0       0         0    end t_raises;
  2572 EXEC      6        11       1         2 procedure eqqueryvalue (
  2584 EXEC      6         2       1         1    g_rec.last_assert     := 'EQQUERYVALUE';
  2585 EXEC      6         1       0         1    g_rec.last_msg        := msg_in;
  2586 EXEC      6       629      46       198    open l_rc for check_query_in;
  2587 EXEC      5       278      29        88    fetch l_rc into l_rc_buff;
  2588 EXEC      5        90      10        37    close l_rc;
  2589 EXEC      5         8       0         1    g_rec.last_pass    := (   l_rc_buff = against_value_in
  2590 UNKN      0         5       1         2                           or (    l_rc_buff is null
  2593 EXEC      5        24       4         5    g_rec.last_details := 'Expected "' || substr(against_value_in,1,1000) ||
  2596 EXEC      5         0       0         0    g_rec.raise_exception := raise_exc_in;
  2597 EXEC      5         2       0         1    process_assertion;
  2598 EXEC      2         0       0         0 exception when others then
  2599 EXEC      2       105      50        55    l_errstack := substr(dbms_utility.format_error_stack ||
  2601 EXEC      2         4       2         2    g_rec.last_details := 'Exception raised for Query: ' ||
  2604 EXEC      2         2       1         1    g_rec.last_pass    := FALSE;
  2605 EXEC      2         0       0         0    g_rec.raise_exception := raise_exc_in;
  2606 EXEC      2         1       1         1    process_assertion;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2607 EXEC      5        26       2        20 end eqqueryvalue;
  2610 EXEC      4        45      10        13 procedure eqqueryvalue (
  2622 EXEC      4         2       0         1    g_rec.last_assert  := 'EQQUERYVALUE';
  2623 EXEC      4         3       1         1    g_rec.last_msg     := msg_in;
  2624 EXEC      4       887     104       341    open l_rc for check_query_in;
  2625 EXEC      3      1594     181      1187    fetch l_rc into l_rc_buff;
  2626 EXEC      3       102      25        42    close l_rc;
  2627 EXEC      3     52064       2     37109    g_rec.last_pass    := (xmltype.getclobval(l_rc_buff)       =
  2629 EXEC      3     57875       5     18830    g_rec.last_details := 'Expected "' || substr(xmltype.getclobval(against_value_in),1,1000) ||
  2632 EXEC      3         6       2         2    g_rec.raise_exception := raise_exc_in;
  2633 EXEC      3         3       1         1    process_assertion;
  2634 EXEC      2         0       0         0 exception when others then
  2635 EXEC      2       134      43        91    l_errstack := substr(dbms_utility.format_error_stack ||
  2637 EXEC      2         4       2         2    g_rec.last_details := 'Exception raised for Query: ' ||
  2640 EXEC      2         0       0         0    g_rec.last_pass    := FALSE;
  2641 EXEC      2         1       0         1    g_rec.raise_exception := raise_exc_in;
  2642 EXEC      2         0       0         0    process_assertion;
  2643 EXEC      3       366      34       217 end eqqueryvalue;
  2646 EXEC      4        32       0         8 procedure eqqueryvalue (
  2658 EXEC      4         1       0         1    g_rec.last_assert  := 'EQQUERYVALUE';
  2659 EXEC      4         2       1         1    g_rec.last_msg     := msg_in;
  2660 EXEC      4       576      64       292    open l_rc for check_query_in;
  2661 EXEC      3       170      46        70    fetch l_rc into l_rc_buff;
  2662 EXEC      3        46      10        23    close l_rc;
  2663 EXEC      3      9170       0      8002    g_rec.last_pass    := (   l_rc_buff = against_value_in
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2664 UNKN      0         2       1         1                           or (    l_rc_buff is null
  2667 EXEC      3     10236    1585      6861    g_rec.last_details := 'Expected "' || substr(against_value_in,1,1000) ||
  2670 EXEC      3         3       0         2    g_rec.raise_exception := raise_exc_in;
  2671 EXEC      3         2       0         1    process_assertion;
  2672 EXEC      2         0       0         0 exception when others then
  2673 EXEC      2       128      44        84    l_errstack := substr(dbms_utility.format_error_stack ||
  2675 EXEC      2         6       3         3    g_rec.last_details := 'Exception raised for Query: ' ||
  2678 EXEC      2         1       0         1    g_rec.last_pass    := FALSE;
  2679 EXEC      2         0       0         0    g_rec.raise_exception := raise_exc_in;
  2680 EXEC      2         0       0         0    process_assertion;
  2681 EXEC      3       148       1        66 end eqqueryvalue;
  2684 EXEC      5        31       0         7 procedure eqqueryvalue (
  2697 EXEC      5         2       0         1    g_rec.last_assert  := 'EQQUERYVALUE';
  2698 EXEC      5         0       0         0    g_rec.last_msg     := msg_in;
  2699 EXEC      5       828      73       301    open l_rc for check_query_in;
  2700 EXEC      4       208      37        65    fetch l_rc into l_rc_buff;
  2701 EXEC      4       108      11        67    close l_rc;
  2702 EXEC      4        17       1         4    compare_results    := nvl(DBMS_LOB.COMPARE(l_rc_buff, against_value_in),-1);
  2703 EXEC      4        10       0         3    g_rec.last_pass    := (   (compare_results = 0)
  2704 UNKN      0         3       0         2                           or (    l_rc_buff is null
  2707 EXEC      4        29       3        14    g_rec.last_details := 'DBMS_LOB.COMPARE between BLOB and Query: ' ||
  2710 EXEC      4         1       1         1    g_rec.raise_exception := raise_exc_in;
  2711 EXEC      4         2       0         1    process_assertion;
  2712 EXEC      2         0       0         0 exception when others then
  2713 EXEC      2       122      45        77    l_errstack := substr(dbms_utility.format_error_stack ||
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2715 EXEC      2         5       2         3    g_rec.last_details := 'Exception raised for Query: ' ||
  2718 EXEC      2         0       0         0    g_rec.last_pass    := FALSE;
  2719 EXEC      2         0       0         0    g_rec.raise_exception := raise_exc_in;
  2720 EXEC      2         1       1         1    process_assertion;
  2721 EXEC      4        32      20        20 end eqqueryvalue;
  2725 ANNO      0         6       6         6    procedure t_eqqueryvalue
  2730 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE VARCHAR2 Happy Path 1';
  2731 ANNO      1         0       0         0       eqqueryvalue (
  2736 ANNO      1         1       1         1       temp_rec := g_rec;
  2738 ANNO      1         1       1         1       wt_assert.eq (
  2742 ANNO      1         1       1         1       wt_assert.eq (
  2747 ANNO      1         0       0         0       wt_assert.eq (
  2751 ANNO      1         0       0         0       wt_assert.eq (
  2756 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE VARCHAR2 Happy Path 2';
  2757 ANNO      1         1       1         1       eqqueryvalue (
  2763 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE VARCHAR2 Sad Path 1';
  2764 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2765 ANNO      1         1       1         1       eqqueryvalue (
  2769 ANNO      1         1       1         1       temp_rec := g_rec;
  2770 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2771 ANNO      1         1       1         1       wt_assert.eq (
  2776 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE VARCHAR2 Sad Path 2';
  2777 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2779 ANNO      1         0       0         0          eqqueryvalue (
  2784 ANNO      0         0       0         0          l_found_exception := FALSE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2785 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2786 ANNO      1         0       0         0          l_found_exception := TRUE;
  2787 ANNO      0         1       1         1       end;
  2789 ANNO      1         1       1         1       temp_rec := g_rec;
  2790 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  2791 ANNO      1         0       0         0       wt_assert.eq (
  2795 ANNO      1         0       0         0       wt_assert.eq (
  2800 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE VARCHAR2 Sad Path 3';
  2801 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  2802 ANNO      1         0       0         0       eqqueryvalue (
  2806 ANNO      1         2       2         2       temp_rec := g_rec;
  2807 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2809 ANNO      1         0       0         0       wt_assert.eq (
  2813 ANNO      1         1       1         1       wt_assert.isnotnull (
  2816 ANNO      1         6       6         6       wt_assert.this (
  2822 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE XMLTYPE Happy Path 1';
  2823 ANNO      1         0       0         0       eqqueryvalue (
  2827 ANNO      1         3       3         3       temp_rec := g_rec;
  2829 ANNO      1         0       0         0       wt_assert.eq (
  2833 ANNO      1         1       1         1       wt_assert.eq (
  2838 ANNO      1         1       1         1       wt_assert.eq (
  2842 ANNO      1         1       1         1       wt_assert.isnotnull (
  2845 ANNO      1        19      19        19       wt_assert.this (
  2850 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE XMLTYPE Sad Path 1';
  2851 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2852 ANNO      1         0       0         0       eqqueryvalue (
  2856 ANNO      1         6       6         6       temp_rec := g_rec;
  2857 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2859 ANNO      1         0       0         0       wt_assert.eq (
  2863 ANNO      1         1       1         1       wt_assert.isnotnull (
  2866 ANNO      1        14      14        14       wt_assert.this (
  2872 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE XMLTYPE Sad Path 2';
  2873 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2875 ANNO      1         1       1         1          eqqueryvalue (
  2880 ANNO      0         0       0         0          l_found_exception := FALSE;
  2881 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2882 ANNO      1         1       1         1          l_found_exception := TRUE;
  2883 ANNO      0         1       1         1       end;
  2885 ANNO      1         4       4         4       temp_rec := g_rec;
  2886 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2887 ANNO      1         1       1         1       wt_assert.eq (
  2891 ANNO      1         1       1         1       wt_assert.eq (
  2896 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE XMLTYPE Sad Path 3';
  2897 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2898 ANNO      1         0       0         0       eqqueryvalue (
  2902 ANNO      1         1       1         1       temp_rec := g_rec;
  2903 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2905 ANNO      1         1       1         1       wt_assert.eq (
  2909 ANNO      1         0       0         0       wt_assert.isnotnull (
  2912 ANNO      1         8       8         8       wt_assert.this (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2918 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE CLOB Happy Path 1';
  2919 ANNO      1         0       0         0       eqqueryvalue (
  2924 ANNO      1         4       4         4       temp_rec := g_rec;
  2926 ANNO      1         1       1         1       wt_assert.eq (
  2930 ANNO      1         0       0         0       wt_assert.eq (
  2935 ANNO      1         0       0         0       wt_assert.eq (
  2939 ANNO      1         1       1         1       wt_assert.isnotnull (
  2942 ANNO      1        17      17        17       wt_assert.this (
  2947 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE CLOB Happy Path 2';
  2948 ANNO      1         1       1         1       eqqueryvalue (
  2953 ANNO      1         1       1         1       temp_rec := g_rec;
  2955 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE CLOB Sad Path 1';
  2956 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2957 ANNO      1         0       0         0       eqqueryvalue (
  2961 ANNO      1         3       3         3       temp_rec := g_rec;
  2962 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2964 ANNO      1         1       1         1       wt_assert.eq (
  2968 ANNO      1         1       1         1       wt_assert.isnotnull (
  2971 ANNO      1        10      10        10       wt_assert.this (
  2977 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE CLOB Sad Path 2';
  2978 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  2980 ANNO      1         0       0         0          eqqueryvalue (
  2985 ANNO      0         0       0         0          l_found_exception := FALSE;
  2986 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2987 ANNO      1         0       0         0          l_found_exception := TRUE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2988 ANNO      0         1       1         1       end;
  2990 ANNO      1         2       2         2       temp_rec := g_rec;
  2991 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2992 ANNO      1         1       1         1       wt_assert.eq (
  2996 ANNO      1         0       0         0       wt_assert.eq (
  3001 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE CLOB Sad Path 3';
  3002 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3003 ANNO      1         1       1         1       eqqueryvalue (
  3007 ANNO      1         1       1         1       temp_rec := g_rec;
  3008 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3010 ANNO      1         1       1         1       wt_assert.eq (
  3014 ANNO      1         1       1         1       wt_assert.isnotnull (
  3017 ANNO      1         6       6         6       wt_assert.this (
  3023 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE BLOB Happy Path 1';
  3024 ANNO      1         0       0         0       eqqueryvalue (
  3029 ANNO      1         2       2         2       temp_rec := g_rec;
  3031 ANNO      1         1       1         1       wt_assert.eq (
  3035 ANNO      1         0       0         0       wt_assert.eq (
  3040 ANNO      1         1       1         1       wt_assert.eq (
  3044 ANNO      1         1       1         1       wt_assert.eq (
  3050 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE BLOB Happy Path 2';
  3051 ANNO      1         0       0         0       eqqueryvalue (
  3057 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE BLOB Sad Path 1';
  3058 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3059 ANNO      1         1       1         1       eqqueryvalue (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3063 ANNO      1         2       2         2       temp_rec := g_rec;
  3064 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3066 ANNO      1         1       1         1       wt_assert.eq (
  3070 ANNO      1         2       2         2       wt_assert.eq (
  3076 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE BLOB Sad Path 2';
  3077 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3079 ANNO      1         1       1         1          eqqueryvalue (
  3084 ANNO      0         0       0         0          l_found_exception := FALSE;
  3085 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  3086 ANNO      1         0       0         0          l_found_exception := TRUE;
  3087 ANNO      0         1       1         1       end;
  3089 ANNO      1         2       2         2       temp_rec := g_rec;
  3090 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3091 ANNO      1         0       0         0       wt_assert.eq (
  3095 ANNO      1         0       0         0       wt_assert.eq (
  3100 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE BLOB Sad Path 3';
  3101 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  3102 ANNO      1         0       0         0       eqqueryvalue (
  3106 ANNO      1         2       2         2       temp_rec := g_rec;
  3107 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3109 ANNO      1         0       0         0       wt_assert.eq (
  3113 ANNO      1         0       0         0       wt_assert.isnotnull (
  3116 ANNO      1         9       9         9       wt_assert.this (
  3121 ANNO      1         3       3         3    end t_eqqueryvalue;
  3126 UNKN      0         2       0         1 procedure eqquery (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3133 EXEC      4         2       0         1    g_rec.last_assert  := 'EQQUERY';
  3134 EXEC      4         1       0         1    g_rec.last_msg     := msg_in;
  3135 EXEC      4         2       1         1    compare_queries(check_query_in, against_query_in);
  3136 EXEC      4         0       0         0    g_rec.raise_exception := raise_exc_in;
  3137 EXEC      4         2       0         1    process_assertion;
  3138 EXEC      3         2       0         1 end eqquery;
  3142 ANNO      0         2       2         2    procedure t_eqquery
  3147 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERY Tests Happy Path 1';
  3148 ANNO      1         1       1         1       wt_assert.eqquery (
  3152 ANNO      1         2       2         2       temp_rec := g_rec;
  3154 ANNO      1         1       1         1       wt_assert.eq (
  3158 ANNO      1         0       0         0       wt_assert.eq (
  3163 ANNO      1         1       1         1       wt_assert.eq (
  3167 ANNO      1         0       0         0       wt_assert.isnotnull (
  3170 ANNO      1         4       4         4       wt_assert.this (
  3175 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERY Tests Sad Path 1';
  3176 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3177 ANNO      1         1       1         1       eqquery (
  3181 ANNO      1         4       4         4       temp_rec := g_rec;
  3182 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3184 ANNO      1         1       1         1       wt_assert.eq (
  3188 ANNO      1         0       0         0       wt_assert.isnotnull (
  3191 ANNO      1         4       4         4       wt_assert.this (
  3196 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERY Tests Sad Path 2';
  3197 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3199 ANNO      1         0       0         0          eqquery (
  3204 ANNO      0         0       0         0          l_found_exception := FALSE;
  3205 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  3206 ANNO      1         1       1         1          l_found_exception := TRUE;
  3207 ANNO      0         2       2         2       end;
  3208 ANNO      1         4       4         4       temp_rec := g_rec;
  3209 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3211 ANNO      1         1       1         1       wt_assert.eq (
  3215 ANNO      1         1       1         1       wt_assert.eq (
  3220 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERY Tests Sad Path 3';
  3221 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3222 ANNO      1         0       0         0       eqquery (
  3226 ANNO      1         4       4         4       temp_rec := g_rec;
  3227 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3229 ANNO      1         0       0         0       wt_assert.eq (
  3233 ANNO      1         1       1         1       wt_assert.isnotnull (
  3236 ANNO      1        11      11        11       wt_assert.this (
  3240 ANNO      1         0       0         0    end t_eqquery;
  3245 UNKN      0         5       1         1 procedure eqtable (
  3253 EXEC      5         4       1         1    l_check_query    varchar2(16000) := 'select * from ' || check_this_in;
  3254 EXEC      5         1       1         1    l_against_query  varchar2(16000) := 'select * from ' || against_this_in;
  3256 EXEC      5         2       0         1    g_rec.last_assert  := 'EQTABLE';
  3257 EXEC      5         2       0         1    g_rec.last_msg     := msg_in;
  3258 EXEC      5         1       0         1    if check_where_in is not null
  3260 EXEC      3         1       1         1       l_check_query := l_check_query || ' where ' || check_where_in;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3262 EXEC      3         0       0         0    if against_where_in is not null
  3264 EXEC      3         2       0         1       l_against_query := l_against_query || ' where ' || against_where_in;
  3266 EXEC      5         3       1         1    compare_queries(l_check_query, l_against_query);
  3267 EXEC      5         3       1         1    g_rec.raise_exception := raise_exc_in;
  3268 EXEC      5         4       1         2    process_assertion;
  3269 EXEC      4         2       1         1 end eqtable;
  3273 ANNO      0         3       3         3    procedure t_eqtable
  3278 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQTABLE Tests Happy Path 1';
  3279 ANNO      1         0       0         0       wt_assert.eqtable (
  3285 ANNO      1         1       1         1       temp_rec := g_rec;
  3287 ANNO      1         0       0         0       wt_assert.eq (
  3291 ANNO      1         0       0         0       wt_assert.eq (
  3296 ANNO      1         1       1         1       wt_assert.eq (
  3300 ANNO      1         0       0         0       wt_assert.isnotnull (
  3303 ANNO      1         4       4         4       wt_assert.this (
  3308 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQTABLE Tests Happy Path 2';
  3309 ANNO      1         6       1         3       eqtable (
  3316 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQTABLE Sad Path 1';
  3317 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  3318 ANNO      1         4       1         3       eqtable (
  3324 ANNO      1         5       5         5       temp_rec := g_rec;
  3325 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3327 ANNO      1         0       0         0       wt_assert.eq (
  3331 ANNO      1         1       1         1       wt_assert.isnotnull (
  3334 ANNO      1         7       7         7       wt_assert.this (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3339 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQTABLE Sad Path 2';
  3340 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3342 ANNO      1         4       1         3          eqtable (
  3349 ANNO      0         0       0         0          l_found_exception := FALSE;
  3350 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  3351 ANNO      1         0       0         0          l_found_exception := TRUE;
  3352 ANNO      0         1       1         1       end;
  3354 ANNO      1         4       4         4       temp_rec := g_rec;
  3355 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3356 ANNO      1         0       0         0       wt_assert.eq (
  3360 ANNO      1         0       0         0       wt_assert.eq (
  3365 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQTABLE Sad Path 3';
  3366 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3367 ANNO      1         1       1         1       eqtable (
  3371 ANNO      1         3       3         3       temp_rec := g_rec;
  3372 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3374 ANNO      1         0       0         0       wt_assert.eq (
  3378 ANNO      1         0       0         0       wt_assert.isnotnull (
  3381 ANNO      1        10      10        10       wt_assert.this (
  3385 ANNO      1         2       2         2    end t_eqtable;
  3390 UNKN      0         7       1         2 procedure eqtabcount (
  3398 EXEC      6         7       1         2    l_query      varchar2(16000) := 'select count(*) from ' || check_this_in;
  3402 EXEC     11        28       1         5    procedure l_run_query is
  3406 EXEC     11      2410     104       563       open l_rc for l_query;
  3407 EXEC     10    618859    5823    332876       fetch l_rc into l_cnt;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3408 EXEC     10      1205      39       711       close l_rc;
  3409 EXEC     10        16       1         2       l_success := TRUE;
  3411 EXEC      1         0       0         0       when OTHERS
  3413 EXEC      1        80      80        80          g_rec.last_details := SQLERRM || CHR(10) ||
  3415 EXEC      1         0       0         0          g_rec.last_pass    := FALSE;
  3416 EXEC      1         0       0         0          l_success      := FALSE;
  3417 EXEC      1         0       0         0          g_rec.raise_exception := raise_exc_in;
  3418 EXEC      1         1       1         1          process_assertion;
  3419 EXEC     11        59      25        25    end l_run_query;
  3421 EXEC      6         3       1         1    g_rec.last_assert  := 'EQTABCOUNT';
  3422 EXEC      6         4       1         1    g_rec.last_msg     := msg_in;
  3424 EXEC      6         3       1         1    l_query := 'select count(*) from ' || check_this_in;
  3425 EXEC      6         0       0         0    if check_where_in is not null
  3427 EXEC      4         5       2         2       l_query := l_query || ' where ' || check_where_in;
  3429 EXEC      6         1       1         1    l_run_query;
  3430 EXEC      7         4       0         1    if NOT l_success then return; end if;
  3431 EXEC      5         5       1         1    l_check_cnt := l_cnt;
  3433 EXEC      5        23       4         5    l_query := 'select count(*) from ' || against_this_in;
  3434 EXEC      5         1       1         1    if against_where_in is not null
  3436 EXEC      3         5       1         2       l_query := l_query || ' where ' || against_where_in;
  3438 EXEC      5         5       1         1    l_run_query;
  3439 EXEC      5         3       1         1    if NOT l_success then return; end if;
  3440 EXEC      5        10       2         2    g_rec.last_pass    := (l_check_cnt = l_cnt);
  3442 EXEC      5        55      10        12    g_rec.last_details := 'Expected ' || l_cnt       || ' rows from "' || against_this_in ||
  3445 EXEC      5         0       0         0    g_rec.raise_exception := raise_exc_in;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3446 EXEC      5         7       1         2    process_assertion;
  3447 EXEC      4         2       0         1 end eqtabcount;
  3451 ANNO      0         3       3         3    procedure t_eqtabcount
  3456 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQTABCOUNT Tests Happy Path 1';
  3457 ANNO      1         6       1         4       eqtabcount (
  3463 ANNO      1         2       2         2       temp_rec := g_rec;
  3465 ANNO      1         1       1         1       wt_assert.eq (
  3469 ANNO      1         0       0         0       wt_assert.eq (
  3474 ANNO      1         0       0         0       wt_assert.eq (
  3478 ANNO      1         0       0         0       wt_assert.isnotnull (
  3481 ANNO      1         9       9         9       wt_assert.this (
  3487 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQTABCOUNT Tests Happy Path 2';
  3488 ANNO      1         3       3         3       eqtabcount (
  3495 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQTABCOUNT Sad Path 1';
  3496 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  3497 ANNO      1         3       1         2       eqtabcount (
  3503 ANNO      1         6       6         6       temp_rec := g_rec;
  3504 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3506 ANNO      1         0       0         0       wt_assert.eq (
  3510 ANNO      1         1       1         1       wt_assert.isnotnull (
  3513 ANNO      1         8       8         8       wt_assert.this (
  3519 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQTABCOUNT Sad Path 2';
  3520 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3522 ANNO      1         2       2         2          eqtabcount (
  3529 ANNO      0         0       0         0          l_found_exception := FALSE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3530 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  3531 ANNO      1         1       1         1          l_found_exception := TRUE;
  3532 ANNO      0         1       1         1       end;
  3534 ANNO      1         3       3         3       temp_rec := g_rec;
  3535 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3536 ANNO      1         1       1         1       wt_assert.eq (
  3540 ANNO      1         1       1         1       wt_assert.eq (
  3545 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQTABCOUNT Sad Path 3';
  3546 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3547 ANNO      1         1       1         1       eqtabcount (
  3551 ANNO      1         6       6         6       temp_rec := g_rec;
  3552 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3554 ANNO      1         1       1         1       wt_assert.eq (
  3558 ANNO      1         1       1         1       wt_assert.isnotnull (
  3561 ANNO      1        12      12        12       wt_assert.this (
  3566 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQTABCOUNT Sad Path 4';
  3567 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3568 ANNO      1         0       0         0       eqtabcount (
  3572 ANNO      1         3       3         3       temp_rec := g_rec;
  3573 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3575 ANNO      1         1       1         1       wt_assert.eq (
  3579 ANNO      1         0       0         0       wt_assert.isnotnull (
  3583 ANNO      1         3       3         3       wt_assert.this (
  3587 ANNO      1         2       2         2       wt_assert.this (
  3591 ANNO      1         3       3         3    end t_eqtabcount;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3596 EXEC      6         8       0         1 procedure objexists (
  3605 EXEC      6         0       0         0    g_rec.last_assert  := 'OBJEXISTS';
  3606 EXEC      6         1       0         1    g_rec.last_msg     := msg_in;
  3607 EXEC      6      4226     135      2623    select count(*) into l_num_objects
  3614 EXEC      6        12       0         3    g_rec.last_pass    := case l_num_objects when 0 then FALSE else TRUE end;
  3615 EXEC      6         3       1         1    g_rec.last_details := 'Number of objects found for "' ||
  3616 UNKN      0        14       0         5                          case when obj_owner_in is null then ''
  3619 UNKN      0        24       2         6                          case when obj_type_in is null then ''
  3622 EXEC      6         1       1         1    g_rec.raise_exception := raise_exc_in;
  3623 EXEC      6         2       0         1    process_assertion;
  3624 EXEC      5         4       1         1 end objexists;
  3627 UNKN      0         2       0         2 procedure objexists (
  3633 EXEC      2         5       2         3    l_pos    number := instr(check_this_in, '.');
  3635 EXEC      2         4       2         2    objexists(msg_in       => msg_in
  3638 EXEC      2         0       0         0 end objexists;
  3642 ANNO      0         2       2         2    procedure t_object_exists
  3647 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJEXISTS Happy Path 1';
  3648 ANNO      1         0       0         0       objexists (
  3652 ANNO      1         1       1         1       temp_rec := g_rec;
  3654 ANNO      1         0       0         0       wt_assert.eq (
  3658 ANNO      1         0       0         0       wt_assert.eq (
  3663 ANNO      1         1       1         1       wt_assert.eq (
  3667 ANNO      1         1       1         1       wt_assert.eq (
  3672 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJEXISTS Happy Path 2';
  3673 ANNO      1         0       0         0       objexists (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3679 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJEXISTS Happy Path 3';
  3680 ANNO      1         0       0         0       objexists (
  3684 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJEXISTS Happy Path 4';
  3685 ANNO      1         0       0         0       objexists (
  3689 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJEXISTS Sad Path 1';
  3690 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3691 ANNO      1         0       0         0       objexists (
  3695 ANNO      1         2       2         2       temp_rec := g_rec;
  3696 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3698 ANNO      1         0       0         0       wt_assert.eq (
  3702 ANNO      1         0       0         0       wt_assert.eq (
  3707 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJEXISTS Sad Path 2';
  3708 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3710 ANNO      1         0       0         0          objexists (
  3715 ANNO      0         0       0         0          l_found_exception := FALSE;
  3716 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  3717 ANNO      1         0       0         0          l_found_exception := TRUE;
  3718 ANNO      0         1       1         1       end;
  3719 ANNO      1         1       1         1       temp_rec := g_rec;
  3720 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  3722 ANNO      1         0       0         0       wt_assert.eq (
  3726 ANNO      1         0       0         0       wt_assert.eq (
  3730 ANNO      1         0       0         0    end t_object_exists;
  3735 EXEC      5         3       0         1 procedure objnotexists (
  3744 EXEC      5         2       1         1    g_rec.last_assert  := 'OBJNOTEXISTS';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3745 EXEC      5         2       0         1    g_rec.last_msg     := msg_in;
  3746 EXEC      5      1162     134       357    select count(*) into l_num_objects
  3753 EXEC      5         5       0         1    g_rec.last_pass    := case l_num_objects when 0 then TRUE else FALSE end;
  3754 EXEC      5         2       1         1    g_rec.last_details := 'Number of objects found for "' ||
  3755 UNKN      0        11       1         2                          case when obj_owner_in is null then ''
  3758 UNKN      0        12       2         2                          case when obj_type_in is null then ''
  3761 EXEC      5         2       0         1    g_rec.raise_exception := raise_exc_in;
  3762 EXEC      5         2       0         1    process_assertion;
  3763 EXEC      4         2       1         1 end objnotexists;
  3766 UNKN      0         1       1         1 procedure objnotexists (
  3772 EXEC      1         3       3         3    l_pos    number := instr(check_this_in, '.');
  3774 EXEC      1         3       3         3    objnotexists(msg_in       => msg_in
  3777 EXEC      1         0       0         0 end objnotexists;
  3781 ANNO      0         2       2         2    procedure t_object_not_exists
  3786 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJNOTEXISTS Happy Path 1';
  3787 ANNO      1         0       0         0       objnotexists (
  3791 ANNO      1         1       1         1       temp_rec := g_rec;
  3793 ANNO      1         1       1         1       wt_assert.eq (
  3797 ANNO      1         0       0         0       wt_assert.eq (
  3802 ANNO      1         0       0         0       wt_assert.eq (
  3806 ANNO      1         0       0         0       wt_assert.eq (
  3811 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJNOTEXISTS Happy Path 2';
  3812 ANNO      1         0       0         0       objnotexists (
  3818 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJNOTEXISTS Happy Path 3';
  3819 ANNO      1         0       0         0       objnotexists (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3823 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJNOTEXISTS Sad Path 1';
  3824 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  3825 ANNO      1         0       0         0       objnotexists (
  3829 ANNO      1         2       2         2       temp_rec := g_rec;
  3830 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3832 ANNO      1         0       0         0       wt_assert.eq (
  3836 ANNO      1         0       0         0       wt_assert.eq (
  3841 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJNOTEXISTS Sad Path 2';
  3842 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  3844 ANNO      1         0       0         0          objnotexists (
  3849 ANNO      0         0       0         0          l_found_exception := FALSE;
  3850 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  3851 ANNO      1         0       0         0          l_found_exception := TRUE;
  3852 ANNO      0         1       1         1       end;
  3854 ANNO      1         2       2         2       temp_rec := g_rec;
  3855 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3856 ANNO      1         0       0         0       wt_assert.eq (
  3860 ANNO      1         0       0         0       wt_assert.eq (
  3864 ANNO      1         1       1         1    end t_object_not_exists;
  3873 ANNO      0        12      12        12    procedure WTPLSQL_RUN  --% WTPLSQL SET DBOUT "WT_ASSERT:PACKAGE BODY" %--
  3876 ANNO      1      1543    1543      1543       select temp_clob,  temp_nclob,  temp_xml,  temp_blob
  3880 ANNO      1         2       2         2       t_boolean_to_status;
  3881 ANNO      1         0       0         0       t_process_assertion;
  3882 ANNO      1         0       0         0       t_compare_queries;
  3883 ANNO      1         0       0         0       t_nls_settings;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3884 ANNO      1         0       0         0       t_last_values;
  3885 ANNO      1         0       0         0       t_reset_globals;
  3886 ANNO      1         0       0         0       t_this;
  3887 ANNO      1         0       0         0       t_eq;
  3888 ANNO      1         0       0         0       t_isnotnull;
  3889 ANNO      1         1       1         1       t_isnull;
  3891 ANNO      1         0       0         0       t_raises;
  3892 ANNO      1         0       0         0       t_eqqueryvalue;
  3893 ANNO      1         0       0         0       t_eqquery;
  3894 ANNO      1         0       0         0       t_eqtable;
  3895 ANNO      1         0       0         0       t_eqtabcount;
  3896 ANNO      1         1       1         1       t_object_exists;
  3897 ANNO      1         0       0         0       t_object_not_exists;
  3898 ANNO      1         2       2         2    end WTPLSQL_RUN;
  3903 EXCL      0         0       0         0 end wt_assert;


    wtPLSQL 1.1.0 - Run ID 423: 20-May-2018 03:39:59 PM

  Test Results for WTP.WT_PROFILER
       Total Testcases:       41      Total Assertions:      265
  Minimum Elapsed msec:        0     Failed Assertions:        0
  Average Elapsed msec:       28      Error Assertions:        0
  Maximum Elapsed msec:     1205            Test Yield:   100.00%
  Total Run Time (sec):      7.4

  Code Coverage for PACKAGE BODY WTP.WT_PROFILER
       Annotated Lines:      534  Total Profiled Lines:      696
        Excluded Lines:        2  Total Executed Lines:      145
  Minimum Elapsed usec:        0    Not Executed Lines:        3
  Average Elapsed usec:     3484         Unknown Lines:       12
  Maximum Elapsed usec:   619786         Code Coverage:    98.00%
 Trigger Source Offset:        0

 - WTP.WT_PROFILER Test Result Details (Test Run ID 423)
-----------------------------------------------------------
 ---- Test Case: Get Error Messages
 PASS 1006ms ERROR_PARAM Test 1. ISNOTNULL - Expected NOT NULL and got "DBMS_PROFILER Error: A subprogram was called with an incorrect parameter."
 PASS    1ms ERROR_PARAM Test 2. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms ERROR_IO Test 1. ISNOTNULL - Expected NOT NULL and got "DBMS_PROFILER Error: Data flush operation failed. Check whether the profiler tables have been created, are accessible, and that there is adequate space."
 PASS    0ms ERROR_IO Test 2. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms ERROR_VERSION Test 1. ISNOTNULL - Expected NOT NULL and got "DBMS_PROFILER Error: There is a mismatch between package and database implementation. Oracle returns this error if an incorrect version of the DBMS_PROFILER package is installed, and if the version of the profiler package cannot work with this database version."
 PASS    0ms ERROR_VERSION Test 2. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms Unknown Error Test 1. ISNOTNULL - Expected NOT NULL and got "DBMS_PROFILER Error: Unknown error number -9999"
 PASS    0ms Unknown Error Test 2. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: Delete PL/SQL Profiler Records Happy Path 1
 PASS    2ms delete_plsql_profiler_recs(-99) 1. ISNULL - Expected NULL and got ""
 PASS    1ms Number of plsql_profiler_runs (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_runs where runid = -99
 PASS    0ms Number of plsql_profiler_units (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_units where runid = -99
 PASS    1ms Number of plsql_profiler_data (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_data where runid = -99
 ---- Test Case: Delete PL/SQL Profiler Records Happy Path 2
 PASS    1ms insert plsql_profiler_runs (-99). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into plsql_profiler_runs (runid) values (-99)".
 PASS    1ms insert plsql_profiler_units (-99). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into plsql_profiler_units (runid, unit_number, total_time) values (-99, -99, 0)".
 PASS    0ms insert plsql_profiler_data (RUNID: -99). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into plsql_profiler_data (runid, unit_number, line#) values (-99, -99, 0)".
 PASS    1ms Number of plsql_profiler_runs (-99). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_runs where runid = -99
 PASS    0ms Number of plsql_profiler_units (-99). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_units where runid = -99
 PASS    0ms Number of plsql_profiler_data (-99). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_data where runid = -99
 PASS    1ms delete_plsql_profiler_recs(-99) 2. ISNULL - Expected NULL and got ""
 PASS    0ms Number of plsql_profiler_runs (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_runs where runid = -99
 PASS    0ms Number of plsql_profiler_units (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_units where runid = -99
 PASS    1ms Number of plsql_profiler_data (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_data where runid = -99
 ---- Test Case: Find DBOUT Setup
 PASS   37ms Compile package WT_PROFILE_FIND_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package WT_PROFILE_FIND_DBOUT is\n   l_junk number;\nend WT_PROFILE_FIND_DBOUT;".
 PASS    1ms Compile package WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_FIND_DBOUT package. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE) is 1
 ---- Test Case: Find DBOUT Happy Path 1
 PASS   11ms Compile package body WT_PROFILE_FIND_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_FIND_DBOUT is\nbegin\n  l_junk := 1;\nend WT_PROFILE_FIND_DBOUT;".
 PASS    0ms Compile package body WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_FIND_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE BODY) is 1
 PASS    0ms l_recTEST.dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.dbout_name. ISNULL - Expected NULL and got ""
 PASS    1ms l_recTEST.dbout_type. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.error_message. ISNULL - Expected NULL and got ""
 ---- Test Case: Find DBOUT Happy Path 2
 PASS   20ms Compile package body WT_PROFILE_FIND_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_FIND_DBOUT is\n  --% WTPLSQL SET DBOUT "WT_PROFILE_FIND_DBOUT:PACKAGE BODY" %--\nbegin\n  l_junk := 1;\nend WT_PROFILE_FIND_DBOUT;".
 PASS    1ms Compile package body WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_FIND_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE BODY) is 1
 PASS  964ms l_recTEST.dbout_owner. EQ - Expected "WTP" and got "WTP"
 PASS    0ms l_recTEST.dbout_name. EQ - Expected "WT_PROFILE_FIND_DBOUT" and got "WT_PROFILE_FIND_DBOUT"
 PASS    0ms l_recTEST.dbout_type. EQ - Expected "PACKAGE BODY" and got "PACKAGE BODY"
 PASS    0ms l_recTEST.error_message. ISNULL - Expected NULL and got ""
 ---- Test Case: Find DBOUT Happy Path 3
 PASS   29ms Compile package body WT_PROFILE_FIND_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_FIND_DBOUT is\n  --% WTPLSQL SET DBOUT "WTP.WT_PROFILE_FIND_DBOUT:PACKAGE BODY" %--\nbegin\n  l_junk := 1;\nend WT_PROFILE_FIND_DBOUT;".
 PASS    1ms Compile package body WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_FIND_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE BODY) is 1
 PASS 1205ms l_recTEST.dbout_owner. EQ - Expected "WTP" and got "WTP"
 PASS    0ms l_recTEST.dbout_name. EQ - Expected "WT_PROFILE_FIND_DBOUT" and got "WT_PROFILE_FIND_DBOUT"
 PASS    0ms l_recTEST.dbout_type. EQ - Expected "PACKAGE BODY" and got "PACKAGE BODY"
 PASS    0ms l_recTEST.error_message. ISNULL - Expected NULL and got ""
 ---- Test Case: Find DBOUT Sad Path 1
 PASS   41ms Compile package body WT_PROFILE_FIND_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_FIND_DBOUT is\n  --% WTPLSQL SET DBOUT "BOGUS1" %--\nbegin\n  l_junk := 1;\nend WT_PROFILE_FIND_DBOUT;".
 PASS    0ms Compile package body WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_FIND_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE BODY) is 1
 PASS  975ms l_recTEST.dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.dbout_type. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.error_message. EQ - Expected "Unable to find database object "BOGUS1"." and got "Unable to find database object "BOGUS1"."
 ---- Test Case: Find DBOUT Sad Path 2
 PASS   18ms Compile package body WT_PROFILE_FIND_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_FIND_DBOUT is\n  --% WTPLSQL SET DBOUT "WTP.WT_PROFILE_FIND_DBOUT" %--\nbegin\n  l_junk := 1;\nend WT_PROFILE_FIND_DBOUT;".
 PASS    0ms Compile package body WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_FIND_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE BODY) is 1
 PASS 1023ms l_recTEST.dbout_owner. EQ - Expected "WTP" and got "WTP"
 PASS    0ms l_recTEST.dbout_name. EQ - Expected "WT_PROFILE_FIND_DBOUT" and got "WT_PROFILE_FIND_DBOUT"
 PASS    0ms l_recTEST.error_message. EQ - Expected "Found too many database objects "WTP.WT_PROFILE_FIND_DBOUT"." and got "Found too many database objects "WTP.WT_PROFILE_FIND_DBOUT"."
 ---- Test Case: Find DBOUT Sad Path 3
 PASS   18ms Compile package body WT_PROFILE_FIND_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_FIND_DBOUT is\n  --% WTPLSQL SET DBOUT "SYS.ALL_OBJECTS:VIEW" %--\nbegin\n  l_junk := 1;\nend WT_PROFILE_FIND_DBOUT;".
 PASS    0ms Compile package body WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_FIND_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE BODY) is 1
 PASS  718ms l_recTEST.dbout_owner. EQ - Expected "SYS" and got "SYS"
 PASS    0ms l_recTEST.dbout_name. EQ - Expected "ALL_OBJECTS" and got "ALL_OBJECTS"
 PASS    0ms l_recTEST.dbout_type. EQ - Expected "VIEW" and got "VIEW"
 PASS    0ms l_recTEST.error_message. ISNULL - Expected NULL and got ""
 ---- Test Case: Find DBOUT Teardown
 PASS   21ms drop package WT_PROFILE_FIND_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "drop package WT_PROFILE_FIND_DBOUT".
 PASS    1ms WT_PROFILE_FIND_DBOUT package. OBJNOTEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE) is 0
 ---- Test Case: Load Anno Setup
 PASS    1ms Number of ANNO_AA elements. ISNOTNULL - Expected NOT NULL and got "0"
 PASS   12ms Compile package WT_PROFILE_LOAD_ANNO. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package WT_PROFILE_LOAD_ANNO is\n  l_junk number;\nend WT_PROFILE_LOAD_ANNO;".
 PASS    1ms Compile package WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_LOAD_ANNO package. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE) is 1
 ---- Test Case: Load Anno Happy Path 1
 PASS   10ms Compile package body WT_PROFILE_LOAD_ANNO. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_LOAD_ANNO is\nbegin\n  l_junk := 1;\nend WT_PROFILE_LOAD_ANNO;".
 PASS    0ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS    0ms l_annoTest.COUNT. EQ - Expected "0" and got "0"
 ---- Test Case: Load Anno Happy Path 2
 PASS   20ms Compile package body WT_PROFILE_LOAD_ANNO. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_LOAD_ANNO is\nbegin\n  --%WTPLSQL_begin_ignore_lines%--\n  l_junk := 1;\nend WT_PROFILE_LOAD_ANNO;".
 PASS    0ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS    1ms l_annoTest.COUNT. EQ - Expected "3" and got "3"
 PASS    0ms l_annoTest.exists(3). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(4). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(5). EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: Load Anno Happy Path 3
 PASS   17ms Compile package body WT_PROFILE_LOAD_ANNO. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_LOAD_ANNO is\nbegin\n  l_junk := 1;\n  --%WTPLSQL_begin_ignore_lines%--\n  l_junk := 2;\n  --%WTPLSQL_end_ignore_lines%--\n  l_junk := 3;\nend WT_PROFILE_LOAD_ANNO;".
 PASS    1ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS    1ms l_annoTest.COUNT. EQ - Expected "3" and got "3"
 PASS    0ms l_annoTest.exists(4). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(5). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(6). EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: Load Anno Happy Path 4
 PASS   22ms Compile package body WT_PROFILE_LOAD_ANNO. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_LOAD_ANNO is\nbegin\n  l_junk := 1;\n  --%WTPLSQL_begin_ignore_lines%--\n  l_junk := 2;\n  --%WTPLSQL_end_ignore_lines%--\n  l_junk := 3;\n  --%WTPLSQL_begin_ignore_lines%--\n  l_junk := 4;\nend WT_PROFILE_LOAD_ANNO;".
 PASS    0ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS    1ms l_annoTest.COUNT. EQ - Expected "6" and got "6"
 PASS    0ms l_annoTest.exists(4). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(5). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(6). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(8). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(9). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(10). EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: Load Anno Sad Path 1
 PASS   20ms Compile package body WT_PROFILE_LOAD_ANNO. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_LOAD_ANNO is\nbegin\n  --%WTPLSQL_end_ignore_lines%--\n  l_junk := 4;\nend WT_PROFILE_LOAD_ANNO;".
 PASS    0ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS    0ms l_annoTest.COUNT. EQ - Expected "0" and got "0"
 ---- Test Case: Load Anno Sad Path 2
 PASS   19ms Compile package body WT_PROFILE_LOAD_ANNO. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_LOAD_ANNO is\nbegin\n  l_junk := 1;\n  --%WTPLSQL_begin_ignore_lines%--\n  l_junk := 2;\n  --%WTPLSQL_end_ignore_lines%--\n  l_junk := 3;\n  --%WTPLSQL_end_ignore_lines%--\n  l_junk := 4;\nend WT_PROFILE_LOAD_ANNO;".
 PASS    0ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS    1ms l_annoTest.COUNT. EQ - Expected "3" and got "3"
 PASS    0ms l_annoTest.exists(4). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(5). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(6). EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: Load Anno Sad Path 3
 PASS   21ms Compile package body WT_PROFILE_LOAD_ANNO. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_LOAD_ANNO is\nbegin\n  l_junk := 1;\n  --%WTPLSQL_begin_ignore_lines%--\n  l_junk := 2;\n  --%WTPLSQL_begin_ignore_lines%--\n  l_junk := 3;\n  --%WTPLSQL_end_ignore_lines%--\n  l_junk := 4;\nend WT_PROFILE_LOAD_ANNO;".
 PASS    1ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS    1ms l_annoTest.COUNT. EQ - Expected "5" and got "5"
 PASS    0ms l_annoTest.exists(4). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(5). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(6). EQ - Expected "TRUE" and got "TRUE"
 PASS    1ms l_annoTest.exists(7). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(8). EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: Load Anno Teardown
 PASS   22ms drop package WT_PROFILE_LOAD_ANNO. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "drop package WT_PROFILE_LOAD_ANNO".
 PASS    1ms WT_PROFILE_LOAD_ANNO package. OBJNOTEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE) is 0
 PASS    0ms Number of ANNO_AA elements. ISNOTNULL - Expected NOT NULL and got "0"
 ---- Test Case: Insert DBOUT Profile Setup
 PASS   12ms Compile package WT_PROFILE_INSERT_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package WT_PROFILE_INSERT_DBOUT is\n  l_junk number;\nend WT_PROFILE_INSERT_DBOUT;".
 PASS    1ms Compile package WT_PROFILE_INSERT_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_INSERT_DBOUT package. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_INSERT_DBOUT"(PACKAGE) is 1
 PASS   14ms Compile package body WT_PROFILE_INSERT_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_INSERT_DBOUT is\nbegin\n  l_junk := 1;\n  --%WTPLSQL_begin_ignore_lines%--\n  l_junk := 2;\n  --%WTPLSQL_end_ignore_lines%--\n  if 0 = 1 then\n     l_junk := 3;\n  end if;\nend WT_PROFILE_INSERT_DBOUT;".
 PASS    0ms Compile package body WT_PROFILE_INSERT_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_INSERT_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_INSERT_DBOUT"(PACKAGE BODY) is 1
 PASS    1ms insert plsql_profiler_runs (-97). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into plsql_profiler_runs (runid) values (-97)".
 PASS    0ms insert plsql_profiler_units (-97). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into plsql_profiler_units (runid, unit_number, total_time) values (-97, -97, 0)".
 PASS    0ms insert plsql_profiler_data (RUNID: -97). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into plsql_profiler_data (runid, unit_number, line#) values (-97, -97, 0)".
 PASS    2ms Number of plsql_profiler_runs (-97). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_runs where runid = -97
 PASS    0ms Number of plsql_profiler_units (-97). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_units where runid = -97
 PASS    1ms Number of plsql_profiler_data (-97). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_data where runid = -97
 PASS    1ms Insert wt_test_runs (-97). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into wt_test_runs (id, start_dtm, runner_owner, runner_name) values (-97, sysdate, USER, 'Insert DBOUT Test')".
 PASS    0ms wt_test_runs (-97) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_test_runs where id = -97
 PASS    1ms insert UNIT 1 into plsql_profiler_units. ISNULL - Expected NULL and got ""
 PASS    0ms Number of UNIT 1 plsql_profiler_units. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_units where runid = -97 and unit_number = 1
 PASS    0ms insert plsql_profiler_data (LINE#: 1). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms insert plsql_profiler_data (LINE#: 2). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms insert plsql_profiler_data (LINE#: 3). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms insert plsql_profiler_data (LINE#: 5). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms insert plsql_profiler_data (LINE#: 7). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms insert plsql_profiler_data (LINE#: 8). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms insert plsql_profiler_data (LINE#: 9). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms insert plsql_profiler_data (LINE#: 10). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms Number of UNIT 1 plsql_profiler_data. EQQUERYVALUE - Expected "8" and got "8" for Query: select count(*) from plsql_profiler_data where runid = -97 and unit_number = 1
 ---- Test Case: Insert DBOUT Profile Happy Path
 PASS    5ms SQLERRM. ISNULL - Expected NULL and got ""
 PASS    2ms wt_dbout_profiles line 1, column STATUS. EQQUERYVALUE - Expected "EXCL" and got "EXCL" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 1
 PASS    1ms wt_dbout_profiles line 1, column TEXT. EQQUERYVALUE - Expected "package body WT_PROFILE_INSERT_DBOUT is\n" and got "package body WT_PROFILE_INSERT_DBOUT is\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 1
 PASS    2ms wt_dbout_profiles line 2, column STATUS. EQQUERYVALUE - Expected "UNKN" and got "UNKN" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 2
 PASS    1ms wt_dbout_profiles line 2, column TEXT. EQQUERYVALUE - Expected "begin\n" and got "begin\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 2
 PASS    2ms wt_dbout_profiles line 3, column STATUS. EQQUERYVALUE - Expected "EXEC" and got "EXEC" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 3
 PASS    1ms wt_dbout_profiles line 3, column TEXT. EQQUERYVALUE - Expected "  l_junk := 1;\n" and got "  l_junk := 1;\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 3
 PASS    1ms wt_dbout_profiles line 5, column STATUS. EQQUERYVALUE - Expected "ANNO" and got "ANNO" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 5
 PASS    1ms wt_dbout_profiles line 5, column TEXT. EQQUERYVALUE - Expected "  l_junk := 2;\n" and got "  l_junk := 2;\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 5
 PASS    2ms wt_dbout_profiles line 7, column STATUS. EQQUERYVALUE - Expected "EXEC" and got "EXEC" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 7
 PASS    4ms wt_dbout_profiles line 7, column TEXT. EQQUERYVALUE - Expected "  if 0 = 1 then\n" and got "  if 0 = 1 then\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 7
 PASS    3ms wt_dbout_profiles line 8, column STATUS. EQQUERYVALUE - Expected "NOTX" and got "NOTX" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 8
 PASS    1ms wt_dbout_profiles line 8, column TEXT. EQQUERYVALUE - Expected "     l_junk := 3;\n" and got "     l_junk := 3;\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 8
 PASS    1ms wt_dbout_profiles line 9, column STATUS. EQQUERYVALUE - Expected "EXEC" and got "EXEC" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 9
 PASS    2ms wt_dbout_profiles line 9, column TEXT. EQQUERYVALUE - Expected "  end if;\n" and got "  end if;\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 9
 PASS    2ms wt_dbout_profiles line 10, column STATUS. EQQUERYVALUE - Expected "EXCL" and got "EXCL" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 10
 PASS    1ms wt_dbout_profiles line 10, column TEXT. EQQUERYVALUE - Expected "end WT_PROFILE_INSERT_DBOUT;" and got "end WT_PROFILE_INSERT_DBOUT;" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 10
 ---- Test Case: Insert DBOUT Profile Teardown
 PASS    2ms Delete wt_dbout_profiles (-97). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from wt_dbout_profiles where test_run_id = -97".
 PASS    3ms wt_dbout_profiles (-97) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -97
 PASS    3ms Delete wt_test_runs (-97). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from wt_test_runs where id = -97".
 PASS    0ms wt_test_runs (-97) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = -97
 PASS    0ms delete plsql_profiler_data (-97). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from plsql_profiler_data where runid = -97".
 PASS    1ms delete plsql_profiler_units (-97). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from plsql_profiler_units where runid = -97".
 PASS    0ms delete plsql_profiler_runs (-97). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from plsql_profiler_runs where runid = -97".
 PASS    0ms Number of plsql_profiler_runs (-97). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_runs where runid = -97
 PASS    0ms Number of plsql_profiler_units (-97). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_units where runid = -97
 PASS    0ms Number of plsql_profiler_data (-97). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_data where runid = -97
 PASS   26ms drop package WT_PROFILE_INSERT_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "drop package WT_PROFILE_INSERT_DBOUT".
 PASS    3ms WT_PROFILE_INSERT_DBOUT package. OBJNOTEXISTS - Number of objects found for "WTP.WT_PROFILE_INSERT_DBOUT"(PACKAGE) is 0
 ---- Test Case: Insert DBOUT Profile Setup
 PASS   12ms Compile package WT_PROFILE_INITIALIZE. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package WT_PROFILE_INITIALIZE is\n  l_junk number;\nend WT_PROFILE_INITIALIZE;".
 PASS    0ms Compile package WT_PROFILE_INITIALIZE Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_INITIALIZE package. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_INITIALIZE"(PACKAGE) is 1
 ---- Test Case: Initialize Test HAPPY Path 1
 PASS   14ms Compile package body WT_PROFILE_INITIALIZE. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_INITIALIZE is\nbegin\n  l_junk := 7;\nend WT_PROFILE_INITIALIZE;".
 PASS    1ms Compile package body WT_PROFILE_INITIALIZE Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_INITIALIZE package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_INITIALIZE"(PACKAGE BODY) is 1
 PASS    1ms OUT dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms OUT dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms OUT dbout_type. ISNULL - Expected NULL and got ""
 PASS    0ms OUT prof_runid. ISNULL - Expected NULL and got ""
 PASS    0ms OUT trigger_offset. ISNULL - Expected NULL and got ""
 PASS    0ms OUT error_message. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.dbout_type. ISNULL - Expected NULL and got ""
 PASS    1ms l_recTEST.prof_runid. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.trigger_offset. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.error_message. ISNULL - Expected NULL and got ""
 ---- Test Case: Initialize Test HAPPY Path 2
 PASS   24ms Compile package body WT_PROFILE_INITIALIZE. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_INITIALIZE is\nbegin\n--% WTPLSQL SET DBOUT "WT_PROFILE_INITIALIZE:PACKAGE BODY" %--\n  l_junk := 7;\nend WT_PROFILE_INITIALIZE;".
 PASS    1ms Compile package body WT_PROFILE_INITIALIZE Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_INITIALIZE package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_INITIALIZE"(PACKAGE BODY) is 1
 PASS  816ms OUT dbout_owner. EQ - Expected "WTP" and got "WTP"
 PASS    0ms OUT dbout_name. EQ - Expected "WT_PROFILE_INITIALIZE" and got "WT_PROFILE_INITIALIZE"
 PASS    1ms OUT dbout_type. EQ - Expected "PACKAGE BODY" and got "PACKAGE BODY"
 PASS    0ms OUT prof_runid. ISNOTNULL - Expected NOT NULL and got "264"
 PASS    0ms OUT trigger_offset. EQ - Expected "0" and got "0"
 PASS    0ms OUT error_message. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.dbout_owner. EQ - Expected "WTP" and got "WTP"
 PASS    0ms l_recTEST.dbout_name. EQ - Expected "WT_PROFILE_INITIALIZE" and got "WT_PROFILE_INITIALIZE"
 PASS    0ms l_recTEST.dbout_type. EQ - Expected "PACKAGE BODY" and got "PACKAGE BODY"
 PASS    0ms l_recTEST.prof_runid. ISNOTNULL - Expected NOT NULL and got "264"
 PASS    0ms l_recTEST.trigger_offset. EQ - Expected "0" and got "0"
 PASS    0ms l_recTEST.error_message. ISNULL - Expected NULL and got ""
 ---- Test Case: Initialize Test Sad Path 1
 PASS    0ms SQLERRM. EQ - Expected "ORA-20004: i_test_run_id is null" and got "ORA-20004: i_test_run_id is null"
 ---- Test Case: Insert DBOUT Profile Teardown
 PASS   29ms drop package WT_PROFILE_INITIALIZE. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "drop package WT_PROFILE_INITIALIZE".
 PASS    0ms WT_PROFILE_INITIALIZE package. OBJNOTEXISTS - Number of objects found for "WTP.WT_PROFILE_INITIALIZE"(PACKAGE) is 0
 ---- Test Case: Finalize Happy Path 1
 PASS    0ms g_rec.prof_runid. ISNULL - Expected NULL and got ""
 PASS    0ms format_error_stack and format_error_backtrace. ISNULL - Expected NULL and got ""
 ---- Test Case: Finalize Happy Path 2
 PASS    0ms SQLERRM. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.test_run_id. ISNULL - Expected NULL and got ""
 PASS    1ms l_recTEST.dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.dbout_type. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.prof_runid. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.trigger_offset. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.error_message. ISNULL - Expected NULL and got ""
 ---- Test Case: Finalize Sad Path 1
 PASS    0ms SQLERRM. EQ - Expected "ORA-20000: g_rec.test_run_id is null" and got "ORA-20000: g_rec.test_run_id is null"
 ---- Test Case: Trigger Offset Happy Path
 PASS    2ms Trigger Test. EQ - Expected "3" and got "3"
 PASS    0ms Package Test. EQ - Expected "0" and got "0"
 ---- Test Case: Trigger Offset Sad Path
 PASS    0ms Non Existent Object. EQ - Expected "0" and got "0"
 ---- Test Case: Calculate Percent Coverage Setup
 PASS    2ms Insert wt_test_runs (-95). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into wt_test_runs (id, start_dtm, runner_owner, runner_name) values (-95, sysdate, USER, 'Calculate Offset Test')".
 PASS    0ms wt_test_runs (-95) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_test_runs where id = -95
 ---- Test Case: Calculate Percent Coverage Happy Path 1
 PASS    1ms Insert wt_dbout_profiles (-95,1). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms wt_dbout_profiles (-95,1) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 1
 PASS    1ms Insert wt_dbout_profiles (-95,2). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    2ms wt_dbout_profiles (-95,2) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 2
 PASS    1ms Insert wt_dbout_profiles (-95,3). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    5ms wt_dbout_profiles (-95,3) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 3
 PASS    4ms Main Test. EQ - Expected "66.67" and got "66.67"
 PASS    2ms Delete wt_dbout_profiles (-95). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from wt_dbout_profiles where test_run_id = -95".
 PASS    1ms wt_dbout_profiles (-95) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95
 ---- Test Case: Calculate Percent Coverage Happy Path 2
 PASS    1ms Insert wt_dbout_profiles (-95,1). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_dbout_profiles (-95,1) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 1
 PASS    0ms Insert wt_dbout_profiles (-95,2). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_dbout_profiles (-95,2) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 2
 PASS    1ms Insert wt_dbout_profiles (-95,3). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_dbout_profiles (-95,3) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 3
 PASS    1ms Main Test. EQ - Expected "-1" and got "-1"
 PASS    1ms Delete wt_dbout_profiles (-95). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from wt_dbout_profiles where test_run_id = -95".
 PASS    1ms wt_dbout_profiles (-95) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95
 ---- Test Case: Calculate Percent Coverage Sad Path
 PASS    0ms Missing Test Run ID. ISNULL - Expected NULL and got ""
 PASS    0ms NULL Test Run ID. ISNULL - Expected NULL and got ""
 ---- Test Case: Calculate Percent Coverage Teardown
 PASS    4ms Delete wt_test_runs (-95). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from wt_test_runs where id = -95".
 PASS    1ms wt_test_runs (-95) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = -95
 ---- Test Case: Delete Records Setup
 PASS    0ms wt_test_runs Count 0. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = -98
 PASS    3ms wt_dbout_profiles Count 0. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -98
 PASS    1ms Insert wt_test_runs (-98). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into wt_test_runs (id, start_dtm, runner_owner, runner_name) values (-98, sysdate, USER, 'Delete Records Test')".
 PASS    1ms wt_test_runs (-98) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_test_runs where id = -98
 PASS    0ms Insert wt_dbout_profiles (-98,1). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    2ms wt_dbout_profiles (-98,1) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -98 and line = 1
 ---- Test Case: Delete Records Happy Path 1
 PASS    1ms SQLERRM. ISNULL - Expected NULL and got ""
 PASS    0ms wt_dbout_profiles Count 2. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -98
 ---- Test Case: Delete Records Sad Path 1
 PASS    1ms SQLERRM. ISNULL - Expected NULL and got ""
 PASS    0ms wt_dbout_profiles Count 2. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -98
 ---- Test Case: Delete Records Sad Path 2
 PASS    0ms SQLERRM. ISNULL - Expected NULL and got ""
 PASS    1ms wt_dbout_profiles Count 2. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -98
 ---- Test Case: Delete Records Teardown
 PASS    2ms Delete wt_test_runs (-98). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from wt_test_runs where id = -98".
 PASS    0ms wt_test_runs (-98) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = -98

 - WTP.WT_PROFILER PACKAGE BODY Code Coverage Details (Test Run ID 423)
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
     1 EXCL      0         0       0         0 package body wt_profiler
    20 ANNO      0         0       0         0       g_skip_insert  boolean := FALSE;
    21 ANNO      0         0       0         0       g_skip_add     boolean := FALSE;
    33 ANNO      0       147       5        11    procedure tl_compile_db_object
    39 ANNO     20        14       1         1       l_errtxt   varchar2(32000) := '';
    43 ANNO     20        87       3         8       l_sql_txt := 'create or replace ' || in_ptype || ' ' ||
    47 ANNO     20        37       1         3       wt_assert.raises
    52 ANNO     40      5453       1       681       for buff in (select * from user_errors
    58 ANNO      0         0       0         0          l_errtxt := l_errtxt || buff.line || ', ' ||
    61 ANNO     20        99       4         6       wt_assert.isnull
    66 ANNO     20       202       2         9       wt_assert.objexists (
    71 ANNO     20        49       2         4    end tl_compile_db_object;
    74 ANNO      0         4       1         1    procedure tl_drop_db_object
    81 ANNO      4         4       1         1       l_sql_txt := 'drop ' || in_ptype || ' ' || in_pname;
    82 ANNO      4         7       1         4       wt_assert.raises
    86 ANNO      4        47       3         9       wt_assert.objnotexists (
    91 ANNO      4        45       1        42    end tl_drop_db_object;
    94 ANNO      0         8       1         2    procedure tl_count_plsql_profiler_recs
   100 ANNO      5        26       3         7       wt_assert.eqqueryvalue
   105 ANNO      5        18       3         6       wt_assert.eqqueryvalue
   111 ANNO      5        16       3         4       wt_assert.eqqueryvalue
   116 ANNO      5         0       0         0    end tl_count_plsql_profiler_recs;
   119 ANNO      0         2       1         1    procedure tl_insert_plsql_profiler_recs
   125 ANNO      2         5       2         3       l_sql_txt := 'insert into plsql_profiler_runs (runid)' ||
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   127 ANNO      2         4       2         2       wt_assert.raises (
   132 ANNO      2         6       2         4       l_sql_txt := 'insert into plsql_profiler_units (runid, unit_number, total_time)' ||
   134 ANNO      2         2       1         1       wt_assert.raises (
   139 ANNO      2         5       2         3       l_sql_txt := 'insert into plsql_profiler_data (runid, unit_number, line#)' ||
   141 ANNO      2         2       1         1       wt_assert.raises (
   145 ANNO      2       252     117       135       commit;
   146 ANNO      2         2       1         1    end tl_insert_plsql_profiler_recs;
   149 ANNO      0         2       2         2    procedure tl_delete_plsql_profiler_recs
   155 ANNO      1         2       2         2       l_sql_txt := 'delete from plsql_profiler_data' ||
   157 ANNO      1         2       2         2       wt_assert.raises (
   162 ANNO      1         2       2         2       l_sql_txt := 'delete from plsql_profiler_units' ||
   164 ANNO      1         1       1         1       wt_assert.raises (
   169 ANNO      1         2       2         2       l_sql_txt := 'delete from plsql_profiler_runs' ||
   171 ANNO      1         1       1         1       wt_assert.raises (
   175 ANNO      1        54      54        54       commit;
   176 ANNO      1         0       0         0    end tl_delete_plsql_profiler_recs;
   179 ANNO      0         5       1         2    procedure tl_insert_test_runs
   186 ANNO      3        11       3         5       l_sql_txt := 'insert into wt_test_runs' ||
   190 ANNO      3         4       1         2       wt_assert.raises (
   194 ANNO      3        19       6         7       wt_assert.eqqueryvalue (
   199 ANNO      3       430     124       168       commit;
   200 ANNO      3         3       1         1    end tl_insert_test_runs;
   203 ANNO      0         5       1         2    procedure tl_delete_test_runs
   209 ANNO      3         9       2         5       l_sql_txt := 'delete from wt_test_runs where id = ' || in_test_run_id;
   210 ANNO      3         4       1         2       wt_assert.raises (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   214 ANNO      3        26       8         9       wt_assert.eqqueryvalue (
   219 ANNO      3      2430     130      2168       commit;
   220 ANNO      3         7       1         5    end tl_delete_test_runs;
   223 ANNO      0        13       1         3    procedure tl_insert_dbout_profiles
   230 ANNO      7      1598     110       395          insert into wt_dbout_profiles values in_rec;
   231 ANNO      7        12       1         3          l_sqlerrm := SQLERRM;
   232 ANNO      7      1077      78       459          commit;
   233 ANNO      0         0       0         0       exception when others then
   234 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
   235 ANNO      0         0       0         0       end;
   237 ANNO      7        40       4         7       wt_assert.eq (
   242 ANNO      7        31       3         6       wt_assert.eqqueryvalue (
   249 ANNO      7         6       1         2    end tl_insert_dbout_profiles;
   252 ANNO      0         5       1         2    procedure tl_delete_dbout_profiles
   258 ANNO      3         7       2         3       l_sql_txt := 'delete from wt_dbout_profiles where test_run_id = ' ||
   260 ANNO      3         9       3         3       wt_assert.raises (
   264 ANNO      3        23       7         8       wt_assert.eqqueryvalue (
   269 ANNO      3       474     122       185       commit;
   270 ANNO      3         4       1         2    end tl_delete_dbout_profiles;
   277 UNKN      0         8       1         1 function get_error_msg
   281 EXEC      8         0       0         0    l_msg_prefix  varchar2(50) := 'DBMS_PROFILER Error: ';
   283 EXEC      8         0       0         0    case retnum_in
   284 EXEC     10         8       0         4    when dbms_profiler.error_param then return l_msg_prefix ||
   286 EXEC      8         3       0         2    when dbms_profiler.error_io then return l_msg_prefix ||
   290 EXEC      6         5       1         2    when dbms_profiler.error_version then return l_msg_prefix ||
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   295 EXEC      2         7       2         5    else return l_msg_prefix ||
   298 EXEC      8         4       0         1 end get_error_msg;
   302 ANNO      0         4       4         4    procedure t_get_error_msg
   306 ANNO      2         4       1         3       wt_assert.g_testcase := 'Get Error Messages';
   307 ANNO      1         1       1         1       wt_assert.isnotnull (
   310 ANNO      1        24       1        23       wt_assert.this (
   315 ANNO      1         1       0         1       wt_assert.isnotnull (
   318 ANNO      1         8       1         7       wt_assert.this (
   323 ANNO      1         1       0         1       wt_assert.isnotnull (
   326 ANNO      1        28      28        28       wt_assert.this (
   331 ANNO      1         0       0         0       wt_assert.isnotnull (
   334 ANNO      1         6       6         6       wt_assert.this (
   338 ANNO      1         1       1         1    end t_get_error_msg;
   343 UNKN      0         6       1         2 procedure delete_plsql_profiler_recs
   347 EXEC      4       112      12        61 begin
   348 EXEC      4      1024     146       479    delete from plsql_profiler_data
   350 EXEC      4       483      60       211    delete from plsql_profiler_units
   352 EXEC      4      1888      74      1577    delete from plsql_profiler_runs
   354 EXEC      4       382      54       165    COMMIT;
   355 EXEC      4        54       9        24 end delete_plsql_profiler_recs;
   359 ANNO      0         1       1         1    procedure t_delete_profiler_recs
   361 ANNO      1         0       0         0       c_test_run_id   constant number := -99;
   365 ANNO      1         0       0         0       wt_assert.g_testcase := 'Delete PL/SQL Profiler Records Happy Path 1';
   367 ANNO      1         0       0         0          delete_plsql_profiler_recs(c_test_run_id);  -- Should run without error
   368 ANNO      1        68      68        68          l_err_stack := dbms_utility.format_error_stack     ||
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   370 ANNO      0         0       0         0       exception when others then
   371 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
   373 ANNO      0         0       0         0       end;
   375 ANNO      1        23      23        23       wt_assert.isnull (
   378 ANNO      1         1       1         1       tl_count_plsql_profiler_recs(c_test_run_id, 0);
   380 ANNO      1         0       0         0       wt_assert.g_testcase := 'Delete PL/SQL Profiler Records Happy Path 2';
   381 ANNO      1         0       0         0       tl_insert_plsql_profiler_recs(c_test_run_id);
   382 ANNO      1         1       1         1       tl_count_plsql_profiler_recs(c_test_run_id, 1);
   384 ANNO      1         0       0         0          delete_plsql_profiler_recs(c_test_run_id);  -- Should run without error
   385 ANNO      1         6       6         6          l_err_stack := dbms_utility.format_error_stack     ||
   387 ANNO      0         0       0         0       exception when others then
   388 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
   390 ANNO      0         0       0         0       end;
   392 ANNO      1         6       6         6       wt_assert.isnull (
   395 ANNO      1         0       0         0       tl_count_plsql_profiler_recs(c_test_run_id, 0);
   396 ANNO      1         1       1         1    end t_delete_profiler_recs;
   401 UNKN      0        31       3         6 procedure find_dbout
   445 EXEC      8         5       1         1    C_HEAD_RE CONSTANT varchar2(30) := '--% WTPLSQL SET DBOUT "';
   446 EXEC      8         4       0         1    C_MAIN_RE CONSTANT varchar2(30) := '[[:alnum:] ._$#:]+';
   447 EXEC      8         5       0         1    C_TAIL_RE CONSTANT varchar2(30) := '" %--';
   449 UNKN      0         1       0         1    cursor c_annotation is
   450 EXEC      8      1720     129       344       select regexp_substr(src.text, C_HEAD_RE||C_MAIN_RE||C_TAIL_RE)  TEXT
   456 UNKN      0         4       0         2        order by src.line;
   459 UNKN      0         5       1         2    cursor c_readable is
   460 EXEC      4       826     186       263       select *
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   464 UNKN      0         9       2         3         and  src.type   = g_rec.dbout_type;
   471 EXEC      8         0       0         0    open c_annotation;
   472 EXEC      8      2789     200       659    fetch c_annotation into l_target;
   473 EXEC      8         9       1         2    if c_annotation%NOTFOUND
   476 EXEC      2        38      16        22       close c_annotation;
   477 EXEC      2         4       2         2       return;
   479 EXEC      6       341      31       106    close c_annotation;
   481 EXEC      6       228      27        64    l_target := regexp_replace(SRCSTR      => l_target
   487 EXEC      6       211       7       152    l_target := regexp_replace(SRCSTR      => l_target
   493 EXEC      6        31       4         7    l_dot_pos := instr(l_target,'.');
   494 EXEC      6         3       1         1    l_cln_pos := instr(l_target,':');
   497 EXEC      6   3060444       1    619786       select obj.owner
   528 EXEC      1         0       0         0       when NO_DATA_FOUND
   530 EXEC      1         9       9         9          g_rec.error_message := 'Unable to find database object "' ||
   532 EXEC      1         1       1         1          return;
   533 EXEC      1         0       0         0       when TOO_MANY_ROWS
   535 EXEC      1        40      40        40          g_rec.error_message := 'Found too many database objects "' ||
   537 EXEC      1         0       0         0          return;
   540 EXEC      4         4       1         1    open c_readable;
   541 EXEC      4       883     108       377    fetch c_readable into b_readable;
   542 EXEC      4         6       1         2    if c_readable%NOTFOUND
   544 EXEC      1         3       0         3       if g_rec.dbout_type in ('FUNCTION', 'PROCEDURE', 'PACKAGE BODY',
   549 ANNO      0         0       0         0          g_rec.error_message := 'Unable to read source for ' || g_rec.dbout_type ||
   553 EXEC      1         1       1         1          g_rec.prof_runid := -1;  -- Don't run profiler.
   554 EXEC      1         0       0         0       end if;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   556 EXEC      4       138      13        59    close c_readable;
   558 EXEC      6        40       6         8 end find_dbout;
   562 ANNO      1         4       4         4    procedure t_find_dbout
   567 ANNO      1         0       0         0       l_pname      varchar2(128) := 'WT_PROFILE_FIND_DBOUT';
   569 ANNO      0         4       1         1       procedure run_find_dbout is begin
   570 ANNO      6        14       2         3          l_recSAVE := g_rec;
   571 ANNO      6         3       0         1          g_rec := l_recNULL;
   572 ANNO      6         3       0         1          find_dbout(l_pname);
   573 ANNO      6        29       1         7          l_recTEST := g_rec;
   574 ANNO      6         4       1         1          g_rec := l_recSAVE;
   575 ANNO      6         3       1         1       end run_find_dbout;
   578 ANNO      1         1       1         1       wt_assert.g_testcase := 'Find DBOUT Setup';
   579 ANNO      1         1       1         1       tl_compile_db_object
   584 ANNO      1         0       0         0       wt_assert.g_testcase := 'Find DBOUT Happy Path 1';
   585 ANNO      1         6       6         6       tl_compile_db_object
   590 ANNO      1         0       0         0       run_find_dbout;
   592 ANNO      1         1       1         1       wt_assert.isnull
   595 ANNO      1         1       1         1       wt_assert.isnull
   599 ANNO      1         1       1         1       wt_assert.isnull
   602 ANNO      1         1       1         1       wt_assert.isnull
   606 ANNO      1         0       0         0       wt_assert.g_testcase := 'Find DBOUT Happy Path 2';
   607 ANNO      1         6       6         6       tl_compile_db_object
   615 ANNO      1         0       0         0       run_find_dbout;
   617 ANNO      1         8       3         5       wt_assert.eq
   621 ANNO      1         1       1         1       wt_assert.eq
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   626 ANNO      1         1       1         1       wt_assert.eq
   630 ANNO      1         1       1         1       wt_assert.isnull
   634 ANNO      1         1       1         1       wt_assert.g_testcase := 'Find DBOUT Happy Path 3';
   635 ANNO      1         7       1         6       tl_compile_db_object
   644 ANNO      1         0       0         0       run_find_dbout;
   646 ANNO      1         7       2         5       wt_assert.eq
   650 ANNO      1         0       0         0       wt_assert.eq
   655 ANNO      1         1       1         1       wt_assert.eq
   659 ANNO      1         2       2         2       wt_assert.isnull
   663 ANNO      1         0       0         0       wt_assert.g_testcase := 'Find DBOUT Sad Path 1';
   664 ANNO      1         6       6         6       tl_compile_db_object
   672 ANNO      1         0       0         0       run_find_dbout;
   674 ANNO      1         4       4         4       wt_assert.isnull
   677 ANNO      1         0       0         0       wt_assert.isnull
   681 ANNO      1         0       0         0       wt_assert.isnull
   684 ANNO      1         0       0         0       wt_assert.eq
   689 ANNO      1         0       0         0       wt_assert.g_testcase := 'Find DBOUT Sad Path 2';
   690 ANNO      1         7       7         7       tl_compile_db_object
   698 ANNO      1         1       1         1       run_find_dbout;
   700 ANNO      1         8       3         5       wt_assert.eq
   704 ANNO      1         0       0         0       wt_assert.eq
   708 ANNO      1         0       0         0       wt_assert.eq
   713 ANNO      1         0       0         0       wt_assert.g_testcase := 'Find DBOUT Sad Path 3';
   714 ANNO      1         5       5         5       tl_compile_db_object
   722 ANNO      1         0       0         0       run_find_dbout;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   724 ANNO      1         4       4         4       wt_assert.eq
   728 ANNO      1         0       0         0       wt_assert.eq
   733 ANNO      1         1       1         1       wt_assert.eq
   737 ANNO      1         0       0         0       wt_assert.isnull
   741 ANNO      1         0       0         0       wt_assert.g_testcase := 'Find DBOUT Teardown';
   742 ANNO      1         0       0         0       tl_drop_db_object(l_pname, 'package');
   743 ANNO      1         5       5         5    end t_find_dbout;
   748 EXEC      8        38       4         5 procedure load_anno_aa
   750 UNKN      0         7       1         1    cursor c_find_begin is
   751 EXEC      8       837      97       128       select line
   758 ANNO      0         6       1         1        order by line;
   760 ANNO      0         8       1         2    cursor c_find_end (in_line in number, in_col in number) is
   761 ANNO      8       993      47       220       with q1 as (
   778 UNKN      0         7       1         1             ,col;
   781 EXEC      8        10       1         3    g_anno_aa.delete;
   782 EXEC      8         2       0         1    open c_find_begin;
   783 EXEC     16         0       0         0    loop
   784 EXEC     16      1522      16       204       fetch c_find_begin into buff_find_begin;
   785 EXEC     16        11       0         1       exit when c_find_begin%NOTFOUND;
   786 EXEC      8         2       0         1       open c_find_end (buff_find_begin.line, buff_find_begin.col);
   787 EXEC      8       812      83       111       fetch c_find_end into buff_find_end;
   788 EXEC      8         6       0         1       if c_find_end%NOTFOUND
   790 EXEC      2       462     210       252          select max(line)
   797 EXEC      8       294       9        76       close c_find_end;
   798 EXEC     34        30       1         4       for i in buff_find_begin.line + g_rec.trigger_offset ..
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   801 EXEC     26        40       0         6          g_anno_aa(i) := 'X';
   804 EXEC      8       121      10        37    close c_find_begin;
   805 EXEC      8        15       1         3 end load_anno_aa;
   809 ANNO      1        10      10        10    procedure t_load_anno_aa
   814 ANNO      1         1       1         1       l_pname      varchar2(128) := 'WT_PROFILE_LOAD_ANNO';
   816 ANNO      0         8       1         2       procedure run_load_anno is begin
   817 ANNO      7        14       2         2          l_recSAVE  := g_rec;
   818 ANNO      7        17       2         3          l_annoSAVE := g_anno_aa;
   819 ANNO      7        10       1         2          g_anno_aa.delete;
   820 ANNO      7         7       0         1          g_rec.dbout_owner    := USER;
   821 ANNO      7         6       1         1          g_rec.dbout_name     := l_pname;
   822 ANNO      7         6       1         1          g_rec.dbout_type     := 'PACKAGE BODY';
   823 ANNO      7         0       0         0          g_rec.trigger_offset := 0;
   824 ANNO      7         3       1         1          load_anno_aa;
   825 ANNO      7        32       1         6          l_annoTEST := g_anno_aa;
   826 ANNO      7        15       1         4          g_anno_aa := l_annoSAVE;
   827 ANNO      7         9       1         2          g_rec   := l_recSAVE;
   828 ANNO      7         2       0         1       end run_load_anno;
   831 ANNO      1         1       1         1       wt_assert.g_testcase := 'Load Anno Setup';
   832 ANNO      1        25      25        25       wt_assert.isnotnull
   835 ANNO      1         0       0         0       tl_compile_db_object
   840 ANNO      1         0       0         0       wt_assert.g_testcase := 'Load Anno Happy Path 1';
   841 ANNO      1         5       5         5       tl_compile_db_object
   846 ANNO      1         0       0         0       run_load_anno;
   847 ANNO      1         7       7         7       wt_assert.eq
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   852 ANNO      1         0       0         0       wt_assert.g_testcase := 'Load Anno Happy Path 2';
   853 ANNO      1         5       5         5       tl_compile_db_object
   861 ANNO      1         0       0         0       run_load_anno;
   863 ANNO      1         5       5         5       wt_assert.eq
   867 ANNO      4         2       0         1       for i in 3 .. 5
   869 ANNO      3        10       2         5          wt_assert.eq
   875 ANNO      1         1       1         1       wt_assert.g_testcase := 'Load Anno Happy Path 3';
   876 ANNO      1         6       6         6       tl_compile_db_object
   886 ANNO      1         1       1         1       run_load_anno;
   888 ANNO      1         7       7         7       wt_assert.eq
   892 ANNO      4         0       0         0       for i in 4 .. 6
   894 ANNO      3         9       2         4          wt_assert.eq
   900 ANNO      1         0       0         0       wt_assert.g_testcase := 'Load Anno Happy Path 4';
   901 ANNO      1       253     253       253       tl_compile_db_object
   914 ANNO      1         0       0         0       run_load_anno;
   916 ANNO      1         6       6         6       wt_assert.eq
   920 ANNO      4         1       1         1       for i in 4 .. 6
   922 ANNO      3        11       3         5          wt_assert.eq
   928 ANNO      3         1       0         1       for i in 8 .. 10
   930 ANNO      3         8       2         3          wt_assert.eq
   936 ANNO      1         1       1         1       wt_assert.g_testcase := 'Load Anno Sad Path 1';
   937 ANNO      1         5       5         5       tl_compile_db_object
   944 ANNO      1         0       0         0       run_load_anno;
   945 ANNO      1         5       5         5       wt_assert.eq
   950 ANNO      1         0       0         0       wt_assert.g_testcase := 'Load Anno Sad Path 2';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   951 ANNO      1         6       6         6       tl_compile_db_object
   963 ANNO      1         0       0         0       run_load_anno;
   965 ANNO      1         6       6         6       wt_assert.eq
   969 ANNO      4         1       0         1       for i in 4 .. 6
   971 ANNO      3        11       3         5          wt_assert.eq
   977 ANNO      1         1       1         1       wt_assert.g_testcase := 'Load Anno Sad Path 3';
   978 ANNO      1        54      54        54       tl_compile_db_object
   990 ANNO      1         0       0         0       run_load_anno;
   992 ANNO      1         6       6         6       wt_assert.eq
   996 ANNO      6         1       0         1       for i in 4 .. 8
   998 ANNO      5        15       2         4          wt_assert.eq
  1004 ANNO      1         0       0         0       wt_assert.g_testcase := 'Load Anno Teardown';
  1005 ANNO      1         0       0         0       tl_drop_db_object(l_pname, 'package');
  1006 ANNO      1         4       4         4       wt_assert.isnotnull
  1009 ANNO      1         3       3         3    end t_load_anno_aa;
  1014 EXEC      1        10       0        10 procedure insert_dbout_profile
  1019 UNKN      0        28       2         7    procedure l_set_status is begin
  1020 EXEC      8        24       2         7       if g_anno_aa.EXISTS(prof_rec.line)
  1023 EXEC      1         0       0         0          prof_rec.status := 'ANNO';
  1024 EXEC      1         0       0         0          return;
  1026 EXEC      7         4       0         1       if prof_rec.total_occur > 0
  1029 EXEC      3         0       0         0          prof_rec.status := 'EXEC';
  1030 EXEC      3         3       1         1          return;
  1032 EXEC      4         2       0         1       if    prof_rec.total_occur = 0
  1036 EXEC      3       370      15       314          if regexp_like(prof_rec.text, '^[[:space:]]*' ||
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1041 EXEC      2         2       1         1             prof_rec.status := 'EXCL';
  1042 EXEC      2         2       2         2          elsif     prof_rec.line = l_max_line
  1048 EXEC      1         0       0         0             prof_rec.status := 'NOTX';
  1050 EXEC      3         8       2         4          return;
  1053 EXEC      1         1       1         1       prof_rec.status := 'UNKN';
  1054 EXEC      1         3       3         3    end l_set_status;
  1055 EXEC      1        16      16        16 begin
  1057 EXEC      1       170     170       170    select max(ppd.line#) into l_max_line
  1066 EXEC      1         0       0         0    load_anno_aa;
  1067 EXEC      1         2       2         2    prof_rec.test_run_id := g_rec.test_run_id;
  1068 EXEC      3       516       7       475    for buf1 in (
  1069#NOTX#     0         0       0         0       select src.line
  1089 EXEC      8        10       1         2       prof_rec.line        := buf1.line;
  1090 EXEC      8         2       0         1       prof_rec.total_occur := buf1.total_occur;
  1091 EXEC      8         7       1         2       prof_rec.total_usecs := buf1.total_time/1000;
  1092 EXEC      8         2       0         1       prof_rec.min_usecs   := buf1.min_time/1000;
  1093 EXEC      8         4       0         1       prof_rec.max_usecs   := buf1.max_time/1000;
  1094 EXEC      8        10       1         2       prof_rec.text        := buf1.text;
  1095 EXEC      8         1       0         1       prof_rec.status      := NULL;
  1096 EXEC      8         2       0         1       l_set_status;
  1097 EXEC      8      1736      74      1176       insert into wt_dbout_profiles values prof_rec;
  1100 ANNO      8         5       1         2       if not g_skip_add then
  1102 ANNO      0         0       0         0       wt_test_run_stat.add_profile(prof_rec);
  1108 EXEC      1       144     144       144    COMMIT;
  1111 EXEC      1         6       6         6    g_anno_aa.delete;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1112 EXEC      1         3       3         3    delete_plsql_profiler_recs(g_rec.prof_runid);
  1113 EXEC      1         8       8         8 end insert_dbout_profile;
  1117 ANNO      1         6       6         6    procedure t_insert_dbout_profile
  1123 ANNO      1         0       0         0       c_test_run_id  constant number := -97;
  1124 ANNO      1         1       1         1       l_pname        varchar2(128) := 'WT_PROFILE_INSERT_DBOUT';
  1128 ANNO      0         8       1         2       procedure insert_plsql_profiler_data
  1134 ANNO      8         4       0         1          data_rec.line#       := in_line#;
  1135 ANNO      8         1       1         1          data_rec.total_occur := in_total_occur;
  1136 ANNO      8         1       0         1          data_rec.total_time  := in_total_time;
  1139 ANNO      8       989      95       207             insert into plsql_profiler_data values data_rec;
  1140 ANNO      8       855      73       322             commit;
  1141 ANNO      8        53       1        39             l_sqlerrm := SQLERRM;
  1142 ANNO      0         0       0         0          exception when others then
  1143 ANNO      0         0       0         0             l_sqlerrm := SQLERRM;
  1144 ANNO      0         0       0         0          end;
  1145 ANNO      8        38       4         7          wt_assert.eq (
  1149 ANNO      8         7       1         1       end insert_plsql_profiler_data;
  1151 ANNO      0        11       1         2       procedure test_dbout_profiler
  1157 ANNO     16       104       5         9          wt_assert.eqqueryvalue
  1165 ANNO     16         6       0         1       end test_dbout_profiler;
  1168 ANNO      1         1       1         1       wt_assert.g_testcase := 'Insert DBOUT Profile Setup';
  1169 ANNO      1         0       0         0       tl_compile_db_object
  1174 ANNO      1        10      10        10       tl_compile_db_object
  1186 ANNO      1         0       0         0       tl_insert_plsql_profiler_recs(c_test_run_id);
  1187 ANNO      1         1       1         1       tl_count_plsql_profiler_recs(c_test_run_id, 1);
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1188 ANNO      1         0       0         0       tl_insert_test_runs(c_test_run_id, 'Insert DBOUT Test');
  1190 ANNO      1         0       0         0       units_rec.runid        := c_test_run_id;
  1191 ANNO      1         1       1         1       units_rec.unit_number  := 1;
  1192 ANNO      1         2       0         2       units_rec.unit_owner   := USER;
  1193 ANNO      1         1       1         1       units_rec.unit_name    := l_pname;
  1194 ANNO      1         1       1         1       units_rec.unit_type    := 'PACKAGE BODY';
  1195 ANNO      1         1       1         1       units_rec.total_time   := 0;
  1198 ANNO      1       247     247       247          insert into plsql_profiler_units values units_rec;
  1199 ANNO      1       180     180       180          commit;
  1200 ANNO      1         6       6         6          l_err_stack := dbms_utility.format_error_stack     ||
  1202 ANNO      0         0       0         0       exception when others then
  1203 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1205 ANNO      0         0       0         0       end;
  1207 ANNO      1         2       2         2       wt_assert.isnull (
  1210 ANNO      1         6       6         6       wt_assert.eqqueryvalue
  1217 ANNO      1         1       1         1       data_rec.runid       := c_test_run_id;
  1218 ANNO      1         1       1         1       data_rec.unit_number := 1;
  1219 ANNO      1         0       0         0       data_rec.min_time    := 0;
  1220 ANNO      1         0       0         0       data_rec.max_time    := 1;
  1221 ANNO      1         1       1         1       insert_plsql_profiler_data(1, 0, 0);
  1222 ANNO      1         1       1         1       insert_plsql_profiler_data(2, 0, 1);
  1223 ANNO      1         0       0         0       insert_plsql_profiler_data(3, 1, 1);
  1224 ANNO      1         1       1         1       insert_plsql_profiler_data(5, 1, 1);
  1225 ANNO      1         0       0         0       insert_plsql_profiler_data(7, 1, 1);
  1226 ANNO      1         0       0         0       insert_plsql_profiler_data(8, 0, 0);
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1227 ANNO      1         1       1         1       insert_plsql_profiler_data(9, 1, 1);
  1228 ANNO      1         0       0         0       insert_plsql_profiler_data(10, 0, 0);
  1230 ANNO      1         5       5         5       wt_assert.eqqueryvalue
  1237 ANNO      1         0       0         0       wt_assert.g_testcase := 'Insert DBOUT Profile Happy Path';
  1238 ANNO      1         1       1         1       l_recSAVE := g_rec;
  1239 ANNO      1         1       1         1       g_rec.test_run_id     := c_test_run_id;
  1240 ANNO      1         1       0         1       g_rec.dbout_owner     := USER;
  1241 ANNO      1         0       0         0       g_rec.dbout_name      := l_pname;
  1242 ANNO      1         0       0         0       g_rec.dbout_type      := 'PACKAGE BODY';
  1243 ANNO      1         1       1         1       g_rec.prof_runid      := c_test_run_id;
  1244 ANNO      1         0       0         0       g_rec.trigger_offset  := 0;
  1245 ANNO      1         0       0         0       g_rec.error_message   := '';
  1247 ANNO      1         0       0         0       g_skip_add := TRUE;
  1249 ANNO      1         1       1         1          insert_dbout_profile;
  1250 ANNO      1         6       6         6          l_err_stack := dbms_utility.format_error_stack     ||
  1252 ANNO      0         0       0         0       exception when others then
  1253 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1255 ANNO      0         0       0         0       end;
  1256 ANNO      1         1       1         1       g_skip_add := FALSE;
  1257 ANNO      1         4       4         4       g_rec := l_recSAVE;
  1258 ANNO      1         4       4         4       wt_assert.isnull (
  1262 ANNO      1         1       1         1       test_dbout_profiler(1, 'STATUS', 'EXCL');
  1263 ANNO      1         5       5         5       test_dbout_profiler(1, 'TEXT',   'package body WT_PROFILE_INSERT_DBOUT is' || CHR(10));
  1264 ANNO      1         0       0         0       test_dbout_profiler(2, 'STATUS', 'UNKN');
  1265 ANNO      1         2       2         2       test_dbout_profiler(2, 'TEXT',   'begin' || CHR(10));
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1266 ANNO      1         0       0         0       test_dbout_profiler(3, 'STATUS', 'EXEC');
  1267 ANNO      1         2       2         2       test_dbout_profiler(3, 'TEXT',   '  l_junk := 1;' || CHR(10));
  1268 ANNO      1         0       0         0       test_dbout_profiler(5, 'STATUS', 'ANNO');
  1269 ANNO      1         2       2         2       test_dbout_profiler(5, 'TEXT',   '  l_junk := 2;' || CHR(10));
  1270 ANNO      1         0       0         0       test_dbout_profiler(7, 'STATUS', 'EXEC');
  1271 ANNO      1         2       2         2       test_dbout_profiler(7, 'TEXT',   '  if 0 = 1 then' || CHR(10));
  1272 ANNO      1         1       1         1       test_dbout_profiler(8, 'STATUS', 'NOTX');
  1273 ANNO      1         3       3         3       test_dbout_profiler(8, 'TEXT',   '     l_junk := 3;' || CHR(10));
  1274 ANNO      1         0       0         0       test_dbout_profiler(9, 'STATUS', 'EXEC');
  1275 ANNO      1         2       2         2       test_dbout_profiler(9, 'TEXT',   '  end if;' || CHR(10));
  1276 ANNO      1         1       1         1       test_dbout_profiler(10, 'STATUS', 'EXCL');
  1277 ANNO      1         1       1         1       test_dbout_profiler(10, 'TEXT',   'end WT_PROFILE_INSERT_DBOUT;');
  1279 ANNO      1         1       1         1       wt_assert.g_testcase := 'Insert DBOUT Profile Teardown';
  1280 ANNO      1         0       0         0       tl_delete_dbout_profiles(c_test_run_id);
  1281 ANNO      1         1       1         1       tl_delete_test_runs(c_test_run_id);
  1282 ANNO      1         0       0         0       tl_delete_plsql_profiler_recs(c_test_run_id);
  1283 ANNO      1         1       1         1       tl_count_plsql_profiler_recs(c_test_run_id, 0);
  1284 ANNO      1         0       0         0       tl_drop_db_object(l_pname, 'package');
  1285 ANNO      1         3       3         3    end t_insert_dbout_profile;
  1295 EXEC      3         9       2         4 procedure initialize
  1309 EXEC      3         1       0         1    out_dbout_owner     := '';
  1310 EXEC      3         1       1         1    out_dbout_name      := '';
  1311 EXEC      3         0       0         0    out_dbout_type      := '';
  1312 EXEC      3         1       0         1    out_trigger_offset  := NULL;
  1313 EXEC      3         0       0         0    out_profiler_runid  := NULL;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1314 EXEC      3         1       0         1    out_error_message   := '';
  1315 EXEC      3         2       1         1    g_rec := l_rec_NULL;
  1319 ANNO      3         1       0         1       g_skip_insert := FALSE;
  1320 ANNO      3         0       0         0       g_skip_add    := FALSE;
  1323 EXEC      3         2       0         1    if in_test_run_id is null
  1325 EXEC      1        83      83        83       raise_application_error  (-20004, 'i_test_run_id is null');
  1327 EXEC      2         0       0         0    g_rec.test_run_id := in_test_run_id;
  1329 EXEC      2         0       0         0    find_dbout(in_pkg_name => in_runner_name);
  1330 EXEC      2         2       2         2    out_dbout_owner    := g_rec.dbout_owner;
  1331 EXEC      2         1       1         1    out_dbout_name     := g_rec.dbout_name;
  1332 EXEC      2         1       1         1    out_dbout_type     := g_rec.dbout_type;
  1333 EXEC      2         1       0         1    out_error_message  := g_rec.error_message;
  1335 EXEC      2         1       1         1    if    g_rec.dbout_name    is null      -- No DBOUT notation
  1339 EXEC      1         0       0         0       g_rec.prof_runid := NULL;
  1340 EXEC      1         1       1         1       return;
  1343 EXEC      1         1       1         1    g_rec.trigger_offset := wt_profiler.trigger_offset
  1347 EXEC      1       120     120       120    out_trigger_offset := g_rec.trigger_offset;
  1349 EXEC      1         6       1         5    l_retnum := dbms_profiler.INTERNAL_VERSION_CHECK;
  1350 EXEC      1         0       0         0    if l_retnum <> 0 then
  1353 ANNO      0         0       0         0       raise_application_error(-20005,
  1359 EXEC      1        45       1        39    l_retnum := dbms_profiler.START_PROFILER(run_number => g_rec.prof_runid);
  1360 EXEC      2         2       1         1    if l_retnum <> 0 then
  1362 ANNO      0         0       0         0       raise_application_error(-20006,
  1367 EXEC      2         2       1         1    out_profiler_runid := g_rec.prof_runid;
  1369 EXEC      2         5       2         3 end initialize;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1373 ANNO      0        10      10        10    procedure t_initialize
  1375 ANNO      1         1       1         1       c_test_run_id   constant number := -96;
  1376 ANNO      1         1       1         1       l_pname         varchar2(128) := 'WT_PROFILE_INITIALIZE';
  1383 ANNO      1         1       1         1       wt_assert.g_testcase := 'Insert DBOUT Profile Setup';
  1384 ANNO      1         0       0         0       tl_compile_db_object
  1389 ANNO      1         1       1         1       wt_assert.g_testcase := 'Initialize Test HAPPY Path 1';
  1390 ANNO      1         5       5         5       tl_compile_db_object
  1397 ANNO      1         2       2         2       l_recSAVE := g_rec;
  1398 ANNO      1         4       1         3       initialize
  1407 ANNO      1         1       1         1       l_recTEST := g_rec;
  1408 ANNO      1         0       0         0       g_rec := l_recSAVE;
  1410 ANNO      1         1       1         1       wt_assert.isnull (
  1413 ANNO      1         2       2         2       wt_assert.isnull (
  1417 ANNO      1         1       1         1       wt_assert.isnull (
  1420 ANNO      1         2       2         2       wt_assert.isnull (
  1424 ANNO      1         1       1         1       wt_assert.isnull (
  1427 ANNO      1         1       1         1       wt_assert.isnull (
  1431 ANNO      1         0       0         0       wt_assert.isnull (
  1434 ANNO      1         1       1         1       wt_assert.isnull (
  1438 ANNO      1         1       1         1       wt_assert.isnull (
  1441 ANNO      1         1       1         1       wt_assert.isnull (
  1445 ANNO      1         0       0         0       wt_assert.isnull (
  1448 ANNO      1         1       1         1       wt_assert.isnull (
  1452 ANNO      1         1       1         1       wt_assert.g_testcase := 'Initialize Test HAPPY Path 2';
  1453 ANNO      1         3       3         3       tl_compile_db_object
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1462 ANNO      1         2       2         2       l_recSAVE := g_rec;
  1463 ANNO      1         5       2         3       initialize
  1472 ANNO      1         3       3         3       l_recTEST := g_rec;
  1473 ANNO      1         1       1         1       g_rec := l_recSAVE;
  1475 ANNO      1         7       2         5       wt_assert.eq (
  1479 ANNO      1         1       1         1       wt_assert.eq (
  1484 ANNO      1         1       1         1       wt_assert.eq (
  1488 ANNO      1         5       5         5       wt_assert.isnotnull (
  1492 ANNO      1         4       4         4       wt_assert.eq (
  1496 ANNO      1         1       1         1       wt_assert.isnull (
  1500 ANNO      1         2       1         1       wt_assert.eq (
  1504 ANNO      1         1       1         1       wt_assert.eq (
  1509 ANNO      1         0       0         0       wt_assert.eq (
  1513 ANNO      1         2       2         2       wt_assert.isnotnull (
  1517 ANNO      1         2       2         2       wt_assert.eq (
  1521 ANNO      1         0       0         0       wt_assert.isnull (
  1525 ANNO      1         1       1         1       wt_assert.g_testcase := 'Initialize Test Sad Path 1';
  1526 ANNO      1         0       0         0       l_recSAVE := g_rec;
  1528 ANNO      1         1       1         1          initialize
  1537 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
  1539 ANNO      1         0       0         0       exception when others then
  1540 ANNO      1        79      79        79          l_sqlerrm := SQLERRM;
  1541 ANNO      0         1       1         1       end;
  1542 ANNO      1         1       1         1       l_recTEST := g_rec;
  1543 ANNO      1         1       1         1       g_rec := l_recSAVE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1544 ANNO      1         1       1         1       wt_assert.eq (
  1549 ANNO      1         0       0         0       wt_assert.g_testcase := 'Insert DBOUT Profile Teardown';
  1550 ANNO      1         0       0         0       tl_drop_db_object
  1553 ANNO      1         3       3         3    end t_initialize;
  1560 EXEC      4        73       1        69 procedure finalize
  1564 EXEC      4         2       2         2    if g_rec.prof_runid is null
  1566 EXEC      1         0       0         0       return;
  1568 EXEC      3         0       0         0    if g_rec.test_run_id is null
  1570 EXEC      1        37      37        37       raise_application_error (-20000, 'g_rec.test_run_id is null');
  1574 ANNO      0         0       0         0       if not g_skip_insert
  1580 ANNO      1         4       4         4       dbms_profiler.STOP_PROFILER;
  1581 ANNO      0         0       0         0    exception when others then
  1582 ANNO      0         0       0         0       g_rec := l_rec_NULL;
  1584 ANNO      0         0       0         0       raise;
  1586 ANNO      0         0       0         0    insert_dbout_profile;
  1591 EXEC      1         0       0         0    g_rec := l_rec_NULL;
  1592 EXEC      1         0       0         0 end finalize;
  1596 ANNO      1         4       0         4    procedure t_finalize
  1604 ANNO      1         1       1         1       wt_assert.g_testcase := 'Finalize Happy Path 1';
  1605 ANNO      1         2       2         2       l_recSAVE := g_rec;
  1606 ANNO      1         1       1         1       g_rec.prof_runid := NULL;
  1607 ANNO      1         2       2         2       wt_assert.isnull (
  1612 ANNO      1         0       0         0          finalize;
  1613 ANNO      1         5       5         5          l_err_stack := dbms_utility.format_error_stack     ||
  1615 ANNO      0         0       0         0       exception when others then
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1616 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1618 ANNO      0         0       0         0       end;
  1619 ANNO      1         0       0         0       g_rec := l_recSAVE;
  1620 ANNO      1         0       0         0       wt_assert.isnull (
  1624 ANNO      1         0       0         0       wt_assert.g_testcase := 'Finalize Happy Path 2';
  1625 ANNO      1         0       0         0       l_recSAVE := g_rec;
  1626 ANNO      1         0       0         0       g_rec.test_run_id    := -1;
  1627 ANNO      1         0       0         0       g_rec.dbout_owner    := 'TEST OWNER';
  1628 ANNO      1         0       0         0       g_rec.dbout_name     := 'TEST NAME';
  1629 ANNO      1         0       0         0       g_rec.dbout_type     := 'TEST TYPE';
  1630 ANNO      1         1       1         1       g_rec.prof_runid     := -2;
  1631 ANNO      1         0       0         0       g_rec.trigger_offset := -3;
  1632 ANNO      1         0       0         0       g_rec.error_message  := 'TEST MESSAGE';
  1634 ANNO      1         0       0         0       g_skip_insert := TRUE;
  1636 ANNO      1         0       0         0          finalize;
  1637 ANNO      1         2       2         2          l_err_stack := dbms_utility.format_error_stack     ||
  1639 ANNO      0         0       0         0       exception when others then
  1640 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1642 ANNO      0         0       0         0       end;
  1643 ANNO      1         1       1         1       g_skip_insert := FALSE;
  1645 ANNO      1         0       0         0       l_recTEST := g_rec;
  1646 ANNO      1         0       0         0       g_rec := l_recSAVE;
  1647 ANNO      1         1       1         1       wt_assert.isnull (
  1651 ANNO      1         0       0         0       wt_assert.isnull (
  1654 ANNO      1         1       1         1       wt_assert.isnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1658 ANNO      1         1       1         1       wt_assert.isnull (
  1661 ANNO      1         0       0         0       wt_assert.isnull (
  1665 ANNO      1         1       1         1       wt_assert.isnull (
  1668 ANNO      1         0       0         0       wt_assert.isnull (
  1671 ANNO      1         1       1         1       wt_assert.isnull (
  1675 ANNO      1         0       0         0       wt_assert.g_testcase := 'Finalize Sad Path 1';
  1676 ANNO      1         0       0         0       l_recSAVE := g_rec;
  1677 ANNO      1         0       0         0       g_rec.prof_runid := -1;
  1678 ANNO      1         0       0         0       g_rec.test_run_id := NULL;
  1680 ANNO      1         0       0         0          finalize;
  1681 ANNO      1         0       0         0       exception when others then
  1682 ANNO      1        27      27        27          l_sqlerrm := SQLERRM;
  1683 ANNO      0         0       0         0       end;
  1685 ANNO      1         1       1         1       g_rec := l_recSAVE;
  1686 ANNO      1         1       1         1       wt_assert.eq (
  1690 ANNO      1         0       0         0    end t_finalize;
  1696 UNKN      0        35       3        16 function trigger_offset
  1703 EXEC      4         1       0         1    if dbout_type_in != 'TRIGGER'
  1705 EXEC      2         1       0         1       return 0;
  1707 EXEC      4      1288       1      1142    for buff in (
  1708#NOTX#     0         0       0         0       select line, text from all_source
  1714 EXEC      4       272      11       173       if regexp_instr(buff.text,
  1726 EXEC      1        40       1        39          return buff.line - 1;
  1729 EXEC      1         0       0         0    return 0;
  1730 EXEC      4         8       2         6 end trigger_offset;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1734 ANNO      0         2       2         2    procedure t_trigger_offset
  1738 ANNO      1         1       1         1       wt_assert.g_testcase := 'Trigger Offset Happy Path';
  1739 ANNO      1        10       9         9       wt_assert.eq (
  1746 ANNO      1         5       3         3       wt_assert.eq (
  1753 ANNO      1         0       0         0       wt_assert.g_testcase := 'Trigger Offset Sad Path';
  1754 ANNO      1         3       3         3       wt_assert.eq (
  1760 ANNO      1         1       1         1    end t_trigger_offset;
  1765 UNKN      0        24       3         8 function calc_pct_coverage
  1770 EXEC      8      3449       2      2983    for buff in (
  1776 EXEC      4         6       0         4       if buff.hits + buff.misses = 0
  1778 EXEC      1        33       1        23          return -1;
  1780 EXEC      3        12       1         8          return round(100 * buff.hits / (buff.hits + buff.misses),2);
  1783#NOTX#     0         0       0         0    return null;
  1784 EXEC      4        18       2        11 END calc_pct_coverage;
  1788 ANNO      0         4       4         4    procedure t_calc_pct_coverage
  1790 ANNO      1         0       0         0       c_test_run_id  constant number := -95;
  1794 ANNO      1         1       1         1       wt_assert.g_testcase := 'Calculate Percent Coverage Setup';
  1795 ANNO      1         0       0         0       tl_insert_test_runs(c_test_run_id, 'Calculate Offset Test');
  1796 ANNO      1         1       1         1       l_rec.test_run_id  := c_test_run_id;
  1797 ANNO      1         0       0         0       l_rec.total_occur  := 1;
  1798 ANNO      1         0       0         0       l_rec.total_usecs  := 1;
  1799 ANNO      1         0       0         0       l_rec.min_usecs    := 1;
  1800 ANNO      1         0       0         0       l_rec.max_usecs    := 1;
  1802 ANNO      1         1       1         1       wt_assert.g_testcase := 'Calculate Percent Coverage Happy Path 1';
  1803 ANNO      1         0       0         0       l_rec.line         := 1;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1804 ANNO      1         0       0         0       l_rec.status       := 'EXEC';
  1805 ANNO      1         4       4         4       l_rec.text         := 'Testing ' || l_rec.line;
  1806 ANNO      1         0       0         0       tl_insert_dbout_profiles(l_rec);
  1808 ANNO      1         1       1         1       l_rec.line         := 2;
  1809 ANNO      1         0       0         0       l_rec.status       := 'NOTX';
  1810 ANNO      1         3       3         3       l_rec.text         := 'Testing ' || l_rec.line;
  1811 ANNO      1         0       0         0       tl_insert_dbout_profiles(l_rec);
  1813 ANNO      1         1       1         1       l_rec.line         := 3;
  1814 ANNO      1         0       0         0       l_rec.status       := 'EXEC';
  1815 ANNO      1         5       5         5       l_rec.text         := 'Testing ' || l_rec.line;
  1816 ANNO      1         1       1         1       tl_insert_dbout_profiles(l_rec);
  1817 ANNO      1        12       1        11       wt_assert.eq (
  1821 ANNO      1         1       1         1       tl_delete_dbout_profiles(c_test_run_id);
  1823 ANNO      1         1       1         1       wt_assert.g_testcase := 'Calculate Percent Coverage Happy Path 2';
  1824 ANNO      1         0       0         0       l_rec.line         := 1;
  1825 ANNO      1         0       0         0       l_rec.status       := 'EXCL';
  1826 ANNO      1         4       4         4       l_rec.text         := 'Testing ' || l_rec.line;
  1827 ANNO      1         1       1         1       tl_insert_dbout_profiles(l_rec);
  1829 ANNO      1         0       0         0       l_rec.line         := 2;
  1830 ANNO      1         0       0         0       l_rec.status       := 'UNKN';
  1831 ANNO      1         2       2         2       l_rec.text         := 'Testing ' || l_rec.line;
  1832 ANNO      1         0       0         0       tl_insert_dbout_profiles(l_rec);
  1834 ANNO      1         0       0         0       l_rec.line         := 3;
  1835 ANNO      1         0       0         0       l_rec.status       := 'EXCL';
  1836 ANNO      1         2       2         2       l_rec.text         := 'Testing ' || l_rec.line;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1837 ANNO      1         1       1         1       tl_insert_dbout_profiles(l_rec);
  1838 ANNO      1         6       6         6       wt_assert.eq (
  1842 ANNO      1         1       1         1       tl_delete_dbout_profiles(c_test_run_id);
  1844 ANNO      1         1       1         1       wt_assert.g_testcase := 'Calculate Percent Coverage Sad Path';
  1845 ANNO      1         2       2         2       wt_assert.isnull (
  1848 ANNO      1         1       1         1       wt_assert.isnull (
  1852 ANNO      1         0       0         0       wt_assert.g_testcase := 'Calculate Percent Coverage Teardown';
  1853 ANNO      1         0       0         0       tl_delete_test_runs(c_test_run_id);
  1854 ANNO      1         4       4         4    end t_calc_pct_coverage;
  1859 EXEC      3         4       0         1 procedure delete_records
  1864 EXEC      3       769      92       530    select profiler_runid into l_profiler_runid
  1866 EXEC      1         0       0         0    delete_plsql_profiler_recs(l_profiler_runid);
  1867 EXEC      1       288     288       288    delete from wt_dbout_profiles
  1870 EXEC      2         0       0         0    when NO_DATA_FOUND
  1872 EXEC      2         1       0         1       return;
  1873 EXEC      3         2       0         1 end delete_records;
  1877 ANNO      0         6       6         6    procedure t_delete_records
  1879 ANNO      1         0       0         0       c_test_run_id  constant number := -98;
  1884 ANNO      1         1       1         1       wt_assert.g_testcase := 'Delete Records Setup';
  1885 ANNO      1         7       7         7       wt_assert.eqqueryvalue (
  1890 ANNO      1         4       4         4       wt_assert.eqqueryvalue (
  1895 ANNO      1         1       1         1       tl_insert_test_runs(c_test_run_id, 'Delete Records Test');
  1897 ANNO      1         0       0         0       l_rec.test_run_id  := c_test_run_id;
  1898 ANNO      1         1       1         1       l_rec.line         := 1;
  1899 ANNO      1         1       1         1       l_rec.status       := 'EXEC';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1900 ANNO      1         1       1         1       l_rec.total_occur  := 1;
  1901 ANNO      1         0       0         0       l_rec.total_usecs  := 1;
  1902 ANNO      1         0       0         0       l_rec.min_usecs    := 1;
  1903 ANNO      1         1       1         1       l_rec.max_usecs    := 1;
  1904 ANNO      1         2       2         2       l_rec.text         := 'Testing';
  1905 ANNO      1         1       1         1       tl_insert_dbout_profiles(l_rec);
  1907 ANNO      1         1       1         1       wt_assert.g_testcase := 'Delete Records Happy Path 1';
  1908 ANNO      0         0       0         0       begin
  1909 ANNO      1         1       1         1          delete_records(c_test_run_id);
  1910 ANNO      1         6       6         6          l_err_stack := dbms_utility.format_error_stack     ||
  1912 ANNO      0         0       0         0       exception when others then
  1913 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1915 ANNO      0         0       0         0       end;
  1917 ANNO      1         2       2         2       wt_assert.isnull (
  1920 ANNO      1         7       7         7       wt_assert.eqqueryvalue (
  1926 ANNO      1         0       0         0       wt_assert.g_testcase := 'Delete Records Sad Path 1';
  1928 ANNO      1         0       0         0          delete_records(-9876);
  1929 ANNO      1         5       5         5          l_err_stack := dbms_utility.format_error_stack     ||
  1931 ANNO      0         0       0         0       exception when others then
  1932 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1934 ANNO      0         0       0         0       end;
  1936 ANNO      1         2       2         2       wt_assert.isnull (
  1939 ANNO      1         4       4         4       wt_assert.eqqueryvalue (
  1945 ANNO      1         0       0         0       wt_assert.g_testcase := 'Delete Records Sad Path 2';
  1947 ANNO      1         0       0         0          delete_records(NULL);
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1948 ANNO      1         3       3         3          l_err_stack := dbms_utility.format_error_stack     ||
  1950 ANNO      0         0       0         0       exception when others then
  1951 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1953 ANNO      0         0       0         0       end;
  1955 ANNO      1         2       2         2       wt_assert.isnull (
  1958 ANNO      1         4       4         4       wt_assert.eqqueryvalue (
  1964 ANNO      1         1       1         1       wt_assert.g_testcase := 'Delete Records Teardown';
  1965 ANNO      1         1       1         1       tl_delete_test_runs(c_test_run_id);
  1966 ANNO      1        11      11        11    end t_delete_records;
  1973 ANNO      0         1       1         1    procedure WTPLSQL_RUN  --% WTPLSQL SET DBOUT "WT_PROFILER:PACKAGE BODY" %--
  1976 ANNO      1         1       1         1       t_get_error_msg;
  1977 ANNO      1         0       0         0       t_delete_profiler_recs;
  1978 ANNO      1         1       1         1       t_find_dbout;
  1979 ANNO      1         0       0         0       t_load_anno_aa;
  1980 ANNO      1         0       0         0       t_insert_dbout_profile;
  1981 ANNO      1         0       0         0       t_initialize;
  1982 ANNO      1         0       0         0       t_finalize;
  1983 ANNO      1         0       0         0       t_trigger_offset;
  1984 ANNO      1         0       0         0       t_calc_pct_coverage;
  1985 ANNO      1         0       0         0       t_delete_records;
  1986 ANNO      1         2       2         2    end WTPLSQL_RUN;
  1991 EXCL      0         0       0         0 end wt_profiler;


    wtPLSQL 1.1.0 - Run ID 424: 20-May-2018 03:40:07 PM

  Test Results for WTP.WT_RESULT
       Total Testcases:        7      Total Assertions:       36
  Minimum Elapsed msec:        0     Failed Assertions:        0
  Average Elapsed msec:       20      Error Assertions:        0
  Maximum Elapsed msec:      704            Test Yield:   100.00%
  Total Run Time (sec):      0.7

  Code Coverage for PACKAGE BODY WTP.WT_RESULT
       Annotated Lines:      144  Total Profiled Lines:      185
        Excluded Lines:        2  Total Executed Lines:       36
  Minimum Elapsed usec:        0    Not Executed Lines:        1
  Average Elapsed usec:       31         Unknown Lines:        2
  Maximum Elapsed usec:      581         Code Coverage:    97.30%
 Trigger Source Offset:        0

 - WTP.WT_RESULT Test Result Details (Test Run ID 424)
-----------------------------------------------------------
 ---- Test Case: Initialize Happy Path
 PASS  704ms l_results_recTEST.test_run_id. EQ - Expected "-99" and got "-99"
 PASS    1ms l_results_recTEST.result_seq. EQ - Expected "0" and got "0"
 PASS    0ms l_results_recTEST.executed_dtm. ISNOTNULL - Expected NOT NULL and got "20-MAY-2018 15:40:07.859000"
 PASS    0ms l_results_recTEST.elapsed_msecs. ISNULL - Expected NULL and got ""
 PASS    0ms l_results_recTEST.assertion. ISNULL - Expected NULL and got ""
 PASS    0ms l_results_recTEST.status. ISNULL - Expected NULL and got ""
 PASS    0ms l_results_recTEST.details. ISNULL - Expected NULL and got ""
 PASS    0ms l_results_recTEST.testcase. ISNULL - Expected NULL and got ""
 PASS    0ms l_results_recTEST.message. ISNULL - Expected NULL and got ""
 PASS    0ms l_results_ntTEST.COUNT. EQ - Expected "1" and got "1"
 PASS    0ms l_results_ntTEST(1).test_run_id. ISNULL - Expected NULL and got ""
 PASS    1ms Raises ORA-20009. RAISES/THROWS - Expected exception "%ORA-20009: "in_test_run_id" cannot be NULL%". Actual exception raised was "ORA-20009: "in_test_run_id" cannot be NULL". Exception raised by: "begin wt_result.initialize(NULL); end;".
 ---- Test Case: Finalize Happy Path
 PASS   12ms Before NULL Test Record Count. EQ - Expected "0" and got "0"
 PASS    0ms After NULL Test Record Count. EQ - Expected "0" and got "0"
 PASS    0ms l_results_recTEST.test_run_id. ISNULL - Expected NULL and got ""
 PASS    0ms l_results_ntTEST.COUNT. EQ - Expected "1" and got "1"
 PASS    0ms Record Count Test. EQ - Expected "1" and got "1"
 ---- Test Case: Ad Hoc Save Happy Path Setup
 PASS    0ms l_dbmsout_buff.COUNT - 1. ISNOTNULL - Expected NOT NULL and got "0"
 ---- Test Case: Ad Hoc Save Testing Happy Path
 PASS    1ms DBMS_OUTPUT Status. EQ - Expected "0" and got "0"
 PASS    0ms DBMS_OUTPUT Line. ISNOTNULL - Expected NOT NULL and got " ---- Test Case: Ad Hoc Save Testing Happy Path\n PASS t_save_testing Message. SELFTEST1 - t_save_testing Details"
 PASS    0ms Save Testing NULL Test DBMS_OUTPUT 3 Message. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: Ad Hoc Save Happy Path Teardown
 PASS    0ms l_dbmsout_buff.COUNT - 1. ISNOTNULL - Expected NOT NULL and got "0"
 ---- Test Case: Save Testing Happy Path
 PASS    0ms t_save_testing Testing Message. SELFTEST2 - t_save_testing Testing Details
 PASS    0ms g_results_nt.COUNT. EQ - Expected "24" and got "24"
 PASS    0ms g_results_nt(23).assetion. EQ - Expected "SELFTEST2" and got "SELFTEST2"
 PASS    0ms g_results_nt(23).status. EQ - Expected "PASS" and got "PASS"
 PASS    0ms g_results_nt(23).details. EQ - Expected "t_save_testing Testing Details" and got "t_save_testing Testing Details"
 PASS    0ms g_results_nt(23).testcase. EQ - Expected "Save Testing Happy Path" and got "Save Testing Happy Path"
 PASS    0ms g_results_nt(23).message. EQ - Expected "t_save_testing Testing Message" and got "t_save_testing Testing Message"
 PASS    1ms g_results_nt(23).elapsed_msecs. ISNOTNULL - Expected NOT NULL and got "0"
 PASS    0ms g_results_nt(23).executed_dtm. ISNOTNULL - Expected NOT NULL and got "20-MAY-2018 15:40:07.875000"
 PASS    0ms g_results_nt(23).result_seq. ISNOTNULL - Expected NOT NULL and got "23"
 ---- Test Case: Delete Records Happy Path
 PASS    0ms Before Insert Count. ISNOTNULL - Expected NOT NULL and got "0"
 PASS    1ms After Insert Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_results where test_run_id = -99
 PASS    0ms After Test Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_results where test_run_id = -99
 PASS    1ms After ROLLBACK Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_results where test_run_id = -99

 - WTP.WT_RESULT PACKAGE BODY Code Coverage Details (Test Run ID 424)
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
     1 EXCL      0         0       0         0 package body wt_result
     9 ANNO      0         0       0         0       g_skip_add  BOOLEAN := FALSE;
    22 EXEC      2        24      11        14 procedure initialize
    27 EXEC      2         0       0         0    if in_test_run_id is NULL
    29 EXEC      1        72      72        72       raise_application_error(-20009, '"in_test_run_id" cannot be NULL');
    31 EXEC      1         0       0         0    g_results_rec := l_results_recNULL;
    32 EXEC      1         0       0         0    g_results_rec.test_run_id  := in_test_run_id;
    33 EXEC      1         0       0         0    g_results_rec.result_seq   := 0;
    34 EXEC      1         7       3         4    g_results_rec.executed_dtm := systimestamp;
    35 EXEC      1         3       3         3    g_results_nt := results_nt_type(null);
    37 ANNO      1         0       0         0    g_skip_add := FALSE;
    39 EXEC      1         1       1         1 end initialize;
    43 ANNO      1        17      17        17    procedure t_initialize
    52 ANNO      1        12      12        12       l_results_ntSAVE  := g_results_nt;
    53 ANNO      1         2       2         2       l_results_recSAVE := g_results_rec;
    54 ANNO      1         0       0         0       g_results_rec     := l_results_recNULL;
    55 ANNO      1         1       1         1       initialize(-99);
    56 ANNO      1         1       1         1       l_results_recTEST := g_results_rec;
    57 ANNO      1         0       0         0       g_results_rec     := l_results_recSAVE;
    58 ANNO      1         2       2         2       l_results_ntTEST  := g_results_nt;
    59 ANNO      1         1       1         1       g_results_nt      := l_results_ntSAVE;
    61 ANNO      2         7       1         6       wt_assert.g_testcase := 'Initialize Happy Path';
    62 ANNO      1         8       8         8       wt_assert.eq (
    67 ANNO      1         6       6         6       wt_assert.eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
    71 ANNO      1        17      17        17       wt_assert.isnotnull (
    75 ANNO      1         1       1         1       wt_assert.isnull (
    78 ANNO      1         1       1         1       wt_assert.isnull (
    82 ANNO      1         1       1         1       wt_assert.isnull (
    85 ANNO      1         1       1         1       wt_assert.isnull (
    89 ANNO      1         0       0         0       wt_assert.isnull (
    92 ANNO      1         0       0         0       wt_assert.isnull (
    95 ANNO      1         3       3         3       wt_assert.eq (
   100 ANNO      1         2       2         2       wt_assert.isnull (
   103 ANNO      1         1       1         1       wt_assert.raises (
   107 ANNO      1         2       2         2    end t_initialize;
   114 EXEC      2        32      13        19 procedure finalize
   118 EXEC      2        26      11        16 begin
   119 EXEC      2         1       1         1    if g_results_rec.test_run_id IS NULL
   121 EXEC      1         7       7         7       return;
   124 EXEC      1       203     203       203    forall i in 1 .. g_results_nt.COUNT - 1
   125#NOTX#     0         0       0         0       insert into wt_results values g_results_nt(i);
   126 EXEC      1       581     581       581    COMMIT;
   127 EXEC      1        10      10        10    g_results_nt := results_nt_type(null);
   128 EXEC      1         0       0         0    g_results_rec := l_results_recNULL;
   129 EXEC      1         1       1         1    g_results_nt := results_nt_type(null);
   130 EXEC      1        18      18        18 end finalize;
   134 ANNO      1        13      13        13    procedure t_finalize
   148 ANNO      1         1       1         1       wt_assert.g_testcase := '   ';
   149 ANNO      1        16      16        16       l_results_ntSAVE     := g_results_nt;    -- Capture Original Values
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   150 ANNO      1         1       1         1       l_results_recSAVE    := g_results_rec;   -- Capture Original Values
   153 ANNO      1         1       1         1       g_results_rec  := l_results_recNULL;
   154 ANNO      1         0       0         0       g_results_rec.test_run_id   := -99;
   155 ANNO      1         0       0         0       g_results_rec.result_seq    := 1;
   156 ANNO      1         2       1         1       g_results_rec.executed_dtm  := systimestamp;
   157 ANNO      1         0       0         0       g_results_rec.elapsed_msecs := 99;
   159 ANNO      1         1       1         1       g_results_rec.assertion     := 'FINALTEST';
   160 ANNO      1         1       1         1       g_results_rec.status        := wt_assert.C_PASS;
   161 ANNO      1         0       0         0       g_results_rec.details       := 'This is a WT_RESULT.FINALIZE Test';
   162 ANNO      1         8       8         8       g_results_nt := results_nt_type(null);
   163 ANNO      1         1       1         1       g_results_nt(1) := g_results_rec;
   164 ANNO      1         2       2         2       g_results_nt.extend;  -- Finalize expects that last element to be NULL
   167 ANNO      1         0       0         0       g_results_rec.test_run_id   := NULL;
   168 ANNO      1       425     425       425       select count(*)
   172 ANNO      1         0       0         0       finalize;
   174 ANNO      1        85      85        85       select count(*)
   178 ANNO      1        51      51        51       rollback;    -- UNDO all database changes
   179 ANNO      1         0       0         0       g_results_rec.test_run_id   := -99;
   182 ANNO      1         0       0         0       l_test_runs_rec.id           := -99;
   183 ANNO      1         5       2         3       l_test_runs_rec.start_dtm    := systimestamp;
   184 ANNO      1         0       0         0       l_test_runs_rec.runner_name  := 'Finalize Test';
   185 ANNO      1         0       0         0       l_test_runs_rec.runner_owner := 'BOGUS';
   186 ANNO      1       370     370       370       insert into wt_test_runs values l_test_runs_rec;
   187 ANNO      1       415     415       415       commit;      -- Must commit because finalize is AUTONOMOUS TRANSACTION
   189 ANNO      1         0       0         0       finalize;    -- g_results_nt is still loaded with one element
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   190 ANNO      1         5       5         5       l_results_ntTEST  := g_results_nt;
   191 ANNO      1         1       1         1       l_results_recTEST := g_results_rec;
   192 ANNO      1       147     147       147       select count(*)
   196 ANNO      1       520     520       520       delete from wt_results where test_run_id = -99;
   197 ANNO      1      7774    7774      7774       delete from wt_test_runs where id = -99;
   198 ANNO      1       221     221       221       commit;      -- UNDO all database changes
   200 ANNO      1         3       3         3       wt_assert.g_testcase := 'Finalize Happy Path';
   202 ANNO      1         6       6         6       g_results_rec := l_results_recSAVE;
   203 ANNO      1        22      22        22       g_results_nt  := l_results_ntSAVE;
   205 ANNO      1        13      13        13       wt_assert.eq (
   209 ANNO      1         2       2         2       wt_assert.eq (
   214 ANNO      1         2       2         2       wt_assert.isnull (
   217 ANNO      1         3       3         3       wt_assert.eq (
   221 ANNO      1         2       2         2       wt_assert.eq (
   225 ANNO      1         7       7         7    end t_finalize;
   230 UNKN      0       132       2        13 procedure save
   239 EXEC     37        10       0         1    if g_results_rec.test_run_id IS NULL
   241 EXEC      1        13      13        13       wt_text_report.ad_hoc_result
   247 EXEC      1         4       4         4       return;
   250 EXEC     36        54       2         3    l_current_tstamp := systimestamp;
   251 EXEC     36       408       5        67    g_results_rec.elapsed_msecs := extract(day from (
   254 EXEC     36         9       1         1    g_results_rec.executed_dtm  := l_current_tstamp;
   256 EXEC     36        15       0         1    g_results_rec.assertion     := in_assertion;
   257 EXEC     36        57       0        51    g_results_rec.status        := in_status;
   258 EXEC     36        45       1         4    g_results_rec.details       := substr(in_details,1,4000);
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   259 EXEC     36        21       1         1    g_results_rec.testcase      := substr(in_testcase,1,50);
   260 EXEC     36        16       0         1    g_results_rec.message       := substr(in_message,1,200);
   262 EXEC     36        19       1         2    g_results_rec.result_seq    := g_results_rec.result_seq + 1;
   263 EXEC     36        93       1         7    g_results_nt(g_results_nt.COUNT) := g_results_rec;
   264 EXEC     36        82       1         8    g_results_nt.extend;
   267 ANNO     36         5       1         1    if not g_skip_add then
   269 ANNO     35        27       1         4    wt_test_run_stat.add_result(g_results_rec);
   274 EXEC     35       136       1        85 end save;
   278 ANNO      0        10      10        10    procedure t_save_testing
   282 ANNO      1         4       4         4       l_dbmsout_buff   l_dbmsout_buff_type := l_dbmsout_buff_type(1);
   289 ANNO      1         1       1         1       wt_assert.g_testcase := 'Ad Hoc Save Happy Path Setup';
   291 ANNO      1         0       0         0       loop
   292 ANNO      1        52      52        52          DBMS_OUTPUT.GET_LINE (
   295 ANNO      1         1       1         1          exit when l_dbmsout_stat != 0;
   296 ANNO      0         0       0         0          l_dbmsout_buff(l_dbmsout_buff.COUNT) := l_dbmsout_line;
   297 ANNO      0         0       0         0          l_dbmsout_buff.extend;
   299 ANNO      1         3       3         3       wt_assert.isnotnull (
   303 ANNO      1         0       0         0       wt_assert.g_testcase := 'Ad Hoc Save Testing Happy Path';
   304 ANNO      1         0       0         0       l_test_run_id  := g_results_rec.test_run_id;
   305 ANNO      1         1       1         1       g_results_rec.test_run_id := NULL;
   306 ANNO      1         0       0         0       g_skip_add := TRUE;
   307 ANNO      1         0       0         0       wt_result.save (
   313 ANNO      1         0       0         0       g_skip_add := FALSE;
   314 ANNO      1         1       1         1       g_results_rec.test_run_id := l_test_run_id;
   316 ANNO      1         2       0         2       DBMS_OUTPUT.GET_LINE (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   319 ANNO      1         2       2         2       wt_assert.eq (
   324 ANNO      1         1       1         1       if wt_assert.last_pass
   326 ANNO      1         0       0         0          wt_assert.isnotnull (
   329 ANNO      1         8       8         8          wt_assert.this (
   334 ANNO      1         1       1         1          if not wt_assert.last_pass
   337 ANNO      0         0       0         0             DBMS_OUTPUT.PUT_LINE(l_dbmsout_line);
   338 ANNO      0         0       0         0          end if;
   341 ANNO      1         0       0         0       wt_assert.g_testcase := 'Ad Hoc Save Happy Path Teardown';
   343 ANNO      1         0       0         0       for i in 1 .. l_dbmsout_buff.COUNT - 1
   345 ANNO      0         0       0         0          DBMS_OUTPUT.PUT_LINE(l_dbmsout_buff(i));
   347 ANNO      1         2       2         2       wt_assert.isnotnull (
   351 ANNO      1         0       0         0       wt_assert.g_testcase := 'Save Testing Happy Path';
   352 ANNO      1         1       1         1       l_nt_count     := g_results_nt.COUNT;
   353 ANNO      1         0       0         0       g_skip_add := TRUE;
   354 ANNO      1         0       0         0       wt_result.save (
   360 ANNO      1         0       0         0       g_skip_add := FALSE;
   362 ANNO      1         3       3         3       wt_assert.eq (
   366 ANNO      1         1       0         1       if not wt_assert.last_pass
   368 ANNO      0         0       0         0          return;   -- Something went wrong, end this now.
   371 ANNO      1         3       3         3       wt_assert.eq (
   375 ANNO      1         4       4         4       wt_assert.eq (
   380 ANNO      1         2       2         2       wt_assert.eq (
   384 ANNO      1         2       2         2       wt_assert.eq (
   389 ANNO      1         2       2         2       wt_assert.eq (
   393 ANNO      1         3       3         3       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   397 ANNO      1        17      17        17       wt_assert.isnotnull (
   400 ANNO      1         2       2         2       wt_assert.isnotnull (
   406 ANNO      1         2       2         2    end t_save_testing;
   411 UNKN      0         1       1         1 procedure delete_records
   415 EXEC      1       172     172       172    delete from wt_results
   417 EXEC      1         1       1         1 end delete_records;
   421 ANNO      1         5       1         4    procedure t_delete_records
   429 ANNO      1         1       1         1       wt_assert.g_testcase := 'Delete Records Happy Path';
   430 ANNO      1       232     232       232       select count(*) into l_num_recs
   433 ANNO      1         3       3         3       wt_assert.isnotnull (
   437 ANNO      1         0       0         0       l_test_runs_rec.id           := -99;
   438 ANNO      1         2       1         1       l_test_runs_rec.start_dtm    := sysdate;
   439 ANNO      1         0       0         0       l_test_runs_rec.runner_name  := 'Delete Records Test';
   440 ANNO      1         1       1         1       l_test_runs_rec.runner_owner := 'BOGUS';
   441 ANNO      1       398     398       398       insert into wt_test_runs values l_test_runs_rec;
   442 ANNO      1         1       1         1       l_results_rec.test_run_id   := -99;
   444 ANNO      1         1       1         1       l_results_rec.result_seq    := 1;
   445 ANNO      1         3       1         2       l_results_rec.executed_dtm  := sysdate;
   446 ANNO      1         0       0         0       l_results_rec.elapsed_msecs := 99;
   447 ANNO      1         1       1         1       l_results_rec.assertion     := 'DELRECTEST';
   448 ANNO      1         1       1         1       l_results_rec.status        := wt_assert.C_PASS;
   449 ANNO      1         4       4         4       l_results_rec.details       := 'This is a WT_RESULT.DELETE_RECORDS Test';
   450 ANNO      1       294     294       294       insert into wt_results values l_results_rec;
   452 ANNO      1         7       7         7       wt_assert.eqqueryvalue (
   457 ANNO      1         0       0         0       delete_records(-99);
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   459 ANNO      1         5       5         5       wt_assert.eqqueryvalue (
   464 ANNO      1       311     311       311       rollback;
   465 ANNO      1         4       4         4       wt_assert.eqqueryvalue (
   470 ANNO      1         3       3         3    end t_delete_records;
   477 ANNO      0         0       0         0    procedure WTPLSQL_RUN  --% WTPLSQL SET DBOUT "WT_RESULT:PACKAGE BODY" %--
   481 ANNO      1         0       0         0       t_initialize;
   482 ANNO      1         0       0         0       t_finalize;
   483 ANNO      1         0       0         0       t_save_testing;
   484 ANNO      1         0       0         0       t_delete_records;
   485 ANNO      1         1       1         1    end WTPLSQL_RUN;
   490 EXCL      0         0       0         0 end wt_result;


    wtPLSQL 1.1.0 - Run ID 425: 20-May-2018 03:40:08 PM

  Test Results for WTP.WT_TEST_RUN_STAT
       Total Testcases:       12      Total Assertions:      108
  Minimum Elapsed msec:        0     Failed Assertions:        0
  Average Elapsed msec:        7      Error Assertions:        0
  Maximum Elapsed msec:      764            Test Yield:   100.00%
  Total Run Time (sec):      0.8

  Code Coverage for PACKAGE BODY WTP.WT_TEST_RUN_STAT
       Annotated Lines:      301  Total Profiled Lines:      404
        Excluded Lines:        2  Total Executed Lines:       96
  Minimum Elapsed usec:        0    Not Executed Lines:        0
  Average Elapsed usec:        8         Unknown Lines:        5
  Maximum Elapsed usec:      287         Code Coverage:   100.00%
 Trigger Source Offset:        0

 - WTP.WT_TEST_RUN_STAT Test Result Details (Test Run ID 425)
-----------------------------------------------------------
 ---- Test Case: Initialize Happy Path 1 Setup
 PASS  764ms l_tc_aaTEST('TESTCASE1').test_run_id. EQ - Expected "-2" and got "-2"
 PASS    0ms l_recTEST.test_run_id. EQ - Expected "-1" and got "-1"
 ---- Test Case: Initialize Happy Path 1
 PASS    0ms l_tc_aaTEST.COUNT. EQ - Expected "0" and got "0"
 PASS    0ms l_recTEST.test_run_id. ISNULL - Expected NULL and got ""
 ---- Test Case: Add Result Testing
 PASS    1ms Add Result Sad Path 1. EQ - Expected "ORA-20010: Unknown Result status "ABC"" and got "ORA-20010: Unknown Result status "ABC""
 PASS    0ms l_recTEST.test_run_id. EQ - Expected "-10" and got "-10"
 PASS    0ms l_recTEST.asserts. EQ - Expected "3" and got "3"
 PASS    0ms l_recTEST.passes. EQ - Expected "1" and got "1"
 PASS    0ms l_recTEST.failures. EQ - Expected "1" and got "1"
 PASS    0ms l_recTEST.errors. EQ - Expected "1" and got "1"
 PASS    0ms l_recTEST.min_elapsed_msecs. EQ - Expected "10" and got "10"
 PASS    0ms l_recTEST.max_elapsed_msecs. EQ - Expected "30" and got "30"
 PASS    0ms l_recTEST.tot_elapsed_msecs. EQ - Expected "60" and got "60"
 PASS    0ms l_tc_aaTEST('TESTCASE1').test_run_id. EQ - Expected "-10" and got "-10"
 PASS    0ms l_tc_aaTEST('TESTCASE1').asserts. EQ - Expected "3" and got "3"
 PASS    0ms l_tc_aaTEST('TESTCASE1').passes. EQ - Expected "1" and got "1"
 PASS    0ms l_tc_aaTEST('TESTCASE1').failures. EQ - Expected "1" and got "1"
 PASS    0ms l_tc_aaTEST('TESTCASE1').errors. EQ - Expected "1" and got "1"
 PASS    0ms l_tc_aaTEST('TESTCASE1').min_elapsed_msecs. EQ - Expected "10" and got "10"
 PASS    0ms l_tc_aaTEST('TESTCASE1').max_elapsed_msecs. EQ - Expected "30" and got "30"
 PASS    0ms l_tc_aaTEST('TESTCASE1').tot_elapsed_msecs. EQ - Expected "60" and got "60"
 ---- Test Case: Add Profile Testing
 PASS    1ms l_recTEST.test_run_id. EQ - Expected "-20" and got "-20"
 PASS    0ms l_recTEST.profiled_lines. EQ - Expected "15" and got "15"
 PASS    0ms l_recTEST.min_executed_usecs. EQ - Expected "10" and got "10"
 PASS    0ms l_recTEST.max_executed_usecs. EQ - Expected "20" and got "20"
 PASS    0ms l_recTEST.tot_executed_usecs. EQ - Expected "150" and got "150"
 PASS    0ms l_recTEST.executed_lines. EQ - Expected "5" and got "5"
 PASS    0ms l_recTEST.annotated_lines. EQ - Expected "4" and got "4"
 PASS    0ms l_recTEST.notexec_lines. EQ - Expected "3" and got "3"
 PASS    0ms l_recTEST.excluded_lines. EQ - Expected "2" and got "2"
 PASS    0ms l_recTEST.unknown_lines. EQ - Expected "1" and got "1"
 PASS    0ms Add Result Sad Path 1. EQ - Expected "ORA-20011: Unknown Profile status "ABC"" and got "ORA-20011: Unknown Profile status "ABC""
 ---- Test Case: FINALIZE Happy Path Setup
 PASS    5ms Insert WT_TEST_RUNS Record. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into WT_TEST_RUNS (id, start_dtm, runner_owner, runner_name) values (-102, sysdate, USER, 'TESTRUNNER3')".
 ---- Test Case: FINALIZE Happy Path 1
 PASS    1ms Run Finalize for Happy Path 1. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms Retieve WT_TEST_RUN_STATS record. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms l_recTEST.test_run_id. EQ - Expected "-102" and got "-102"
 PASS    0ms l_recTEST.test_yield. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.asserts. EQ - Expected "0" and got "0"
 PASS    0ms l_recTEST.passes. EQ - Expected "0" and got "0"
 PASS    0ms l_recTEST.failures. EQ - Expected "0" and got "0"
 PASS    0ms l_recTEST.errors. EQ - Expected "0" and got "0"
 PASS    1ms l_recTEST.testcases. EQ - Expected "0" and got "0"
 PASS    0ms l_recTEST.min_elapsed_msecs. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.avg_elapsed_msecs. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.max_elapsed_msecs. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.tot_elapsed_msecs. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.code_coverage. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.profiled_lines. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.executed_lines. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.annotated_lines. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.excluded_lines. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.notexec_lines. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.unknown_lines. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.avg_executed_usecs. ISNULL - Expected NULL and got ""
 PASS    0ms There should be no WT_TESTCASE_STATS records. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from WT_TESTCASE_STATS where test_run_id = -102
 PASS    1ms Delete WT_TEST_RUN_STATS Record. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from WT_TEST_RUN_STATS where test_run_id = -102".
 PASS    0ms There should be no WT_TEST_RUN_STATS records. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from WT_TEST_RUN_STATS where test_run_id = -102
 ---- Test Case: FINALIZE Happy Path 2
 PASS    1ms Run Finalize for Happy Path 2. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms Retieve WT_TESTCASE_STATS record. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms l_tstat_rec.test_run_id. EQ - Expected "-102" and got "-102"
 PASS    0ms l_tstat_rec.testcase. EQ - Expected "TC2a" and got "TC2a"
 PASS    0ms l_tstat_rec.asserts. EQ - Expected "3" and got "3"
 PASS    0ms l_tstat_rec.passes. EQ - Expected "2" and got "2"
 PASS    0ms l_tstat_rec.failures. EQ - Expected "1" and got "1"
 PASS    0ms l_tstat_rec.errors. EQ - Expected "0" and got "0"
 PASS    1ms l_tstat_rec.test_yield. EQ - Expected ".667" and got ".667"
 PASS    0ms l_tstat_rec.avg_elapsed_msecs. EQ - Expected "100" and got "100"
 PASS    0ms Retieve WT_TESTCASE_STATS record. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms l_tstat_rec.test_run_id. EQ - Expected "-102" and got "-102"
 PASS    0ms l_tstat_rec.testcase. EQ - Expected "TC2b" and got "TC2b"
 PASS    0ms l_tstat_rec.asserts. EQ - Expected "3" and got "3"
 PASS    0ms l_tstat_rec.passes. EQ - Expected "2" and got "2"
 PASS    0ms l_tstat_rec.failures. EQ - Expected "1" and got "1"
 PASS    0ms l_tstat_rec.errors. EQ - Expected "0" and got "0"
 PASS    0ms l_tstat_rec.test_yield. EQ - Expected ".667" and got ".667"
 PASS    0ms l_tstat_rec.avg_elapsed_msecs. EQ - Expected "100" and got "100"
 PASS    0ms Retieve WT_TEST_RUN_STATS record. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms l_recTEST.test_run_id. EQ - Expected "-102" and got "-102"
 PASS    0ms l_recTEST.test_yield. EQ - Expected ".667" and got ".667"
 PASS    1ms l_recTEST.asserts. EQ - Expected "6" and got "6"
 PASS    0ms l_recTEST.passes. EQ - Expected "4" and got "4"
 PASS    0ms l_recTEST.failures. EQ - Expected "2" and got "2"
 PASS    0ms l_recTEST.errors. EQ - Expected "0" and got "0"
 PASS    0ms l_recTEST.testcases. EQ - Expected "2" and got "2"
 PASS    0ms l_recTEST.avg_elapsed_msecs. EQ - Expected "100" and got "100"
 PASS    0ms l_recTEST.code_coverage. EQ - Expected ".8" and got ".8"
 PASS    0ms l_recTEST.profiled_lines. EQ - Expected "20" and got "20"
 PASS    0ms l_recTEST.executed_lines. EQ - Expected "8" and got "8"
 PASS    0ms l_recTEST.annotated_lines. EQ - Expected "6" and got "6"
 PASS    0ms l_recTEST.excluded_lines. EQ - Expected "4" and got "4"
 PASS    0ms l_recTEST.notexec_lines. EQ - Expected "2" and got "2"
 PASS    0ms l_recTEST.unknown_lines. EQ - Expected "0" and got "0"
 PASS    0ms l_recTEST.avg_executed_usecs. EQ - Expected "200" and got "200"
 PASS    1ms Delete WT_TESTCASE_STATS Record. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from WT_TESTCASE_STATS where test_run_id = -102".
 PASS    0ms There should be no WT_TESTCASE_STATS records. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from WT_TESTCASE_STATS where test_run_id = -102
 PASS    0ms Delete WT_TEST_RUN_STATS Record. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from WT_TEST_RUN_STATS where test_run_id = -102".
 PASS    0ms There should be no WT_TEST_RUN_STATS records. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from WT_TEST_RUN_STATS where test_run_id = -102
 ---- Test Case: FINALIZE Sad Path 1
 PASS    1ms Run Finalize for Sad Path 1. EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms l_recTEST.test_run_id. ISNULL - Expected NULL and got ""
 PASS    0ms l_recTEST.asserts. ISNULL - Expected NULL and got ""
 ---- Test Case: FINALIZE Happy Path Teardown
 PASS    2ms Delete WT_TEST_RUNS Record. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from WT_TEST_RUNS where id = -102".
 ---- Test Case: Delete Records Happy Path Setup
 PASS    1ms Insert WT_TEST_RUNS Record. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into WT_TEST_RUNS (id, start_dtm, runner_owner, runner_name) values (-100, sysdate, USER, 'TESTRUNNER2')".
 PASS    1ms Insert WT_TEST_RUN_STATS Record. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into WT_TEST_RUN_STATS (test_run_id) values (-100)".
 PASS    0ms Insert WT_TESTCASE_STATS Record. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into WT_TESTCASE_STATS (test_run_id, testcase) values (-100, 'TESTCASE2')".
 ---- Test Case: Delete Records Happy Path and Teardown
 PASS    4ms Delete Records with NULL ID. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "begin wt_test_run_stat.delete_records(-100); end;".
 PASS    2ms Delete WT_TEST_RUNS Record. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from WT_TEST_RUNS where id = -100".
 ---- Test Case: Delete Records Test Sad Paths
 PASS    1ms Delete Records with NULL ID. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "begin wt_test_run_stat.delete_records(null); end;".
 PASS    2ms Delete Records with Invalid ID. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "begin wt_test_run_stat.delete_records(-0.01); end;".

 - WTP.WT_TEST_RUN_STAT PACKAGE BODY Code Coverage Details (Test Run ID 425)
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
     1 EXCL      0         0       0         0 package body wt_test_run_stat
    22 EXEC      4        13       2         5 procedure initialize
    26 EXEC      4         2       1         1    g_rec := l_recNULL;
    27 EXEC      4         6       1         3    g_tc_aa.delete;
    28 EXEC      4         4       1         2 end initialize;
    32 ANNO      2        22      22        22    procedure t_initialize
    40 ANNO      2         9       2         7       wt_assert.g_testcase := 'Initialize Happy Path 1 Setup';
    41 ANNO      1         8       8         8       l_tc_aaTEST('TESTCASE1').test_run_id := -2;
    42 ANNO      1         0       0         0       l_recTEST.test_run_id := -1;
    43 ANNO      1         8       8         8       wt_assert.eq (
    47 ANNO      1         3       3         3       wt_assert.eq (
    52 ANNO      1         7       7         7       l_tc_aaSAVE := g_tc_aa;
    53 ANNO      1         1       1         1       l_recSAVE   := g_rec;
    54 ANNO      1         3       3         3       g_tc_aa     := l_tc_aaTEST;
    55 ANNO      1         0       0         0       g_rec       := l_recTEST;
    56 ANNO      1         0       0         0       initialize;
    57 ANNO      1         1       1         1       l_tc_aaTEST := g_tc_aa;
    58 ANNO      1         1       1         1       l_recTEST   := g_rec;
    59 ANNO      1         1       1         1       g_tc_aa     := l_tc_aaSAVE;
    60 ANNO      1         1       1         1       g_rec       := l_recSAVE;
    62 ANNO      1         0       0         0       wt_assert.g_testcase := 'Initialize Happy Path 1';
    63 ANNO      1         3       3         3       wt_assert.eq (
    67 ANNO      1         1       1         1       wt_assert.isnull (
    70 ANNO      1         2       2         2    end t_initialize;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
    75 UNKN      0       126       1         3 procedure add_result
    82 EXEC    112        11       0         1    case in_results_rec.status
    83 EXEC    112        57       0        28       when 'PASS' then
    84 EXEC    109        60       1         2          g_rec.passes := nvl(g_rec.passes,0) + 1;
    85 EXEC      3         0       0         0       when 'FAIL' then
    86 EXEC      1         1       1         1          g_rec.failures := nvl(g_rec.failures,0) + 1;
    87 EXEC      2         0       0         0       when 'ERR' then
    88 EXEC      1         0       0         0          g_rec.errors := nvl(g_rec.errors,0) + 1;
    90 EXEC      1        70      70        70          raise_application_error(-20010, 'Unknown Result status "' ||
    93 EXEC    111        26       0         1    g_rec.test_run_id := in_results_rec.test_run_id;
    94 EXEC    111        28       0         1    g_rec.asserts     := nvl(g_rec.asserts,0) + 1;
    95 EXEC    111        49       0         2    g_rec.min_elapsed_msecs := least(nvl(g_rec.min_elapsed_msecs,999999999)
    97 EXEC    111        32       0         1    g_rec.max_elapsed_msecs := greatest(nvl(g_rec.max_elapsed_msecs,0)
    99 EXEC    111        35       0         1    g_rec.tot_elapsed_msecs := nvl(g_rec.tot_elapsed_msecs,0) +
   101 EXEC    111        21       0         1    if in_results_rec.testcase is not null
   103 EXEC    111        24       1         1       tc := in_results_rec.testcase;
   104 EXEC    111       174       1        10       g_tc_aa(tc).testcase    := tc;
   105 EXEC    111        16       0         1       g_tc_aa(tc).test_run_id := in_results_rec.test_run_id;
   106 EXEC    111        47       0         4       g_tc_aa(tc).asserts     := nvl(g_tc_aa(tc).asserts,0) + 1;
   107 EXEC    111         0       0         0       case in_results_rec.status
   108 EXEC    111        19       0         1          when 'PASS' then
   109 EXEC    109        37       0         1             g_tc_aa(tc).passes := nvl(g_tc_aa(tc).passes,0) + 1;
   110 EXEC      2         0       0         0          when 'FAIL' then
   111 EXEC      1         0       0         0             g_tc_aa(tc).failures := nvl(g_tc_aa(tc).failures,0) + 1;
   112 EXEC      1         0       0         0          when 'ERR' then
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   113 EXEC      1         1       1         1             g_tc_aa(tc).errors := nvl(g_tc_aa(tc).errors,0) + 1;
   116 EXEC    111        36       1         1       g_tc_aa(tc).min_elapsed_msecs := least(nvl(g_tc_aa(tc).min_elapsed_msecs,999999999)
   118 EXEC    111        40       0         1       g_tc_aa(tc).max_elapsed_msecs := greatest(nvl(g_tc_aa(tc).max_elapsed_msecs,0)
   120 EXEC    111        33       1         1       g_tc_aa(tc).tot_elapsed_msecs := nvl(g_tc_aa(tc).tot_elapsed_msecs,0) +
   123 EXEC    111        39       0         1 end add_result;
   127 ANNO      1        10      10        10    procedure t_add_result
   145 ANNO      1         3       3         3       l_tc_aaSAVE := g_tc_aa;
   146 ANNO      1         1       1         1       l_recSAVE   := g_rec;
   147 ANNO      1         1       1         1       g_tc_aa     := l_tc_aaTEST;
   148 ANNO      1         1       1         1       g_rec       := l_recTEST;
   149 ANNO      1         0       0         0       l_resultTEST.test_run_id   := -10;
   150 ANNO      1         0       0         0       l_resultTEST.elapsed_msecs := 10;
   151 ANNO      1         1       1         1       l_resultTEST.status        := 'PASS';
   152 ANNO      1         0       0         0       l_resultTEST.testcase      := 'TESTCASE1';
   153 ANNO      1         0       0         0       add_result(l_resultTEST);
   155 ANNO      1         1       1         1       l_resultTEST.elapsed_msecs := 20;
   156 ANNO      1         0       0         0       l_resultTEST.status        := 'FAIL';
   157 ANNO      1         0       0         0       l_resultTEST.testcase      := 'TESTCASE1';
   158 ANNO      1         0       0         0       add_result(l_resultTEST);
   159 ANNO      1         0       0         0       l_resultTEST.elapsed_msecs := 30;
   160 ANNO      1         0       0         0       l_resultTEST.status        := 'ERR';
   161 ANNO      1         0       0         0       l_resultTEST.testcase      := 'TESTCASE1';
   162 ANNO      1         0       0         0       add_result(l_resultTEST);
   164 ANNO      1         0       0         0       l_resultTEST.elapsed_msecs := 40;
   165 ANNO      1         0       0         0       l_resultTEST.status        := 'ABC';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   166 ANNO      1         0       0         0       l_resultTEST.testcase      := 'TESTCASE1';
   168 ANNO      1         0       0         0          add_result(l_resultTEST);
   169 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
   170 ANNO      1         0       0         0       exception when others then
   171 ANNO      1        94      94        94          l_sqlerrm := SQLERRM;
   172 ANNO      0         2       2         2       end;
   174 ANNO      1         4       4         4       l_tc_aaTEST := g_tc_aa;
   175 ANNO      1         0       0         0       l_recTEST   := g_rec;
   176 ANNO      1         2       2         2       g_tc_aa     := l_tc_aaSAVE;
   177 ANNO      1         0       0         0       g_rec       := l_recSAVE;
   178 ANNO      1         0       0         0       wt_assert.g_testcase := 'Add Result Testing';
   179 ANNO      1         1       1         1       wt_assert.eq (
   184 ANNO      1         4       4         4       wt_assert.eq (
   188 ANNO      1         3       3         3       wt_assert.eq (
   193 ANNO      1         2       2         2       wt_assert.eq (
   197 ANNO      1         1       1         1       wt_assert.eq (
   202 ANNO      1         2       2         2       wt_assert.eq (
   206 ANNO      1         2       2         2       wt_assert.eq (
   211 ANNO      1         2       2         2       wt_assert.eq (
   215 ANNO      1         2       2         2       wt_assert.eq (
   220 ANNO      1         3       3         3       wt_assert.eq (
   224 ANNO      1         2       2         2       wt_assert.eq (
   229 ANNO      1         2       2         2       wt_assert.eq (
   233 ANNO      1         1       1         1       wt_assert.eq (
   238 ANNO      1         2       2         2       wt_assert.eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   242 ANNO      1         2       2         2       wt_assert.eq (
   247 ANNO      1         2       2         2       wt_assert.eq (
   251 ANNO      1         2       2         2       wt_assert.eq (
   255 ANNO      1         2       2         2    end t_add_result;
   260 UNKN      0         3       1         1 procedure add_profile
   263 UNKN      0         3       1         1    procedure add_time is begin
   264 EXEC      5         3       0         1       g_rec.min_executed_usecs := least(nvl(g_rec.min_executed_usecs,999999999)
   266 EXEC      5         2       0         1       g_rec.max_executed_usecs := greatest(nvl(g_rec.max_executed_usecs,0)
   268 EXEC      5         2       1         1       g_rec.tot_executed_usecs := nvl(g_rec.tot_executed_usecs,0) +
   270 EXEC      5         4       0         3    end add_time;
   274 EXEC     16         2       0         1    case in_dbout_profiles_rec.status
   275 EXEC     16         1       0         1       when 'EXEC' then
   276 EXEC      5         2       1         1          g_rec.executed_lines := nvl(g_rec.executed_lines,0) + 1;
   277 EXEC      5         0       0         0          add_time;       -- Only count the executed time.
   278 EXEC     11         1       0         1       when 'ANNO' then
   279 EXEC      4         0       0         0          g_rec.annotated_lines := nvl(g_rec.annotated_lines,0) + 1;
   280 EXEC      7         0       0         0       when 'EXCL' then
   281 EXEC      2         1       0         1          g_rec.excluded_lines := nvl(g_rec.excluded_lines,0) + 1;
   282 EXEC      5         1       0         1       when 'NOTX' then
   283 EXEC      3         1       1         1          g_rec.notexec_lines := nvl(g_rec.notexec_lines,0) + 1;
   284 EXEC      2         0       0         0       when 'UNKN' then
   285 EXEC      1         1       1         1          g_rec.unknown_lines := nvl(g_rec.unknown_lines,0) + 1;
   287 EXEC      1        16      16        16          raise_application_error(-20011, 'Unknown Profile status "' ||
   290 EXEC     15         3       0         1    g_rec.test_run_id    := in_dbout_profiles_rec.test_run_id;
   291 EXEC     15         6       1         1    g_rec.profiled_lines := nvl(g_rec.profiled_lines,0) + 1;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   292 EXEC     15         4       0         1 end add_profile;
   296 ANNO      1         5       5         5    procedure t_add_profile
   312 ANNO      1         1       1         1       l_recSAVE   := g_rec;
   313 ANNO      1         1       1         1       g_rec       := l_recTEST;
   314 ANNO      1         0       0         0       l_profileTEST.test_run_id := -20;
   315 ANNO      1         1       1         1       l_profileTEST.min_usecs   := 10;
   316 ANNO      1         0       0         0       l_profileTEST.max_usecs   := 20;
   317 ANNO      1         0       0         0       l_profileTEST.total_usecs := 30;
   318 ANNO      1         1       1         1       l_profileTEST.status := 'EXEC';
   319 ANNO      1         1       1         1       add_profile(l_profileTEST);
   320 ANNO      1         0       0         0       l_profileTEST.status := 'EXEC';
   321 ANNO      1         1       1         1       add_profile(l_profileTEST);
   323 ANNO      1         0       0         0       l_profileTEST.status := 'EXEC';
   324 ANNO      1         0       0         0       add_profile(l_profileTEST);
   325 ANNO      1         0       0         0       l_profileTEST.status := 'EXEC';
   326 ANNO      1         0       0         0       add_profile(l_profileTEST);
   327 ANNO      1         0       0         0       l_profileTEST.status := 'EXEC';
   328 ANNO      1         0       0         0       add_profile(l_profileTEST);
   329 ANNO      1         0       0         0       l_profileTEST.status := 'ANNO';
   330 ANNO      1         0       0         0       add_profile(l_profileTEST);
   331 ANNO      1         0       0         0       l_profileTEST.status := 'ANNO';
   332 ANNO      1         1       1         1       add_profile(l_profileTEST);
   334 ANNO      1         0       0         0       l_profileTEST.status := 'ANNO';
   335 ANNO      1         0       0         0       add_profile(l_profileTEST);
   336 ANNO      1         1       1         1       l_profileTEST.status := 'ANNO';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   337 ANNO      1         0       0         0       add_profile(l_profileTEST);
   338 ANNO      1         1       1         1       l_profileTEST.status := 'NOTX';
   339 ANNO      1         0       0         0       add_profile(l_profileTEST);
   340 ANNO      1         1       1         1       l_profileTEST.status := 'NOTX';
   341 ANNO      1         0       0         0       add_profile(l_profileTEST);
   342 ANNO      1         0       0         0       l_profileTEST.status := 'NOTX';
   343 ANNO      1         0       0         0       add_profile(l_profileTEST);
   345 ANNO      1         0       0         0       l_profileTEST.status := 'EXCL';
   346 ANNO      1         1       1         1       add_profile(l_profileTEST);
   347 ANNO      1         0       0         0       l_profileTEST.status := 'EXCL';
   348 ANNO      1         0       0         0       add_profile(l_profileTEST);
   349 ANNO      1         1       1         1       l_profileTEST.status := 'UNKN';
   350 ANNO      1         0       0         0       add_profile(l_profileTEST);
   351 ANNO      1         0       0         0       l_profileTEST.status := 'ABC';
   354 ANNO      1         0       0         0          add_profile(l_profileTEST);
   355 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
   356 ANNO      1         0       0         0       exception when others then
   357 ANNO      1        31      31        31          l_sqlerrm := SQLERRM;
   358 ANNO      0         1       1         1       end;
   359 ANNO      1         1       1         1       l_recTEST := g_rec;
   360 ANNO      1         0       0         0       g_rec     := l_recSAVE;
   362 ANNO      1         0       0         0       wt_assert.g_testcase := 'Add Profile Testing';
   363 ANNO      1         4       4         4       wt_assert.eq (
   367 ANNO      1         3       3         3       wt_assert.eq (
   372 ANNO      1         2       2         2       wt_assert.eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   376 ANNO      1         2       2         2       wt_assert.eq (
   381 ANNO      1         2       2         2       wt_assert.eq (
   385 ANNO      1         2       2         2       wt_assert.eq (
   390 ANNO      1         2       2         2       wt_assert.eq (
   394 ANNO      1         7       7         7       wt_assert.eq (
   399 ANNO      1         1       1         1       wt_assert.eq (
   403 ANNO      1         3       3         3       wt_assert.eq (
   408 ANNO      1         0       0         0       wt_assert.eq (
   412 ANNO      1         1       1         1    end t_add_profile;
   417 UNKN      0        13       3         5 procedure finalize
   422 EXEC      3        46      12        20 begin
   423 EXEC      3         3       1         1    if g_rec.test_run_id is null
   425 EXEC      1         0       0         0       initialize;
   426 EXEC      1         5       5         5       return;
   428 EXEC      2         2       1         1    g_rec.testcases := g_tc_aa.COUNT;
   429 EXEC      2         1       0         1    g_rec.asserts   := nvl(g_rec.asserts ,0);
   430 EXEC      2         0       0         0    g_rec.passes    := nvl(g_rec.passes  ,0);
   431 EXEC      2         0       0         0    g_rec.failures  := nvl(g_rec.failures,0);
   432 EXEC      2         0       0         0    g_rec.errors    := nvl(g_rec.errors  ,0);
   433 EXEC      2         1       0         1    if g_rec.asserts != 0
   435 EXEC      1         4       4         4       g_rec.test_yield := round(g_rec.passes/g_rec.asserts, 3);
   436 EXEC      1         1       1         1       g_rec.avg_elapsed_msecs := round(g_rec.tot_elapsed_msecs/g_rec.asserts, 3);
   438 EXEC      2         1       0         1    if g_rec.profiled_lines is not null
   440 EXEC      1         0       0         0       g_rec.executed_lines  := nvl(g_rec.executed_lines ,0);
   441 EXEC      1         0       0         0       g_rec.annotated_lines := nvl(g_rec.annotated_lines,0);
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   442 EXEC      1         1       1         1       g_rec.excluded_lines  := nvl(g_rec.excluded_lines ,0);
   443 EXEC      1         0       0         0       g_rec.notexec_lines   := nvl(g_rec.notexec_lines  ,0);
   444 EXEC      1         0       0         0       g_rec.unknown_lines   := nvl(g_rec.unknown_lines  ,0);
   445 EXEC      1         1       1         1       l_executable_lines    := g_rec.executed_lines + g_rec.notexec_lines;
   446 EXEC      1         0       0         0       if l_executable_lines != 0
   448 EXEC      1         0       0         0          g_rec.code_coverage := round(g_rec.executed_lines/l_executable_lines, 3);
   449 EXEC      1         1       1         1          g_rec.avg_executed_usecs := round(g_rec.tot_executed_usecs/l_executable_lines, 3);
   450 EXEC      1         0       0         0       end if;
   452 EXEC      2       389     155       233    insert into wt_test_run_stats values g_rec;
   453 EXEC      2         1       0         1    if g_rec.testcases > 0
   455 EXEC      1         3       3         3       tc := g_tc_aa.FIRST;
   456 EXEC      2         0       0         0       loop
   457 EXEC      2         3       1         2          g_tc_aa(tc).asserts  := nvl(g_tc_aa(tc).asserts ,0);
   458 EXEC      2         0       0         0          g_tc_aa(tc).passes   := nvl(g_tc_aa(tc).passes  ,0);
   459 EXEC      2         0       0         0          g_tc_aa(tc).failures := nvl(g_tc_aa(tc).failures,0);
   460 EXEC      2         1       1         1          g_tc_aa(tc).errors   := nvl(g_tc_aa(tc).errors  ,0);
   461 EXEC      2         0       0         0          if g_rec.asserts != 0
   463 EXEC      2         5       2         3             g_tc_aa(tc).test_yield := round(g_tc_aa(tc).passes /
   465 EXEC      2         1       1         1             g_tc_aa(tc).avg_elapsed_msecs := round(g_tc_aa(tc).tot_elapsed_msecs /
   468 EXEC      2       180      72       108          insert into wt_testcase_stats values g_tc_aa(tc);
   469 EXEC      2         5       2         3          exit when tc = g_tc_aa.LAST;
   470 EXEC      1         2       2         2          tc := g_tc_aa.NEXT(tc);
   473 EXEC      2       177      83        94    COMMIT;
   474 EXEC      2         2       1         1    initialize;
   475 EXEC      2        20      10        10 end finalize;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   479 ANNO      1        15      15        15    procedure t_finalize
   487 ANNO      1         0       0         0       l_test_run_id  number       := -102;
   488 ANNO      1         1       1         1       l_tc           varchar2(50) := 'TC2';
   492 ANNO      0         5       0         3       procedure run_finalize (in_msg_txt in varchar2) is begin
   493 ANNO      3        40      12        14          l_tc_aaSAVE := g_tc_aa;
   494 ANNO      3         2       1         1          l_recSAVE   := g_rec;
   495 ANNO      3        12       4         4          g_tc_aa     := l_tc_aaTEST;
   496 ANNO      3         1       0         1          g_rec       := l_recTEST;
   498 ANNO      3         0       0         0             finalize;
   499 ANNO      3         6       1         3             l_sqlerrm := SQLERRM;
   500 ANNO      0         0       0         0          exception when others then
   501 ANNO      0         0       0         0             l_sqlerrm := SQLERRM;
   502 ANNO      0         0       0         0          end;
   504 ANNO      3         4       1         2          l_tc_aaTEST := g_tc_aa;
   505 ANNO      3         2       0         1          l_recTEST   := g_rec;
   506 ANNO      3        15       5         5          g_tc_aa     := l_tc_aaSAVE;
   507 ANNO      3        14       1        12          g_rec       := l_recSAVE;
   508 ANNO      3         6       1         3          wt_assert.eq (
   512 ANNO      3         1       1         1       end run_finalize;
   515 ANNO      1         0       0         0       wt_assert.g_testcase := 'FINALIZE Happy Path Setup';
   516 ANNO      1         2       2         2       l_sql_txt := 'insert into WT_TEST_RUNS' ||
   519 ANNO      1         0       0         0       wt_assert.raises (
   523 ANNO      1       280     280       280       commit;
   525 ANNO      1         1       1         1       wt_assert.g_testcase  := 'FINALIZE Happy Path 1';
   526 ANNO      1         3       3         3       l_tc_aaTEST.delete;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   527 ANNO      1         1       1         1       l_recTEST := l_recNULL;
   528 ANNO      1         1       1         1       l_recTEST.test_run_id := l_test_run_id;
   529 ANNO      1         1       1         1       run_finalize('Run Finalize for Happy Path 1');  -- AUTONOMOUS COMMIT
   532 ANNO      1       210     210       210          select * into l_recTEST
   535 ANNO      1         2       2         2          l_sqlerrm := SQLERRM;
   536 ANNO      0         0       0         0       exception when others then
   537 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
   538 ANNO      0         0       0         0       end;
   540 ANNO      1         2       2         2       wt_assert.eq (
   544 ANNO      1         5       5         5       wt_assert.eq (
   549 ANNO      1         1       1         1       wt_assert.isnull (
   552 ANNO      1         3       3         3       wt_assert.eq (
   557 ANNO      1         2       2         2       wt_assert.eq (
   561 ANNO      1         1       1         1       wt_assert.eq (
   566 ANNO      1         2       2         2       wt_assert.eq (
   570 ANNO      1         2       2         2       wt_assert.eq (
   575 ANNO      1         1       1         1       wt_assert.isnull (
   578 ANNO      1         1       1         1       wt_assert.isnull (
   581 ANNO      1         1       1         1       wt_assert.isnull (
   585 ANNO      1         0       0         0       wt_assert.isnull (
   588 ANNO      1         0       0         0       wt_assert.isnull (
   591 ANNO      1         1       1         1       wt_assert.isnull (
   595 ANNO      1         1       1         1       wt_assert.isnull (
   598 ANNO      1         0       0         0       wt_assert.isnull (
   601 ANNO      1         0       0         0       wt_assert.isnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   605 ANNO      1         1       1         1       wt_assert.isnull (
   608 ANNO      1         0       0         0       wt_assert.isnull (
   611 ANNO      1         1       1         1       wt_assert.isnull (
   615 ANNO      1         4       4         4       wt_assert.eqqueryvalue (
   621 ANNO      1         3       3         3       wt_assert.raises (
   626 ANNO      1        96      96        96       commit;
   627 ANNO      1         5       5         5       wt_assert.eqqueryvalue (
   633 ANNO      1         0       0         0       wt_assert.g_testcase := 'FINALIZE Happy Path 2';
   634 ANNO      1        28      28        28       l_tc_aaTEST.delete;
   635 ANNO      1         6       6         6       l_tc_aaTEST(l_tc||'a').test_run_id       := l_test_run_id;
   636 ANNO      1         1       1         1       l_tc_aaTEST(l_tc||'a').testcase          := l_tc||'a';
   637 ANNO      1         1       1         1       l_tc_aaTEST(l_tc||'a').asserts           := 3;
   638 ANNO      1         1       1         1       l_tc_aaTEST(l_tc||'a').passes            := 2;
   639 ANNO      1         1       1         1       l_tc_aaTEST(l_tc||'a').failures          := 1;
   641 ANNO      1         0       0         0       l_tc_aaTEST(l_tc||'a').tot_elapsed_msecs := 300;
   643 ANNO      1         1       1         1       l_tc_aaTEST(l_tc||'b').test_run_id       := l_test_run_id;
   644 ANNO      1         1       1         1       l_tc_aaTEST(l_tc||'b').testcase          := l_tc||'b';
   645 ANNO      1         1       1         1       l_tc_aaTEST(l_tc||'b').asserts           := 3;
   646 ANNO      1         1       1         1       l_tc_aaTEST(l_tc||'b').passes            := 2;
   647 ANNO      1         1       1         1       l_tc_aaTEST(l_tc||'b').failures          := 1;
   649 ANNO      1         4       4         4       l_tc_aaTEST(l_tc||'b').tot_elapsed_msecs := 300;
   651 ANNO      1         2       2         2       l_recTEST := l_recNULL;
   652 ANNO      1         1       1         1       l_recTEST.test_run_id        := l_test_run_id;
   653 ANNO      1         0       0         0       l_recTEST.asserts            := 6;
   654 ANNO      1         0       0         0       l_recTEST.passes             := 4;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   655 ANNO      1         0       0         0       l_recTEST.failures           := 2;
   657 ANNO      1         0       0         0       l_recTEST.tot_elapsed_msecs  := 600;
   659 ANNO      1         1       1         1       l_recTEST.profiled_lines     := 20;
   660 ANNO      1         0       0         0       l_recTEST.executed_lines     := 8;
   661 ANNO      1         0       0         0       l_recTEST.annotated_lines    := 6;
   662 ANNO      1         0       0         0       l_recTEST.excluded_lines     := 4;
   663 ANNO      1         0       0         0       l_recTEST.notexec_lines      := 2;
   665 ANNO      1         0       0         0       l_recTEST.tot_executed_usecs := 2000;
   666 ANNO      1         0       0         0       run_finalize('Run Finalize for Happy Path 2');  -- AUTONOMOUS COMMIT
   668 ANNO      0         0       0         0       begin
   669 ANNO      1       186     186       186          select * into l_tstat_rec
   673 ANNO      1         1       1         1          l_sqlerrm := SQLERRM;
   674 ANNO      0         0       0         0       exception when others then
   675 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
   676 ANNO      0         0       0         0       end;
   678 ANNO      1         1       1         1       wt_assert.eq (
   682 ANNO      1         3       3         3       wt_assert.eq (
   687 ANNO      1         1       1         1       wt_assert.eq (
   691 ANNO      1         2       2         2       wt_assert.eq (
   696 ANNO      1         2       2         2       wt_assert.eq (
   700 ANNO      1         2       2         2       wt_assert.eq (
   705 ANNO      1         2       2         2       wt_assert.eq (
   709 ANNO      1         2       2         2       wt_assert.eq (
   713 ANNO      1         2       2         2       wt_assert.eq (
   719 ANNO      1       125     125       125          select * into l_tstat_rec
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   723 ANNO      1         2       2         2          l_sqlerrm := SQLERRM;
   724 ANNO      0         0       0         0       exception when others then
   725 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
   726 ANNO      0         0       0         0       end;
   728 ANNO      1         1       1         1       wt_assert.eq (
   732 ANNO      1         2       2         2       wt_assert.eq (
   737 ANNO      1         1       1         1       wt_assert.eq (
   741 ANNO      1         1       1         1       wt_assert.eq (
   746 ANNO      1         1       1         1       wt_assert.eq (
   750 ANNO      1         1       1         1       wt_assert.eq (
   755 ANNO      1         2       2         2       wt_assert.eq (
   759 ANNO      1         2       2         2       wt_assert.eq (
   763 ANNO      1         2       2         2       wt_assert.eq (
   769 ANNO      1       127     127       127          select * into l_recTEST
   772 ANNO      1         2       2         2          l_sqlerrm := SQLERRM;
   773 ANNO      0         0       0         0       exception when others then
   774 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
   775 ANNO      0         0       0         0       end;
   777 ANNO      1         1       1         1       wt_assert.eq (
   781 ANNO      1         1       1         1       wt_assert.eq (
   786 ANNO      1         1       1         1       wt_assert.eq (
   790 ANNO      1         2       2         2       wt_assert.eq (
   795 ANNO      1         1       1         1       wt_assert.eq (
   799 ANNO      1         2       2         2       wt_assert.eq (
   804 ANNO      1         2       2         2       wt_assert.eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   808 ANNO      1         1       1         1       wt_assert.eq (
   813 ANNO      1         3       3         3       wt_assert.eq (
   817 ANNO      1         2       2         2       wt_assert.eq (
   822 ANNO      1         2       2         2       wt_assert.eq (
   826 ANNO      1         2       2         2       wt_assert.eq (
   831 ANNO      1         2       2         2       wt_assert.eq (
   835 ANNO      1         2       2         2       wt_assert.eq (
   840 ANNO      1         2       2         2       wt_assert.eq (
   844 ANNO      1         2       2         2       wt_assert.eq (
   848 ANNO      1         2       2         2       wt_assert.eq (
   853 ANNO      1         3       3         3       wt_assert.raises (
   858 ANNO      1        93      93        93       commit;
   859 ANNO      1         5       5         5       wt_assert.eqqueryvalue (
   865 ANNO      1         2       2         2       wt_assert.raises (
   870 ANNO      1        84      84        84       commit;
   871 ANNO      1         5       5         5       wt_assert.eqqueryvalue (
   877 ANNO      1         1       1         1       wt_assert.g_testcase  := 'FINALIZE Sad Path 1';
   878 ANNO      1         1       1         1       l_tc_aaTEST.delete;
   879 ANNO      1         1       1         1       l_recTEST := l_recNULL;
   880 ANNO      1         0       0         0       l_recTEST.asserts := 2;
   881 ANNO      1         0       0         0       run_finalize('Run Finalize for Sad Path 1');  -- AUTONOMOUS COMMIT
   882 ANNO      1         1       1         1       wt_assert.isnull (
   885 ANNO      1         1       1         1       wt_assert.isnull (
   889 ANNO      1         0       0         0       wt_assert.g_testcase := 'FINALIZE Happy Path Teardown';
   890 ANNO      1         3       3         3       wt_assert.raises (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   895 ANNO      1       158     158       158       commit;
   896 ANNO      1         8       8         8    end t_finalize;
   901 UNKN      0         7       1         3 procedure delete_records
   905 EXEC      3       498      93       287    delete from wt_testcase_stats
   907 EXEC      3       193      43        96    delete from wt_test_run_stats
   909 EXEC      3         6       1         3 end delete_records;
   913 ANNO      0         2       2         2    procedure t_delete_records
   915 ANNO      1         0       0         0       l_test_run_id  number := -100;
   919 ANNO      1         2       2         2       wt_assert.g_testcase := 'Delete Records Happy Path Setup';
   920 ANNO      1         6       6         6       l_sql_txt := 'insert into WT_TEST_RUNS' ||
   923 ANNO      1         2       2         2       wt_assert.raises (
   928 ANNO      1         6       6         6       l_sql_txt := 'insert into WT_TEST_RUN_STATS (test_run_id) values (' ||
   930 ANNO      1         1       1         1       wt_assert.raises (
   934 ANNO      1         2       2         2       l_sql_txt := 'insert into WT_TESTCASE_STATS (test_run_id, testcase)' ||
   936 ANNO      1         0       0         0       wt_assert.raises (
   941 ANNO      1         1       1         1       wt_assert.g_testcase := 'Delete Records Happy Path and Teardown';
   942 ANNO      1         4       4         4       wt_assert.raises (
   947 ANNO      1         7       7         7       wt_assert.raises (
   952 ANNO      1         1       1         1       wt_assert.g_testcase := 'Delete Records Test Sad Paths';
   953 ANNO      1         0       0         0       wt_assert.raises (
   957 ANNO      1         1       1         1       wt_assert.raises (
   961 ANNO      1         1       1         1    end t_delete_records;
   968 ANNO      0         2       2         2    procedure WTPLSQL_RUN  --% WTPLSQL SET DBOUT "WT_TEST_RUN_STAT:PACKAGE BODY" %--
   971 ANNO      1         1       1         1       t_initialize;
   972 ANNO      1         0       0         0       t_add_result;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   973 ANNO      1         0       0         0       t_add_profile;
   974 ANNO      1         1       1         1       t_finalize;
   975 ANNO      1         0       0         0       t_delete_records;
   976 ANNO      1         1       1         1    end WTPLSQL_RUN;
   981 EXCL      0         0       0         0 end wt_test_run_stat;



PL/SQL procedure successfully completed.

