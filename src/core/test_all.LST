
    wtPLSQL 1.1.0 - Run ID 280: 18-May-2018 01:17:31 AM

  Test Results for WTP.WTPLSQL
       Total Testcases:       10      Total Assertions:       34
  Minimum Elapsed msec:        0     Failed Assertions:        0
  Average Elapsed msec:        5      Error Assertions:        0
  Maximum Elapsed msec:       96            Test Yield:   100.00%
  Total Run Time (sec):      0.2

"WTP"."WTPLSQL" Test Result Details (Test Run ID 280)
----------------------------------------
 ---- Test Case: Show Version Happy Path
 PASS   15ms Test Existing Version. ISNOTNULL - Expected NOT NULL and got "1.1.0"
 PASS    1ms Test New Version. EQ - Expected "TESTING" and got "TESTING"
 PASS    0ms Return to Existing Version. EQ - Expected "1.1.0" and got "1.1.0"
 ---- Test Case: CHECK_RUNNER Sad Path 1
 PASS    0ms Null RUNNER_NAME. EQ - Expected "ORA-20001: RUNNER_NAME is null" and got "ORA-20001: RUNNER_NAME is null"
 ---- Test Case: CHECK_RUNNER Sad Path 2
 PASS    1ms Invalid RUNNER_NAME. EQ - Expected "ORA-20002: RUNNER_NAME "BOGUS.WTPLSQL_RUN" is not valid" and got "ORA-20002: RUNNER_NAME "BOGUS.WTPLSQL_RUN" is not valid"
 ---- Test Case: INSERT_TEST_RUN Happy Path 1
 PASS    7ms Number of Records. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_test_runs where id = 280
 PASS    1ms Records After Delete. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = 280
 ---- Test Case: INSERT_TEST_RUN Sad Path 1
 PASS    0ms l_dbmsout_buff.COUNT - 1. ISNOTNULL - Expected NOT NULL and got "0"
 PASS    6ms Number of Records should stay the same. EQQUERYVALUE - Expected "130" and got "130" for Query: select count(*) from wt_test_runs
 PASS    0ms DBMS_OUTPUT Status. EQ - Expected "0" and got "0"
 PASS    1ms DBMS_OUTPUT Line. ISNOTNULL - Expected NOT NULL and got "ORA-01400: cannot insert NULL into ("WTP"."WT_TEST_RUNS"."START_DTM")\nORA-06512: at "WTP.WTPLSQL", line 106\n"
 PASS    0ms Confirm DBMS_OUTPUT Line text. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms l_dbmsout_buff.COUNT - 1. ISNOTNULL - Expected NOT NULL and got "0"
 ---- Test Case: TEST_ALL Happy Path
 PASS   25ms test_all_aa.EXISTS('WTPLSQL'). THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: DELETE_RUNS Happy Path 1
 PASS    2ms Number of Records Before Insert. ISNOTNULL - Expected NOT NULL and got "20"
 PASS    1ms Number of Records Before Insert <= 20. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms Number of Records After Insert. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_test_runs where id = 280
 PASS    3ms Number of Records After Delete. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = 280
 ---- Test Case: DELETE_RUNS Happy Path 2
 PASS    0ms Confirm number of records. EQQUERYVALUE - Expected "20" and got "20" for Query: select count(*) from wt_test_runs where runner_owner = 'WTP' and runner_name = 'WTPLSQL'
 PASS   10ms Check Added 20 records. EQQUERYVALUE - Expected "40" and got "40" for Query: select count(*) from wt_test_runs where runner_owner = 'WTP' and runner_name = 'WTPLSQL'
 PASS   96ms Check number of records reduced. EQQUERYVALUE - Expected "20" and got "20" for Query: select count(*) from wt_test_runs where runner_owner = 'WTP' and runner_name = 'WTPLSQL'
 PASS    2ms Confirm original number of records. EQQUERYVALUE - Expected "20" and got "20" for Query: select count(*) from wt_test_runs where runner_owner = 'WTP' and runner_name = 'WTPLSQL'
 ---- Test Case: DELETE_RUNS Sad Path 1
 PASS    1ms Delete Runs(-9995). ISNULL - Expected NULL and got ""
 ---- Test Case: TEST_RUNS_REC_AND_TABLE Happy Path
 PASS    0ms g_test_runs_rec.id. ISNOTNULL - Expected NOT NULL and got "280"
 PASS    0ms g_test_runs_rec.start_dtm. ISNOTNULL - Expected NOT NULL and got "18-MAY-2018 01:17:31.069000"
 PASS    0ms g_test_runs_rec.runner_owner. ISNOTNULL - Expected NOT NULL and got "WTP"
 PASS    0ms g_test_runs_rec.runner_name. EQ - Expected "WTPLSQL" and got "WTPLSQL"
 PASS    0ms g_test_runs_rec.dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms g_test_runs_rec.dbout_name. ISNULL - Expected NULL and got ""
 PASS    1ms g_test_runs_rec.dbout_type. ISNULL - Expected NULL and got ""
 PASS    0ms g_test_runs_rec.profiler_runid. ISNULL - Expected NULL and got ""
 PASS    0ms g_test_runs_rec.end_dtm. ISNULL - Expected NULL and got ""
 PASS    0ms g_test_runs_rec.error_message. ISNULL - Expected NULL and got ""
 PASS    2ms TEST_RUNS Record for this TEST_RUN. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from WT_TEST_RUNS where id = '280'


    wtPLSQL 1.1.0 - Run ID 281: 18-May-2018 01:17:31 AM

  Test Results for WTP.WT_ASSERT
       Total Testcases:      150      Total Assertions:      404
  Minimum Elapsed msec:        0     Failed Assertions:        0
  Average Elapsed msec:        9      Error Assertions:        0
  Maximum Elapsed msec:     1582            Test Yield:   100.00%
  Total Run Time (sec):      3.7

  Code Coverage for PACKAGE BODY WTP.WT_ASSERT
  Total Profiled Lines:     1464    Not Executed Lines:        2
  Minimum Elapsed usec:        0       Annotated Lines:     1103
  Average Elapsed usec:     2251        Excluded Lines:        6
  Maximum Elapsed usec:    51496         Unknown Lines:       44
 Trigger Source Offset:        0         Code Coverage:    99.36%

"WTP"."WT_ASSERT" Test Result Details (Test Run ID 281)
----------------------------------------
 ---- Test Case: BOOLEAN_TO_STATUS
 PASS 1582ms Test for "TRUE" conversion. EQ - Expected "TRUE" and got "TRUE"
 PASS    1ms Test for "FALSE" conversion. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms Test for NULL. ISNULL - Expected NULL and got ""
 ---- Test Case: COMPARE_QUERIES Bad Query Test 1
 PASS   31ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    1ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "ORA-06550: line 2, column 60:\nPL/SQL: ORA-00942: table or view does not exist\nORA-06550: line 2, column 18:\nPL/SQL: SQL Statement ignored\nORA-06550: line 2, column 11:\nPLS-00341: declaration of cursor 'CUR' is incomplete or malformed\nORA-06550: line 3, column 8:\nPL/SQL: Item ignored\nORA-06550: line 6, column 19:\nPLS-00320: the declaration of the type of this expression is incomplete or malformed\nORA-06550: line 6, column 4:\nPL/SQL: SQL Statement ignored\nFAILURE of Compare Query: with check_query as (select bogus123 from bogus456), against_query as (select bogus987 from bogus654), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2;"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: COMPARE_QUERIES Bad Query Test 2
 PASS   97ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Comparison Query: with check_query as (select table_name from user_tables), against_query as (select tablespace_name from user_tables), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: NLS Settings
 PASS    1ms get_NLS_DATE_FORMAT 1. EQ - Expected "DD-MON-YYYY" and got "DD-MON-YYYY"
 PASS    0ms get_NLS_DATE_FORMAT 2. EQ - Expected "DD-MON-YYYY HH24:MI:SS" and got "DD-MON-YYYY HH24:MI:SS"
 PASS    1ms get_NLS_TIMESTAMP_FORMAT 2. EQ - Expected "DD-MON-YYYY" and got "DD-MON-YYYY"
 PASS    0ms get_NLS_TIMESTAMP_FORMAT 2. EQ - Expected "DD-MON-YYYY HH24:MI:SS.FF6" and got "DD-MON-YYYY HH24:MI:SS.FF6"
 PASS    1ms get_NLS_TIMESTAMP_TZ_FORMAT 2. EQ - Expected "DD-MON-YYYY" and got "DD-MON-YYYY"
 PASS    0ms get_NLS_TIMESTAMP_TZ_FORMAT 2. EQ - Expected "DD-MON-YYYY HH24:MI:SS.FF6 TZH:TZM" and got "DD-MON-YYYY HH24:MI:SS.FF6 TZH:TZM"
 ---- Test Case: Last Values Tests
 PASS    0ms Last Pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms Last Assert. EQ - Expected "EQ" and got "EQ"
 PASS    0ms Last MSG. EQ - Expected "Last Assert" and got "Last Assert"
 PASS    0ms Last Details. EQ - Expected "Expected "Last Assert" and got "Last Assert"" and got "Expected "Last Assert" and got "Last Assert""
 ---- Test Case: RESET_GLOBALS
 PASS    0ms g_testcase. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.last_pass. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.raise_exception. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_assert. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.last_msg. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.last_details. ISNULL - Expected NULL and got ""
 ---- Test Case: This Happy Path
 PASS    0ms Run Test. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    1ms g_rec.last_assert. EQ - Expected "THIS" and got "THIS"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "Expected "TRUE" and got "TRUE"" and got "Expected "TRUE" and got "TRUE""
 ---- Test Case: This Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: This Sad Path 2
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: This Sad Path 3
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: EQ VARCHAR2 Happy Path 1
 PASS    0ms Run Test. EQ - Expected "X" and got "X"
 PASS    0ms g_rec.last_pass value. ISNOTNULL - Expected NOT NULL and got "TRUE"
 PASS    0ms g_rec.last_pass. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert value. ISNOTNULL - Expected NOT NULL and got "EQ"
 PASS    0ms g_rec.last_assert. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_msg value. ISNOTNULL - Expected NOT NULL and got "Run Test"
 PASS    0ms g_rec.last_msg. THIS - Expected "TRUE" and got "TRUE"
 PASS    1ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "X" and got "X""
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ VARCHAR2 Happy Path 2
 PASS    0ms Run Test. EQ - Expected "X" and got "X"
 ---- Test Case: EQ VARCHAR2 Happy Path 3
 PASS    0ms Run Test. EQ - Expected "" and got ""
 ---- Test Case: EQ VARCHAR2 Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "X"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "Y"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ VARCHAR2 Sad Path 2
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ VARCHAR2 Sad Path 3
 PASS    0ms check_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "Y"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ VARCHAR2 Sad Path 4
 PASS    0ms check_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ VARCHAR2 Sad Path 5
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "X"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "Y"
 PASS    1ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ VARCHAR2 Sad Path 6
 PASS    0ms check_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "Y"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ ROWID Happy Path 1
 PASS    0ms Run Test. EQ - Expected "AAAFd1AAFAAAABSAA/" and got "AAAFd1AAFAAAABSAA/"
 ---- Test Case: EQ ROWID Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "AAAFd1AAFAAAABSAA/"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "AAAFd1AAFAAAABSAB/"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ LONG Happy Path 1
 PASS    1ms Run Test. EQ - Expected "0123456789ABCDEF0123456789ABCDEF" and got "0123456789ABCDEF0123456789ABCDEF"
 ---- Test Case: EQ LONG Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "0123456789ABCDEF0123456789ABCDEF"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "FEDCBA9876543210FEDCBA9876543210"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ RAW Happy Path 1
 PASS    0ms Run Test. EQ - Expected "2345" and got "2345"
 ---- Test Case: EQ RAW Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "2345"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "6789"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ LANG RAW Happy Path 1
 PASS    0ms Run Test. EQ - Expected "0123456789ABCDEF0123456789ABCDEF" and got "0123456789ABCDEF0123456789ABCDEF"
 ---- Test Case: EQ LONG RAW Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "0123456789ABCDEF0123456789ABCDEF"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "FEDCBA9876543210FEDCBA9876543210"
 PASS    0ms Sad Path 1. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ NVARCHAR2 Happy Path 1
 PASS    0ms Run Test. EQ - Expected "NCHAR1" and got "NCHAR1"
 ---- Test Case: EQ NVARCHAR2 Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "NCHAR1"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "NCHAR2"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BOOLEAN Happy Path 1
 PASS    1ms Run Test. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: EQ BOOLEAN Happy Path 2
 PASS    0ms Run Test. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: EQ BOOLEAN Happy Path 3
 PASS    0ms Run Test. EQ - Expected "" and got ""
 ---- Test Case: EQ BOOLEAN Happy Sad 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "FALSE"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "TRUE"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BOOLEAN Happy Sad 2
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "FALSE"
 PASS    0ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BOOLEAN Happy Sad 3
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "FALSE"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "TRUE"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BOOLEAN Happy Sad 4
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "FALSE"
 PASS    0ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ NUMBER Happy Path 1
 PASS    0ms Run Test. EQ - Expected "4" and got "4"
 ---- Test Case: EQ NUMBER Happy Path 2
 PASS    1ms Run Test. EQ - Expected "9876543210987654321098765432109876543210" and got "9876543210987654321098765432109876543210"
 ---- Test Case: EQ NUMBER Happy Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "4"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "5"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ PLS_INTEGER Happy Path 1
 PASS    0ms Run Test. EQ - Expected "2" and got "2"
 ---- Test Case: EQ PLS_INTEGER Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "2"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "3"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ DATE Happy Path 1
 PASS    0ms Run Test. EQ - Expected "18-MAY-2018 01:17:31" and got "18-MAY-2018 01:17:31"
 ---- Test Case: EQ DATE Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "18-MAY-2018 01:17:31"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "18-MAY-2018 02:17:31"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ TIMSETAMP Happy Path 1
 PASS    1ms EQ TIMSETAMP Happy Path 1. EQ - Expected "18-MAY-2018 01:17:31.133000" and got "18-MAY-2018 01:17:31.133000"
 ---- Test Case: EQ TIMSETAMP Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "18-MAY-2018 01:17:31.133000"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "18-MAY-2018 02:17:31"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ TIMSETAMP WITH LOCAL TIME ZONE Happy Path 1
 PASS    0ms Run Test. EQ - Expected "18-MAY-2018 01:17:31.133000 -05:00" and got "18-MAY-2018 01:17:31.133000 -05:00"
 ---- Test Case: EQ TIMSETAMP WITH LOCAL TIME ZONE Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "18-MAY-2018 01:17:31.133000"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "18-MAY-2018 02:17:31"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ TIMSETAMP WITH TIME ZONE Happy Path 1
 PASS    0ms Run Test. EQ - Expected "18-MAY-2018 01:17:31.133000 -05:00" and got "18-MAY-2018 01:17:31.133000 -05:00"
 ---- Test Case: EQ TIMSETAMP WITH TIME ZONE Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "18-MAY-2018 01:17:31.133000 -05:00"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "18-MAY-2018 02:17:31"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ INTERVAL DAY TO SECOND Happy Path 1
 PASS    0ms Run Test. EQ - Expected "+01 01:01:01.001000" and got "+01 01:01:01.001000"
 ---- Test Case: EQ INTERVAL DAY TO SECOND Sad Path 1
 PASS    1ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "+01 01:01:01.001000"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "+02 02:02:02.002000"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ INTERVAL YEAR TO MONTH Happy Path 1
 PASS    0ms Run Test. EQ - Expected "+01-01" and got "+01-01"
 ---- Test Case: EQ INTERVAL YEAR TO MONTH Sad Path 1
 PASS    0ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "+01-01"
 PASS    0ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "+02-02"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ XMLTYPE Happy Path 1
 PASS   76ms Run Test. EQ - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awa
rdfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearc
h/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   "
 PASS    0ms g_rec.last_pass value. ISNOTNULL - Expected NOT NULL and got "TRUE"
 PASS    0ms g_rec.last_pass. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms  g_rec.last_assert value. ISNOTNULL - Expected NOT NULL and got "EQ"
 PASS    0ms g_rec.last_assert. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_msg value. ISNOTNULL - Expected NOT NULL and got "Run Test"
 PASS    0ms g_rec.last_msg. THIS - Expected "TRUE" and got "TRUE"
 PASS    1ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fp
ds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" t
ype="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF0"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ XMLTYPE Sad Path 1
 PASS   48ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch
/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber>\n          </ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n          </ns1:referencedIDVID>\n        </ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n       
   <ns1:effectiveDate>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:curr"
 PASS    1ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?><note>2</note>"
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ XMLTYPE Sad Path 2
 PASS   25ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ CLOB Happy Path 1
 PASS    3ms Run Test. EQ - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS
&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www
.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J"
 PASS    0ms g_rec.last_pass value. ISNOTNULL - Expected NOT NULL and got "TRUE"
 PASS    0ms g_rec.last_pass. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert value. ISNOTNULL - Expected NOT NULL and got "EQ"
 PASS    0ms g_rec.last_assert. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_msg value. ISNOTNULL - Expected NOT NULL and got "Run Test"
 PASS    0ms g_rec.last_msg. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" hr
ef="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link 
rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ CLOB Happy Path 2
 PASS    3ms Run Test. EQ - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS
&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www
.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J"
 ---- Test Case: EQ CLOB Happy Path 3
 PASS    1ms Run Test. EQ - Expected "" and got ""
 ---- Test Case: EQ CLOB Sad Path 1
 PASS    6ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www
.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:ef
fectiveDate>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    1ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "This is another clob."
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ CLOB Sad Path 2
 PASS    2ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 PASS    1ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ CLOB Sad Path 3
 PASS    3ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www
.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:ef
fectiveDate>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    0ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    1ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ CLOB Sad Path 4
 PASS    2ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www
.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:ef
fectiveDate>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    1ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ NCLOB Happy Path 1
 PASS   42ms Run Test. EQ - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS
&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www
.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J"
 ---- Test Case: EQ NCLOB Happy Path 2
 PASS   52ms Run Test. EQ - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS
&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www
.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J"
 ---- Test Case: EQ NCLOB Happy Path 3
 PASS    2ms Run Test. EQ - Expected "" and got ""
 ---- Test Case: EQ NCLOB Sad Path 1
 PASS   44ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www
.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:ef
fectiveDate>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    1ms against_this_in value. ISNOTNULL - Expected NOT NULL and got "This is another clob."
 PASS    1ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ NCLOB Sad Path 2
 PASS   16ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ NCLOB Sad Path 3
 PASS   32ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www
.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:ef
fectiveDate>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    0ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    1ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ NCLOB Sad Path 4
 PASS   26ms check_this_in value. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www
.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:ef
fectiveDate>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    1ms against_this_in value. ISNULL - Expected NULL and got ""
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BLOB Happy Path 1
 PASS    0ms Run Test. EQ - DBMS_LOB.COMPARE on BLOBs, compare_results: 0
 PASS    0ms g_rec.last_pass value. ISNOTNULL - Expected NOT NULL and got "TRUE"
 PASS    0ms g_rec.last_pass. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert value. ISNOTNULL - Expected NOT NULL and got "EQ"
 PASS    1ms g_rec.last_assert. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_msg value. ISNOTNULL - Expected NOT NULL and got "Run Test"
 PASS    0ms g_rec.last_msg. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "DBMS_LOB.COMPARE on BLOBs, compare_results: 0"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BLOB Happy Path 2
 PASS    0ms Run Test. EQ - DBMS_LOB.COMPARE on BLOBs, compare_results: 0
 ---- Test Case: EQ BLOB Happy Path 3
 PASS    0ms Run Test. EQ - DBMS_LOB.COMPARE on BLOBs, compare_results: -1
 ---- Test Case: EQ BLOB Sad Path 1
 PASS    5ms check_this_in value. ISNOTNULL - BLOB is NOT NULL
 PASS    0ms against_this_in value. ISNOTNULL - BLOB is NOT NULL
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BLOB Sad Path 2
 PASS    1ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BLOB Sad Path 3
 PASS    0ms check_this_in value. ISNOTNULL - BLOB is NOT NULL
 PASS    0ms against_this_in value. ISNULL - BLOB is NULL
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQ BLOB Sad Path 4
 PASS    0ms check_this_in value. ISNOTNULL - BLOB is NOT NULL
 PASS    1ms against_this_in value. ISNULL - BLOB is NULL
 PASS    0ms last_pass = FALSE. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNOTNULL VARCHAR2 Happy Path 1
 PASS    2ms Run Test. ISNOTNULL - Expected NOT NULL and got "X"
 PASS    0ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "ISNOTNULL" and got "ISNOTNULL"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "Expected NOT NULL and got "X"" and got "Expected NOT NULL and got "X""
 ---- Test Case: ISNOTNULL VARCHAR2 Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNOTNULL VARCHAR2 Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNOTNULL BOOLEAN Happy Path 1
 PASS    0ms Run Test. ISNOTNULL - Expected NOT NULL and got "TRUE"
 ---- Test Case: ISNOTNULL BOOLEAN Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNOTNULL BOOLEAN Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNOTNULL CLOB Happy Path 1
 PASS    5ms Run Test. ISNOTNULL - Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/e
zsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns1:signedDate>\n          <ns1:effectiveDate
>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-14 00:00:00</ns1:currentComp"
 PASS    0ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "ISNOTNULL" and got "ISNOTNULL"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected NOT NULL and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" ty
pe="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"></link>\n    <modified>2016-02-16 13:10:02</modified>\n    <content xmlns:ns1="https://www.fpds.gov/FPDS" type="application/xml">\n      <ns1:award xmlns:ns1="http://www.fpdsng.com/FPDS" version="1.2">\n        <ns1:awardID>\n          <ns1:awardContractID>\n            <ns1:agencyID name="BUREAU OF LABOR STATISTICS">1625</ns1:agencyID>\n            <ns1:PIID>DOLF072J11595</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber>\n            <ns1:transactionNumber>0</ns1:transactionNumber></ns1:awardContractID>\n          <ns1:referencedIDVID>\n            <ns1:agencyID name="FEDERAL ACQUISITION SERVICE">4730</ns1:agencyID>\n            <ns1:PIID>GS35F4543G</ns1:PIID>\n            <ns1:modNumber>0</ns1:modNumber></ns1:referencedIDVID></ns1:awardID>\n        <ns1:relevantContractDates>\n          <ns1:signedDate>2007-05-04 00:00:00</ns
1:signedDate>\n          <ns1:effectiveDate>2007-04-15 00:00:00</ns1:effectiveDate>\n          <ns1:currentCompletionDate>2008-04-1"
 PASS    1ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNOTNULL CLOB Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNOTNULL CLOB Sad Path 2
 PASS    1ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNOTNULL BLOB Happy Path 1
 PASS    0ms Run Test. ISNOTNULL - BLOB is NOT NULL
 PASS    0ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "ISNOTNULL" and got "ISNOTNULL"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "BLOB is NOT NULL" and got "BLOB is NOT NULL"
 ---- Test Case: ISNOTNULL BLOB Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNOTNULL BLOB Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNULL VARCHAR2 Happy Path 1
 PASS    0ms Run Test. ISNULL - Expected NULL and got ""
 PASS    1ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "ISNULL" and got "ISNULL"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "Expected NULL and got """ and got "Expected NULL and got """
 ---- Test Case: ISNULL VARCHAR2 Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNULL VARCHAR2 Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNULL BOOLEAN Happy Path 1
 PASS    0ms Run Test. ISNULL - Expected NULL and got ""
 ---- Test Case: ISNULL BOOLEAN Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNULL BOOLEAN Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNULL CLOB Happy Path 1
 PASS    3ms Run Test. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "ISNULL" and got "ISNULL"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "Expected NULL and got """ and got "Expected NULL and got """
 ---- Test Case: ISNULL CLOB Sad Path 1
 PASS    2ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNULL CLOB Sad Path 2
 PASS    1ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: ISNULL BLOB Happy Path 1
 PASS    0ms Run Test. ISNULL - BLOB is NULL
 PASS    1ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "ISNULL" and got "ISNULL"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "BLOB is NULL" and got "BLOB is NULL"
 ---- Test Case: ISNULL BLOB Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: ISNULL BLOB Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: Raises Tests Happy Path 1
 PASS    2ms RAISES Varchar2 Test. RAISES/THROWS - Expected exception "%PLS-00302: component 'BOGUS' must be declared%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;".
 PASS    0ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "RAISES/THROWS" and got "RAISES/THROWS"
 PASS    0ms g_rec.last_msg. EQ - Expected "RAISES Varchar2 Test" and got "RAISES Varchar2 Test"
 PASS    0ms g_rec.last_details. EQ - Expected "Expected exception "%PLS-00302: component 'BOGUS' must be declared%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;"." and got "Expected exception "%PLS-00302: component 'BOGUS' must be declared%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;"."
 ---- Test Case: Raises Tests Happy Path 2
 PASS    2ms RAISES Number Test. RAISES/THROWS - Expected exception "%-00302%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;".
 PASS    0ms g_rec.last_details value. EQ - Expected "Expected exception "%-00302%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;"." and got "Expected exception "%-00302%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;"."
 PASS    1ms THROWS Varchar2 Test. RAISES/THROWS - Expected exception "%PLS-00302: component 'BOGUS' must be declared%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;".
 PASS    0ms g_rec.last_details value. EQ - Expected "Expected exception "%PLS-00302: component 'BOGUS' must be declared%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;"." and got "Expected exception "%PLS-00302: component 'BOGUS' must be declared%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;"."
 PASS    0ms THROWS Number Test. RAISES/THROWS - Expected exception "%-00302%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;".
 PASS    1ms g_rec.last_details value. EQ - Expected "Expected exception "%-00302%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;"." and got "Expected exception "%-00302%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;"."
 ---- Test Case: Raises Tests Happy Path 3
 PASS    1ms RAISES Varchar2 No Error. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "begin wt_assert.set_NLS_DATE_FORMAT(wt_assert.get_NLS_DATE_FORMAT); end;".
 PASS    0ms g_rec.last_details value. EQ - Expected "No exception was expected. Exception raised was "". Exception raised by: "begin wt_assert.set_NLS_DATE_FORMAT(wt_assert.get_NLS_DATE_FORMAT); end;"." and got "No exception was expected. Exception raised was "". Exception raised by: "begin wt_assert.set_NLS_DATE_FORMAT(wt_assert.get_NLS_DATE_FORMAT); end;"."
 PASS    0ms RAISES Number No Error. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "begin wt_assert.set_NLS_DATE_FORMAT(wt_assert.get_NLS_DATE_FORMAT); end;".
 PASS    0ms g_rec.last_details value. EQ - Expected "No exception was expected. Exception raised was "". Exception raised by: "begin wt_assert.set_NLS_DATE_FORMAT(wt_assert.get_NLS_DATE_FORMAT); end;"." and got "No exception was expected. Exception raised was "". Exception raised by: "begin wt_assert.set_NLS_DATE_FORMAT(wt_assert.get_NLS_DATE_FORMAT); end;"."
 ---- Test Case: Raises Tests Sad Path 1
 PASS    1ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected exception "%Incorrect Exception%". Actual exception raised was "ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored". Exception raised by: "begin wt_assert.bogus; end;". Error Stack: ORA-06550: line 1, column 17:\nPLS-00302: component 'BOGUS' must be declared\nORA-06550: line 1, column 7:\nPL/SQL: Statement ignored\nORA-06512: at "WTP.WT_ASSERT", line 2337\n"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: Raises Tests Sad Path 2
 PASS    1ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    1ms g_rec.last_details. EQ - Expected "Expected exception "%Incorrect Exception%". No exception was raised by: "begin wt_assert.set_NLS_DATE_FORMAT; end;". Error Stack: " and got "Expected exception "%Incorrect Exception%". No exception was raised by: "begin wt_assert.set_NLS_DATE_FORMAT; end;". Error Stack: "
 ---- Test Case: EQQUERYVALUE VARCHAR2 Happy Path 1
 PASS   11ms Run Test. EQQUERYVALUE - Expected "X" and got "X" for Query: select dummy from DUAL
 PASS    0ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "EQQUERYVALUE" and got "EQQUERYVALUE"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    1ms g_rec.last_details. EQ - Expected "Expected "X" and got "X" for Query: select dummy from DUAL" and got "Expected "X" and got "X" for Query: select dummy from DUAL"
 ---- Test Case: EQQUERYVALUE VARCHAR2 Happy Path 2
 PASS    0ms Run Test. EQQUERYVALUE - Expected "" and got "" for Query: select max(dummy) from DUAL where 0 = 1
 ---- Test Case: EQQUERYVALUE VARCHAR2 Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 ---- Test Case: EQQUERYVALUE VARCHAR2 Sad Path 2
 PASS    1ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE VARCHAR2 Sad Path 3
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details. ISNOTNULL - Expected NOT NULL and got "Exception raised for Query: Garbage query that won't work\nORA-00900: invalid SQL statement\nORA-06512: at "WTP.WT_ASSERT", line 2597\n"
 PASS    0ms g_rec.last_details value. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE XMLTYPE Happy Path 1
 PASS   89ms Run Test. EQQUERYVALUE - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;ind
exName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.g
ov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " for Query: select temp_xml from wt_self_test where id = 1
 PASS    1ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "EQQUERYVALUE" and got "EQQUERYVALUE"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fp
ds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" t
ype="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF0"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE XMLTYPE Sad Path 1
 PASS   36ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "<?xml version="1.0" encoding="UTF-8"?><note>2</note>" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"/>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"/>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"/>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n
    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J11595+1625+"/>\n   " for Query: select temp_xml from wt_self_test where id = 1"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE XMLTYPE Sad Path 2
 PASS   33ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE XMLTYPE Sad Path 3
 PASS    2ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details. ISNOTNULL - Expected NOT NULL and got "Exception raised for Query: Garbage query that won't work\nORA-00900: invalid SQL statement\nORA-06512: at "WTP.WT_ASSERT", line 2635\n"
 PASS    0ms g_rec.last_details value. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE CLOB Happy Path 1
 PASS   19ms Run Test. EQQUERYVALUE - Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search
.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" href="h
ttps://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" for Query: select temp_clob from wt_self_test where id = 1
 PASS    0ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "EQQUERYVALUE" and got "EQQUERYVALUE"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel="alternate" type="text/html" hr
ef="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link 
rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE CLOB Happy Path 2
 PASS    1ms Run Test. EQQUERYVALUE - Expected "" and got "" for Query: select temp_clob from wt_self_test where 0 = 1
 ---- Test Case: EQQUERYVALUE CLOB Sad Path 1
 PASS    3ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected "This is another clob." and got "<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns="http://www.w3.org/2005/Atom">\n  <title>FPDS-NG search results for<![CDATA[: pl/sql]]></title>\n  <link rel="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=pl%2Fsql&amp;start=0"></link>\n  <link rel="last" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=20"></link>\n  <link rel="next" type="text/html" href="https://www.fpds.gov/ezsearch/FEEDS/ATOM?s=FPDS&amp;FEEDNAME=PUBLIC&amp;VERSION=1.5.1&amp;q=pl%2Fsql&amp;start=10"></link>\n  <modified/>\n  <author>\n    <name/>\n  </author>\n  <entry>\n    <title><![CDATA[New DELIVERY ORDER DOLF072J11595 awarded to DLT SOLUTIONS INCORPORATED for the amount of $12,638.59]]></title>\n    <link rel
="alternate" type="text/html" href="https://www.fpds.gov/ezsearch/search.do?s=FPDS&amp;indexName=awardfull&amp;templateName=1.5.1&amp;q=DOLF072J" for Query: select temp_clob from wt_self_test where id = 1"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE CLOB Sad Path 2
 PASS    7ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    1ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE CLOB Sad Path 3
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details. ISNOTNULL - Expected NOT NULL and got "Exception raised for Query: Garbage query that won't work\nORA-00900: invalid SQL statement\nORA-06512: at "WTP.WT_ASSERT", line 2671\n"
 PASS    0ms g_rec.last_details value. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE BLOB Happy Path 1
 PASS   90ms Run Test. EQQUERYVALUE - DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_self_test where id = 1, compare_results: 0
 PASS    0ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "EQQUERYVALUE" and got "EQQUERYVALUE"
 PASS    1ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_self_test where id = 1, compare_results: 0" and got "DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_self_test where id = 1, compare_results: 0"
 ---- Test Case: EQQUERYVALUE BLOB Happy Path 2
 PASS    0ms Run Test. EQQUERYVALUE - DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_self_test where 0 = 1, compare_results: -1
 ---- Test Case: EQQUERYVALUE BLOB Sad Path 1
 PASS  119ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details. EQ - Expected "DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_self_test where id = 1, compare_results: -1" and got "DBMS_LOB.COMPARE between BLOB and Query: select temp_blob from wt_self_test where id = 1, compare_results: -1"
 ---- Test Case: EQQUERYVALUE BLOB Sad Path 2
 PASS   71ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    1ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERYVALUE BLOB Sad Path 3
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details. ISNOTNULL - Expected NOT NULL and got "Exception raised for Query: Garbage query that won't work\nORA-00900: invalid SQL statement\nORA-06512: at "WTP.WT_ASSERT", line 2710\n"
 PASS    0ms g_rec.last_details value. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERY Tests Happy Path 1
 PASS  217ms Run Test. EQQUERY - Comparison Query: with check_query as (select * from USER_TABLES), against_query as (select * from USER_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2
 PASS    0ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "EQQUERY" and got "EQQUERY"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    1ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Comparison Query: with check_query as (select * from USER_TABLES), against_query as (select * from USER_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2"
 PASS    0ms EQQUERY Tests Happy Path 1b g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERY Tests Sad Path 1
 PASS   96ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Comparison Query: with check_query as (select * from USER_TABLES), against_query as (select * from USER_TABLES where 0 = 1), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERY Tests Sad Path 2
 PASS   62ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQQUERY Tests Sad Path 3
 PASS    9ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "ORA-06550: line 2, column 119:\nPL/SQL: ORA-01789: query block has incorrect number of result columns\nORA-06550: line 2, column 18:\nPL/SQL: SQL Statement ignored\nORA-06550: line 2, column 11:\nPLS-00341: declaration of cursor 'CUR' is incomplete or malformed\nORA-06550: line 3, column 8:\nPL/SQL: Item ignored\nORA-06550: line 6, column 19:\nPLS-00320: the declaration of the type of this expression is incomplete or malformed\nORA-06550: line 6, column 4:\nPL/SQL: SQL Statement ignored\nFAILURE of Compare Query: with check_query as (select * from USER_TABLES), against_query as (select * from ALL_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2;"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABLE Tests Happy Path 1
 PASS  131ms Run Test. EQTABLE - Comparison Query: with check_query as (select * from USER_TABLES), against_query as (select * from USER_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2
 PASS    0ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    1ms g_rec.last_assert. EQ - Expected "EQTABLE" and got "EQTABLE"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Comparison Query: with check_query as (select * from USER_TABLES), against_query as (select * from USER_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABLE Tests Happy Path 2
 PASS   85ms Run Test. EQTABLE - Comparison Query: with check_query as (select * from ALL_TABLES where owner = 'WTP'), against_query as (select * from ALL_TABLES where owner = 'WTP'), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2
 ---- Test Case: EQTABLE Sad Path 1
 PASS   40ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Comparison Query: with check_query as (select * from ALL_TABLES where owner = 'WTP'), against_query as (select * from ALL_TABLES where 0 = 1), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABLE Sad Path 2
 PASS   51ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABLE Sad Path 3
 PASS    4ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "ORA-06550: line 2, column 119:\nPL/SQL: ORA-01789: query block has incorrect number of result columns\nORA-06550: line 2, column 18:\nPL/SQL: SQL Statement ignored\nORA-06550: line 2, column 11:\nPLS-00341: declaration of cursor 'CUR' is incomplete or malformed\nORA-06550: line 3, column 8:\nPL/SQL: Item ignored\nORA-06550: line 6, column 19:\nPLS-00320: the declaration of the type of this expression is incomplete or malformed\nORA-06550: line 6, column 4:\nPL/SQL: SQL Statement ignored\nFAILURE of Compare Query: with check_query as (select * from USER_TABLES), against_query as (select * from ALL_TABLES), q1 as (select * from check_query MINUS select * from against_query), q2 as (select * from against_query MINUS select * from check_query) select * from q1 UNION select * from q2;"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABCOUNT Tests Happy Path 1
 PASS   78ms Run Test. EQTABCOUNT - Expected 10 rows from "ALL_TABLES" and got 10 rows from "ALL_TABLES"
 PASS    1ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "EQTABCOUNT" and got "EQTABCOUNT"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected 10 rows from "ALL_TABLES" and got 10 rows from "ALL_TABLES""
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABCOUNT Tests Happy Path 2
 PASS   76ms Run Test. EQTABCOUNT - Expected 10 rows from "USER_TABLES" and got 10 rows from "ALL_TABLES"
 ---- Test Case: EQTABCOUNT Sad Path 1
 PASS   43ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected 10 rows from "ALL_TABLES" and got 0 rows from "ALL_TABLES""
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABCOUNT Sad Path 2
 PASS   31ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABCOUNT Sad Path 3
 PASS   61ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    1ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "Expected 98 rows from "USER_TAB_COLUMNS" and got 10 rows from "USER_TABLES""
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: EQTABCOUNT Sad Path 4
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details value. ISNOTNULL - Expected NOT NULL and got "ORA-00942: table or view does not exist\nFAILURE of Compare Query: select count(*) from BOGUS1;"
 PASS    0ms g_rec.last_details. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_details 2. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: OBJEXISTS Happy Path 1
 PASS    1ms Run Test. OBJEXISTS - Number of objects found for "SYS.DUAL" is 1
 PASS    0ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "OBJEXISTS" and got "OBJEXISTS"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "Number of objects found for "SYS.DUAL" is 1" and got "Number of objects found for "SYS.DUAL" is 1"
 ---- Test Case: OBJEXISTS Happy Path 2
 PASS    1ms Run Test. OBJEXISTS - Number of objects found for "SYS.DUAL"(TABLE) is 1
 ---- Test Case: OBJEXISTS Happy Path 3
 PASS    0ms Run Test. OBJEXISTS - Number of objects found for "SYS.DUAL" is 1
 ---- Test Case: OBJEXISTS Happy Path 4
 PASS    1ms Run Test. OBJEXISTS - Number of objects found for "DUAL" is 2
 ---- Test Case: OBJEXISTS Sad Path 1
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details. EQ - Expected "Number of objects found for "JOE SMITH.BOGUS" is 0" and got "Number of objects found for "JOE SMITH.BOGUS" is 0"
 ---- Test Case: OBJEXISTS Sad Path 2
 PASS    0ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: OBJNOTEXISTS Happy Path 1
 PASS    1ms Run Test. OBJNOTEXISTS - Number of objects found for "BOGUS.THING123" is 0
 PASS    0ms g_rec.last_pass. EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms g_rec.last_assert. EQ - Expected "OBJNOTEXISTS" and got "OBJNOTEXISTS"
 PASS    0ms g_rec.last_msg. EQ - Expected "Run Test" and got "Run Test"
 PASS    0ms g_rec.last_details. EQ - Expected "Number of objects found for "BOGUS.THING123" is 0" and got "Number of objects found for "BOGUS.THING123" is 0"
 ---- Test Case: OBJNOTEXISTS Happy Path 2
 PASS    0ms Run Test. OBJNOTEXISTS - Number of objects found for "BOGUS.THING123"(PACKAGE) is 0
 ---- Test Case: OBJNOTEXISTS Happy Path 3
 PASS    0ms Run Test. OBJNOTEXISTS - Number of objects found for "BOGUS.THING123" is 0
 ---- Test Case: OBJNOTEXISTS Sad Path 1
 PASS    1ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms g_rec.last_details. EQ - Expected "Number of objects found for "SYS.DUAL" is 1" and got "Number of objects found for "SYS.DUAL" is 1"
 ---- Test Case: OBJNOTEXISTS Sad Path 2
 PASS    1ms g_rec.last_pass. EQ - Expected "FALSE" and got "FALSE"
 PASS    0ms RAISE_EXC_IN Test, Exception Raised?. EQ - Expected "TRUE" and got "TRUE"

WTP.WT_ASSERT PACKAGE BODY Code Coverage Details (Test Run ID 281)
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
     1 EXCL      0         0       0         0 package body wt_assert is
    14 ANNO      0         0       0         0       temp_rowid1 CONSTANT rowid          := chartorowid('AAAFd1AAFAAAABSAA/');
    15 ANNO      0         0       0         0       temp_rowid2 CONSTANT rowid          := chartorowid('AAAFd1AAFAAAABSAB/');
    16 ANNO      0         0       0         0       temp_long1  CONSTANT long           := hextoraw('0123456789ABCDEF0123456789ABCDEF');
    17 ANNO      0         0       0         0       temp_long2  CONSTANT long           := hextoraw('FEDCBA9876543210FEDCBA9876543210');
    18 ANNO      0         0       0         0       temp_raw1   CONSTANT raw(2)         := hextoraw('2345');
    19 ANNO      0         0       0         0       temp_raw2   CONSTANT raw(2)         := hextoraw('6789');
    20 ANNO      0         0       0         0       temp_lraw1  CONSTANT long raw       := hextoraw('0123456789ABCDEF0123456789ABCDEF');
    21 ANNO      0         0       0         0       temp_lraw2  CONSTANT long raw       := hextoraw('FEDCBA9876543210FEDCBA9876543210');
    23 ANNO      0         0       0         0       temp_blob2  CONSTANT BLOB           := hextoraw('FEDCBA9876543210FEDCBA9876543210');
    25 ANNO      0         0       0         0       temp_nc1    CONSTANT NVARCHAR2(12)  := 'NCHAR1';
    26 ANNO      0         0       0         0       temp_nc2    CONSTANT NVARCHAR2(12)  := 'NCHAR2';
    27 ANNO      0         0       0         0       temp_bool   CONSTANT boolean        := NULL;
    29 ANNO      0         0       0         0       temp_clob2  CONSTANT CLOB           := 'This is another clob.';
    31 ANNO      0         0       0         0       temp_nclob2 CONSTANT NCLOB          := 'This is another clob.';
    33 ANNO      0         0       0         0       temp_xml2   CONSTANT XMLTYPE        := xmltype('<?xml version="1.0" encoding="UTF-8"?><note>2</note>');
    35 ANNO      0         0       0         0       temp_pint1  CONSTANT pls_integer    := 2;
    36 ANNO      0         0       0         0       temp_pint2  CONSTANT pls_integer    := 3;
    37 ANNO      0         0       0         0       temp_date   CONSTANT date           := sysdate;
    38 ANNO      0         0       0         0       temp_tstmp  CONSTANT timestamp      := systimestamp;
    39 ANNO      0         0       0         0       temp_tstlzn CONSTANT timestamp with local time zone := systimestamp;
    40 ANNO      0         0       0         0       temp_tstzn  CONSTANT timestamp with time zone := systimestamp;
    41 ANNO      0         0       0         0       temp_intds1 CONSTANT interval day to second   := interval '+01 01:01:01.001' day to second;
    42 ANNO      0         0       0         0       temp_intds2 CONSTANT interval day to second   := interval '+02 02:02:02.002' day to second;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
    43 ANNO      0         0       0         0       temp_intym1 CONSTANT interval year to month   := interval '+01-01' year to month;
    44 ANNO      0         0       0         0       temp_intym2 CONSTANT interval year to month   := interval '+02-02' year to month;
    48 ANNO      0         0       0         0       wtplsql_skip_save boolean := FALSE;
    56 UNKN      0        52       0         1 function boolean_to_status
    61 EXEC    298        37       0         1    if in_boolean is null
    63 EXEC     12         3       0         1       return '';
    64 EXEC    286        34       0         2    elsif in_boolean
    66 EXEC    169        40       0         4       return 'TRUE';
    68 EXEC    117        34       0         2    return 'FALSE';
    69 EXEC    298        42       0         1 end boolean_to_status;
    73 ANNO      0         4       4         4    procedure t_boolean_to_status
    76 ANNO      1         2       2         2       wt_assert.g_testcase := 'BOOLEAN_TO_STATUS';
    78 ANNO      1         2       1         1       wt_assert.eq
    82 ANNO      1         1       0         1       wt_assert.eq
    87 ANNO      1         2       1         1       wt_assert.isnull
    90 ANNO      1         0       0         0    end t_boolean_to_status;
    95 UNKN      0       651       0       183 procedure process_assertion
   103 ANNO    493        97       1         3       if not wtplsql_skip_save then
   107 EXEC    404       195       0         4    wt_result.save
   109 UNKN      0       560       0         7       ,in_status         => case g_rec.last_pass
   110 UNKN      0        95       0         2                             when TRUE then C_PASS
   125 EXEC    493       591       1       445    if g_rec.raise_exception and not g_rec.last_pass
   127 EXEC     28      2439       1       627       raise_application_error(-20003, wt_text_report.format_test_result
   135 UNKN      0       118       0         2 end process_assertion;
   139 ANNO      0         0       0         0    procedure t_process_assertion
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   143 ANNO      1         0       0         0       g_testcase  := 'PROCESS_ASSERTION';
   144 ANNO      1         1       1         1       g_rec.last_assert     := 'THIS';
   145 ANNO      1         0       0         0       g_rec.last_pass       := FALSE;
   146 ANNO      1         1       1         1       g_rec.last_details    := 'Expected "PASS" and got "FAIL"';
   147 ANNO      1         0       0         0       g_rec.last_msg        := 'Process Assertion Forced Failure';
   148 ANNO      1         1       1         1       g_rec.raise_exception := TRUE;
   149 ANNO      1         0       0         0       wtplsql_skip_save  := TRUE;
   150 ANNO      1         0       0         0       process_assertion;  -- Should throw exception
   151 ANNO      0         0       0         0       wtplsql_skip_save  := FALSE;
   154 ANNO      1         0       0         0       when ASSERT_FAILURE_EXCEPTION then
   155 ANNO      1         0       0         0          wtplsql_skip_save := FALSE;
   156 ANNO      1         2       0         2    end t_process_assertion;
   161 EXEC     11        16       1         1 procedure compare_queries (
   170 EXEC     11        21       1         4    l_qry_txt := 'with check_query as (' || check_query_in   ||
   179 EXEC     11        11       1         1    l_exec_txt :=
   192 EXEC     11     39937      72     31125    execute immediate l_exec_txt using out l_ret_txt;
   193 EXEC      8        13       1         2    if l_ret_txt = 'FOUND'
   195 EXEC      5        50       1        43       g_rec.last_pass := FALSE; -- Some Difference Found
   197 EXEC      3         7       2         3       g_rec.last_pass := TRUE;  -- Nothing found, queries match
   200 EXEC      8        41       4         6    g_rec.last_details := 'Comparison Query: ' || l_qry_txt;
   202 EXEC      3         0       0         0    when OTHERS
   204 EXEC      3      5771      66      5634       g_rec.last_details := SQLERRM || CHR(10) ||
   206 EXEC      3         4       1         2       g_rec.last_pass    := FALSE;
   207 EXEC     11        23       1         4 end compare_queries;
   211 ANNO      0         1       1         1    procedure t_compare_queries
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   215 ANNO      1         0       0         0       wt_assert.g_testcase := 'COMPARE_QUERIES Bad Query Test 1';
   216 ANNO      1         0       0         0       compare_queries (
   219 ANNO      1         5       5         5       temp_rec := g_rec;
   220 ANNO      1         0       0         0       wt_assert.eq (
   225 ANNO      1         0       0         0       wt_assert.isnotnull(
   228 ANNO      1        10      10        10       wt_assert.this(
   233 ANNO      1         1       1         1       wt_assert.g_testcase := 'COMPARE_QUERIES Bad Query Test 2';
   234 ANNO      1         1       1         1       compare_queries (
   237 ANNO      1         6       6         6       temp_rec := g_rec;
   238 ANNO      1         0       0         0       wt_assert.eq (
   243 ANNO      1         0       0         0       wt_assert.isnotnull(
   246 ANNO      1         5       5         5       wt_assert.this(
   251 ANNO      1         0       0         0    end t_compare_queries;
   260 UNKN      0         1       1         1 function last_pass
   264 EXEC      1         1       1         1    return g_rec.last_pass;
   265 EXEC      1         0       0         0 end last_pass;
   267 EXCL      0         0       0         0 function last_assert
   271 EXEC      1         1       1         1    return g_rec.last_assert;
   272 EXEC      1         0       0         0 end last_assert;
   274 EXCL      0         0       0         0 function last_msg
   278 EXEC      1         0       0         0    return g_rec.last_msg;
   279 EXEC      1         0       0         0 end last_msg;
   281 UNKN      0         1       1         1 function last_details
   285 EXEC      1         1       1         1    return g_rec.last_details;
   286 EXEC      1         0       0         0 end last_details;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   290 ANNO      0         1       1         1    procedure t_last_values
   294 ANNO      1         0       0         0       wt_assert.g_testcase := 'Last Values Tests';
   295 ANNO      1         0       0         0       wt_assert.eq (
   300 ANNO      1         0       0         0       wt_assert.eq (
   306 ANNO      1         2       2         2       temp_rec := g_rec;
   307 ANNO      1         0       0         0       wt_assert.eq (
   312 ANNO      1         0       0         0       wt_assert.eq (
   317 ANNO      1         0       0         0    end t_last_values;
   322 EXCL      0         0       0         0 procedure reset_globals
   325 EXEC      1         0       0         0    g_testcase            := '';
   326 EXEC      1         1       1         1    g_rec.last_pass       := NULL;
   327 EXEC      1         0       0         0    g_rec.last_assert     := '';
   328 EXEC      1         0       0         0    g_rec.last_msg        := '';
   329 EXEC      1         0       0         0    g_rec.last_details    := '';
   330 EXEC      1         1       1         1    g_rec.raise_exception := FALSE;
   331 EXEC      1         0       0         0 end reset_globals;
   335 ANNO      0         0       0         0    procedure t_reset_globals
   338 ANNO      1         0       0         0       reset_globals;  -- Resets g_testcase
   339 ANNO      1         0       0         0       temp_rec         := g_rec;
   340 ANNO      1         0       0         0       temp_testcase    := g_testcase;
   342 ANNO      1         1       1         1       g_testcase       := 'RESET_GLOBALS';
   343 ANNO      1         0       0         0       wt_assert.isnull(
   346 ANNO      1         1       1         1       wt_assert.isnull
   350 ANNO      1         0       0         0       wt_assert.eq(
   354 ANNO      1         0       0         0       wt_assert.isnull
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   358 ANNO      1         0       0         0       wt_assert.isnull
   361 ANNO      1         0       0         0       wt_assert.isnull
   364 ANNO      1         0       0         0    end t_reset_globals;
   369 UNKN      0         5       1         2 function get_NLS_DATE_FORMAT
   374 EXEC      4       505      73       226    select value into l_format
   377 EXEC      4         9       1         3    return l_format;
   378 EXEC      4         4       1         1 end get_NLS_DATE_FORMAT;
   380 UNKN      0         5       1         2 procedure set_NLS_DATE_FORMAT
   384 EXEC      5       712      82       266    execute immediate 'alter session set NLS_DATE_FORMAT = ''' ||
   386 EXEC      5         5       1         1 end set_NLS_DATE_FORMAT;
   388 UNKN      0         3       1         2 function get_NLS_TIMESTAMP_FORMAT
   393 EXEC      2       349      82       267    select value into l_format
   396 EXEC      2         1       1         1    return l_format;
   397 EXEC      2         3       1         2 end get_NLS_TIMESTAMP_FORMAT;
   399 UNKN      0         3       1         2 procedure set_NLS_TIMESTAMP_FORMAT
   403 EXEC      2       378     185       193    execute immediate 'alter session set NLS_TIMESTAMP_FORMAT = ''' ||
   405 EXEC      2         1       1         1 end set_NLS_TIMESTAMP_FORMAT;
   407 UNKN      0         2       1         1 function get_NLS_TIMESTAMP_TZ_FORMAT
   412 EXEC      2       220      78       142    select value into l_format
   415 EXEC      2         3       1         2    return l_format;
   416 EXEC      2         2       1         1 end get_NLS_TIMESTAMP_TZ_FORMAT;
   418 UNKN      0         2       1         1 procedure set_NLS_TIMESTAMP_TZ_FORMAT
   422 EXEC      2       292     133       159    execute immediate 'alter session set NLS_TIMESTAMP_TZ_FORMAT = ''' ||
   424 EXEC      2         1       1         1 end set_NLS_TIMESTAMP_TZ_FORMAT;
   428 ANNO      0         4       4         4    procedure t_nls_settings
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   432 ANNO      1         0       0         0       wt_assert.g_testcase := 'NLS Settings';
   433 ANNO      1         0       0         0       set_NLS_DATE_FORMAT('DD-MON-YYYY');
   434 ANNO      1         2       1         1       wt_assert.eq
   438 ANNO      1         0       0         0       set_NLS_DATE_FORMAT;
   440 ANNO      1         2       1         1       wt_assert.eq
   444 ANNO      1         0       0         0       set_NLS_TIMESTAMP_FORMAT('DD-MON-YYYY');
   445 ANNO      1         0       0         0       wt_assert.eq
   449 ANNO      1         0       0         0       set_NLS_TIMESTAMP_FORMAT;
   451 ANNO      1         0       0         0       wt_assert.eq
   455 ANNO      1         0       0         0       set_NLS_TIMESTAMP_TZ_FORMAT('DD-MON-YYYY');
   457 ANNO      1         1       1         1       wt_assert.eq
   461 ANNO      1         1       1         1       set_NLS_TIMESTAMP_TZ_FORMAT;
   462 ANNO      1         2       1         1       wt_assert.eq
   466 ANNO      1         2       2         2    end t_nls_settings;
   475 UNKN      0        68       0         3 procedure this (
   482 EXEC     80        42       0         2    g_rec.last_assert  := 'THIS';
   483 EXEC     80        37       0         1    g_rec.last_msg     := msg_in;
   484 EXEC     80        25       0         1    g_rec.last_pass    := nvl(check_this_in, FALSE);
   485 EXEC     80       100       1         3    g_rec.last_details := 'Expected "TRUE" and got "' ||
   487 EXEC     80        19       0         1    g_rec.raise_exception := raise_exc_in;
   488 EXEC     80         8       0         1    process_assertion;
   489 EXEC     79        14       0         1 end this;
   493 ANNO      0         1       1         1    procedure t_this
   498 ANNO      1         1       1         1       wt_assert.g_testcase := 'This Happy Path';
   499 ANNO      1         0       0         0       wt_assert.this (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   502 ANNO      1         1       1         1       temp_rec := g_rec;
   503 ANNO      1         1       1         1       wt_assert.eq (
   508 ANNO      1         1       1         1       wt_assert.eq (
   512 ANNO      1         1       1         1       wt_assert.eq (
   516 ANNO      1         1       1         1       wt_assert.eq (
   521 ANNO      1         0       0         0       wt_assert.g_testcase := 'This Sad Path 1';
   522 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   523 ANNO      1         0       0         0       this (
   526 ANNO      1         0       0         0       temp_rec := g_rec;
   527 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
   528 ANNO      1         0       0         0       wt_assert.eq (
   533 ANNO      1         0       0         0       wt_assert.g_testcase := 'This Sad Path 2';
   534 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
   536 ANNO      1         0       0         0          this (
   540 ANNO      0         0       0         0          l_found_exception := FALSE;
   541 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
   542 ANNO      1         0       0         0          l_found_exception := TRUE;
   543 ANNO      0         1       1         1       end;
   545 ANNO      1         1       1         1       temp_rec := g_rec;
   546 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   547 ANNO      1         0       0         0       wt_assert.eq (
   551 ANNO      1         1       1         1       wt_assert.eq (
   556 ANNO      1         0       0         0       wt_assert.g_testcase := 'This Sad Path 3';
   557 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   558 ANNO      1         0       0         0       this (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   561 ANNO      1         1       1         1       temp_rec := g_rec;
   562 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   563 ANNO      1         0       0         0       wt_assert.eq (
   567 ANNO      1         0       0         0    end t_this;
   573 UNKN      0       197       1        22 procedure eq (
   581 EXEC    199        77       0         3    g_rec.last_assert  := 'EQ';
   582 EXEC    199        55       0         1    g_rec.last_msg     := msg_in;
   583 EXEC    199       237       0         9    g_rec.last_pass    := (   nvl(check_this_in = against_this_in, false)
   584 UNKN      0        14       1         1                            or (    check_this_in is null
   588 EXEC    199       389       1        50    g_rec.last_details := 'Expected "' || substr(against_this_in,1,1000) ||
   591 EXEC    199        23       0         1    g_rec.raise_exception := raise_exc_in;
   592 EXEC    199        33       0         1    process_assertion;
   593 EXEC    198        32       0         1 end eq;
   596 UNKN      0        89       0         4 procedure eq (
   604 EXEC     98        70       1         1    eq (msg_in           => msg_in
   609 EXEC     98        16       0         1 end eq;
   612 UNKN      0        26       7        11 procedure eq (
   620 EXEC      3         1       0         1    g_rec.last_assert  := 'EQ';
   621 EXEC      3         0       0         0    g_rec.last_msg     := msg_in;
   622 EXEC      3     74171       1     51496    g_rec.last_pass    := (xmltype.getclobval(check_this_in)  =
   624 EXEC      3     39639       9     12789    g_rec.last_details := 'Expected "' || substr(xmltype.getclobval(against_this_in),1,1000) ||
   627 EXEC      3         4       1         2    g_rec.raise_exception := raise_exc_in;
   628 EXEC      3         3       1         1    process_assertion;
   629 EXEC      2       141      67        74 end eq;
   632 UNKN      0       536       5       338 procedure eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   640 EXEC     14        24       1         4    g_rec.last_assert  := 'EQ';
   641 EXEC     14         8       1         1    g_rec.last_msg     := msg_in;
   642 EXEC     14      3310       0       981    g_rec.last_pass    := (   nvl(check_this_in = against_this_in, false)
   643 UNKN      0        20       1         3                            or (    check_this_in is null
   647 EXEC     14     27477     647      5594    g_rec.last_details := 'Expected "' || substr(against_this_in,1,1000) ||
   650 EXEC     14        10       0         2    g_rec.raise_exception := raise_exc_in;
   651 EXEC     14        11       0         1    process_assertion;
   652 EXEC     12       845      58       102 end eq;
   655 UNKN      0         3       0         1 procedure eq (
   664 EXEC      7         2       0         1    g_rec.last_assert  := 'EQ';
   665 EXEC      7         4       1         1    g_rec.last_msg     := msg_in;
   666 EXEC      7        76       0        63    compare_results    := nvl(DBMS_LOB.COMPARE(check_this_in, against_this_in),-1);
   667 EXEC      7        12       0         3    g_rec.last_pass    := (    (compare_results = 0)
   668 UNKN      0         8       1         3                            or (    check_this_in is null
   672 EXEC      7        26       1         9    g_rec.last_details := 'DBMS_LOB.COMPARE on BLOBs, compare_results: ' || compare_results;
   673 EXEC      7         0       0         0    g_rec.raise_exception := raise_exc_in;
   674 EXEC      7         1       0         1    process_assertion;
   675 EXEC      6         0       0         0 end eq;
   683 ANNO      0        22      22        22    procedure t_eq
   688 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ VARCHAR2 Happy Path 1';
   689 ANNO      1         0       0         0       eq (
   693 ANNO      1         0       0         0       temp_rec := g_rec;
   695 ANNO      1         0       0         0       wt_assert.isnotnull (
   698 ANNO      1         0       0         0       wt_assert.this (
   702 ANNO      1         0       0         0       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   705 ANNO      1         0       0         0       wt_assert.this (
   709 ANNO      1         0       0         0       wt_assert.isnotnull (
   712 ANNO      1         0       0         0       wt_assert.this (
   716 ANNO      1         0       0         0       wt_assert.isnotnull (
   719 ANNO      1         1       1         1       wt_assert.this (
   723 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ VARCHAR2 Happy Path 2';
   724 ANNO      1         0       0         0       eq (
   729 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ VARCHAR2 Happy Path 3';
   730 ANNO      1         0       0         0       eq (
   736 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 1';
   737 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   738 ANNO      1         0       0         0       eq (
   742 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   743 ANNO      1         1       1         1       temp_rec := g_rec;
   745 ANNO      1         1       1         1       wt_assert.isnotnull (
   748 ANNO      1         0       0         0       wt_assert.isnotnull (
   751 ANNO      1         1       1         1       wt_assert.this (
   755 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 2';
   756 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   758 ANNO      1         0       0         0          eq (
   763 ANNO      0         0       0         0          l_found_exception := FALSE;
   764 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
   765 ANNO      1         0       0         0          l_found_exception := TRUE;
   766 ANNO      0         2       2         2       end;
   768 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   769 ANNO      1         1       1         1       temp_rec := g_rec;
   770 ANNO      1         1       1         1       wt_assert.this (
   773 ANNO      1         0       0         0       wt_assert.eq (
   778 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 3';
   779 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   780 ANNO      1         0       0         0       eq (
   784 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   785 ANNO      1         1       1         1       temp_rec := g_rec;
   787 ANNO      1         0       0         0       wt_assert.isnull (
   790 ANNO      1         0       0         0       wt_assert.isnotnull (
   793 ANNO      1         0       0         0       wt_assert.this (
   797 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 4';
   798 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
   799 ANNO      1         0       0         0       eq (
   803 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   804 ANNO      1         0       0         0       temp_rec := g_rec;
   806 ANNO      1         0       0         0       wt_assert.isnull (
   809 ANNO      1         0       0         0       wt_assert.isnull (
   812 ANNO      1         0       0         0       wt_assert.this (
   816 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 5';
   817 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   818 ANNO      1         0       0         0       eq (
   823 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   824 ANNO      1         0       0         0       temp_rec := g_rec;
   826 ANNO      1         0       0         0       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   829 ANNO      1         1       1         1       wt_assert.isnotnull (
   832 ANNO      1         1       1         1       wt_assert.this (
   836 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ VARCHAR2 Sad Path 6';
   837 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
   838 ANNO      1         1       1         1       eq (
   843 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   844 ANNO      1         1       1         1       temp_rec := g_rec;
   846 ANNO      1         0       0         0       wt_assert.isnull (
   849 ANNO      1         1       1         1       wt_assert.isnotnull (
   852 ANNO      1         1       1         1       wt_assert.this (
   857 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ ROWID Happy Path 1';
   858 ANNO      1         0       0         0       eq (
   863 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ ROWID Sad Path 1';
   864 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   865 ANNO      1         1       1         1       eq (
   869 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   870 ANNO      1         0       0         0       temp_rec := g_rec;
   872 ANNO      1         0       0         0       wt_assert.isnotnull (
   875 ANNO      1         0       0         0       wt_assert.isnotnull (
   878 ANNO      1         1       1         1       wt_assert.this (
   883 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ LONG Happy Path 1';
   884 ANNO      1         0       0         0       eq (
   889 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ LONG Sad Path 1';
   890 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
   891 ANNO      1         0       0         0       eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   895 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   896 ANNO      1         1       1         1       temp_rec := g_rec;
   898 ANNO      1         0       0         0       wt_assert.isnotnull (
   901 ANNO      1         0       0         0       wt_assert.isnotnull (
   904 ANNO      1         1       1         1       wt_assert.this (
   909 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ RAW Happy Path 1';
   910 ANNO      1         2       2         2       eq (
   915 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ RAW Sad Path 1';
   916 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   917 ANNO      1         2       2         2       eq (
   921 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   922 ANNO      1         1       1         1       temp_rec := g_rec;
   924 ANNO      1         1       1         1       wt_assert.isnotnull (
   927 ANNO      1         0       0         0       wt_assert.isnotnull (
   930 ANNO      1         0       0         0       wt_assert.this (
   935 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ LANG RAW Happy Path 1';
   936 ANNO      1         1       1         1       eq (
   942 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ LANG RAW Happy Path 1';
   943 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
   944 ANNO      1         1       1         1       eq (
   949 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ LONG RAW Sad Path 1';
   950 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
   951 ANNO      1         1       1         1       temp_rec := g_rec;
   952 ANNO      1         1       1         1       wt_assert.isnotnull (
   956 ANNO      1         1       1         1       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   959 ANNO      1         1       1         1       wt_assert.this (
   964 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NVARCHAR2 Happy Path 1';
   965 ANNO      1        10      10        10       eq (
   970 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NVARCHAR2 Sad Path 1';
   971 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
   972 ANNO      1         4       4         4       eq (
   976 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
   977 ANNO      1         1       1         1       temp_rec := g_rec;
   979 ANNO      1         3       3         3       wt_assert.isnotnull (
   982 ANNO      1         2       2         2       wt_assert.isnotnull (
   985 ANNO      1         1       1         1       wt_assert.this (
   989 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ BOOLEAN Happy Path 1';
   990 ANNO      1         1       1         1       eq (
   994 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BOOLEAN Happy Path 2';
   995 ANNO      1         0       0         0       eq (
  1001 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BOOLEAN Happy Path 3';
  1002 ANNO      1         0       0         0       eq (
  1008 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BOOLEAN Happy Sad 1';
  1009 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  1010 ANNO      1         0       0         0       eq (
  1014 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1015 ANNO      1         1       1         1       temp_rec := g_rec;
  1017 ANNO      1         0       0         0       wt_assert.isnotnull (
  1020 ANNO      1         0       0         0       wt_assert.isnotnull (
  1023 ANNO      1         1       1         1       wt_assert.this (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1027 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BOOLEAN Happy Sad 2';
  1028 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1029 ANNO      1         1       1         1       eq (
  1033 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1034 ANNO      1         1       1         1       temp_rec := g_rec;
  1036 ANNO      1         0       0         0       wt_assert.isnotnull (
  1039 ANNO      1         1       1         1       wt_assert.isnull (
  1042 ANNO      1         1       1         1       wt_assert.this (
  1046 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BOOLEAN Happy Sad 3';
  1047 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1048 ANNO      1         0       0         0       eq (
  1053 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1054 ANNO      1         0       0         0       temp_rec := g_rec;
  1056 ANNO      1         0       0         0       wt_assert.isnotnull (
  1059 ANNO      1         0       0         0       wt_assert.isnotnull (
  1062 ANNO      1         1       1         1       wt_assert.this (
  1066 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ BOOLEAN Happy Sad 4';
  1067 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1068 ANNO      1         0       0         0       eq (
  1073 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1074 ANNO      1         0       0         0       temp_rec := g_rec;
  1076 ANNO      1         0       0         0       wt_assert.isnotnull (
  1079 ANNO      1         0       0         0       wt_assert.isnull (
  1082 ANNO      1         0       0         0       wt_assert.this (
  1086 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ NUMBER Happy Path 1';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1087 ANNO      1         5       5         5       eq (
  1091 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ NUMBER Happy Path 2';
  1092 ANNO      1         3       3         3       eq (
  1097 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NUMBER Happy Path 1';
  1098 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1099 ANNO      1         2       2         2       eq (
  1103 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1104 ANNO      1         0       0         0       temp_rec := g_rec;
  1106 ANNO      1         1       1         1       wt_assert.isnotnull (
  1109 ANNO      1         2       2         2       wt_assert.isnotnull (
  1112 ANNO      1         1       1         1       wt_assert.this (
  1117 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ PLS_INTEGER Happy Path 1';
  1118 ANNO      1         2       2         2       eq (
  1122 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1124 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ PLS_INTEGER Sad Path 1';
  1125 ANNO      1         2       2         2       eq (
  1129 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1130 ANNO      1         1       1         1       temp_rec := g_rec;
  1132 ANNO      1         1       1         1       wt_assert.isnotnull (
  1135 ANNO      1         1       1         1       wt_assert.isnotnull (
  1138 ANNO      1         1       1         1       wt_assert.this (
  1142 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ DATE Happy Path 1';
  1143 ANNO      1        16      16        16       eq (
  1148 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ DATE Sad Path 1';
  1149 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1150 ANNO      1         8       8         8       eq (
  1154 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1155 ANNO      1         1       1         1       temp_rec := g_rec;
  1157 ANNO      1         2       2         2       wt_assert.isnotnull (
  1160 ANNO      1         4       4         4       wt_assert.isnotnull (
  1163 ANNO      1         0       0         0       wt_assert.this (
  1168 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ TIMSETAMP Happy Path 1';
  1169 ANNO      1        13      13        13       eq (
  1174 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ TIMSETAMP Sad Path 1';
  1175 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  1176 ANNO      1        10      10        10       eq (
  1180 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  1181 ANNO      1         1       1         1       temp_rec := g_rec;
  1183 ANNO      1         3       3         3       wt_assert.isnotnull (
  1186 ANNO      1         6       6         6       wt_assert.isnotnull (
  1189 ANNO      1         1       1         1       wt_assert.this (
  1194 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ TIMSETAMP WITH LOCAL TIME ZONE Happy Path 1';
  1195 ANNO      1         5       5         5       eq (
  1200 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ TIMSETAMP WITH LOCAL TIME ZONE Sad Path 1';
  1201 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1202 ANNO      1        17      17        17       eq (
  1206 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1207 ANNO      1         1       1         1       temp_rec := g_rec;
  1209 ANNO      1         3       3         3       wt_assert.isnotnull (
  1212 ANNO      1         6       6         6       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1215 ANNO      1         1       1         1       wt_assert.this (
  1220 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ TIMSETAMP WITH TIME ZONE Happy Path 1';
  1221 ANNO      1         4       4         4       eq (
  1226 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ TIMSETAMP WITH TIME ZONE Sad Path 1';
  1227 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1228 ANNO      1         9       9         9       eq (
  1232 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1233 ANNO      1         1       1         1       temp_rec := g_rec;
  1235 ANNO      1         2       2         2       wt_assert.isnotnull (
  1238 ANNO      1         5       5         5       wt_assert.isnotnull (
  1241 ANNO      1         1       1         1       wt_assert.this (
  1246 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ INTERVAL DAY TO SECOND Happy Path 1';
  1247 ANNO      1         4       4         4       eq (
  1252 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ INTERVAL DAY TO SECOND Sad Path 1';
  1253 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1254 ANNO      1         2       2         2       eq (
  1258 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1259 ANNO      1         1       1         1       temp_rec := g_rec;
  1261 ANNO      1         1       1         1       wt_assert.isnotnull (
  1264 ANNO      1         1       1         1       wt_assert.isnotnull (
  1267 ANNO      1         0       0         0       wt_assert.this (
  1272 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ INTERVAL YEAR TO MONTH Happy Path 1';
  1273 ANNO      1         2       2         2       eq (
  1278 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ INTERVAL YEAR TO MONTH Sad Path 1';
  1279 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1280 ANNO      1         2       2         2       eq (
  1284 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1285 ANNO      1         1       1         1       temp_rec := g_rec;
  1287 ANNO      1         1       1         1       wt_assert.isnotnull (
  1290 ANNO      1         1       1         1       wt_assert.isnotnull (
  1293 ANNO      1         0       0         0       wt_assert.this (
  1297 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ XMLTYPE Happy Path 1';
  1298 ANNO      1         1       1         1       eq (
  1302 ANNO      1         4       4         4       temp_rec := g_rec;
  1304 ANNO      1         1       1         1       wt_assert.isnotnull (
  1307 ANNO      1         1       1         1       wt_assert.this (
  1311 ANNO      1         1       1         1       wt_assert.isnotnull (
  1314 ANNO      1         1       1         1       wt_assert.this (
  1318 ANNO      1         0       0         0       wt_assert.isnotnull (
  1321 ANNO      1         0       0         0       wt_assert.this (
  1325 ANNO      1         1       1         1       wt_assert.isnotnull (
  1328 ANNO      1        17      17        17       wt_assert.this (
  1333 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ XMLTYPE Sad Path 1';
  1334 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1335 ANNO      1         0       0         0       eq (
  1339 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1340 ANNO      1         5       5         5       temp_rec := g_rec;
  1342 ANNO      1         7       2         5       wt_assert.isnotnull (
  1345 ANNO      1         5       1         4       wt_assert.isnotnull (
  1348 ANNO      1         1       1         1       wt_assert.this (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1352 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ XMLTYPE Sad Path 2';
  1353 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1354 ANNO      0         1       1         1       begin
  1355 ANNO      1         1       1         1          eq (
  1360 ANNO      0         0       0         0          l_found_exception := FALSE;
  1361 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1362 ANNO      1         1       1         1          l_found_exception := TRUE;
  1363 ANNO      0         1       1         1       end;
  1365 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1366 ANNO      1         5       5         5       temp_rec := g_rec;
  1367 ANNO      1         2       2         2       wt_assert.this (
  1370 ANNO      1         0       0         0       wt_assert.eq (
  1375 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ CLOB Happy Path 1';
  1376 ANNO      1         0       0         0       eq (
  1380 ANNO      1         2       2         2       temp_rec := g_rec;
  1382 ANNO      1         1       1         1       wt_assert.isnotnull (
  1385 ANNO      1         1       1         1       wt_assert.this (
  1389 ANNO      1         0       0         0       wt_assert.isnotnull (
  1392 ANNO      1         1       1         1       wt_assert.this (
  1396 ANNO      1         0       0         0       wt_assert.isnotnull (
  1399 ANNO      1         0       0         0       wt_assert.this (
  1403 ANNO      1         0       0         0       wt_assert.isnotnull (
  1406 ANNO      1        17      17        17       wt_assert.this (
  1411 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ CLOB Happy Path 2';
  1412 ANNO      1         1       1         1       eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1418 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ CLOB Happy Path 3';
  1419 ANNO      1         1       1         1       eq (
  1425 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ CLOB Sad Path 1';
  1426 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  1427 ANNO      1         1       1         1       eq (
  1431 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1432 ANNO      1         6       6         6       temp_rec := g_rec;
  1434 ANNO      1         0       0         0       wt_assert.isnotnull (
  1437 ANNO      1         0       0         0       wt_assert.isnotnull (
  1440 ANNO      1         1       1         1       wt_assert.this (
  1444 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ CLOB Sad Path 2';
  1445 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1447 ANNO      1         1       1         1          eq (
  1452 ANNO      0         0       0         0          l_found_exception := FALSE;
  1453 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1454 ANNO      1         0       0         0          l_found_exception := TRUE;
  1455 ANNO      0         2       2         2       end;
  1457 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1458 ANNO      1         4       4         4       temp_rec := g_rec;
  1459 ANNO      1         2       2         2       wt_assert.this (
  1462 ANNO      1         0       0         0       wt_assert.eq (
  1467 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ CLOB Sad Path 3';
  1468 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1469 ANNO      1         1       1         1       eq (
  1473 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1474 ANNO      1         5       5         5       temp_rec := g_rec;
  1476 ANNO      1         0       0         0       wt_assert.isnotnull (
  1479 ANNO      1         0       0         0       wt_assert.isnull (
  1482 ANNO      1         1       1         1       wt_assert.this (
  1486 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ CLOB Sad Path 4';
  1487 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1488 ANNO      1         0       0         0       eq (
  1493 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1494 ANNO      1         4       4         4       temp_rec := g_rec;
  1496 ANNO      1         0       0         0       wt_assert.isnotnull (
  1499 ANNO      1         1       1         1       wt_assert.isnull (
  1502 ANNO      1         1       1         1       wt_assert.this (
  1506 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ NCLOB Happy Path 1';
  1507 ANNO      1     40023   40023     40023       eq (
  1512 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ NCLOB Happy Path 2';
  1513 ANNO      1     48755   48755     48755       eq (
  1519 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ NCLOB Happy Path 3';
  1520 ANNO      1         2       2         2       eq (
  1526 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ NCLOB Sad Path 1';
  1527 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1528 ANNO      1     30129   30129     30129       eq (
  1532 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  1533 ANNO      1         7       7         7       temp_rec := g_rec;
  1535 ANNO      1     11748   11748     11748       wt_assert.isnotnull (
  1538 ANNO      1       142     142       142       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1541 ANNO      1         2       2         2       wt_assert.this (
  1545 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NCLOB Sad Path 2';
  1546 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1547 ANNO      0         0       0         0       begin
  1548 ANNO      1      9845    9845      9845          eq (
  1553 ANNO      0         0       0         0          l_found_exception := FALSE;
  1554 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1555 ANNO      1         1       1         1          l_found_exception := TRUE;
  1556 ANNO      0         1       1         1       end;
  1558 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1559 ANNO      1         4       4         4       temp_rec := g_rec;
  1560 ANNO      1         1       1         1       wt_assert.this (
  1563 ANNO      1         1       1         1       wt_assert.eq (
  1568 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ NCLOB Sad Path 3';
  1569 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1570 ANNO      1     11158   11158     11158       eq (
  1574 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1575 ANNO      1         6       6         6       temp_rec := g_rec;
  1577 ANNO      1     18213   18213     18213       wt_assert.isnotnull (
  1580 ANNO      1         2       2         2       wt_assert.isnull (
  1583 ANNO      1         1       1         1       wt_assert.this (
  1587 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ NCLOB Sad Path 4';
  1588 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1589 ANNO      1      5787    5787      5787       eq (
  1594 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1595 ANNO      1         5       5         5       temp_rec := g_rec;
  1597 ANNO      1     18895   18895     18895       wt_assert.isnotnull (
  1600 ANNO      1       398     398       398       wt_assert.isnull (
  1603 ANNO      1         2       2         2       wt_assert.this (
  1607 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BLOB Happy Path 1';
  1608 ANNO      1         0       0         0       eq (
  1612 ANNO      1         1       1         1       temp_rec := g_rec;
  1614 ANNO      1         1       1         1       wt_assert.isnotnull (
  1617 ANNO      1         0       0         0       wt_assert.this (
  1621 ANNO      1         1       1         1       wt_assert.isnotnull (
  1624 ANNO      1         1       1         1       wt_assert.this (
  1628 ANNO      1         0       0         0       wt_assert.isnotnull (
  1631 ANNO      1         0       0         0       wt_assert.this (
  1635 ANNO      1         1       1         1       wt_assert.isnotnull (
  1638 ANNO      1         1       1         1       wt_assert.this (
  1643 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQ BLOB Happy Path 2';
  1644 ANNO      1         0       0         0       eq (
  1650 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BLOB Happy Path 3';
  1651 ANNO      1         0       0         0       eq (
  1657 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BLOB Sad Path 1';
  1658 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  1659 ANNO      1         0       0         0       eq (
  1663 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1664 ANNO      1         5       5         5       temp_rec := g_rec;
  1666 ANNO      1         1       1         1       wt_assert.isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1669 ANNO      1         1       1         1       wt_assert.isnotnull (
  1672 ANNO      1         1       1         1       wt_assert.this (
  1676 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BLOB Sad Path 2';
  1677 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1679 ANNO      1         0       0         0          eq (
  1684 ANNO      0         0       0         0          l_found_exception := FALSE;
  1685 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1686 ANNO      1         0       0         0          l_found_exception := TRUE;
  1687 ANNO      0         1       1         1       end;
  1689 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1690 ANNO      1         2       2         2       temp_rec := g_rec;
  1691 ANNO      1         0       0         0       wt_assert.this (
  1694 ANNO      1         0       0         0       wt_assert.eq (
  1699 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BLOB Sad Path 3';
  1700 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  1701 ANNO      1         0       0         0       eq (
  1705 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1706 ANNO      1         1       1         1       temp_rec := g_rec;
  1708 ANNO      1         0       0         0       wt_assert.isnotnull (
  1711 ANNO      1         0       0         0       wt_assert.isnull (
  1714 ANNO      1         0       0         0       wt_assert.this (
  1718 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQ BLOB Sad Path 4';
  1719 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1720 ANNO      1         0       0         0       eq (
  1725 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1726 ANNO      1         1       1         1       temp_rec := g_rec;
  1728 ANNO      1         0       0         0       wt_assert.isnotnull (
  1731 ANNO      1         0       0         0       wt_assert.isnull (
  1734 ANNO      1         1       1         1       wt_assert.this (
  1737 ANNO      1      2053    2053      2053    end t_eq;
  1747 UNKN      0        51       0         2 procedure isnotnull (
  1754 EXEC     82        67       1        36    g_rec.last_assert  := 'ISNOTNULL';
  1755 EXEC     82        27       0         1    g_rec.last_msg     := msg_in;
  1756 EXEC     82        24       1         1    g_rec.last_pass    := (check_this_in is not null);
  1757 EXEC     82       206       1        23    g_rec.last_details := 'Expected NOT NULL and got "' ||
  1759 EXEC     82        16       0         1    g_rec.raise_exception := raise_exc_in;
  1760 EXEC     82         9       0         1    process_assertion;
  1761 EXEC     80        16       0         1 end isnotnull;
  1764 UNKN      0         9       0         2 procedure isnotnull (
  1771 EXEC     13         4       0         1    isnotnull (msg_in        => msg_in
  1775 EXEC     12         2       1         1 end isnotnull;
  1778 UNKN      0       180       5        29 procedure isnotnull (
  1785 EXEC     13        20       0         4    g_rec.last_assert  := 'ISNOTNULL';
  1786 EXEC     13         7       0         1    g_rec.last_msg     := msg_in;
  1787 EXEC     13         6       0         1    g_rec.last_pass    := (check_this_in is not null);
  1788 EXEC     13     22917     343     10259    g_rec.last_details := 'Expected NOT NULL and got "' ||
  1790 EXEC     13         8       0         1    g_rec.raise_exception := raise_exc_in;
  1791 EXEC     13         9       0         2    process_assertion;
  1792 EXEC     12      1079      56       368 end isnotnull;
  1795 UNKN      0         2       0         1 procedure isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1802 EXEC      7         1       0         1    g_rec.last_assert  := 'ISNOTNULL';
  1803 EXEC      7         1       0         1    g_rec.last_msg     := msg_in;
  1804 EXEC      7         4       1         1    g_rec.last_pass    := (check_this_in is not null);
  1805 EXEC      7         0       0         0    if g_rec.last_pass
  1807 EXEC      5         2       1         1       g_rec.last_details := 'BLOB is NOT NULL';
  1809 EXEC      2         0       0         0       g_rec.last_details := 'BLOB is NULL';
  1811 EXEC      7         0       0         0    g_rec.raise_exception := raise_exc_in;
  1812 EXEC      7         1       0         1    process_assertion;
  1813 EXEC      6         2       0         1 end isnotnull;
  1817 ANNO      0        13      13        13    procedure t_isnotnull
  1822 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL VARCHAR2 Happy Path 1';
  1823 ANNO      1         0       0         0       isnotnull (
  1826 ANNO      1         1       1         1       temp_rec := g_rec;
  1828 ANNO      1         1       1         1       wt_assert.eq (
  1832 ANNO      1         0       0         0       wt_assert.eq (
  1837 ANNO      1         0       0         0       wt_assert.eq (
  1841 ANNO      1         0       0         0       wt_assert.eq (
  1846 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL VARCHAR2 Sad Path 1';
  1847 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1848 ANNO      1         0       0         0       isnotnull (
  1851 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1852 ANNO      1         1       1         1       wt_assert.eq (
  1857 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL VARCHAR2 Sad Path 2';
  1858 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  1860 ANNO      1         0       0         0          isnotnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1864 ANNO      0         0       0         0          l_found_exception := FALSE;
  1865 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1866 ANNO      1         0       0         0          l_found_exception := TRUE;
  1867 ANNO      0         1       1         1       end;
  1869 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1870 ANNO      1         0       0         0       wt_assert.eq (
  1874 ANNO      1         0       0         0       wt_assert.eq (
  1879 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL BOOLEAN Happy Path 1';
  1880 ANNO      1         1       1         1       isnotnull (
  1884 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL BOOLEAN Sad Path 1';
  1885 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1886 ANNO      1         0       0         0       isnotnull (
  1889 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1890 ANNO      1         1       1         1       wt_assert.eq (
  1895 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL BOOLEAN Sad Path 2';
  1896 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1898 ANNO      1         0       0         0          isnotnull (
  1902 ANNO      0         0       0         0          l_found_exception := FALSE;
  1903 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1904 ANNO      1         0       0         0          l_found_exception := TRUE;
  1905 ANNO      0         1       1         1       end;
  1907 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1908 ANNO      1         0       0         0       wt_assert.eq (
  1912 ANNO      1         0       0         0       wt_assert.eq (
  1917 ANNO      1         1       1         1       wt_assert.g_testcase := 'ISNOTNULL CLOB Happy Path 1';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1918 ANNO      1         0       0         0       isnotnull (
  1921 ANNO      1         2       2         2       temp_rec := g_rec;
  1923 ANNO      1         1       1         1       wt_assert.eq (
  1927 ANNO      1         1       1         1       wt_assert.eq (
  1932 ANNO      1         0       0         0       wt_assert.eq (
  1936 ANNO      1         0       0         0       wt_assert.isnotnull (
  1939 ANNO      1        38      38        38       wt_assert.this (
  1944 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL CLOB Sad Path 1';
  1945 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  1946 ANNO      1         0       0         0       isnotnull (
  1949 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1950 ANNO      1         0       0         0       wt_assert.eq (
  1955 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL CLOB Sad Path 2';
  1956 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  1958 ANNO      1         0       0         0          isnotnull (
  1962 ANNO      0         0       0         0          l_found_exception := FALSE;
  1963 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  1964 ANNO      1         0       0         0          l_found_exception := TRUE;
  1965 ANNO      0         1       1         1       end;
  1967 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  1968 ANNO      1         0       0         0       wt_assert.eq (
  1972 ANNO      1         1       1         1       wt_assert.eq (
  1977 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL BLOB Happy Path 1';
  1978 ANNO      1         0       0         0       isnotnull (
  1981 ANNO      1         0       0         0       temp_rec := g_rec;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1983 ANNO      1         0       0         0       wt_assert.eq (
  1987 ANNO      1         0       0         0       wt_assert.eq (
  1992 ANNO      1         0       0         0       wt_assert.eq (
  1996 ANNO      1         0       0         0       wt_assert.eq (
  2001 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL BLOB Sad Path 1';
  2002 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2003 ANNO      1         0       0         0       isnotnull (
  2006 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  2007 ANNO      1         0       0         0       wt_assert.eq (
  2012 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNOTNULL BLOB Sad Path 2';
  2013 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2015 ANNO      1         1       1         1          isnotnull (
  2019 ANNO      0         0       0         0          l_found_exception := FALSE;
  2020 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2021 ANNO      1         0       0         0          l_found_exception := TRUE;
  2022 ANNO      0         1       1         1       end;
  2024 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2025 ANNO      1         0       0         0       wt_assert.eq (
  2029 ANNO      1         0       0         0       wt_assert.eq (
  2033 ANNO      1         3       3         3    end t_isnotnull;
  2039 UNKN      0        10       0         1 procedure isnull (
  2046 EXEC     18         9       1         1    g_rec.last_assert  := 'ISNULL';
  2047 EXEC     18         3       0         1    g_rec.last_msg     := msg_in;
  2048 EXEC     18         4       0         1    g_rec.last_pass    := (check_this_in is null);
  2049 EXEC     18        18       1         1    g_rec.last_details := 'Expected NULL and got "' ||
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2051 EXEC     18         3       0         1    g_rec.raise_exception := raise_exc_in;
  2052 EXEC     18         3       0         1    process_assertion;
  2053 EXEC     16         2       0         1 end isnull;
  2056 UNKN      0         7       1         2 procedure isnull (
  2063 EXEC      6         3       0         1    isnull (msg_in        => msg_in
  2067 EXEC      5         1       0         1 end isnull;
  2070 UNKN      0        60       7        13 procedure isnull (
  2077 EXEC      7         7       1         1    g_rec.last_assert  := 'ISNULL';
  2078 EXEC      7         4       1         1    g_rec.last_msg     := msg_in;
  2079 EXEC      7         6       1         1    g_rec.last_pass    := (check_this_in is null);
  2080 EXEC      7      6613     343      2646    g_rec.last_details := 'Expected NULL and got "' ||
  2082 EXEC      7         7       1         2    g_rec.raise_exception := raise_exc_in;
  2083 EXEC      7         3       0         1    process_assertion;
  2084 EXEC      6       569      61       241 end isnull;
  2087 UNKN      0         2       1         1 procedure isnull (
  2094 EXEC      5         0       0         0    g_rec.last_assert  := 'ISNULL';
  2095 EXEC      5         0       0         0    g_rec.last_msg     := msg_in;
  2096 EXEC      5         1       0         1    g_rec.last_pass    := (check_this_in is null);
  2097 EXEC      5         0       0         0    if g_rec.last_pass
  2099 EXEC      3         1       1         1       g_rec.last_details := 'BLOB is NULL';
  2101 EXEC      2         1       1         1       g_rec.last_details := 'BLOB is NOT NULL';
  2103 EXEC      5         0       0         0    g_rec.raise_exception := raise_exc_in;
  2104 EXEC      5         0       0         0    process_assertion;
  2105 EXEC      4         0       0         0 end isnull;
  2109 ANNO      0         7       7         7    procedure t_isnull
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2114 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL VARCHAR2 Happy Path 1';
  2115 ANNO      1         0       0         0       isnull (
  2118 ANNO      1         0       0         0       temp_rec := g_rec;
  2120 ANNO      1         0       0         0       wt_assert.eq (
  2124 ANNO      1         0       0         0       wt_assert.eq (
  2129 ANNO      1         0       0         0       wt_assert.eq (
  2133 ANNO      1         1       1         1       wt_assert.eq (
  2138 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL VARCHAR2 Sad Path 1';
  2139 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2140 ANNO      1         0       0         0       isnull (
  2143 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2144 ANNO      1         0       0         0       wt_assert.eq (
  2149 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL VARCHAR2 Sad Path 2';
  2150 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2152 ANNO      1         0       0         0          isnull (
  2156 ANNO      0         0       0         0          l_found_exception := FALSE;
  2157 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2158 ANNO      1         1       1         1          l_found_exception := TRUE;
  2159 ANNO      0         1       1         1       end;
  2160 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  2162 ANNO      1         0       0         0       wt_assert.eq (
  2166 ANNO      1         0       0         0       wt_assert.eq (
  2171 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL BOOLEAN Happy Path 1';
  2172 ANNO      1         0       0         0       isnull (
  2176 ANNO      1         1       1         1       wt_assert.g_testcase := 'ISNULL BOOLEAN Sad Path 1';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2177 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2178 ANNO      1         0       0         0       isnull (
  2181 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2182 ANNO      1         0       0         0       wt_assert.eq (
  2187 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL BOOLEAN Sad Path 2';
  2188 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2190 ANNO      1         0       0         0          isnull (
  2194 ANNO      0         0       0         0          l_found_exception := FALSE;
  2195 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2196 ANNO      1         0       0         0          l_found_exception := TRUE;
  2197 ANNO      0         2       2         2       end;
  2198 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2200 ANNO      1         1       1         1       wt_assert.eq (
  2204 ANNO      1         1       1         1       wt_assert.eq (
  2209 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL CLOB Happy Path 1';
  2210 ANNO      1         0       0         0       isnull (
  2213 ANNO      1         2       2         2       temp_rec := g_rec;
  2215 ANNO      1         0       0         0       wt_assert.eq (
  2219 ANNO      1         0       0         0       wt_assert.eq (
  2224 ANNO      1         1       1         1       wt_assert.eq (
  2228 ANNO      1         1       1         1       wt_assert.eq (
  2233 ANNO      1         1       1         1       wt_assert.g_testcase := 'ISNULL CLOB Sad Path 1';
  2234 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2235 ANNO      1         0       0         0       isnull (
  2238 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2239 ANNO      1         1       1         1       wt_assert.eq (
  2244 ANNO      1         1       1         1       wt_assert.g_testcase := 'ISNULL CLOB Sad Path 2';
  2245 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2247 ANNO      1         0       0         0          isnull (
  2251 ANNO      0         0       0         0          l_found_exception := FALSE;
  2252 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2253 ANNO      1         0       0         0          l_found_exception := TRUE;
  2254 ANNO      0         2       2         2       end;
  2256 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2257 ANNO      1         0       0         0       wt_assert.eq (
  2261 ANNO      1         0       0         0       wt_assert.eq (
  2266 ANNO      1         0       0         0       wt_assert.g_testcase := 'ISNULL BLOB Happy Path 1';
  2267 ANNO      1         1       1         1       isnull (
  2270 ANNO      1         1       1         1       temp_rec := g_rec;
  2272 ANNO      1         1       1         1       wt_assert.eq (
  2276 ANNO      1         1       1         1       wt_assert.eq (
  2281 ANNO      1         0       0         0       wt_assert.eq (
  2285 ANNO      1         0       0         0       wt_assert.eq (
  2290 ANNO      1         1       1         1       wt_assert.g_testcase := 'ISNULL BLOB Sad Path 1';
  2291 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2292 ANNO      1         0       0         0       isnull (
  2295 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  2296 ANNO      1         0       0         0       wt_assert.eq (
  2301 ANNO      1         1       1         1       wt_assert.g_testcase := 'ISNULL BLOB Sad Path 2';
  2302 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2304 ANNO      1         0       0         0          isnull (
  2308 ANNO      0         0       0         0          l_found_exception := FALSE;
  2309 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2310 ANNO      1         1       1         1          l_found_exception := TRUE;
  2311 ANNO      0         1       1         1       end;
  2313 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  2314 ANNO      1         0       0         0       wt_assert.eq (
  2318 ANNO      1         0       0         0       wt_assert.eq (
  2322 ANNO      1         4       4         4    end t_isnull;
  2328 EXEC      8        18       0         4 procedure raises (
  2337 EXEC      8      5648       0      1873       execute immediate check_call_in;
  2338 EXEC      5         0       0         0    exception when OTHERS then
  2339 EXEC      5       169      28        40       l_sqlerrm := SQLERRM;
  2340 EXEC      5       282      30        96       l_errstack := substr(dbms_utility.format_error_stack  ||
  2343 UNKN      0         2       1         1    end;
  2345 EXEC      8         5       1         1    g_rec.last_assert  := 'RAISES/THROWS';
  2346 EXEC      8         3       0         1    g_rec.last_msg     := msg_in;
  2347 EXEC      8         2       0         1    if against_exc_in is null AND l_sqlerrm is null
  2350 EXEC      2         0       0         0       g_rec.last_pass := TRUE;
  2351#NOTX#     0         0       0         0    elsif against_exc_in is null OR l_sqlerrm is null
  2355 EXEC      1         0       0         0       g_rec.last_pass := FALSE;
  2358 EXEC      5        27       4         7       g_rec.last_pass := l_sqlerrm like '%' || against_exc_in || '%';
  2360 EXEC      8         0       0         0    if against_exc_in is null
  2362 EXEC      2         3       1         2       g_rec.last_details := 'No exception was expected' ||
  2365 EXEC      6         0       0         0    elsif l_sqlerrm is null
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2367 EXEC      1         1       1         1       g_rec.last_details := 'Expected exception "%'           || against_exc_in ||
  2370 EXEC      5         5       1         2       g_rec.last_details := 'Expected exception "%'           || against_exc_in ||
  2374 EXEC      8         2       0         1    if not g_rec.last_pass
  2376 EXEC      2         8       4         4       g_rec.last_details := 
  2379 EXEC      8         3       0         1    process_assertion;
  2380 EXEC      8        15       1         4 end raises;
  2382 UNKN      0         2       1         1 procedure raises (
  2388 EXEC      3         0       0         0    if against_exc_in is null
  2390 EXEC      1         0       0         0       raises (
  2395 EXEC      2        14       6         8       raises (
  2400 EXEC      3         1       1         1 end raises;
  2402 EXCL      0         0       0         0 procedure throws (
  2408 EXEC      1         1       1         1    raises (
  2412 EXEC      1         1       1         1 end throws;
  2414 EXCL      0         0       0         0 procedure throws (
  2420 EXEC      1         0       0         0    raises (
  2424 EXEC      1         0       0         0 end throws;
  2428 ANNO      0         3       3         3    procedure t_raises
  2432 ANNO      1         1       1         1       wt_assert.g_testcase := 'Raises Tests Happy Path 1';
  2433 ANNO      1         0       0         0       raises (
  2437 ANNO      1         1       1         1       temp_rec := g_rec;
  2439 ANNO      1         0       0         0       wt_assert.eq (
  2443 ANNO      1         1       1         1       wt_assert.eq (
  2448 ANNO      1         1       1         1       wt_assert.eq (
  2452 ANNO      1        41      41        41       wt_assert.eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2462 ANNO      1         0       0         0       wt_assert.g_testcase := 'Raises Tests Happy Path 2';
  2463 ANNO      1         1       1         1       raises (
  2467 ANNO      1         1       1         1       temp_rec := g_rec;
  2468 ANNO      1         3       3         3       wt_assert.eq (
  2479 ANNO      1         0       0         0       throws (
  2483 ANNO      1         1       1         1       temp_rec := g_rec;
  2484 ANNO      1         2       2         2       wt_assert.eq (
  2495 ANNO      1         1       1         1       throws (
  2499 ANNO      1         2       2         2       temp_rec := g_rec;
  2500 ANNO      1         4       4         4       wt_assert.eq (
  2511 ANNO      1         0       0         0       wt_assert.g_testcase := 'Raises Tests Happy Path 3';
  2512 ANNO      1         1       1         1       raises (
  2516 ANNO      1         1       1         1       temp_rec := g_rec;
  2517 ANNO      1         1       1         1       wt_assert.eq (
  2524 ANNO      1         1       1         1       raises (
  2528 ANNO      1         1       1         1       temp_rec := g_rec;
  2529 ANNO      1         1       1         1       wt_assert.eq (
  2536 ANNO      1         0       0         0       wt_assert.g_testcase := 'Raises Tests Sad Path 1';
  2537 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2538 ANNO      1         0       0         0       raises (
  2542 ANNO      1         4       4         4       temp_rec := g_rec;
  2543 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  2545 ANNO      1         1       1         1       wt_assert.eq (
  2549 ANNO      1         0       0         0       wt_assert.isnotnull (
  2552 ANNO      1         5       5         5       wt_assert.this (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2558 ANNO      1         0       0         0       wt_assert.g_testcase := 'Raises Tests Sad Path 2';
  2559 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2560 ANNO      1         1       1         1       raises (
  2564 ANNO      1         1       1         1       temp_rec := g_rec;
  2565 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2567 ANNO      1         1       1         1       wt_assert.eq (
  2571 ANNO      1         5       5         5       wt_assert.eq (
  2577 ANNO      1         1       1         1    end t_raises;
  2583 EXEC      6        14       0         3 procedure eqqueryvalue (
  2595 EXEC      6         5       1         1    g_rec.last_assert     := 'EQQUERYVALUE';
  2596 EXEC      6       350       0       348    g_rec.last_msg        := msg_in;
  2597 EXEC      6      5943      49      5043    open l_rc for check_query_in;
  2598 EXEC      5       367      33       139    fetch l_rc into l_rc_buff;
  2599 EXEC      5       113      10        38    close l_rc;
  2600 EXEC      5        14       1         4    g_rec.last_pass    := (   l_rc_buff = against_value_in
  2601 UNKN      0         5       1         2                           or (    l_rc_buff is null
  2604 EXEC      5        35       5        13    g_rec.last_details := 'Expected "' || substr(against_value_in,1,1000) ||
  2607 EXEC      5         2       0         1    g_rec.raise_exception := raise_exc_in;
  2608 EXEC      5         1       1         1    process_assertion;
  2609 EXEC      2         0       0         0 exception when others then
  2610 EXEC      2       143      45        98    l_errstack := substr(dbms_utility.format_error_stack ||
  2612 EXEC      2         5       2         3    g_rec.last_details := 'Exception raised for Query: ' ||
  2615 EXEC      2         0       0         0    g_rec.last_pass    := FALSE;
  2616 EXEC      2         0       0         0    g_rec.raise_exception := raise_exc_in;
  2617 EXEC      2         0       0         0    process_assertion;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2618 EXEC      5        28       2        19 end eqqueryvalue;
  2621 EXEC      4        57      10        26 procedure eqqueryvalue (
  2633 EXEC      4         3       1         1    g_rec.last_assert  := 'EQQUERYVALUE';
  2634 EXEC      4         2       1         1    g_rec.last_msg     := msg_in;
  2635 EXEC      4      1812     161      1210    open l_rc for check_query_in;
  2636 EXEC      3       615     179       225    fetch l_rc into l_rc_buff;
  2637 EXEC      3       102      33        35    close l_rc;
  2638 EXEC      3     66497       1     37674    g_rec.last_pass    := (xmltype.getclobval(l_rc_buff)       =
  2640 EXEC      3     65251       8     20288    g_rec.last_details := 'Expected "' || substr(xmltype.getclobval(against_value_in),1,1000) ||
  2643 EXEC      3         4       1         2    g_rec.raise_exception := raise_exc_in;
  2644 EXEC      3         3       1         1    process_assertion;
  2645 EXEC      2         0       0         0 exception when others then
  2646 EXEC      2       152      65        87    l_errstack := substr(dbms_utility.format_error_stack ||
  2648 EXEC      2         7       3         4    g_rec.last_details := 'Exception raised for Query: ' ||
  2651 EXEC      2         1       0         1    g_rec.last_pass    := FALSE;
  2652 EXEC      2         0       0         0    g_rec.raise_exception := raise_exc_in;
  2653 EXEC      2         1       1         1    process_assertion;
  2654 EXEC      3       253      49       128 end eqqueryvalue;
  2657 EXEC      4        39       1        10 procedure eqqueryvalue (
  2669 EXEC      4         1       0         1    g_rec.last_assert  := 'EQQUERYVALUE';
  2670 EXEC      4         1       0         1    g_rec.last_msg     := msg_in;
  2671 EXEC      4       855      75       348    open l_rc for check_query_in;
  2672 EXEC      3       206      59        76    fetch l_rc into l_rc_buff;
  2673 EXEC      3        54      11        24    close l_rc;
  2674 EXEC      3     16188       1     14580    g_rec.last_pass    := (   l_rc_buff = against_value_in
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2675 UNKN      0         4       2         2                           or (    l_rc_buff is null
  2678 EXEC      3     11284    2131      5522    g_rec.last_details := 'Expected "' || substr(against_value_in,1,1000) ||
  2681 EXEC      3         3       1         2    g_rec.raise_exception := raise_exc_in;
  2682 EXEC      3         3       0         2    process_assertion;
  2683 EXEC      2         0       0         0 exception when others then
  2684 EXEC      2       133      51        82    l_errstack := substr(dbms_utility.format_error_stack ||
  2686 EXEC      2         7       3         4    g_rec.last_details := 'Exception raised for Query: ' ||
  2689 EXEC      2         2       1         1    g_rec.last_pass    := FALSE;
  2690 EXEC      2         0       0         0    g_rec.raise_exception := raise_exc_in;
  2691 EXEC      2         0       0         0    process_assertion;
  2692 EXEC      3       172      29        81 end eqqueryvalue;
  2695 EXEC      5        49       1        18 procedure eqqueryvalue (
  2708 EXEC      5         3       0         1    g_rec.last_assert  := 'EQQUERYVALUE';
  2709 EXEC      5         1       0         1    g_rec.last_msg     := msg_in;
  2710 EXEC      5      1001      66       388    open l_rc for check_query_in;
  2711 EXEC      4       267      55        79    fetch l_rc into l_rc_buff;
  2712 EXEC      4        87      11        33    close l_rc;
  2713 EXEC      4        20       1         4    compare_results    := nvl(DBMS_LOB.COMPARE(l_rc_buff, against_value_in),-1);
  2714 EXEC      4        13       0         3    g_rec.last_pass    := (   (compare_results = 0)
  2715 UNKN      0         6       2         2                           or (    l_rc_buff is null
  2718 EXEC      4        85       4        57    g_rec.last_details := 'DBMS_LOB.COMPARE between BLOB and Query: ' ||
  2721 EXEC      4         2       1         1    g_rec.raise_exception := raise_exc_in;
  2722 EXEC      4         4       1         2    process_assertion;
  2723 EXEC      2         0       0         0 exception when others then
  2724 EXEC      2       133      43        90    l_errstack := substr(dbms_utility.format_error_stack ||
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2726 EXEC      2         5       2         3    g_rec.last_details := 'Exception raised for Query: ' ||
  2729 EXEC      2         1       0         1    g_rec.last_pass    := FALSE;
  2730 EXEC      2         0       0         0    g_rec.raise_exception := raise_exc_in;
  2731 EXEC      2         2       1         1    process_assertion;
  2732 EXEC      4        44       1        26 end eqqueryvalue;
  2736 ANNO      0        48      48        48    procedure t_eqqueryvalue
  2741 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE VARCHAR2 Happy Path 1';
  2742 ANNO      1       153     153       153       eqqueryvalue (
  2747 ANNO      1         1       1         1       temp_rec := g_rec;
  2749 ANNO      1         0       0         0       wt_assert.eq (
  2753 ANNO      1         0       0         0       wt_assert.eq (
  2758 ANNO      1         0       0         0       wt_assert.eq (
  2762 ANNO      1         1       1         1       wt_assert.eq (
  2767 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE VARCHAR2 Happy Path 2';
  2768 ANNO      1         1       1         1       eqqueryvalue (
  2774 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE VARCHAR2 Sad Path 1';
  2775 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  2776 ANNO      1         1       1         1       eqqueryvalue (
  2780 ANNO      1         1       1         1       temp_rec := g_rec;
  2781 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2782 ANNO      1         0       0         0       wt_assert.eq (
  2787 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE VARCHAR2 Sad Path 2';
  2788 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2790 ANNO      1         0       0         0          eqqueryvalue (
  2795 ANNO      0         0       0         0          l_found_exception := FALSE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2796 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2797 ANNO      1         0       0         0          l_found_exception := TRUE;
  2798 ANNO      0         1       1         1       end;
  2800 ANNO      1         2       2         2       temp_rec := g_rec;
  2801 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2802 ANNO      1         1       1         1       wt_assert.eq (
  2806 ANNO      1         0       0         0       wt_assert.eq (
  2811 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE VARCHAR2 Sad Path 3';
  2812 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  2813 ANNO      1         0       0         0       eqqueryvalue (
  2817 ANNO      1         2       2         2       temp_rec := g_rec;
  2818 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2820 ANNO      1         0       0         0       wt_assert.eq (
  2824 ANNO      1         0       0         0       wt_assert.isnotnull (
  2827 ANNO      1         8       8         8       wt_assert.this (
  2833 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE XMLTYPE Happy Path 1';
  2834 ANNO      1         1       1         1       eqqueryvalue (
  2838 ANNO      1         2       2         2       temp_rec := g_rec;
  2840 ANNO      1         1       1         1       wt_assert.eq (
  2844 ANNO      1         1       1         1       wt_assert.eq (
  2849 ANNO      1         0       0         0       wt_assert.eq (
  2853 ANNO      1         0       0         0       wt_assert.isnotnull (
  2856 ANNO      1        17      17        17       wt_assert.this (
  2861 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE XMLTYPE Sad Path 1';
  2862 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2863 ANNO      1         1       1         1       eqqueryvalue (
  2867 ANNO      1         5       5         5       temp_rec := g_rec;
  2868 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2870 ANNO      1         0       0         0       wt_assert.eq (
  2874 ANNO      1         1       1         1       wt_assert.isnotnull (
  2877 ANNO      1        13      13        13       wt_assert.this (
  2883 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE XMLTYPE Sad Path 2';
  2884 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2886 ANNO      1         0       0         0          eqqueryvalue (
  2891 ANNO      0         0       0         0          l_found_exception := FALSE;
  2892 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2893 ANNO      1         0       0         0          l_found_exception := TRUE;
  2894 ANNO      0         2       2         2       end;
  2896 ANNO      1         6       6         6       temp_rec := g_rec;
  2897 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2898 ANNO      1         0       0         0       wt_assert.eq (
  2902 ANNO      1         0       0         0       wt_assert.eq (
  2907 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE XMLTYPE Sad Path 3';
  2908 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2909 ANNO      1         0       0         0       eqqueryvalue (
  2913 ANNO      1         3       3         3       temp_rec := g_rec;
  2914 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2916 ANNO      1         0       0         0       wt_assert.eq (
  2920 ANNO      1         0       0         0       wt_assert.isnotnull (
  2923 ANNO      1         8       8         8       wt_assert.this (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2929 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE CLOB Happy Path 1';
  2930 ANNO      1         0       0         0       eqqueryvalue (
  2935 ANNO      1         4       4         4       temp_rec := g_rec;
  2937 ANNO      1         1       1         1       wt_assert.eq (
  2941 ANNO      1         1       1         1       wt_assert.eq (
  2946 ANNO      1         0       0         0       wt_assert.eq (
  2950 ANNO      1         1       1         1       wt_assert.isnotnull (
  2953 ANNO      1        17      17        17       wt_assert.this (
  2958 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE CLOB Happy Path 2';
  2959 ANNO      1         0       0         0       eqqueryvalue (
  2964 ANNO      1         2       2         2       temp_rec := g_rec;
  2966 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE CLOB Sad Path 1';
  2967 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2968 ANNO      1         0       0         0       eqqueryvalue (
  2972 ANNO      1         4       4         4       temp_rec := g_rec;
  2973 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  2975 ANNO      1         0       0         0       wt_assert.eq (
  2979 ANNO      1         0       0         0       wt_assert.isnotnull (
  2982 ANNO      1        13      13        13       wt_assert.this (
  2988 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE CLOB Sad Path 2';
  2989 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  2991 ANNO      1         0       0         0          eqqueryvalue (
  2996 ANNO      0         0       0         0          l_found_exception := FALSE;
  2997 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  2998 ANNO      1         0       0         0          l_found_exception := TRUE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  2999 ANNO      0         1       1         1       end;
  3001 ANNO      1         5       5         5       temp_rec := g_rec;
  3002 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3003 ANNO      1         0       0         0       wt_assert.eq (
  3007 ANNO      1         1       1         1       wt_assert.eq (
  3012 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE CLOB Sad Path 3';
  3013 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3014 ANNO      1         0       0         0       eqqueryvalue (
  3018 ANNO      1         2       2         2       temp_rec := g_rec;
  3019 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3021 ANNO      1         0       0         0       wt_assert.eq (
  3025 ANNO      1         0       0         0       wt_assert.isnotnull (
  3028 ANNO      1         7       7         7       wt_assert.this (
  3034 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE BLOB Happy Path 1';
  3035 ANNO      1         1       1         1       eqqueryvalue (
  3040 ANNO      1         2       2         2       temp_rec := g_rec;
  3042 ANNO      1         1       1         1       wt_assert.eq (
  3046 ANNO      1         0       0         0       wt_assert.eq (
  3051 ANNO      1         1       1         1       wt_assert.eq (
  3055 ANNO      1         2       2         2       wt_assert.eq (
  3061 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERYVALUE BLOB Happy Path 2';
  3062 ANNO      1         1       1         1       eqqueryvalue (
  3068 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE BLOB Sad Path 1';
  3069 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3070 ANNO      1         0       0         0       eqqueryvalue (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3074 ANNO      1         5       5         5       temp_rec := g_rec;
  3075 ANNO      1         1       1         1       wtplsql_skip_save := FALSE;
  3077 ANNO      1         1       1         1       wt_assert.eq (
  3081 ANNO      1         2       2         2       wt_assert.eq (
  3087 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE BLOB Sad Path 2';
  3088 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  3090 ANNO      1         1       1         1          eqqueryvalue (
  3095 ANNO      0         0       0         0          l_found_exception := FALSE;
  3096 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  3097 ANNO      1         1       1         1          l_found_exception := TRUE;
  3098 ANNO      0         2       2         2       end;
  3100 ANNO      1         4       4         4       temp_rec := g_rec;
  3101 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3102 ANNO      1         0       0         0       wt_assert.eq (
  3106 ANNO      1         0       0         0       wt_assert.eq (
  3111 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERYVALUE BLOB Sad Path 3';
  3112 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  3113 ANNO      1         0       0         0       eqqueryvalue (
  3117 ANNO      1         2       2         2       temp_rec := g_rec;
  3118 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3120 ANNO      1         1       1         1       wt_assert.eq (
  3124 ANNO      1         1       1         1       wt_assert.isnotnull (
  3127 ANNO      1         7       7         7       wt_assert.this (
  3132 ANNO      1         3       3         3    end t_eqqueryvalue;
  3137 UNKN      0         2       1         1 procedure eqquery (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3144 EXEC      4         3       1         1    g_rec.last_assert  := 'EQQUERY';
  3145 EXEC      4         2       1         1    g_rec.last_msg     := msg_in;
  3146 EXEC      4         2       0         1    compare_queries(check_query_in, against_query_in);
  3147 EXEC      4         0       0         0    g_rec.raise_exception := raise_exc_in;
  3148 EXEC      4         4       1         1    process_assertion;
  3149 EXEC      3         1       1         1 end eqquery;
  3153 ANNO      0         2       2         2    procedure t_eqquery
  3158 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERY Tests Happy Path 1';
  3159 ANNO      1         0       0         0       wt_assert.eqquery (
  3163 ANNO      1         1       1         1       temp_rec := g_rec;
  3165 ANNO      1         0       0         0       wt_assert.eq (
  3169 ANNO      1         1       1         1       wt_assert.eq (
  3174 ANNO      1         0       0         0       wt_assert.eq (
  3178 ANNO      1         1       1         1       wt_assert.isnotnull (
  3181 ANNO      1         3       3         3       wt_assert.this (
  3186 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQQUERY Tests Sad Path 1';
  3187 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3188 ANNO      1         1       1         1       eqquery (
  3192 ANNO      1         4       4         4       temp_rec := g_rec;
  3193 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3195 ANNO      1         0       0         0       wt_assert.eq (
  3199 ANNO      1         1       1         1       wt_assert.isnotnull (
  3202 ANNO      1         3       3         3       wt_assert.this (
  3207 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERY Tests Sad Path 2';
  3208 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3210 ANNO      1         0       0         0          eqquery (
  3215 ANNO      0         0       0         0          l_found_exception := FALSE;
  3216 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  3217 ANNO      1         0       0         0          l_found_exception := TRUE;
  3218 ANNO      0         2       2         2       end;
  3219 ANNO      1         4       4         4       temp_rec := g_rec;
  3220 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3222 ANNO      1         1       1         1       wt_assert.eq (
  3226 ANNO      1         0       0         0       wt_assert.eq (
  3231 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQQUERY Tests Sad Path 3';
  3232 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3233 ANNO      1         0       0         0       eqquery (
  3237 ANNO      1         6       6         6       temp_rec := g_rec;
  3238 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3240 ANNO      1         1       1         1       wt_assert.eq (
  3244 ANNO      1         1       1         1       wt_assert.isnotnull (
  3247 ANNO      1        11      11        11       wt_assert.this (
  3251 ANNO      1         0       0         0    end t_eqquery;
  3256 UNKN      0         5       1         1 procedure eqtable (
  3264 EXEC      5         2       1         1    l_check_query    varchar2(16000) := 'select * from ' || check_this_in;
  3265 EXEC      5         1       1         1    l_against_query  varchar2(16000) := 'select * from ' || against_this_in;
  3267 EXEC      5         2       1         1    g_rec.last_assert  := 'EQTABLE';
  3268 EXEC      5         2       1         1    g_rec.last_msg     := msg_in;
  3269 EXEC      5         2       0         1    if check_where_in is not null
  3271 EXEC      3         2       1         1       l_check_query := l_check_query || ' where ' || check_where_in;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3273 EXEC      3         0       0         0    if against_where_in is not null
  3275 EXEC      3         1       0         1       l_against_query := l_against_query || ' where ' || against_where_in;
  3277 EXEC      5         2       0         1    compare_queries(l_check_query, l_against_query);
  3278 EXEC      5         1       0         1    g_rec.raise_exception := raise_exc_in;
  3279 EXEC      5         4       1         1    process_assertion;
  3280 EXEC      4         1       0         1 end eqtable;
  3284 ANNO      0         3       3         3    procedure t_eqtable
  3289 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQTABLE Tests Happy Path 1';
  3290 ANNO      1         0       0         0       wt_assert.eqtable (
  3296 ANNO      1         2       2         2       temp_rec := g_rec;
  3298 ANNO      1         0       0         0       wt_assert.eq (
  3302 ANNO      1         0       0         0       wt_assert.eq (
  3307 ANNO      1         0       0         0       wt_assert.eq (
  3311 ANNO      1         1       1         1       wt_assert.isnotnull (
  3314 ANNO      1         2       2         2       wt_assert.this (
  3319 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQTABLE Tests Happy Path 2';
  3320 ANNO      1         7       1         4       eqtable (
  3327 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQTABLE Sad Path 1';
  3328 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3329 ANNO      1         4       1         3       eqtable (
  3335 ANNO      1         5       5         5       temp_rec := g_rec;
  3336 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3338 ANNO      1         0       0         0       wt_assert.eq (
  3342 ANNO      1         0       0         0       wt_assert.isnotnull (
  3345 ANNO      1         7       7         7       wt_assert.this (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3350 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQTABLE Sad Path 2';
  3351 ANNO      1         1       1         1       wtplsql_skip_save := TRUE;
  3353 ANNO      1         4       1         3          eqtable (
  3360 ANNO      0         0       0         0          l_found_exception := FALSE;
  3361 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  3362 ANNO      1         0       0         0          l_found_exception := TRUE;
  3363 ANNO      0         2       2         2       end;
  3365 ANNO      1         4       4         4       temp_rec := g_rec;
  3366 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3367 ANNO      1         1       1         1       wt_assert.eq (
  3371 ANNO      1         0       0         0       wt_assert.eq (
  3376 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQTABLE Sad Path 3';
  3377 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3378 ANNO      1         0       0         0       eqtable (
  3382 ANNO      1         4       4         4       temp_rec := g_rec;
  3383 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3385 ANNO      1         1       1         1       wt_assert.eq (
  3389 ANNO      1         1       1         1       wt_assert.isnotnull (
  3392 ANNO      1        10      10        10       wt_assert.this (
  3396 ANNO      1         2       2         2    end t_eqtable;
  3401 UNKN      0        10       1         2 procedure eqtabcount (
  3409 EXEC      6         8       1         2    l_query      varchar2(16000) := 'select count(*) from ' || check_this_in;
  3413 EXEC     11        25       1         5    procedure l_run_query is
  3417 EXEC     11      2586     108       542       open l_rc for l_query;
  3418 EXEC     10    284769    1927     49190       fetch l_rc into l_cnt;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3419 EXEC     10       458      36        58       close l_rc;
  3420 EXEC     10        14       1         2       l_success := TRUE;
  3422 EXEC      1         0       0         0       when OTHERS
  3424 EXEC      1        67      67        67          g_rec.last_details := SQLERRM || CHR(10) ||
  3426 EXEC      1         1       1         1          g_rec.last_pass    := FALSE;
  3427 EXEC      1         0       0         0          l_success      := FALSE;
  3428 EXEC      1         0       0         0          g_rec.raise_exception := raise_exc_in;
  3429 EXEC      1         0       0         0          process_assertion;
  3430 EXEC     11        60       1        22    end l_run_query;
  3432 EXEC      6         4       0         1    g_rec.last_assert  := 'EQTABCOUNT';
  3433 EXEC      6         3       0         1    g_rec.last_msg     := msg_in;
  3435 EXEC      6         2       0         1    l_query := 'select count(*) from ' || check_this_in;
  3436 EXEC      6         0       0         0    if check_where_in is not null
  3438 EXEC      4         3       1         1       l_query := l_query || ' where ' || check_where_in;
  3440 EXEC      6         0       0         0    l_run_query;
  3441 EXEC      7         3       1         1    if NOT l_success then return; end if;
  3442 EXEC      5         6       1         2    l_check_cnt := l_cnt;
  3444 EXEC      5        27       4         8    l_query := 'select count(*) from ' || against_this_in;
  3445 EXEC      5         2       0         1    if against_where_in is not null
  3447 EXEC      3         5       1         2       l_query := l_query || ' where ' || against_where_in;
  3449 EXEC      5         2       1         1    l_run_query;
  3450 EXEC      5         4       1         1    if NOT l_success then return; end if;
  3451 EXEC      5        14       2         3    g_rec.last_pass    := (l_check_cnt = l_cnt);
  3453 EXEC      5        58      11        12    g_rec.last_details := 'Expected ' || l_cnt       || ' rows from "' || against_this_in ||
  3456 EXEC      5         3       1         1    g_rec.raise_exception := raise_exc_in;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3457 EXEC      5         5       1         1    process_assertion;
  3458 EXEC      4         2       0         1 end eqtabcount;
  3462 ANNO      0         3       3         3    procedure t_eqtabcount
  3467 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQTABCOUNT Tests Happy Path 1';
  3468 ANNO      1         6       2         4       eqtabcount (
  3474 ANNO      1         2       2         2       temp_rec := g_rec;
  3476 ANNO      1         1       1         1       wt_assert.eq (
  3480 ANNO      1         1       1         1       wt_assert.eq (
  3485 ANNO      1         0       0         0       wt_assert.eq (
  3489 ANNO      1         0       0         0       wt_assert.isnotnull (
  3492 ANNO      1         8       8         8       wt_assert.this (
  3498 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQTABCOUNT Tests Happy Path 2';
  3499 ANNO      1         4       1         3       eqtabcount (
  3506 ANNO      1         1       1         1       wt_assert.g_testcase := 'EQTABCOUNT Sad Path 1';
  3507 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3508 ANNO      1         3       1         2       eqtabcount (
  3514 ANNO      1         5       5         5       temp_rec := g_rec;
  3515 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3517 ANNO      1         1       1         1       wt_assert.eq (
  3521 ANNO      1         1       1         1       wt_assert.isnotnull (
  3524 ANNO      1         8       8         8       wt_assert.this (
  3530 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQTABCOUNT Sad Path 2';
  3531 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3533 ANNO      1         3       3         3          eqtabcount (
  3540 ANNO      0         0       0         0          l_found_exception := FALSE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3541 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  3542 ANNO      1         0       0         0          l_found_exception := TRUE;
  3543 ANNO      0         2       2         2       end;
  3545 ANNO      1         4       4         4       temp_rec := g_rec;
  3546 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3547 ANNO      1         0       0         0       wt_assert.eq (
  3551 ANNO      1         0       0         0       wt_assert.eq (
  3556 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQTABCOUNT Sad Path 3';
  3557 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3558 ANNO      1         1       1         1       eqtabcount (
  3562 ANNO      1         6       6         6       temp_rec := g_rec;
  3563 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3565 ANNO      1         0       0         0       wt_assert.eq (
  3569 ANNO      1         1       1         1       wt_assert.isnotnull (
  3572 ANNO      1         6       6         6       wt_assert.this (
  3577 ANNO      1         0       0         0       wt_assert.g_testcase := 'EQTABCOUNT Sad Path 4';
  3578 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3579 ANNO      1         1       1         1       eqtabcount (
  3583 ANNO      1         2       2         2       temp_rec := g_rec;
  3584 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3586 ANNO      1         0       0         0       wt_assert.eq (
  3590 ANNO      1         0       0         0       wt_assert.isnotnull (
  3594 ANNO      1         4       4         4       wt_assert.this (
  3598 ANNO      1         2       2         2       wt_assert.this (
  3602 ANNO      1         2       2         2    end t_eqtabcount;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3607 EXEC      6         5       1         1 procedure objexists (
  3616 EXEC      6         4       0         1    g_rec.last_assert  := 'OBJEXISTS';
  3617 EXEC      6         1       0         1    g_rec.last_msg     := msg_in;
  3618 EXEC      6      1838     118       596    select count(*) into l_num_objects
  3625 EXEC      6         7       0         2    g_rec.last_pass    := case l_num_objects when 0 then FALSE else TRUE end;
  3626 EXEC      6         2       1         1    g_rec.last_details := 'Number of objects found for "' ||
  3627 UNKN      0         9       0         2                          case when obj_owner_in is null then ''
  3630 UNKN      0        17       1         4                          case when obj_type_in is null then ''
  3633 EXEC      6         1       0         1    g_rec.raise_exception := raise_exc_in;
  3634 EXEC      6         1       1         1    process_assertion;
  3635 EXEC      5         3       1         1 end objexists;
  3638 UNKN      0         3       1         2 procedure objexists (
  3644 EXEC      2         5       2         3    l_pos    number := instr(check_this_in, '.');
  3646 EXEC      2         5       2         3    objexists(msg_in       => msg_in
  3649 EXEC      2         0       0         0 end objexists;
  3653 ANNO      0         2       2         2    procedure t_object_exists
  3658 ANNO      1         1       1         1       wt_assert.g_testcase := 'OBJEXISTS Happy Path 1';
  3659 ANNO      1         1       1         1       objexists (
  3663 ANNO      1         1       1         1       temp_rec := g_rec;
  3665 ANNO      1         1       1         1       wt_assert.eq (
  3669 ANNO      1         0       0         0       wt_assert.eq (
  3674 ANNO      1         0       0         0       wt_assert.eq (
  3678 ANNO      1         0       0         0       wt_assert.eq (
  3683 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJEXISTS Happy Path 2';
  3684 ANNO      1         0       0         0       objexists (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3690 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJEXISTS Happy Path 3';
  3691 ANNO      1         0       0         0       objexists (
  3695 ANNO      1         1       1         1       wt_assert.g_testcase := 'OBJEXISTS Happy Path 4';
  3696 ANNO      1         0       0         0       objexists (
  3700 ANNO      1         1       1         1       wt_assert.g_testcase := 'OBJEXISTS Sad Path 1';
  3701 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3702 ANNO      1         0       0         0       objexists (
  3706 ANNO      1         2       2         2       temp_rec := g_rec;
  3707 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3709 ANNO      1         0       0         0       wt_assert.eq (
  3713 ANNO      1         1       1         1       wt_assert.eq (
  3718 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJEXISTS Sad Path 2';
  3719 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3721 ANNO      1         1       1         1          objexists (
  3726 ANNO      0         0       0         0          l_found_exception := FALSE;
  3727 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  3728 ANNO      1         0       0         0          l_found_exception := TRUE;
  3729 ANNO      0         1       1         1       end;
  3730 ANNO      1         1       1         1       temp_rec := g_rec;
  3731 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3733 ANNO      1         0       0         0       wt_assert.eq (
  3737 ANNO      1         0       0         0       wt_assert.eq (
  3741 ANNO      1         0       0         0    end t_object_exists;
  3746 EXEC      5         5       0         1 procedure objnotexists (
  3755 EXEC      5         0       0         0    g_rec.last_assert  := 'OBJNOTEXISTS';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3756 EXEC      5         1       0         1    g_rec.last_msg     := msg_in;
  3757 EXEC      5      1000     121       388    select count(*) into l_num_objects
  3764 EXEC      5         6       0         1    g_rec.last_pass    := case l_num_objects when 0 then TRUE else FALSE end;
  3765 EXEC      5         3       1         1    g_rec.last_details := 'Number of objects found for "' ||
  3766 UNKN      0         9       1         2                          case when obj_owner_in is null then ''
  3769 UNKN      0        14       1         4                          case when obj_type_in is null then ''
  3772 EXEC      5         1       0         1    g_rec.raise_exception := raise_exc_in;
  3773 EXEC      5         1       1         1    process_assertion;
  3774 EXEC      4         2       0         1 end objnotexists;
  3777 UNKN      0        33      33        33 procedure objnotexists (
  3783 EXEC      1         1       1         1    l_pos    number := instr(check_this_in, '.');
  3785 EXEC      1         2       2         2    objnotexists(msg_in       => msg_in
  3788 EXEC      1         0       0         0 end objnotexists;
  3792 ANNO      0         1       1         1    procedure t_object_not_exists
  3797 ANNO      1         1       1         1       wt_assert.g_testcase := 'OBJNOTEXISTS Happy Path 1';
  3798 ANNO      1         1       1         1       objnotexists (
  3802 ANNO      1         0       0         0       temp_rec := g_rec;
  3804 ANNO      1         0       0         0       wt_assert.eq (
  3808 ANNO      1         1       1         1       wt_assert.eq (
  3813 ANNO      1         1       1         1       wt_assert.eq (
  3817 ANNO      1         0       0         0       wt_assert.eq (
  3822 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJNOTEXISTS Happy Path 2';
  3823 ANNO      1         0       0         0       objnotexists (
  3829 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJNOTEXISTS Happy Path 3';
  3830 ANNO      1         0       0         0       objnotexists (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3834 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJNOTEXISTS Sad Path 1';
  3835 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3836 ANNO      1         0       0         0       objnotexists (
  3840 ANNO      1         1       1         1       temp_rec := g_rec;
  3841 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3843 ANNO      1         0       0         0       wt_assert.eq (
  3847 ANNO      1         1       1         1       wt_assert.eq (
  3852 ANNO      1         0       0         0       wt_assert.g_testcase := 'OBJNOTEXISTS Sad Path 2';
  3853 ANNO      1         0       0         0       wtplsql_skip_save := TRUE;
  3855 ANNO      1         1       1         1          objnotexists (
  3860 ANNO      0         0       0         0          l_found_exception := FALSE;
  3861 ANNO      1         0       0         0       exception when ASSERT_FAILURE_EXCEPTION then
  3862 ANNO      1         0       0         0          l_found_exception := TRUE;
  3863 ANNO      0         1       1         1       end;
  3865 ANNO      1         2       2         2       temp_rec := g_rec;
  3866 ANNO      1         0       0         0       wtplsql_skip_save := FALSE;
  3867 ANNO      1         0       0         0       wt_assert.eq (
  3871 ANNO      1         0       0         0       wt_assert.eq (
  3875 ANNO      1         0       0         0    end t_object_not_exists;
  3884 ANNO      0         5       5         5    procedure WTPLSQL_RUN  --% WTPLSQL SET DBOUT "WT_ASSERT:PACKAGE BODY" %--
  3887 ANNO      1       739     739       739       select temp_clob,  temp_nclob,  temp_xml,  temp_blob
  3891 ANNO      1         1       1         1       t_boolean_to_status;
  3892 ANNO      1         0       0         0       t_process_assertion;
  3893 ANNO      1         0       0         0       t_compare_queries;
  3894 ANNO      1         0       0         0       t_nls_settings;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  3895 ANNO      1         1       1         1       t_last_values;
  3896 ANNO      1         0       0         0       t_reset_globals;
  3897 ANNO      1         0       0         0       t_this;
  3898 ANNO      1         0       0         0       t_eq;
  3899 ANNO      1         0       0         0       t_isnotnull;
  3900 ANNO      1         1       1         1       t_isnull;
  3902 ANNO      1         0       0         0       t_raises;
  3903 ANNO      1         1       1         1       t_eqqueryvalue;
  3904 ANNO      1         1       1         1       t_eqquery;
  3905 ANNO      1         0       0         0       t_eqtable;
  3906 ANNO      1         0       0         0       t_eqtabcount;
  3907 ANNO      1         0       0         0       t_object_exists;
  3908 ANNO      1         0       0         0       t_object_not_exists;
  3909 ANNO      1         1       1         1    end WTPLSQL_RUN;
  3914 EXCL      0         0       0         0 end wt_assert;


    wtPLSQL 1.1.0 - Run ID 282: 18-May-2018 01:17:37 AM

  Test Results for WTP.WT_PROFILER
       Total Testcases:       41      Total Assertions:      257
  Minimum Elapsed msec:        0     Failed Assertions:        0
  Average Elapsed msec:       35      Error Assertions:        0
  Maximum Elapsed msec:     1260            Test Yield:   100.00%
  Total Run Time (sec):      8.9

  Code Coverage for PACKAGE BODY WTP.WT_PROFILER
  Total Profiled Lines:      690    Not Executed Lines:        5
  Minimum Elapsed usec:        0       Annotated Lines:      522
  Average Elapsed usec:    25110        Excluded Lines:        2
  Maximum Elapsed usec:   690603         Unknown Lines:       13
 Trigger Source Offset:        0         Code Coverage:    96.73%

"WTP"."WT_PROFILER" Test Result Details (Test Run ID 282)
----------------------------------------
 ---- Test Case: Get Error Messages
 PASS 1183ms ERROR_PARAM Test 1. ISNOTNULL - Expected NOT NULL and got "DBMS_PROFILER Error: A subprogram was called with an incorrect parameter."
 PASS    0ms ERROR_PARAM Test 2. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms ERROR_IO Test 1. ISNOTNULL - Expected NOT NULL and got "DBMS_PROFILER Error: Data flush operation failed. Check whether the profiler tables have been created, are accessible, and that there is adequate space."
 PASS    0ms ERROR_IO Test 2. THIS - Expected "TRUE" and got "TRUE"
 PASS    1ms ERROR_VERSION Test 1. ISNOTNULL - Expected NOT NULL and got "DBMS_PROFILER Error: There is a mismatch between package and database implementation. Oracle returns this error if an incorrect version of the DBMS_PROFILER package is installed, and if the version of the profiler package cannot work with this database version."
 PASS    0ms ERROR_VERSION Test 2. THIS - Expected "TRUE" and got "TRUE"
 PASS    0ms Unknown Error Test 1. ISNOTNULL - Expected NOT NULL and got "DBMS_PROFILER Error: Unknown error number -9999"
 PASS    0ms Unknown Error Test 2. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: Delete PL/SQL Profiler Records Happy Path 1
 PASS    1ms delete_plsql_profiler_recs(-99) 1. ISNULL - Expected NULL and got ""
 PASS    0ms Number of plsql_profiler_runs (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_runs where runid = -99
 PASS    0ms Number of plsql_profiler_units (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_units where runid = -99
 PASS    0ms Number of plsql_profiler_data (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_data where runid = -99
 ---- Test Case: Delete PL/SQL Profiler Records Happy Path 2
 PASS    1ms insert plsql_profiler_runs (-99). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into plsql_profiler_runs (runid) values (-99)".
 PASS    0ms insert plsql_profiler_units (-99). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into plsql_profiler_units (runid, unit_number, total_time) values (-99, -99, 0)".
 PASS    0ms insert plsql_profiler_data (RUNID: -99). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into plsql_profiler_data (runid, unit_number, line#) values (-99, -99, 0)".
 PASS    6ms Number of plsql_profiler_runs (-99). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_runs where runid = -99
 PASS    0ms Number of plsql_profiler_units (-99). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_units where runid = -99
 PASS    1ms Number of plsql_profiler_data (-99). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_data where runid = -99
 PASS    1ms delete_plsql_profiler_recs(-99) 2. ISNULL - Expected NULL and got ""
 PASS    0ms Number of plsql_profiler_runs (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_runs where runid = -99
 PASS    1ms Number of plsql_profiler_units (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_units where runid = -99
 PASS    0ms Number of plsql_profiler_data (-99). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_data where runid = -99
 ---- Test Case: Find DBOUT Setup
 PASS   27ms Compile package WT_PROFILE_FIND_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package WT_PROFILE_FIND_DBOUT is\n   l_junk number;\nend WT_PROFILE_FIND_DBOUT;".
 PASS    0ms Compile package WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    3ms WT_PROFILE_FIND_DBOUT package. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE) is 1
 ---- Test Case: Find DBOUT Happy Path 1
 PASS   23ms Compile package body WT_PROFILE_FIND_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_FIND_DBOUT is\nbegin\n  l_junk := 1;\nend WT_PROFILE_FIND_DBOUT;".
 PASS    1ms Compile package body WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_FIND_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE BODY) is 1
 PASS    1ms g_rec.dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_type. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.error_message. ISNULL - Expected NULL and got ""
 ---- Test Case: Find DBOUT Happy Path 2
 PASS   33ms Compile package body WT_PROFILE_FIND_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_FIND_DBOUT is\n  --% WTPLSQL SET DBOUT "WT_PROFILE_FIND_DBOUT:PACKAGE BODY" %--\nbegin\n  l_junk := 1;\nend WT_PROFILE_FIND_DBOUT;".
 PASS    1ms Compile package body WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_FIND_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE BODY) is 1
 PASS 1154ms g_rec.dbout_owner. EQ - Expected "WTP" and got "WTP"
 PASS    2ms g_rec.dbout_name. EQ - Expected "WT_PROFILE_FIND_DBOUT" and got "WT_PROFILE_FIND_DBOUT"
 PASS    0ms g_rec.dbout_type. EQ - Expected "PACKAGE BODY" and got "PACKAGE BODY"
 PASS    0ms g_rec.error_message. ISNULL - Expected NULL and got ""
 ---- Test Case: Find DBOUT Happy Path 3
 PASS   30ms Compile package body WT_PROFILE_FIND_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_FIND_DBOUT is\n  --% WTPLSQL SET DBOUT "WTP.WT_PROFILE_FIND_DBOUT:PACKAGE BODY" %--\nbegin\n  l_junk := 1;\nend WT_PROFILE_FIND_DBOUT;".
 PASS    0ms Compile package body WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_FIND_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE BODY) is 1
 PASS 1188ms g_rec.dbout_owner. EQ - Expected "WTP" and got "WTP"
 PASS    0ms g_rec.dbout_name. EQ - Expected "WT_PROFILE_FIND_DBOUT" and got "WT_PROFILE_FIND_DBOUT"
 PASS    0ms g_rec.dbout_type. EQ - Expected "PACKAGE BODY" and got "PACKAGE BODY"
 PASS    0ms g_rec.error_message. ISNULL - Expected NULL and got ""
 ---- Test Case: Find DBOUT Sad Path 1
 PASS   34ms Compile package body WT_PROFILE_FIND_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_FIND_DBOUT is\n  --% WTPLSQL SET DBOUT "BOGUS1" %--\nbegin\n  l_junk := 1;\nend WT_PROFILE_FIND_DBOUT;".
 PASS    0ms Compile package body WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_FIND_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE BODY) is 1
 PASS 1151ms g_rec.dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_type. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.error_message. EQ - Expected "Unable to find database object "BOGUS1"." and got "Unable to find database object "BOGUS1"."
 ---- Test Case: Find DBOUT Sad Path 2
 PASS   32ms Compile package body WT_PROFILE_FIND_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_FIND_DBOUT is\n  --% WTPLSQL SET DBOUT "WTP.WT_PROFILE_FIND_DBOUT" %--\nbegin\n  l_junk := 1;\nend WT_PROFILE_FIND_DBOUT;".
 PASS    5ms Compile package body WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_FIND_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE BODY) is 1
 PASS  992ms g_rec.dbout_owner. EQ - Expected "WTP" and got "WTP"
 PASS    0ms g_rec.dbout_name. EQ - Expected "WT_PROFILE_FIND_DBOUT" and got "WT_PROFILE_FIND_DBOUT"
 PASS    0ms g_rec.error_message. EQ - Expected "Found too many database objects "WTP.WT_PROFILE_FIND_DBOUT"." and got "Found too many database objects "WTP.WT_PROFILE_FIND_DBOUT"."
 ---- Test Case: Find DBOUT Sad Path 3
 PASS   22ms Compile package body WT_PROFILE_FIND_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_FIND_DBOUT is\n  --% WTPLSQL SET DBOUT "SYS.ALL_OBJECTS:VIEW" %--\nbegin\n  l_junk := 1;\nend WT_PROFILE_FIND_DBOUT;".
 PASS    1ms Compile package body WT_PROFILE_FIND_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_FIND_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE BODY) is 1
 PASS 1260ms g_rec.dbout_owner. EQ - Expected "SYS" and got "SYS"
 PASS    0ms g_rec.dbout_name. EQ - Expected "ALL_OBJECTS" and got "ALL_OBJECTS"
 PASS    0ms g_rec.dbout_type. EQ - Expected "VIEW" and got "VIEW"
 PASS    0ms g_rec.error_message. ISNULL - Expected NULL and got ""
 ---- Test Case: Find DBOUT Teardown
 PASS   39ms drop package WT_PROFILE_FIND_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "drop package WT_PROFILE_FIND_DBOUT".
 PASS    1ms WT_PROFILE_FIND_DBOUT package. OBJNOTEXISTS - Number of objects found for "WTP.WT_PROFILE_FIND_DBOUT"(PACKAGE) is 0
 ---- Test Case: Load Anno Setup
 PASS    0ms Number of ANNO_AA elements. ISNOTNULL - Expected NOT NULL and got "0"
 PASS   27ms Compile package WT_PROFILE_LOAD_ANNO. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package WT_PROFILE_LOAD_ANNO is\n  l_junk number;\nend WT_PROFILE_LOAD_ANNO;".
 PASS    5ms Compile package WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_LOAD_ANNO package. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE) is 1
 ---- Test Case: Load Anno Happy Path 1
 PASS   12ms Compile package body WT_PROFILE_LOAD_ANNO. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_LOAD_ANNO is\nbegin\n  l_junk := 1;\nend WT_PROFILE_LOAD_ANNO;".
 PASS    1ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS    1ms l_annoTest.COUNT. EQ - Expected "0" and got "0"
 ---- Test Case: Load Anno Happy Path 2
 PASS   41ms Compile package body WT_PROFILE_LOAD_ANNO. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_LOAD_ANNO is\nbegin\n  --%WTPLSQL_begin_ignore_lines%--\n  l_junk := 1;\nend WT_PROFILE_LOAD_ANNO;".
 PASS    1ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    3ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS    1ms l_annoTest.COUNT. EQ - Expected "3" and got "3"
 PASS    0ms l_annoTest.exists(3). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(4). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(5). EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: Load Anno Happy Path 3
 PASS   35ms Compile package body WT_PROFILE_LOAD_ANNO. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_LOAD_ANNO is\nbegin\n  l_junk := 1;\n  --%WTPLSQL_begin_ignore_lines%--\n  l_junk := 2;\n  --%WTPLSQL_end_ignore_lines%--\n  l_junk := 3;\nend WT_PROFILE_LOAD_ANNO;".
 PASS    0ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    8ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS    1ms l_annoTest.COUNT. EQ - Expected "3" and got "3"
 PASS    0ms l_annoTest.exists(4). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(5). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(6). EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: Load Anno Happy Path 4
 PASS   27ms Compile package body WT_PROFILE_LOAD_ANNO. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_LOAD_ANNO is\nbegin\n  l_junk := 1;\n  --%WTPLSQL_begin_ignore_lines%--\n  l_junk := 2;\n  --%WTPLSQL_end_ignore_lines%--\n  l_junk := 3;\n  --%WTPLSQL_begin_ignore_lines%--\n  l_junk := 4;\nend WT_PROFILE_LOAD_ANNO;".
 PASS    0ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    2ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS    2ms l_annoTest.COUNT. EQ - Expected "6" and got "6"
 PASS    0ms l_annoTest.exists(4). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(5). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(6). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(8). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(9). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(10). EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: Load Anno Sad Path 1
 PASS   82ms Compile package body WT_PROFILE_LOAD_ANNO. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_LOAD_ANNO is\nbegin\n  --%WTPLSQL_end_ignore_lines%--\n  l_junk := 4;\nend WT_PROFILE_LOAD_ANNO;".
 PASS    1ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS    1ms l_annoTest.COUNT. EQ - Expected "0" and got "0"
 ---- Test Case: Load Anno Sad Path 2
 PASS   42ms Compile package body WT_PROFILE_LOAD_ANNO. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_LOAD_ANNO is\nbegin\n  l_junk := 1;\n  --%WTPLSQL_begin_ignore_lines%--\n  l_junk := 2;\n  --%WTPLSQL_end_ignore_lines%--\n  l_junk := 3;\n  --%WTPLSQL_end_ignore_lines%--\n  l_junk := 4;\nend WT_PROFILE_LOAD_ANNO;".
 PASS    0ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS    1ms l_annoTest.COUNT. EQ - Expected "3" and got "3"
 PASS    0ms l_annoTest.exists(4). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(5). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(6). EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: Load Anno Sad Path 3
 PASS   30ms Compile package body WT_PROFILE_LOAD_ANNO. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_LOAD_ANNO is\nbegin\n  l_junk := 1;\n  --%WTPLSQL_begin_ignore_lines%--\n  l_junk := 2;\n  --%WTPLSQL_begin_ignore_lines%--\n  l_junk := 3;\n  --%WTPLSQL_end_ignore_lines%--\n  l_junk := 4;\nend WT_PROFILE_LOAD_ANNO;".
 PASS    0ms Compile package body WT_PROFILE_LOAD_ANNO Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_LOAD_ANNO package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE BODY) is 1
 PASS    2ms l_annoTest.COUNT. EQ - Expected "5" and got "5"
 PASS    0ms l_annoTest.exists(4). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(5). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(6). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(7). EQ - Expected "TRUE" and got "TRUE"
 PASS    0ms l_annoTest.exists(8). EQ - Expected "TRUE" and got "TRUE"
 ---- Test Case: Load Anno Teardown
 PASS   47ms drop package WT_PROFILE_LOAD_ANNO. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "drop package WT_PROFILE_LOAD_ANNO".
 PASS    1ms WT_PROFILE_LOAD_ANNO package. OBJNOTEXISTS - Number of objects found for "WTP.WT_PROFILE_LOAD_ANNO"(PACKAGE) is 0
 PASS    0ms Number of ANNO_AA elements. ISNOTNULL - Expected NOT NULL and got "0"
 ---- Test Case: Insert DBOUT Profile Setup
 PASS   29ms Compile package WT_PROFILE_INSERT_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package WT_PROFILE_INSERT_DBOUT is\n  l_junk number;\nend WT_PROFILE_INSERT_DBOUT;".
 PASS    1ms Compile package WT_PROFILE_INSERT_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_INSERT_DBOUT package. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_INSERT_DBOUT"(PACKAGE) is 1
 PASS   16ms Compile package body WT_PROFILE_INSERT_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_INSERT_DBOUT is\nbegin\n  l_junk := 1;\n  --%WTPLSQL_begin_ignore_lines%--\n  l_junk := 2;\n  --%WTPLSQL_end_ignore_lines%--\n  l_junk := 3;\nend WT_PROFILE_INSERT_DBOUT;".
 PASS    1ms Compile package body WT_PROFILE_INSERT_DBOUT Error. ISNULL - Expected NULL and got ""
 PASS    0ms WT_PROFILE_INSERT_DBOUT package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_INSERT_DBOUT"(PACKAGE BODY) is 1
 PASS    1ms insert plsql_profiler_runs (-97). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into plsql_profiler_runs (runid) values (-97)".
 PASS    0ms insert plsql_profiler_units (-97). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into plsql_profiler_units (runid, unit_number, total_time) values (-97, -97, 0)".
 PASS    3ms insert plsql_profiler_data (RUNID: -97). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into plsql_profiler_data (runid, unit_number, line#) values (-97, -97, 0)".
 PASS    1ms Number of plsql_profiler_runs (-97). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_runs where runid = -97
 PASS    1ms Number of plsql_profiler_units (-97). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_units where runid = -97
 PASS    0ms Number of plsql_profiler_data (-97). EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_data where runid = -97
 PASS    2ms Insert wt_test_runs (-97). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into wt_test_runs (id, start_dtm, runner_owner, runner_name) values (-97, sysdate, USER, 'Insert DBOUT Test')".
 PASS    0ms wt_test_runs (-97) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_test_runs where id = -97
 PASS    1ms insert UNIT 1 into plsql_profiler_units. ISNULL - Expected NULL and got ""
 PASS    1ms Number of UNIT 1 plsql_profiler_units. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from plsql_profiler_units where runid = -97 and unit_number = 1
 PASS    1ms insert plsql_profiler_data (LINE#: 1). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms insert plsql_profiler_data (LINE#: 2). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms insert plsql_profiler_data (LINE#: 3). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms insert plsql_profiler_data (LINE#: 5). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms insert plsql_profiler_data (LINE#: 7). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms insert plsql_profiler_data (LINE#: 8). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms Number of UNIT 1 plsql_profiler_data. EQQUERYVALUE - Expected "6" and got "6" for Query: select count(*) from plsql_profiler_data where runid = -97 and unit_number = 1
 ---- Test Case: Insert DBOUT Profile Happy Path
 PASS    4ms SQLERRM. ISNULL - Expected NULL and got ""
 PASS    1ms wt_dbout_profiles line 1, column STATUS. EQQUERYVALUE - Expected "EXCL" and got "EXCL" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 1
 PASS    0ms wt_dbout_profiles line 1, column TEXT. EQQUERYVALUE - Expected "package body WT_PROFILE_INSERT_DBOUT is\n" and got "package body WT_PROFILE_INSERT_DBOUT is\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 1
 PASS    1ms wt_dbout_profiles line 2, column STATUS. EQQUERYVALUE - Expected "UNKN" and got "UNKN" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 2
 PASS    4ms wt_dbout_profiles line 2, column TEXT. EQQUERYVALUE - Expected "begin\n" and got "begin\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 2
 PASS    0ms wt_dbout_profiles line 3, column STATUS. EQQUERYVALUE - Expected "EXEC" and got "EXEC" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 3
 PASS    0ms wt_dbout_profiles line 3, column TEXT. EQQUERYVALUE - Expected "  l_junk := 1;\n" and got "  l_junk := 1;\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 3
 PASS    1ms wt_dbout_profiles line 5, column STATUS. EQQUERYVALUE - Expected "ANNO" and got "ANNO" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 5
 PASS    0ms wt_dbout_profiles line 5, column TEXT. EQQUERYVALUE - Expected "  l_junk := 2;\n" and got "  l_junk := 2;\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 5
 PASS    0ms wt_dbout_profiles line 7, column STATUS. EQQUERYVALUE - Expected "EXEC" and got "EXEC" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 7
 PASS    0ms wt_dbout_profiles line 7, column TEXT. EQQUERYVALUE - Expected "  l_junk := 3;\n" and got "  l_junk := 3;\n" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 7
 PASS    0ms wt_dbout_profiles line 8, column STATUS. EQQUERYVALUE - Expected "EXCL" and got "EXCL" for Query: select STATUS from wt_dbout_profiles where test_run_id = -97 and line = 8
 PASS    1ms wt_dbout_profiles line 8, column TEXT. EQQUERYVALUE - Expected "end WT_PROFILE_INSERT_DBOUT;" and got "end WT_PROFILE_INSERT_DBOUT;" for Query: select TEXT from wt_dbout_profiles where test_run_id = -97 and line = 8
 ---- Test Case: Insert DBOUT Profile Teardown
 PASS    0ms Delete wt_dbout_profiles (-97). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from wt_dbout_profiles where test_run_id = -97".
 PASS    1ms wt_dbout_profiles (-97) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -97
 PASS    1ms Delete wt_test_runs (-97). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from wt_test_runs where id = -97".
 PASS    0ms wt_test_runs (-97) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = -97
 PASS    0ms delete plsql_profiler_data (-97). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from plsql_profiler_data where runid = -97".
 PASS    0ms delete plsql_profiler_units (-97). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from plsql_profiler_units where runid = -97".
 PASS    1ms delete plsql_profiler_runs (-97). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from plsql_profiler_runs where runid = -97".
 PASS    0ms Number of plsql_profiler_runs (-97). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_runs where runid = -97
 PASS    0ms Number of plsql_profiler_units (-97). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_units where runid = -97
 PASS    1ms Number of plsql_profiler_data (-97). EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from plsql_profiler_data where runid = -97
 PASS   53ms drop package WT_PROFILE_INSERT_DBOUT. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "drop package WT_PROFILE_INSERT_DBOUT".
 PASS    5ms WT_PROFILE_INSERT_DBOUT package. OBJNOTEXISTS - Number of objects found for "WTP.WT_PROFILE_INSERT_DBOUT"(PACKAGE) is 0
 ---- Test Case: Insert DBOUT Profile Setup
 PASS   31ms Compile package WT_PROFILE_INITIALIZE. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package WT_PROFILE_INITIALIZE is\n  l_junk number;\nend WT_PROFILE_INITIALIZE;".
 PASS    0ms Compile package WT_PROFILE_INITIALIZE Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_INITIALIZE package. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_INITIALIZE"(PACKAGE) is 1
 ---- Test Case: Initialize Test HAPPY Path 1
 PASS   32ms Compile package body WT_PROFILE_INITIALIZE. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_INITIALIZE is\nbegin\n  l_junk := 7;\nend WT_PROFILE_INITIALIZE;".
 PASS    0ms Compile package body WT_PROFILE_INITIALIZE Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_INITIALIZE package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_INITIALIZE"(PACKAGE BODY) is 1
 PASS    5ms OUT dbout_owner. ISNULL - Expected NULL and got ""
 PASS    1ms OUT dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms OUT dbout_type. ISNULL - Expected NULL and got ""
 PASS    0ms OUT prof_runid. ISNULL - Expected NULL and got ""
 PASS    0ms OUT trigger_offset. ISNULL - Expected NULL and got ""
 PASS    0ms OUT error_message. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_type. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.prof_runid. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.trigger_offset. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.error_message. ISNULL - Expected NULL and got ""
 ---- Test Case: Initialize Test HAPPY Path 2
 PASS   26ms Compile package body WT_PROFILE_INITIALIZE. RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "create or replace package body WT_PROFILE_INITIALIZE is\nbegin\n--% WTPLSQL SET DBOUT "WT_PROFILE_INITIALIZE:PACKAGE BODY" %--\n  l_junk := 7;\nend WT_PROFILE_INITIALIZE;".
 PASS    0ms Compile package body WT_PROFILE_INITIALIZE Error. ISNULL - Expected NULL and got ""
 PASS    1ms WT_PROFILE_INITIALIZE package body. OBJEXISTS - Number of objects found for "WTP.WT_PROFILE_INITIALIZE"(PACKAGE BODY) is 1
 PASS 1089ms OUT dbout_owner. EQ - Expected "WTP" and got "WTP"
 PASS    0ms OUT dbout_name. EQ - Expected "WT_PROFILE_INITIALIZE" and got "WT_PROFILE_INITIALIZE"
 PASS    0ms OUT dbout_type. EQ - Expected "PACKAGE BODY" and got "PACKAGE BODY"
 PASS    1ms OUT prof_runid. ISNOTNULL - Expected NOT NULL and got "138"
 PASS    0ms OUT trigger_offset. EQ - Expected "0" and got "0"
 PASS    0ms OUT error_message. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_owner. EQ - Expected "WTP" and got "WTP"
 PASS    0ms g_rec.dbout_name. EQ - Expected "WT_PROFILE_INITIALIZE" and got "WT_PROFILE_INITIALIZE"
 PASS    0ms g_rec.dbout_type. EQ - Expected "PACKAGE BODY" and got "PACKAGE BODY"
 PASS    0ms g_rec.prof_runid. ISNOTNULL - Expected NOT NULL and got "138"
 PASS    0ms g_rec.trigger_offset. EQ - Expected "0" and got "0"
 PASS    0ms g_rec.error_message. ISNULL - Expected NULL and got ""
 ---- Test Case: Initialize Test Sad Path 1
 PASS    0ms SQLERRM. EQ - Expected "ORA-20004: i_test_run_id is null" and got "ORA-20004: i_test_run_id is null"
 ---- Test Case: Finalize Happy Path 1
 PASS    0ms g_rec.prof_runid. ISNULL - Expected NULL and got ""
 PASS    1ms format_error_stack and format_error_backtrace. ISNULL - Expected NULL and got ""
 ---- Test Case: Finalize Happy Path 2
 PASS    0ms SQLERRM. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.test_run_id. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_owner. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_name. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.dbout_type. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.prof_runid. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.trigger_offset. ISNULL - Expected NULL and got ""
 PASS    0ms g_rec.error_message. ISNULL - Expected NULL and got ""
 ---- Test Case: Finalize Sad Path 1
 PASS    0ms SQLERRM. EQ - Expected "ORA-20000: g_rec.test_run_id is null" and got "ORA-20000: g_rec.test_run_id is null"
 ---- Test Case: Trigger Offset Happy Path
 PASS    1ms Trigger Test. EQ - Expected "3" and got "3"
 PASS    0ms Package Test. EQ - Expected "0" and got "0"
 ---- Test Case: Trigger Offset Sad Path
 PASS    0ms Non Existent Object. EQ - Expected "0" and got "0"
 ---- Test Case: Calculate Percent Coverage Setup
 PASS    1ms Insert wt_test_runs (-95). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into wt_test_runs (id, start_dtm, runner_owner, runner_name) values (-95, sysdate, USER, 'Calculate Offset Test')".
 PASS    0ms wt_test_runs (-95) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_test_runs where id = -95
 ---- Test Case: Calculate Percent Coverage Happy Path 1
 PASS    1ms Insert wt_dbout_profiles (-95,1). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_dbout_profiles (-95,1) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 1
 PASS    0ms Insert wt_dbout_profiles (-95,2). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms wt_dbout_profiles (-95,2) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 2
 PASS    0ms Insert wt_dbout_profiles (-95,3). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_dbout_profiles (-95,3) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 3
 PASS    1ms Main Test. EQ - Expected "66.67" and got "66.67"
 PASS    0ms Delete wt_dbout_profiles (-95). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from wt_dbout_profiles where test_run_id = -95".
 PASS    0ms wt_dbout_profiles (-95) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95
 ---- Test Case: Calculate Percent Coverage Happy Path 2
 PASS    2ms Insert wt_dbout_profiles (-95,1). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_dbout_profiles (-95,1) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 1
 PASS    1ms Insert wt_dbout_profiles (-95,2). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_dbout_profiles (-95,2) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 2
 PASS    0ms Insert wt_dbout_profiles (-95,3). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    1ms wt_dbout_profiles (-95,3) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95 and line = 3
 PASS    0ms Main Test. EQ - Expected "-1" and got "-1"
 PASS    0ms Delete wt_dbout_profiles (-95). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from wt_dbout_profiles where test_run_id = -95".
 PASS    0ms wt_dbout_profiles (-95) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -95
 ---- Test Case: Calculate Percent Coverage Sad Path
 PASS    2ms Missing Test Run ID. ISNULL - Expected NULL and got ""
 PASS    0ms NULL Test Run ID. ISNULL - Expected NULL and got ""
 ---- Test Case: Calculate Percent Coverage Teardown
 PASS    1ms Delete wt_test_runs (-95). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from wt_test_runs where id = -95".
 PASS    0ms wt_test_runs (-95) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = -95
 ---- Test Case: Delete Records Setup
 PASS    1ms wt_test_runs Count 0. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = -98
 PASS    0ms wt_dbout_profiles Count 0. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -98
 PASS    1ms Insert wt_test_runs (-98). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "insert into wt_test_runs (id, start_dtm, runner_owner, runner_name) values (-98, sysdate, USER, 'Delete Records Test')".
 PASS    0ms wt_test_runs (-98) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_test_runs where id = -98
 PASS    1ms Insert wt_dbout_profiles (-98,1). EQ - Expected "ORA-0000: normal, successful completion" and got "ORA-0000: normal, successful completion"
 PASS    0ms wt_dbout_profiles (-98,1) Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_dbout_profiles where test_run_id = -98 and line = 1
 ---- Test Case: Delete Records Happy Path 1
 PASS    1ms SQLERRM. ISNULL - Expected NULL and got ""
 PASS    0ms wt_dbout_profiles Count 2. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -98
 ---- Test Case: Delete Records Sad Path 1
 PASS    0ms SQLERRM. ISNULL - Expected NULL and got ""
 PASS    1ms wt_dbout_profiles Count 2. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -98
 ---- Test Case: Delete Records Sad Path 2
 PASS    0ms SQLERRM. ISNULL - Expected NULL and got ""
 PASS    0ms wt_dbout_profiles Count 2. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_dbout_profiles where test_run_id = -98
 ---- Test Case: Delete Records Teardown
 PASS    0ms Delete wt_test_runs (-98). RAISES/THROWS - No exception was expected. Exception raised was "". Exception raised by: "delete from wt_test_runs where id = -98".
 PASS    7ms wt_test_runs (-98) Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_test_runs where id = -98

WTP.WT_PROFILER PACKAGE BODY Code Coverage Details (Test Run ID 282)
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
     1 EXCL      0         0       0         0 package body wt_profiler
    29 ANNO      0         0       0         0    g_skip_this  boolean := FALSE;
    31 ANNO      0       384       6       243    procedure tl_compile_db_object
    37 ANNO     20        12       1         1       l_errtxt   varchar2(32000) := '';
    41 ANNO     20        97       2        23       l_sql_txt := 'create or replace ' || in_ptype || ' ' ||
    45 ANNO     20        43       1         7       wt_assert.raises
    50 ANNO     40     15819      19      5324       for buff in (select * from user_errors
    56 ANNO      0         0       0         0          l_errtxt := l_errtxt || buff.line || ', ' ||
    59 ANNO     20       106       4        12       wt_assert.isnull
    64 ANNO     20       209       1        15       wt_assert.objexists (
    69 ANNO     20        51       2         4    end tl_compile_db_object;
    72 ANNO      0         5       1         3    procedure tl_drop_db_object
    79 ANNO      3         5       1         2       l_sql_txt := 'drop ' || in_ptype || ' ' || in_pname;
    80 ANNO      3         4       1         2       wt_assert.raises
    84 ANNO      3        36       3        10       wt_assert.objnotexists (
    89 ANNO      3         3       1         1    end tl_drop_db_object;
    92 ANNO      0        11       1         3    procedure tl_count_plsql_profiler_recs
    98 ANNO      5        35       5        12       wt_assert.eqqueryvalue
   103 ANNO      5        21       3         9       wt_assert.eqqueryvalue
   109 ANNO      5        18       3         5       wt_assert.eqqueryvalue
   114 ANNO      5         2       0         1    end tl_count_plsql_profiler_recs;
   117 ANNO      0         3       1         2    procedure tl_count_plsql_profiler_recs
   123 ANNO      2         5       2         3       l_sql_txt := 'insert into plsql_profiler_runs (runid)' ||
   125 ANNO      2         3       1         2       wt_assert.raises (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   130 ANNO      2         6       3         3       l_sql_txt := 'insert into plsql_profiler_units (runid, unit_number, total_time)' ||
   132 ANNO      2         3       1         2       wt_assert.raises (
   137 ANNO      2         5       2         3       l_sql_txt := 'insert into plsql_profiler_data (runid, unit_number, line#)' ||
   139 ANNO      2         4       2         2       wt_assert.raises (
   143 ANNO      2       828     388       440       commit;
   144 ANNO      2         2       1         1    end tl_count_plsql_profiler_recs;
   147 ANNO      0         2       2         2    procedure tl_delete_plsql_profiler_recs
   153 ANNO      1         3       3         3       l_sql_txt := 'delete from plsql_profiler_data' ||
   155 ANNO      1         2       2         2       wt_assert.raises (
   160 ANNO      1         2       2         2       l_sql_txt := 'delete from plsql_profiler_units' ||
   162 ANNO      1         1       1         1       wt_assert.raises (
   167 ANNO      1         2       2         2       l_sql_txt := 'delete from plsql_profiler_runs' ||
   169 ANNO      1         1       1         1       wt_assert.raises (
   173 ANNO      1        67      67        67       commit;
   174 ANNO      1         1       1         1    end tl_delete_plsql_profiler_recs;
   177 ANNO      0         3       1         1    procedure tl_insert_test_runs
   184 ANNO      3         7       2         3       l_sql_txt := 'insert into wt_test_runs' ||
   188 ANNO      3         5       1         2       wt_assert.raises (
   192 ANNO      3        20       5        10       wt_assert.eqqueryvalue (
   197 ANNO      3      1112     142       588       commit;
   198 ANNO      3         4       1         2    end tl_insert_test_runs;
   201 ANNO      0         6       1         3    procedure tl_delete_test_runs
   207 ANNO      3         8       2         3       l_sql_txt := 'delete from wt_test_runs where id = ' || in_test_run_id;
   208 ANNO      3         5       1         2       wt_assert.raises (
   212 ANNO      3        15       4         6       wt_assert.eqqueryvalue (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   217 ANNO      3      1119     116       528       commit;
   218 ANNO      3         3       1         1    end tl_delete_test_runs;
   221 ANNO      0        13       1         3    procedure tl_insert_dbout_profiles
   228 ANNO      7      1437     131       287          insert into wt_dbout_profiles values in_rec;
   229 ANNO      7        11       1         2          l_sqlerrm := SQLERRM;
   230 ANNO      7      1672      76       569          commit;
   231 ANNO      0         0       0         0       exception when others then
   232 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
   233 ANNO      0         0       0         0       end;
   235 ANNO      7        50       4        12       wt_assert.eq (
   240 ANNO      7        29       3         5       wt_assert.eqqueryvalue (
   247 ANNO      7         6       1         1    end tl_insert_dbout_profiles;
   250 ANNO      0         4       1         2    procedure tl_delete_dbout_profiles
   256 ANNO      3         5       1         2       l_sql_txt := 'delete from wt_dbout_profiles where test_run_id = ' ||
   258 ANNO      3         6       2         2       wt_assert.raises (
   262 ANNO      3        16       3         7       wt_assert.eqqueryvalue (
   267 ANNO      3       919     161       427       commit;
   268 ANNO      3         6       2         2    end tl_delete_dbout_profiles;
   275 UNKN      0         7       1         1 function get_error_msg
   279 EXEC      8         2       0         1    l_msg_prefix  varchar2(50) := 'DBMS_PROFILER Error: ';
   281 EXEC      8         0       0         0    case retnum_in
   282 EXEC     10        10       0         4    when dbms_profiler.error_param then return l_msg_prefix ||
   284 EXEC      8         3       0         2    when dbms_profiler.error_io then return l_msg_prefix ||
   288 EXEC      6         9       0         5    when dbms_profiler.error_version then return l_msg_prefix ||
   293 EXEC      2         7       1         6    else return l_msg_prefix ||
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   296 EXEC      8         2       0         1 end get_error_msg;
   300 ANNO      0         3       3         3    procedure t_get_error_msg
   304 ANNO      2         4       1         3       wt_assert.g_testcase := 'Get Error Messages';
   305 ANNO      1         2       1         1       wt_assert.isnotnull (
   308 ANNO      1        24      24        24       wt_assert.this (
   313 ANNO      1         0       0         0       wt_assert.isnotnull (
   316 ANNO      1         8       1         7       wt_assert.this (
   321 ANNO      1         3       1         2       wt_assert.isnotnull (
   324 ANNO      1        28      28        28       wt_assert.this (
   329 ANNO      1         1       0         1       wt_assert.isnotnull (
   332 ANNO      1         8       1         7       wt_assert.this (
   336 ANNO      1         2       2         2    end t_get_error_msg;
   341 UNKN      0         5       1         2 procedure delete_plsql_profiler_recs
   345 EXEC      4        81      17        25 begin
   346 EXEC      4      1228     108       505    delete from plsql_profiler_data
   348 EXEC      4       539      58       250    delete from plsql_profiler_units
   350 EXEC      4       412      48       139    delete from plsql_profiler_runs
   352 EXEC      4       627      52       377    COMMIT;
   353 EXEC      4        48       9        14 end delete_plsql_profiler_recs;
   357 ANNO      0         2       2         2    procedure t_delete_profiler_recs
   359 ANNO      1         1       1         1       c_test_run_id   constant number := -99;
   363 ANNO      1         1       1         1       wt_assert.g_testcase := 'Delete PL/SQL Profiler Records Happy Path 1';
   365 ANNO      1         1       1         1          delete_plsql_profiler_recs(c_test_run_id);  -- Should run without error
   366 ANNO      1        55      55        55          l_err_stack := dbms_utility.format_error_stack     ||
   368 ANNO      0         0       0         0       exception when others then
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   369 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
   371 ANNO      0         0       0         0       end;
   373 ANNO      1        10      10        10       wt_assert.isnull (
   376 ANNO      1         1       1         1       tl_count_plsql_profiler_recs(c_test_run_id, 0);
   378 ANNO      1         0       0         0       wt_assert.g_testcase := 'Delete PL/SQL Profiler Records Happy Path 2';
   379 ANNO      1         0       0         0       tl_count_plsql_profiler_recs(c_test_run_id);
   380 ANNO      1         1       1         1       tl_count_plsql_profiler_recs(c_test_run_id, 1);
   382 ANNO      1         0       0         0          delete_plsql_profiler_recs(c_test_run_id);  -- Should run without error
   383 ANNO      1         8       8         8          l_err_stack := dbms_utility.format_error_stack     ||
   385 ANNO      0         0       0         0       exception when others then
   386 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
   388 ANNO      0         0       0         0       end;
   390 ANNO      1         9       9         9       wt_assert.isnull (
   393 ANNO      1         1       1         1       tl_count_plsql_profiler_recs(c_test_run_id, 0);
   394 ANNO      1         2       2         2    end t_delete_profiler_recs;
   399 UNKN      0        32       3         6 procedure find_dbout
   443 EXEC      8        10       1         4    C_HEAD_RE CONSTANT varchar2(30) := '--% WTPLSQL SET DBOUT "';
   444 EXEC      8         1       0         1    C_MAIN_RE CONSTANT varchar2(30) := '[[:alnum:] ._$#:]+';
   445 EXEC      8         8       1         1    C_TAIL_RE CONSTANT varchar2(30) := '" %--';
   447 UNKN      0         4       1         1    cursor c_annotation is
   448 EXEC      8      1091     118       189       select regexp_substr(src.text, C_HEAD_RE||C_MAIN_RE||C_TAIL_RE)  TEXT
   454 UNKN      0         4       1         1        order by src.line;
   457 UNKN      0         8       2         2    cursor c_readable is
   458 EXEC      4       890     201       282       select *
   462 UNKN      0         7       1         2         and  src.type   = g_rec.dbout_type;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   469 EXEC      8         4       0         1    open c_annotation;
   470 EXEC      8      3416     225      1561    fetch c_annotation into l_target;
   471 EXEC      8        14       1         3    if c_annotation%NOTFOUND
   474 EXEC      2        25       4        21       close c_annotation;
   475 EXEC      2         5       2         3       return;
   477 EXEC      6       241      31        75    close c_annotation;
   479 EXEC      6       186      27        44    l_target := regexp_replace(SRCSTR      => l_target
   485 EXEC      6        73       7        15    l_target := regexp_replace(SRCSTR      => l_target
   491 EXEC      6        31       4         7    l_dot_pos := instr(l_target,'.');
   492 EXEC      6         5       1         1    l_cln_pos := instr(l_target,':');
   495 EXEC      6   3821242       1    690603       select obj.owner
   526 EXEC      1         0       0         0       when NO_DATA_FOUND
   528 EXEC      1        10      10        10          g_rec.error_message := 'Unable to find database object "' ||
   530 EXEC      1         1       1         1          return;
   531 EXEC      1         0       0         0       when TOO_MANY_ROWS
   533 EXEC      1        12      12        12          g_rec.error_message := 'Found too many database objects "' ||
   535 EXEC      1         1       1         1          return;
   538 EXEC      4         3       1         1    open c_readable;
   539 EXEC      4       549     114       152    fetch c_readable into b_readable;
   540 EXEC      4         5       1         2    if c_readable%NOTFOUND
   542 EXEC      1         3       0         2       if g_rec.dbout_type in ('FUNCTION', 'PROCEDURE', 'PACKAGE BODY',
   547 ANNO      0         0       0         0          g_rec.error_message := 'Unable to read source for ' || g_rec.dbout_type ||
   551 EXEC      1         0       0         0          g_rec.prof_runid := -1;  -- Don't run profiler.
   552 EXEC      1         0       0         0       end if;
   554 EXEC      4       158      15        74    close c_readable;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   556 EXEC      6        42       6        10 end find_dbout;
   560 ANNO      1         4       4         4    procedure t_find_dbout
   565 ANNO      1         0       0         0       l_pname      varchar2(128) := 'WT_PROFILE_FIND_DBOUT';
   567 ANNO      0         3       1         1       procedure run_find_dbout is begin
   568 ANNO      6        13       2         3          l_recSAVE := g_rec;
   569 ANNO      6         4       0         1          g_rec := l_recNULL;
   570 ANNO      6         4       1         1          find_dbout(l_pname);
   571 ANNO      6        29       2         7          l_recTEST := g_rec;
   572 ANNO      6         5       1         1          g_rec := l_recSAVE;
   573 ANNO      6         3       1         1       end run_find_dbout;
   576 ANNO      1         0       0         0       wt_assert.g_testcase := 'Find DBOUT Setup';
   577 ANNO      1         0       0         0       tl_compile_db_object
   582 ANNO      1         0       0         0       wt_assert.g_testcase := 'Find DBOUT Happy Path 1';
   583 ANNO      1         6       6         6       tl_compile_db_object
   588 ANNO      1         0       0         0       run_find_dbout;
   590 ANNO      1         3       3         3       wt_assert.isnull
   593 ANNO      1         1       1         1       wt_assert.isnull
   597 ANNO      1         1       1         1       wt_assert.isnull
   600 ANNO      1         1       1         1       wt_assert.isnull
   604 ANNO      1         0       0         0       wt_assert.g_testcase := 'Find DBOUT Happy Path 2';
   605 ANNO      1         5       5         5       tl_compile_db_object
   613 ANNO      1         1       1         1       run_find_dbout;
   615 ANNO      1         8       3         5       wt_assert.eq
   619 ANNO      1         5       5         5       wt_assert.eq
   624 ANNO      1         0       0         0       wt_assert.eq
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   628 ANNO      1         0       0         0       wt_assert.isnull
   632 ANNO      1         4       4         4       wt_assert.g_testcase := 'Find DBOUT Happy Path 3';
   633 ANNO      1        11       1        10       tl_compile_db_object
   642 ANNO      1         0       0         0       run_find_dbout;
   644 ANNO      1         8       3         5       wt_assert.eq
   648 ANNO      1         1       1         1       wt_assert.eq
   653 ANNO      1         1       1         1       wt_assert.eq
   657 ANNO      1         2       2         2       wt_assert.isnull
   661 ANNO      1         0       0         0       wt_assert.g_testcase := 'Find DBOUT Sad Path 1';
   662 ANNO      1         5       5         5       tl_compile_db_object
   670 ANNO      1         0       0         0       run_find_dbout;
   672 ANNO      1         5       5         5       wt_assert.isnull
   675 ANNO      1         0       0         0       wt_assert.isnull
   679 ANNO      1         1       1         1       wt_assert.isnull
   682 ANNO      1         1       1         1       wt_assert.eq
   687 ANNO      1         0       0         0       wt_assert.g_testcase := 'Find DBOUT Sad Path 2';
   688 ANNO      1         7       7         7       tl_compile_db_object
   696 ANNO      1         0       0         0       run_find_dbout;
   698 ANNO      1         8       3         5       wt_assert.eq
   702 ANNO      1         0       0         0       wt_assert.eq
   706 ANNO      1         1       1         1       wt_assert.eq
   711 ANNO      1         1       1         1       wt_assert.g_testcase := 'Find DBOUT Sad Path 3';
   712 ANNO      1         6       6         6       tl_compile_db_object
   720 ANNO      1         0       0         0       run_find_dbout;
   722 ANNO      1         5       5         5       wt_assert.eq
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   726 ANNO      1         0       0         0       wt_assert.eq
   731 ANNO      1         1       1         1       wt_assert.eq
   735 ANNO      1         1       1         1       wt_assert.isnull
   739 ANNO      1         0       0         0       wt_assert.g_testcase := 'Find DBOUT Teardown';
   740 ANNO      1         1       1         1       tl_drop_db_object(l_pname, 'package');
   741 ANNO      1         3       3         3    end t_find_dbout;
   746 EXEC      8        42       3         9 procedure load_anno_aa
   748 UNKN      0         4       0         1    cursor c_find_begin is
   749 EXEC      8      1716     144       535       select line
   756 ANNO      0         6       0         1        order by line;
   758 ANNO      0         5       0         1    cursor c_find_end (in_line in number, in_col in number) is
   759 ANNO      8      1448      52       299       with q1 as (
   776 UNKN      0         8       0         2             ,col;
   779 EXEC      8        11       1         2    anno_aa.delete;
   780 EXEC      8         7       0         1    open c_find_begin;
   781 EXEC     16         0       0         0    loop
   782 EXEC     16      1900      19       345       fetch c_find_begin into buff_find_begin;
   783 EXEC     16        13       0         2       exit when c_find_begin%NOTFOUND;
   784 EXEC      8         3       0         1       open c_find_end (buff_find_begin.line, buff_find_begin.col);
   785 EXEC      8      1048      92       176       fetch c_find_end into buff_find_end;
   786 EXEC      8         7       0         1       if c_find_end%NOTFOUND
   788 EXEC      2       529     228       301          select max(line)
   795 EXEC      8       261      10        58       close c_find_end;
   796 EXEC     34        41       0         7       for i in buff_find_begin.line + g_rec.trigger_offset ..
   799 EXEC     26        56       1        10          anno_aa(i) := 'X';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   802 EXEC      8       166      11        54    close c_find_begin;
   803 EXEC      8        22       2         5 end load_anno_aa;
   807 ANNO      1         9       9         9    procedure t_load_anno_aa
   812 ANNO      1         0       0         0       l_pname      varchar2(128) := 'WT_PROFILE_LOAD_ANNO';
   814 ANNO      0        16       1         8       procedure run_load_anno is begin
   815 ANNO      7        15       2         3          l_recSAVE  := g_rec;
   816 ANNO      7        22       3         4          l_annoSAVE := anno_aa;
   817 ANNO      7         8       1         2          anno_aa.delete;
   818 ANNO      7         6       0         2          g_rec.dbout_owner    := USER;
   819 ANNO      7        13       1         6          g_rec.dbout_name     := l_pname;
   820 ANNO      7         5       1         1          g_rec.dbout_type     := 'PACKAGE BODY';
   821 ANNO      7         5       1         2          g_rec.trigger_offset := 0;
   822 ANNO      7         2       1         1          load_anno_aa;
   823 ANNO      7        41       1         7          l_annoTEST := anno_aa;
   824 ANNO      7        81       4        68          anno_aa := l_annoSAVE;
   825 ANNO      7        15       1         4          g_rec   := l_recSAVE;
   826 ANNO      7         5       1         1       end run_load_anno;
   829 ANNO      1         2       2         2       wt_assert.g_testcase := 'Load Anno Setup';
   830 ANNO      1         5       5         5       wt_assert.isnotnull
   833 ANNO      1         1       1         1       tl_compile_db_object
   838 ANNO      1         1       1         1       wt_assert.g_testcase := 'Load Anno Happy Path 1';
   839 ANNO      1         7       7         7       tl_compile_db_object
   844 ANNO      1         0       0         0       run_load_anno;
   845 ANNO      1         7       7         7       wt_assert.eq
   850 ANNO      1         0       0         0       wt_assert.g_testcase := 'Load Anno Happy Path 2';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   851 ANNO      1         5       5         5       tl_compile_db_object
   859 ANNO      1         0       0         0       run_load_anno;
   861 ANNO      1        10      10        10       wt_assert.eq
   865 ANNO      4         0       0         0       for i in 3 .. 5
   867 ANNO      3        11       2         6          wt_assert.eq
   873 ANNO      1         1       1         1       wt_assert.g_testcase := 'Load Anno Happy Path 3';
   874 ANNO      1         6       6         6       tl_compile_db_object
   884 ANNO      1         0       0         0       run_load_anno;
   886 ANNO      1         7       7         7       wt_assert.eq
   890 ANNO      4         1       0         1       for i in 4 .. 6
   892 ANNO      3        12       2         7          wt_assert.eq
   898 ANNO      1         1       1         1       wt_assert.g_testcase := 'Load Anno Happy Path 4';
   899 ANNO      1         8       8         8       tl_compile_db_object
   912 ANNO      1         0       0         0       run_load_anno;
   914 ANNO      1        11      11        11       wt_assert.eq
   918 ANNO      4         1       1         1       for i in 4 .. 6
   920 ANNO      3        10       2         6          wt_assert.eq
   926 ANNO      3         2       1         1       for i in 8 .. 10
   928 ANNO      3         8       2         3          wt_assert.eq
   934 ANNO      1         1       1         1       wt_assert.g_testcase := 'Load Anno Sad Path 1';
   935 ANNO      1         6       6         6       tl_compile_db_object
   942 ANNO      1         0       0         0       run_load_anno;
   943 ANNO      1         8       8         8       wt_assert.eq
   948 ANNO      1         1       1         1       wt_assert.g_testcase := 'Load Anno Sad Path 2';
   949 ANNO      1        25      25        25       tl_compile_db_object
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   961 ANNO      1         1       1         1       run_load_anno;
   963 ANNO      1         8       8         8       wt_assert.eq
   967 ANNO      4         3       0         1       for i in 4 .. 6
   969 ANNO      3        10       2         5          wt_assert.eq
   975 ANNO      1         0       0         0       wt_assert.g_testcase := 'Load Anno Sad Path 3';
   976 ANNO      1         7       7         7       tl_compile_db_object
   988 ANNO      1         1       1         1       run_load_anno;
   990 ANNO      1        13      13        13       wt_assert.eq
   994 ANNO      6         1       0         1       for i in 4 .. 8
   996 ANNO      5        17       2         6          wt_assert.eq
  1002 ANNO      1         0       0         0       wt_assert.g_testcase := 'Load Anno Teardown';
  1003 ANNO      1         0       0         0       tl_drop_db_object(l_pname, 'package');
  1004 ANNO      1         4       4         4       wt_assert.isnotnull
  1007 ANNO      1         3       3         3    end t_load_anno_aa;
  1012 EXEC      1        10       0        10 procedure insert_dbout_profile
  1017 UNKN      0        17       1         5    procedure l_set_status is begin
  1018 EXEC      6        14       1         4       if anno_aa.EXISTS(prof_rec.line)
  1021 EXEC      1         0       0         0          prof_rec.status := 'ANNO';
  1022 EXEC      1         0       0         0          return;
  1024 EXEC      5         2       0         1       if prof_rec.total_occur > 0
  1027 EXEC      2         0       0         0          prof_rec.status := 'EXEC';
  1028 EXEC      2         1       1         1          return;
  1030 EXEC      3         2       0         1       if    prof_rec.total_occur = 0
  1034 EXEC      2        61      30        31          if regexp_like(prof_rec.text, '^[[:space:]]*' ||
  1039 EXEC      1         1       1         1             prof_rec.status := 'EXCL';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1042 EXEC      1         1       1         1             prof_rec.status := 'NOTX';
  1044 EXEC      2         5       2         3          return;
  1047 EXEC      1         1       1         1       prof_rec.status := 'UNKN';
  1048 EXEC      1         1       1         1    end l_set_status;
  1049 EXEC      1        18      18        18 begin
  1050 EXEC      1         0       0         0    prof_rec.test_run_id := g_rec.test_run_id;
  1051 EXEC      1         0       0         0    load_anno_aa;
  1052 EXEC      3       419       1       374    for buf1 in (
  1053#NOTX#     0         0       0         0       select src.line
  1073 EXEC      6         6       1         2       prof_rec.line        := buf1.line;
  1074 EXEC      6         1       0         1       prof_rec.total_occur := buf1.total_occur;
  1075 EXEC      6         4       0         2       prof_rec.total_usecs := buf1.total_time/1000;
  1076 EXEC      6         2       0         1       prof_rec.min_usecs   := buf1.min_time/1000;
  1077 EXEC      6         1       0         1       prof_rec.max_usecs   := buf1.max_time/1000;
  1078 EXEC      6         7       1         2       prof_rec.text        := buf1.text;
  1079 EXEC      6         2       0         1       prof_rec.status      := NULL;
  1080 EXEC      6         2       0         1       l_set_status;
  1081 EXEC      6         3       0         1       l_max_line := buf1.line;
  1082 EXEC      6      1201      76       634       insert into wt_dbout_profiles values prof_rec;
  1083 EXEC      6        14       0         6       wt_test_run_stat.add_profile(prof_rec);
  1086 EXEC      1       230     230       230    update wt_dbout_profiles
  1092 EXEC      1       152     152       152    COMMIT;
  1095 EXEC      1         5       5         5    anno_aa.delete;
  1096 EXEC      1         2       2         2    delete_plsql_profiler_recs(g_rec.prof_runid);
  1097 EXEC      1        10      10        10 end insert_dbout_profile;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1101 ANNO      1         6       6         6    procedure t_insert_dbout_profile
  1107 ANNO      1         0       0         0       c_test_run_id  constant number := -97;
  1108 ANNO      1         1       1         1       l_pname        varchar2(128) := 'WT_PROFILE_INSERT_DBOUT';
  1112 ANNO      0         4       1         2       procedure insert_plsql_profiler_data
  1118 ANNO      6         4       0         1          data_rec.line#       := in_line#;
  1119 ANNO      6         0       0         0          data_rec.total_occur := in_total_occur;
  1120 ANNO      6         1       0         1          data_rec.total_time  := in_total_time;
  1123 ANNO      6      1036      98       406             insert into plsql_profiler_data values data_rec;
  1124 ANNO      6       621      74       202             commit;
  1125 ANNO      6        12       1         3             l_sqlerrm := SQLERRM;
  1126 ANNO      0         0       0         0          exception when others then
  1127 ANNO      0         0       0         0             l_sqlerrm := SQLERRM;
  1128 ANNO      0         0       0         0          end;
  1129 ANNO      6        31       4         7          wt_assert.eq (
  1133 ANNO      6         3       1         1       end insert_plsql_profiler_data;
  1135 ANNO      0        12       0         2       procedure test_dbout_profiler
  1141 ANNO     12        58       3         8          wt_assert.eqqueryvalue
  1149 ANNO     12         1       0         1       end test_dbout_profiler;
  1152 ANNO      1         1       1         1       wt_assert.g_testcase := 'Insert DBOUT Profile Setup';
  1153 ANNO      1         0       0         0       tl_compile_db_object
  1158 ANNO      1         8       8         8       tl_compile_db_object
  1168 ANNO      1         0       0         0       tl_count_plsql_profiler_recs(c_test_run_id);
  1169 ANNO      1         1       1         1       tl_count_plsql_profiler_recs(c_test_run_id, 1);
  1170 ANNO      1         1       1         1       tl_insert_test_runs(c_test_run_id, 'Insert DBOUT Test');
  1172 ANNO      1         1       1         1       units_rec.runid        := c_test_run_id;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1173 ANNO      1         0       0         0       units_rec.unit_number  := 1;
  1174 ANNO      1         2       0         2       units_rec.unit_owner   := USER;
  1175 ANNO      1         1       1         1       units_rec.unit_name    := l_pname;
  1176 ANNO      1         0       0         0       units_rec.unit_type    := 'PACKAGE BODY';
  1177 ANNO      1         0       0         0       units_rec.total_time   := 0;
  1180 ANNO      1       318     318       318          insert into plsql_profiler_units values units_rec;
  1181 ANNO      1       102     102       102          commit;
  1182 ANNO      1         7       7         7          l_err_stack := dbms_utility.format_error_stack     ||
  1184 ANNO      0         0       0         0       exception when others then
  1185 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1187 ANNO      0         0       0         0       end;
  1189 ANNO      1         3       3         3       wt_assert.isnull (
  1192 ANNO      1         9       9         9       wt_assert.eqqueryvalue
  1199 ANNO      1         0       0         0       data_rec.runid       := c_test_run_id;
  1200 ANNO      1         0       0         0       data_rec.unit_number := 1;
  1201 ANNO      1         0       0         0       data_rec.min_time    := 0;
  1202 ANNO      1         0       0         0       data_rec.max_time    := 1;
  1203 ANNO      1         1       1         1       insert_plsql_profiler_data(1, 0, 0);
  1204 ANNO      1         1       1         1       insert_plsql_profiler_data(2, 0, 1);
  1205 ANNO      1         0       0         0       insert_plsql_profiler_data(3, 1, 1);
  1206 ANNO      1         0       0         0       insert_plsql_profiler_data(5, 1, 1);
  1207 ANNO      1         0       0         0       insert_plsql_profiler_data(7, 1, 1);
  1208 ANNO      1         1       1         1       insert_plsql_profiler_data(8, 0, 0);
  1210 ANNO      1         6       6         6       wt_assert.eqqueryvalue
  1217 ANNO      1         0       0         0       wt_assert.g_testcase := 'Insert DBOUT Profile Happy Path';
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1218 ANNO      1         2       2         2       l_recSAVE := g_rec;
  1219 ANNO      1         1       1         1       g_rec.test_run_id     := c_test_run_id;
  1220 ANNO      1         1       0         1       g_rec.dbout_owner     := USER;
  1221 ANNO      1         0       0         0       g_rec.dbout_name      := l_pname;
  1222 ANNO      1         0       0         0       g_rec.dbout_type      := 'PACKAGE BODY';
  1223 ANNO      1         1       1         1       g_rec.prof_runid      := c_test_run_id;
  1224 ANNO      1         0       0         0       g_rec.trigger_offset  := 0;
  1225 ANNO      1         1       1         1       g_rec.error_message   := '';
  1228 ANNO      1         0       0         0          insert_dbout_profile;
  1229 ANNO      1         8       8         8          l_err_stack := dbms_utility.format_error_stack     ||
  1231 ANNO      0         0       0         0       exception when others then
  1232 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1234 ANNO      0         0       0         0       end;
  1235 ANNO      1         4       4         4       g_rec := l_recSAVE;
  1236 ANNO      1         5       5         5       wt_assert.isnull (
  1240 ANNO      1         1       1         1       test_dbout_profiler(1, 'STATUS', 'EXCL');
  1241 ANNO      1         5       5         5       test_dbout_profiler(1, 'TEXT',   'package body WT_PROFILE_INSERT_DBOUT is' || CHR(10));
  1242 ANNO      1         0       0         0       test_dbout_profiler(2, 'STATUS', 'UNKN');
  1243 ANNO      1         7       7         7       test_dbout_profiler(2, 'TEXT',   'begin' || CHR(10));
  1244 ANNO      1         1       1         1       test_dbout_profiler(3, 'STATUS', 'EXEC');
  1245 ANNO      1         1       1         1       test_dbout_profiler(3, 'TEXT',   '  l_junk := 1;' || CHR(10));
  1246 ANNO      1         0       0         0       test_dbout_profiler(5, 'STATUS', 'ANNO');
  1247 ANNO      1         2       2         2       test_dbout_profiler(5, 'TEXT',   '  l_junk := 2;' || CHR(10));
  1248 ANNO      1         0       0         0       test_dbout_profiler(7, 'STATUS', 'EXEC');
  1249 ANNO      1         1       1         1       test_dbout_profiler(7, 'TEXT',   '  l_junk := 3;' || CHR(10));
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1250 ANNO      1         1       1         1       test_dbout_profiler(8, 'STATUS', 'EXCL');
  1251 ANNO      1         0       0         0       test_dbout_profiler(8, 'TEXT',   'end WT_PROFILE_INSERT_DBOUT;');
  1253 ANNO      1         0       0         0       wt_assert.g_testcase := 'Insert DBOUT Profile Teardown';
  1254 ANNO      1         1       1         1       tl_delete_dbout_profiles(c_test_run_id);
  1255 ANNO      1         0       0         0       tl_delete_test_runs(c_test_run_id);
  1256 ANNO      1         1       1         1       tl_delete_plsql_profiler_recs(c_test_run_id);
  1257 ANNO      1         1       1         1       tl_count_plsql_profiler_recs(c_test_run_id, 0);
  1258 ANNO      1         0       0         0       tl_drop_db_object(l_pname, 'package');
  1259 ANNO      1         3       3         3    end t_insert_dbout_profile;
  1269 EXEC      3         9       3         3 procedure initialize
  1283 EXEC      3         2       1         1    out_dbout_owner     := '';
  1284 EXEC      3         0       0         0    out_dbout_name      := '';
  1285 EXEC      3         0       0         0    out_dbout_type      := '';
  1286 EXEC      3         0       0         0    out_trigger_offset  := NULL;
  1287 EXEC      3         0       0         0    out_profiler_runid  := NULL;
  1288 EXEC      3         1       0         1    out_error_message   := '';
  1289 EXEC      3         0       0         0    g_rec := l_rec_NULL;
  1293 ANNO      3         2       1         1       g_skip_this := FALSE;
  1296 EXEC      3         0       0         0    if in_test_run_id is null
  1298 EXEC      1        83      83        83       raise_application_error  (-20004, 'i_test_run_id is null');
  1300 EXEC      2         1       0         1    g_rec.test_run_id := in_test_run_id;
  1302 EXEC      2         2       1         1    find_dbout(in_pkg_name => in_runner_name);
  1303 EXEC      2         3       1         2    out_dbout_owner    := g_rec.dbout_owner;
  1304 EXEC      2         0       0         0    out_dbout_name     := g_rec.dbout_name;
  1305 EXEC      2         0       0         0    out_dbout_type     := g_rec.dbout_type;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1306 EXEC      2         1       0         1    out_error_message  := g_rec.error_message;
  1308 EXEC      2         2       1         1    if    g_rec.dbout_name    is null      -- No DBOUT notation
  1312 EXEC      1         0       0         0       g_rec.prof_runid := NULL;
  1313 EXEC      1         1       1         1       return;
  1316 EXEC      1         3       1         2    g_rec.trigger_offset := wt_profiler.trigger_offset
  1320 EXEC      1         1       1         1    out_trigger_offset := g_rec.trigger_offset;
  1322 EXEC      1         6       1         5    l_retnum := dbms_profiler.INTERNAL_VERSION_CHECK;
  1323 EXEC      1         0       0         0    if l_retnum <> 0 then
  1326 ANNO      0         0       0         0       raise_application_error(-20005,
  1332 EXEC      1        24       0        17    l_retnum := dbms_profiler.START_PROFILER(run_number => g_rec.prof_runid);
  1333 EXEC      2         1       0         1    if l_retnum <> 0 then
  1335 ANNO      0         0       0         0       raise_application_error(-20006,
  1340 EXEC      2         2       0         2    out_profiler_runid := g_rec.prof_runid;
  1342 EXEC      2         6       0         6 end initialize;
  1346 ANNO      0        10      10        10    procedure t_initialize
  1348 ANNO      1         1       1         1       c_test_run_id   constant number := -96;
  1349 ANNO      1         0       0         0       l_pname         varchar2(128) := 'WT_PROFILE_INITIALIZE';
  1356 ANNO      1         2       2         2       wt_assert.g_testcase := 'Insert DBOUT Profile Setup';
  1357 ANNO      1         0       0         0       tl_compile_db_object
  1362 ANNO      1         1       1         1       wt_assert.g_testcase := 'Initialize Test HAPPY Path 1';
  1363 ANNO      1         5       5         5       tl_compile_db_object
  1370 ANNO      1         3       3         3       l_recSAVE := g_rec;
  1371 ANNO      1         3       1         2       initialize
  1380 ANNO      1         1       1         1       l_recTEST := g_rec;
  1381 ANNO      1         0       0         0       g_rec := l_recSAVE;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1383 ANNO      1         2       2         2       wt_assert.isnull (
  1386 ANNO      1         4       4         4       wt_assert.isnull (
  1390 ANNO      1         0       0         0       wt_assert.isnull (
  1393 ANNO      1         2       2         2       wt_assert.isnull (
  1397 ANNO      1         0       0         0       wt_assert.isnull (
  1400 ANNO      1         0       0         0       wt_assert.isnull (
  1404 ANNO      1         1       1         1       wt_assert.isnull (
  1407 ANNO      1         0       0         0       wt_assert.isnull (
  1411 ANNO      1         1       1         1       wt_assert.isnull (
  1414 ANNO      1         1       1         1       wt_assert.isnull (
  1418 ANNO      1         0       0         0       wt_assert.isnull (
  1421 ANNO      1         0       0         0       wt_assert.isnull (
  1425 ANNO      1         0       0         0       wt_assert.g_testcase := 'Initialize Test HAPPY Path 2';
  1426 ANNO      1         5       5         5       tl_compile_db_object
  1435 ANNO      1         1       1         1       l_recSAVE := g_rec;
  1436 ANNO      1         4       2         2       initialize
  1445 ANNO      1         3       3         3       l_recTEST := g_rec;
  1446 ANNO      1         0       0         0       g_rec := l_recSAVE;
  1448 ANNO      1         4       1         3       wt_assert.eq (
  1452 ANNO      1         0       0         0       wt_assert.eq (
  1457 ANNO      1         0       0         0       wt_assert.eq (
  1461 ANNO      1         6       6         6       wt_assert.isnotnull (
  1465 ANNO      1         2       2         2       wt_assert.eq (
  1469 ANNO      1         1       1         1       wt_assert.isnull (
  1473 ANNO      1         1       1         1       wt_assert.eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1477 ANNO      1         0       0         0       wt_assert.eq (
  1482 ANNO      1         1       1         1       wt_assert.eq (
  1486 ANNO      1        17      17        17       wt_assert.isnotnull (
  1490 ANNO      1         2       2         2       wt_assert.eq (
  1494 ANNO      1         0       0         0       wt_assert.isnull (
  1498 ANNO      1         1       1         1       wt_assert.g_testcase := 'Initialize Test Sad Path 1';
  1499 ANNO      1         1       1         1       l_recSAVE := g_rec;
  1500 ANNO      0         0       0         0       begin
  1501 ANNO      1         1       1         1          initialize
  1510 ANNO      0         0       0         0          l_sqlerrm := SQLERRM;
  1512 ANNO      1         0       0         0       exception when others then
  1513 ANNO      1        78      78        78          l_sqlerrm := SQLERRM;
  1514 ANNO      0         1       1         1       end;
  1515 ANNO      1         1       1         1       l_recTEST := g_rec;
  1516 ANNO      1         1       1         1       g_rec := l_recSAVE;
  1518 ANNO      1         1       1         1       wt_assert.eq (
  1522 ANNO      1         2       2         2    end t_initialize;
  1529 EXEC      4        13       1        10 procedure finalize
  1533 EXEC      4         1       1         1    if g_rec.prof_runid is null
  1535 EXEC      1         0       0         0       return;
  1537 EXEC      3         0       0         0    if g_rec.test_run_id is null
  1539 EXEC      1        15      15        15       raise_application_error (-20000, 'g_rec.test_run_id is null');
  1543 ANNO      0         0       0         0       if not g_skip_this
  1549 ANNO      1         3       3         3       dbms_profiler.STOP_PROFILER;
  1550 ANNO      0         0       0         0    exception when others then
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1551 ANNO      0         0       0         0       g_rec := l_rec_NULL;
  1553 ANNO      0         0       0         0       raise;
  1555 ANNO      0         0       0         0    insert_dbout_profile;
  1560 EXEC      1         1       1         1    g_rec := l_rec_NULL;
  1561 EXEC      1         1       1         1 end finalize;
  1565 ANNO      1         4       0         4    procedure t_finalize
  1573 ANNO      1         1       1         1       wt_assert.g_testcase := 'Finalize Happy Path 1';
  1574 ANNO      1         1       1         1       l_recSAVE := g_rec;
  1575 ANNO      1         1       1         1       g_rec.prof_runid := NULL;
  1576 ANNO      1         1       1         1       wt_assert.isnull (
  1581 ANNO      1         0       0         0          finalize;
  1582 ANNO      1         4       4         4          l_err_stack := dbms_utility.format_error_stack     ||
  1584 ANNO      0         0       0         0       exception when others then
  1585 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1587 ANNO      0         0       0         0       end;
  1588 ANNO      1         1       1         1       g_rec := l_recSAVE;
  1589 ANNO      1         1       1         1       wt_assert.isnull (
  1593 ANNO      1         0       0         0       wt_assert.g_testcase := 'Finalize Happy Path 2';
  1594 ANNO      1         0       0         0       l_recSAVE := g_rec;
  1595 ANNO      1         1       1         1       g_rec.test_run_id    := -1;
  1596 ANNO      1         0       0         0       g_rec.dbout_owner    := 'TEST OWNER';
  1597 ANNO      1         0       0         0       g_rec.dbout_name     := 'TEST NAME';
  1598 ANNO      1         1       1         1       g_rec.dbout_type     := 'TEST TYPE';
  1599 ANNO      1         0       0         0       g_rec.prof_runid     := -2;
  1600 ANNO      1         0       0         0       g_rec.trigger_offset := -3;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1601 ANNO      1         0       0         0       g_rec.error_message  := 'TEST MESSAGE';
  1603 ANNO      1         0       0         0       g_skip_this := TRUE;
  1605 ANNO      1         0       0         0          finalize;
  1606 ANNO      1         2       2         2          l_err_stack := dbms_utility.format_error_stack     ||
  1608 ANNO      0         0       0         0       exception when others then
  1609 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1611 ANNO      0         0       0         0       end;
  1612 ANNO      1         0       0         0       g_skip_this := FALSE;
  1614 ANNO      1         0       0         0       l_recTEST := g_rec;
  1615 ANNO      1         0       0         0       g_rec := l_recSAVE;
  1616 ANNO      1         1       1         1       wt_assert.isnull (
  1620 ANNO      1         1       1         1       wt_assert.isnull (
  1623 ANNO      1         0       0         0       wt_assert.isnull (
  1627 ANNO      1         1       1         1       wt_assert.isnull (
  1630 ANNO      1         1       1         1       wt_assert.isnull (
  1634 ANNO      1         1       1         1       wt_assert.isnull (
  1637 ANNO      1         1       1         1       wt_assert.isnull (
  1640 ANNO      1         0       0         0       wt_assert.isnull (
  1644 ANNO      1         1       1         1       wt_assert.g_testcase := 'Finalize Sad Path 1';
  1645 ANNO      1         1       1         1       l_recSAVE := g_rec;
  1646 ANNO      1         0       0         0       g_rec.prof_runid := -1;
  1647 ANNO      1         0       0         0       g_rec.test_run_id := NULL;
  1649 ANNO      1         0       0         0          finalize;
  1650 ANNO      1         0       0         0       exception when others then
  1651 ANNO      1        16      16        16          l_sqlerrm := SQLERRM;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1652 ANNO      0         1       1         1       end;
  1654 ANNO      1         1       1         1       g_rec := l_recSAVE;
  1655 ANNO      1         2       2         2       wt_assert.eq (
  1659 ANNO      1         0       0         0    end t_finalize;
  1665 UNKN      0        27       2        16 function trigger_offset
  1672 EXEC      4         1       0         1    if dbout_type_in != 'TRIGGER'
  1674 EXEC      2         2       1         1       return 0;
  1676 EXEC      4       520       2       354    for buff in (
  1677#NOTX#     0         0       0         0       select line, text from all_source
  1683 EXEC      4       156       4        66       if regexp_instr(buff.text,
  1695 EXEC      1        20       1        19          return buff.line - 1;
  1698 EXEC      1         0       0         0    return 0;
  1699 EXEC      4         6       2         3 end trigger_offset;
  1703 ANNO      0         2       2         2    procedure t_trigger_offset
  1707 ANNO      1         1       1         1       wt_assert.g_testcase := 'Trigger Offset Happy Path';
  1708 ANNO      1         5       5         5       wt_assert.eq (
  1715 ANNO      1         3       3         3       wt_assert.eq (
  1722 ANNO      1         1       1         1       wt_assert.g_testcase := 'Trigger Offset Sad Path';
  1723 ANNO      1         5       1         4       wt_assert.eq (
  1729 ANNO      1         1       1         1    end t_trigger_offset;
  1734 UNKN      0        25       3         9 function calc_pct_coverage
  1739 EXEC      8      1355       3       890    for buff in (
  1745 EXEC      4         5       0         2       if buff.hits + buff.misses = 0
  1747 EXEC      1        29       1        16          return -1;
  1749 EXEC      3         9       1         5          return round(100 * buff.hits / (buff.hits + buff.misses),2);
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1752#NOTX#     0         0       0         0    return null;
  1753 EXEC      4        10       2         3 END calc_pct_coverage;
  1757 ANNO      0         4       4         4    procedure t_calc_pct_coverage
  1759 ANNO      1         1       1         1       c_test_run_id  constant number := -95;
  1763 ANNO      1         0       0         0       wt_assert.g_testcase := 'Calculate Percent Coverage Setup';
  1764 ANNO      1         0       0         0       tl_insert_test_runs(c_test_run_id, 'Calculate Offset Test');
  1765 ANNO      1         1       1         1       l_rec.test_run_id  := c_test_run_id;
  1766 ANNO      1         0       0         0       l_rec.total_occur  := 1;
  1767 ANNO      1         0       0         0       l_rec.total_usecs  := 1;
  1768 ANNO      1         0       0         0       l_rec.min_usecs    := 1;
  1769 ANNO      1         0       0         0       l_rec.max_usecs    := 1;
  1771 ANNO      1         1       1         1       wt_assert.g_testcase := 'Calculate Percent Coverage Happy Path 1';
  1772 ANNO      1         1       1         1       l_rec.line         := 1;
  1773 ANNO      1         0       0         0       l_rec.status       := 'EXEC';
  1774 ANNO      1         5       5         5       l_rec.text         := 'Testing ' || l_rec.line;
  1775 ANNO      1         0       0         0       tl_insert_dbout_profiles(l_rec);
  1777 ANNO      1         1       1         1       l_rec.line         := 2;
  1778 ANNO      1         1       1         1       l_rec.status       := 'NOTX';
  1779 ANNO      1         2       2         2       l_rec.text         := 'Testing ' || l_rec.line;
  1780 ANNO      1         0       0         0       tl_insert_dbout_profiles(l_rec);
  1782 ANNO      1         0       0         0       l_rec.line         := 3;
  1783 ANNO      1         0       0         0       l_rec.status       := 'EXEC';
  1784 ANNO      1         2       2         2       l_rec.text         := 'Testing ' || l_rec.line;
  1785 ANNO      1         0       0         0       tl_insert_dbout_profiles(l_rec);
  1786 ANNO      1         4       4         4       wt_assert.eq (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1790 ANNO      1         1       1         1       tl_delete_dbout_profiles(c_test_run_id);
  1792 ANNO      1         1       1         1       wt_assert.g_testcase := 'Calculate Percent Coverage Happy Path 2';
  1793 ANNO      1         1       1         1       l_rec.line         := 1;
  1794 ANNO      1         1       1         1       l_rec.status       := 'EXCL';
  1795 ANNO      1         4       4         4       l_rec.text         := 'Testing ' || l_rec.line;
  1796 ANNO      1         1       1         1       tl_insert_dbout_profiles(l_rec);
  1798 ANNO      1         0       0         0       l_rec.line         := 2;
  1799 ANNO      1         1       1         1       l_rec.status       := 'UNKN';
  1800 ANNO      1         2       2         2       l_rec.text         := 'Testing ' || l_rec.line;
  1801 ANNO      1         1       1         1       tl_insert_dbout_profiles(l_rec);
  1803 ANNO      1         0       0         0       l_rec.line         := 3;
  1804 ANNO      1         0       0         0       l_rec.status       := 'EXCL';
  1805 ANNO      1         2       2         2       l_rec.text         := 'Testing ' || l_rec.line;
  1806 ANNO      1         1       1         1       tl_insert_dbout_profiles(l_rec);
  1807 ANNO      1         5       1         4       wt_assert.eq (
  1811 ANNO      1         0       0         0       tl_delete_dbout_profiles(c_test_run_id);
  1813 ANNO      1         1       1         1       wt_assert.g_testcase := 'Calculate Percent Coverage Sad Path';
  1814 ANNO      1         4       1         3       wt_assert.isnull (
  1817 ANNO      1         2       2         2       wt_assert.isnull (
  1821 ANNO      1         1       1         1       wt_assert.g_testcase := 'Calculate Percent Coverage Teardown';
  1822 ANNO      1         0       0         0       tl_delete_test_runs(c_test_run_id);
  1823 ANNO      1         4       4         4    end t_calc_pct_coverage;
  1828 EXEC      3         4       0         1 procedure delete_records
  1833 EXEC      3       348      67       148    select profiler_runid into l_profiler_runid
  1835 EXEC      1         1       1         1    delete_plsql_profiler_recs(l_profiler_runid);
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1836 EXEC      1       241     241       241    delete from wt_dbout_profiles
  1839 EXEC      2         0       0         0    when NO_DATA_FOUND
  1841 EXEC      2         1       0         1       return;
  1842 EXEC      3         2       0         1 end delete_records;
  1846 ANNO      0         7       7         7    procedure t_delete_records
  1848 ANNO      1         1       1         1       c_test_run_id  constant number := -98;
  1853 ANNO      1         2       2         2       wt_assert.g_testcase := 'Delete Records Setup';
  1854 ANNO      1        10      10        10       wt_assert.eqqueryvalue (
  1859 ANNO      1         4       4         4       wt_assert.eqqueryvalue (
  1864 ANNO      1         0       0         0       tl_insert_test_runs(c_test_run_id, 'Delete Records Test');
  1866 ANNO      1         1       1         1       l_rec.test_run_id  := c_test_run_id;
  1867 ANNO      1         0       0         0       l_rec.line         := 1;
  1868 ANNO      1         0       0         0       l_rec.status       := 'EXEC';
  1869 ANNO      1         0       0         0       l_rec.total_occur  := 1;
  1870 ANNO      1         0       0         0       l_rec.total_usecs  := 1;
  1871 ANNO      1         0       0         0       l_rec.min_usecs    := 1;
  1872 ANNO      1         0       0         0       l_rec.max_usecs    := 1;
  1873 ANNO      1         2       2         2       l_rec.text         := 'Testing';
  1874 ANNO      1         1       1         1       tl_insert_dbout_profiles(l_rec);
  1876 ANNO      1         0       0         0       wt_assert.g_testcase := 'Delete Records Happy Path 1';
  1877 ANNO      0         0       0         0       begin
  1878 ANNO      1         1       1         1          delete_records(c_test_run_id);
  1879 ANNO      1         7       7         7          l_err_stack := dbms_utility.format_error_stack     ||
  1881 ANNO      0         0       0         0       exception when others then
  1882 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1884 ANNO      0         0       0         0       end;
  1886 ANNO      1         2       2         2       wt_assert.isnull (
  1889 ANNO      1         6       6         6       wt_assert.eqqueryvalue (
  1895 ANNO      1         0       0         0       wt_assert.g_testcase := 'Delete Records Sad Path 1';
  1897 ANNO      1         0       0         0          delete_records(-9876);
  1898 ANNO      1         3       3         3          l_err_stack := dbms_utility.format_error_stack     ||
  1900 ANNO      0         0       0         0       exception when others then
  1901 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1903 ANNO      0         0       0         0       end;
  1905 ANNO      1         2       2         2       wt_assert.isnull (
  1908 ANNO      1         4       4         4       wt_assert.eqqueryvalue (
  1914 ANNO      1         0       0         0       wt_assert.g_testcase := 'Delete Records Sad Path 2';
  1916 ANNO      1         0       0         0          delete_records(NULL);
  1917 ANNO      1         3       3         3          l_err_stack := dbms_utility.format_error_stack     ||
  1919 ANNO      0         0       0         0       exception when others then
  1920 ANNO      0         0       0         0          l_err_stack := dbms_utility.format_error_stack     ||
  1922 ANNO      0         0       0         0       end;
  1924 ANNO      1         1       1         1       wt_assert.isnull (
  1927 ANNO      1         4       4         4       wt_assert.eqqueryvalue (
  1933 ANNO      1         1       1         1       wt_assert.g_testcase := 'Delete Records Teardown';
  1934 ANNO      1         1       1         1       tl_delete_test_runs(c_test_run_id);
  1935 ANNO      1         5       5         5    end t_delete_records;
  1942 ANNO      0         1       1         1    procedure WTPLSQL_RUN  --% WTPLSQL SET DBOUT "WT_PROFILER:PACKAGE BODY" %--
  1945 ANNO      1         1       1         1       t_get_error_msg;
  1946 ANNO      1         1       1         1       t_delete_profiler_recs;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
  1947 ANNO      1         0       0         0       t_find_dbout;
  1948 ANNO      1         1       1         1       t_load_anno_aa;
  1949 ANNO      1         1       1         1       t_insert_dbout_profile;
  1950 ANNO      1         1       1         1       t_initialize;
  1951 ANNO      1         0       0         0       t_finalize;
  1952 ANNO      1         0       0         0       t_trigger_offset;
  1953 ANNO      1         1       1         1       t_calc_pct_coverage;
  1954 ANNO      1         1       1         1       t_delete_records;
  1955 ANNO      1         1       1         1    end WTPLSQL_RUN;
  1960 EXCL      0         0       0         0 end wt_profiler;


    wtPLSQL 1.1.0 - Run ID 283: 18-May-2018 01:17:47 AM

  Test Results for WTP.WT_RESULT
       Total Testcases:        7      Total Assertions:       36
  Minimum Elapsed msec:        0     Failed Assertions:        0
  Average Elapsed msec:       40      Error Assertions:        0
  Maximum Elapsed msec:     1418            Test Yield:   100.00%
  Total Run Time (sec):      1.4

  Code Coverage for PACKAGE BODY WTP.WT_RESULT
  Total Profiled Lines:      178    Not Executed Lines:        2
  Minimum Elapsed usec:        0       Annotated Lines:      136
  Average Elapsed usec:       59        Excluded Lines:        1
  Maximum Elapsed usec:      688         Unknown Lines:        2
 Trigger Source Offset:        0         Code Coverage:    94.87%

"WTP"."WT_RESULT" Test Result Details (Test Run ID 283)
----------------------------------------
 ---- Test Case: Initialize Happy Path
 PASS 1418ms g_results_rec.test_run_id. EQ - Expected "-99" and got "-99"
 PASS    0ms g_results_rec.result_seq. EQ - Expected "0" and got "0"
 PASS    0ms g_results_rec.executed_dtm. ISNOTNULL - Expected NOT NULL and got "18-MAY-2018 01:17:48.726000"
 PASS    0ms g_results_rec.elapsed_msecs. ISNULL - Expected NULL and got ""
 PASS    0ms g_results_rec.assertion. ISNULL - Expected NULL and got ""
 PASS    2ms g_results_rec.status. ISNULL - Expected NULL and got ""
 PASS    3ms g_results_rec.details. ISNULL - Expected NULL and got ""
 PASS    0ms g_results_rec.testcase. ISNULL - Expected NULL and got ""
 PASS    0ms g_results_rec.message. ISNULL - Expected NULL and got ""
 PASS    0ms g_results_nt.COUNT. EQ - Expected "1" and got "1"
 PASS    0ms g_results_nt(1).test_run_id. ISNULL - Expected NULL and got ""
 PASS    1ms Raises ORA-20009. RAISES/THROWS - Expected exception "%ORA-20009: "in_test_run_id" cannot be NULL%". Actual exception raised was "ORA-20009: "in_test_run_id" cannot be NULL". Exception raised by: "begin wt_result.initialize(NULL); end;".
 ---- Test Case: Finalize Happy Path
 PASS    9ms Before NULL Test Record Count. EQ - Expected "0" and got "0"
 PASS    0ms After NULL Test Record Count. EQ - Expected "0" and got "0"
 PASS    0ms g_results_rec.test_run_id. ISNULL - Expected NULL and got ""
 PASS    0ms g_results_nt.COUNT. EQ - Expected "1" and got "1"
 PASS    0ms Record Count Test. EQ - Expected "1" and got "1"
 ---- Test Case: Ad Hoc Save Happy Path Setup
 PASS    0ms l_dbmsout_buff.COUNT - 1. ISNOTNULL - Expected NOT NULL and got "0"
 ---- Test Case: Ad Hoc Save Testing Happy Path
 PASS    1ms DBMS_OUTPUT Status. EQ - Expected "0" and got "0"
 PASS    0ms DBMS_OUTPUT Line. ISNOTNULL - Expected NOT NULL and got " ---- Test Case: Ad Hoc Save Testing Happy Path\n PASS t_save_testing Message. SELFTEST1 - t_save_testing Details"
 PASS    0ms Save Testing NULL Test DBMS_OUTPUT 3 Message. THIS - Expected "TRUE" and got "TRUE"
 ---- Test Case: Ad Hoc Save Happy Path Teardown
 PASS    0ms l_dbmsout_buff.COUNT - 1. ISNOTNULL - Expected NOT NULL and got "0"
 ---- Test Case: Save Testing Happy Path
 PASS    0ms t_save_testing Testing Message. SELFTEST2 - t_save_testing Testing Details
 PASS    0ms g_results_nt.COUNT. EQ - Expected "24" and got "24"
 PASS    0ms g_results_nt(23).assetion. EQ - Expected "SELFTEST2" and got "SELFTEST2"
 PASS    0ms g_results_nt(23).status. EQ - Expected "PASS" and got "PASS"
 PASS    0ms g_results_nt(23).details. EQ - Expected "t_save_testing Testing Details" and got "t_save_testing Testing Details"
 PASS    0ms g_results_nt(23).testcase. EQ - Expected "Save Testing Happy Path" and got "Save Testing Happy Path"
 PASS    0ms g_results_nt(23).message. EQ - Expected "t_save_testing Testing Message" and got "t_save_testing Testing Message"
 PASS    0ms g_results_nt(23).elapsed_msecs. ISNOTNULL - Expected NOT NULL and got "0"
 PASS    0ms g_results_nt(23).executed_dtm. ISNOTNULL - Expected NOT NULL and got "18-MAY-2018 01:17:48.743000"
 PASS    0ms g_results_nt(23).result_seq. ISNOTNULL - Expected NOT NULL and got "23"
 ---- Test Case: Delete Records Happy Path
 PASS    1ms Before Insert Count. ISNOTNULL - Expected NOT NULL and got "0"
 PASS    1ms After Insert Count. EQQUERYVALUE - Expected "1" and got "1" for Query: select count(*) from wt_results where test_run_id = -99
 PASS    0ms After Test Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_results where test_run_id = -99
 PASS    4ms After ROLLBACK Count. EQQUERYVALUE - Expected "0" and got "0" for Query: select count(*) from wt_results where test_run_id = -99

WTP.WT_RESULT PACKAGE BODY Code Coverage Details (Test Run ID 283)
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
     1 EXCL      0         0       0         0 package body wt_result
    19 EXEC      2        22      10        13 procedure initialize
    24 EXEC      2         0       0         0    if in_test_run_id is NULL
    26 EXEC      1        76      76        76       raise_application_error(-20009, '"in_test_run_id" cannot be NULL');
    28 EXEC      1         1       1         1    g_results_rec := l_results_recNULL;
    29 EXEC      1         0       0         0    g_results_rec.test_run_id  := in_test_run_id;
    30 EXEC      1         1       1         1    g_results_rec.result_seq   := 0;
    31 EXEC      1         5       2         3    g_results_rec.executed_dtm := systimestamp;
    32 EXEC      1         3       3         3    g_results_nt := results_nt_type(null);
    33 EXEC      1         1       1         1 end initialize;
    37 ANNO      1        12      12        12    procedure t_initialize
    46 ANNO      1         9       9         9       l_results_ntSAVE  := g_results_nt;
    47 ANNO      1         2       2         2       l_results_recSAVE := g_results_rec;
    48 ANNO      1         0       0         0       g_results_rec     := l_results_recNULL;
    49 ANNO      1         1       1         1       initialize(-99);
    50 ANNO      1         0       0         0       l_results_recTEST := g_results_rec;
    51 ANNO      1         1       1         1       g_results_rec     := l_results_recSAVE;
    52 ANNO      1         2       2         2       l_results_ntTEST  := g_results_nt;
    53 ANNO      1         1       1         1       g_results_nt      := l_results_ntSAVE;
    55 ANNO      2         6       1         5       wt_assert.g_testcase := 'Initialize Happy Path';
    56 ANNO      1         7       7         7       wt_assert.eq (
    61 ANNO      1         5       5         5       wt_assert.eq (
    65 ANNO      1        21      21        21       wt_assert.isnotnull (
    69 ANNO      1         1       1         1       wt_assert.isnull (
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
    72 ANNO      1         1       1         1       wt_assert.isnull (
    76 ANNO      1         6       6         6       wt_assert.isnull (
    79 ANNO      1         8       8         8       wt_assert.isnull (
    83 ANNO      1         0       0         0       wt_assert.isnull (
    86 ANNO      1         0       0         0       wt_assert.isnull (
    89 ANNO      1         6       6         6       wt_assert.eq (
    94 ANNO      1         3       3         3       wt_assert.isnull (
    97 ANNO      1         0       0         0       wt_assert.raises (
   101 ANNO      1         3       3         3    end t_initialize;
   108 EXEC      3        41      11        18 procedure finalize
   112 EXEC      3        26       4        15 begin
   113 EXEC      3         2       0         1    if g_results_rec.test_run_id IS NULL
   115 EXEC      1         7       7         7       return;
   118 EXEC      2       838     150       688    forall i in 1 .. g_results_nt.COUNT - 1
   119#NOTX#     0         0       0         0       insert into wt_results values g_results_nt(i);
   120 EXEC      2       151      73        77    COMMIT;
   121 EXEC      2        29       5        24    g_results_nt := results_nt_type(null);
   122 EXEC      2         1       1         1    g_results_rec := l_results_recNULL;
   123 EXEC      2         2       1         1    g_results_nt := results_nt_type(null);
   124 EXEC      2        22      10        13 end finalize;
   128 ANNO      1        13      13        13    procedure t_finalize
   142 ANNO      1         1       1         1       wt_assert.g_testcase := '   ';
   143 ANNO      1        16      16        16       l_results_ntSAVE     := g_results_nt;    -- Capture Original Values
   144 ANNO      1         1       1         1       l_results_recSAVE    := g_results_rec;   -- Capture Original Values
   147 ANNO      1         0       0         0       g_results_rec  := l_results_recNULL;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   148 ANNO      1         0       0         0       g_results_rec.test_run_id   := -99;
   149 ANNO      1         1       1         1       g_results_rec.result_seq    := 1;
   150 ANNO      1         2       1         1       g_results_rec.executed_dtm  := systimestamp;
   151 ANNO      1         0       0         0       g_results_rec.elapsed_msecs := 99;
   153 ANNO      1         1       1         1       g_results_rec.assertion     := 'FINALTEST';
   154 ANNO      1         0       0         0       g_results_rec.status        := wt_assert.C_PASS;
   155 ANNO      1         0       0         0       g_results_rec.details       := 'This is a WT_RESULT.FINALIZE Test';
   156 ANNO      1         8       8         8       g_results_nt := results_nt_type(null);
   157 ANNO      1         1       1         1       g_results_nt(1) := g_results_rec;
   158 ANNO      1         1       1         1       g_results_nt.extend;  -- Finalize expects that last element to be NULL
   161 ANNO      1         0       0         0       g_results_rec.test_run_id   := NULL;
   162 ANNO      1       185     185       185       select count(*)
   166 ANNO      1         0       0         0       finalize;
   168 ANNO      1        77      77        77       select count(*)
   172 ANNO      1        55      55        55       rollback;    -- UNDO all database changes
   173 ANNO      1         1       1         1       g_results_rec.test_run_id   := -99;
   176 ANNO      1         0       0         0       l_test_runs_rec.id           := -99;
   177 ANNO      1         3       1         2       l_test_runs_rec.start_dtm    := systimestamp;
   178 ANNO      1         2       2         2       l_test_runs_rec.runner_name  := 'Finalize Test';
   179 ANNO      1         0       0         0       l_test_runs_rec.runner_owner := 'BOGUS';
   180 ANNO      1       314     314       314       insert into wt_test_runs values l_test_runs_rec;
   181 ANNO      1       108     108       108       commit;      -- Must commit because finalize is AUTONOMOUS TRANSACTION
   183 ANNO      1         1       1         1       finalize;    -- g_results_nt is still loaded with one element
   184 ANNO      1         3       3         3       l_results_ntTEST  := g_results_nt;
   185 ANNO      1         0       0         0       l_results_recTEST := g_results_rec;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   186 ANNO      1        83      83        83       select count(*)
   190 ANNO      1      1724    1724      1724       delete from wt_results where test_run_id = -99;
   191 ANNO      1       300     300       300       delete from wt_test_runs where id = -99;
   192 ANNO      1      5369    5369      5369       commit;      -- UNDO all database changes
   194 ANNO      1         3       3         3       wt_assert.g_testcase := 'Finalize Happy Path';
   196 ANNO      1         7       7         7       g_results_rec := l_results_recSAVE;
   197 ANNO      1        24      24        24       g_results_nt  := l_results_ntSAVE;
   199 ANNO      1        11      11        11       wt_assert.eq (
   203 ANNO      1         1       1         1       wt_assert.eq (
   208 ANNO      1         2       2         2       wt_assert.isnull (
   211 ANNO      1         3       3         3       wt_assert.eq (
   215 ANNO      1         2       2         2       wt_assert.eq (
   219 ANNO      1         5       5         5    end t_finalize;
   224 UNKN      0       156       2        20 procedure save
   233 EXEC     37        11       1         1    if g_results_rec.test_run_id IS NULL
   235 EXEC      1        13      13        13       wt_text_report.ad_hoc_result
   241 EXEC      1         2       2         2       return;
   244 EXEC     36        65       1         5    l_current_tstamp := systimestamp;
   245 EXEC     36       340       5        31    g_results_rec.elapsed_msecs := extract(day from (
   248 EXEC     36        10       1         1    g_results_rec.executed_dtm  := l_current_tstamp;
   250 EXEC     36        17       1         1    g_results_rec.assertion     := in_assertion;
   251 EXEC     36        10       0         1    g_results_rec.status        := in_status;
   252 EXEC     36        45       1         4    g_results_rec.details       := substr(in_details,1,4000);
   253 EXEC     36        22       1         1    g_results_rec.testcase      := substr(in_testcase,1,50);
   254 EXEC     36        22       1         3    g_results_rec.message       := substr(in_message,1,200);
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   256 EXEC     36        18       1         1    g_results_rec.result_seq    := g_results_rec.result_seq + 1;
   257 EXEC     36       103       1        11    g_results_nt(g_results_nt.COUNT) := g_results_rec;
   258 EXEC     36        88       1         8    g_results_nt.extend;
   259 EXEC     36        29       1         3    wt_test_run_stat.add_result(g_results_rec);
   260 EXEC     36        63       1        18 end save;
   264 ANNO      0         9       9         9    procedure t_save_testing
   268 ANNO      1         5       5         5       l_dbmsout_buff   l_dbmsout_buff_type := l_dbmsout_buff_type(1);
   275 ANNO      1         1       1         1       wt_assert.g_testcase := 'Ad Hoc Save Happy Path Setup';
   277 ANNO      1         0       0         0       loop
   278 ANNO      1        53      53        53          DBMS_OUTPUT.GET_LINE (
   281 ANNO      1         1       1         1          exit when l_dbmsout_stat != 0;
   282 ANNO      0         0       0         0          l_dbmsout_buff(l_dbmsout_buff.COUNT) := l_dbmsout_line;
   283 ANNO      0         0       0         0          l_dbmsout_buff.extend;
   285 ANNO      1         3       3         3       wt_assert.isnotnull (
   289 ANNO      1         0       0         0       wt_assert.g_testcase := 'Ad Hoc Save Testing Happy Path';
   290 ANNO      1         0       0         0       l_test_run_id  := g_results_rec.test_run_id;
   291 ANNO      1         1       1         1       g_results_rec.test_run_id := NULL;
   292 ANNO      1         0       0         0       wt_result.save (
   298 ANNO      1         0       0         0       g_results_rec.test_run_id := l_test_run_id;
   300 ANNO      1         0       0         0       DBMS_OUTPUT.GET_LINE (
   303 ANNO      1         3       3         3       wt_assert.eq (
   308 ANNO      1         1       0         1       if wt_assert.last_pass
   310 ANNO      1         1       1         1          wt_assert.isnotnull (
   313 ANNO      1         7       7         7          wt_assert.this (
   318 ANNO      1         1       1         1          if not wt_assert.last_pass
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   321 ANNO      0         0       0         0             DBMS_OUTPUT.PUT_LINE(l_dbmsout_line);
   322 ANNO      0         0       0         0          end if;
   325 ANNO      1         0       0         0       wt_assert.g_testcase := 'Ad Hoc Save Happy Path Teardown';
   327 ANNO      1         0       0         0       for i in 1 .. l_dbmsout_buff.COUNT - 1
   329 ANNO      0         0       0         0          DBMS_OUTPUT.PUT_LINE(l_dbmsout_buff(i));
   331 ANNO      1         2       2         2       wt_assert.isnotnull (
   335 ANNO      1         0       0         0       wt_assert.g_testcase := 'Save Testing Happy Path';
   336 ANNO      1         0       0         0       l_nt_count     := g_results_nt.COUNT;
   337 ANNO      1         1       1         1       wt_result.save (
   344 ANNO      1         2       2         2       wt_assert.eq (
   348 ANNO      1         0       0         0       if not wt_assert.last_pass
   350 ANNO      0         0       0         0          return;   -- Something went wrong, end this now.
   353 ANNO      1         3       3         3       wt_assert.eq (
   357 ANNO      1         2       2         2       wt_assert.eq (
   362 ANNO      1         2       2         2       wt_assert.eq (
   366 ANNO      1         1       1         1       wt_assert.eq (
   371 ANNO      1         1       1         1       wt_assert.eq (
   375 ANNO      1         2       2         2       wt_assert.isnotnull (
   379 ANNO      1        15      15        15       wt_assert.isnotnull (
   382 ANNO      1         3       3         3       wt_assert.isnotnull (
   388 ANNO      1         1       1         1    end t_save_testing;
   393 UNKN      0         1       1         1 procedure delete_records
   397 EXEC      1       199     199       199    delete from wt_results
   399 EXEC      1         1       1         1 end delete_records;
   403 ANNO      1         4       0         4    procedure t_delete_records
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   411 ANNO      1         0       0         0       wt_assert.g_testcase := 'Delete Records Happy Path';
   412 ANNO      1       225     225       225       select count(*) into l_num_recs
   415 ANNO      1         3       3         3       wt_assert.isnotnull (
   419 ANNO      1         0       0         0       l_test_runs_rec.id           := -99;
   420 ANNO      1         2       1         1       l_test_runs_rec.start_dtm    := sysdate;
   421 ANNO      1         0       0         0       l_test_runs_rec.runner_name  := 'Delete Records Test';
   422 ANNO      1         0       0         0       l_test_runs_rec.runner_owner := 'BOGUS';
   423 ANNO      1       330     330       330       insert into wt_test_runs values l_test_runs_rec;
   424 ANNO      1         1       1         1       l_results_rec.test_run_id   := -99;
   426 ANNO      1         0       0         0       l_results_rec.result_seq    := 1;
   427 ANNO      1         3       1         2       l_results_rec.executed_dtm  := sysdate;
   428 ANNO      1         0       0         0       l_results_rec.elapsed_msecs := 99;
   429 ANNO      1         0       0         0       l_results_rec.assertion     := 'DELRECTEST';
   430 ANNO      1         0       0         0       l_results_rec.status        := wt_assert.C_PASS;
   431 ANNO      1         4       4         4       l_results_rec.details       := 'This is a WT_RESULT.DELETE_RECORDS Test';
   432 ANNO      1       210     210       210       insert into wt_results values l_results_rec;
   434 ANNO      1         6       6         6       wt_assert.eqqueryvalue (
   439 ANNO      1         0       0         0       delete_records(-99);
   441 ANNO      1         4       4         4       wt_assert.eqqueryvalue (
   446 ANNO      1      3535    3535      3535       rollback;
   447 ANNO      1        15      15        15       wt_assert.eqqueryvalue (
   452 ANNO      1         2       2         2    end t_delete_records;
   459 ANNO      0         1       1         1    procedure WTPLSQL_RUN  --% WTPLSQL SET DBOUT "WT_RESULT:PACKAGE BODY" %--
   463 ANNO      1         1       1         1       t_initialize;
   464 ANNO      1         0       0         0       t_finalize;
Source               TotTime MinTime   MaxTime     
  Line Stat Occurs    (usec)  (usec)    (usec) Text
------ ---- ------ --------- ------- --------- ------------
   465 ANNO      1         0       0         0       t_save_testing;
   466 ANNO      1         1       1         1       t_delete_records;
   467 ANNO      1         1       1         1    end WTPLSQL_RUN;
   472 EXCL      0         0       0         0 end wt_result;


    wtPLSQL 1.1.0 - Run ID 284: 18-May-2018 01:17:49 AM

  Test Results for WTP.WT_TEST_RUN_STAT
       Total Testcases:        7      Total Assertions:       36
  Minimum Elapsed msec:        0     Failed Assertions:        0
  Average Elapsed msec:       40      Error Assertions:        0
  Maximum Elapsed msec:     1418            Test Yield:   100.00%
  Total Run Time (sec):      0.0



PL/SQL procedure successfully completed.

